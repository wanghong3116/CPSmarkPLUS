// Created by Microsoft (R) C/C++ Compiler Version 14.00.24210.0 (35b8ea0f).
//
// e:\work\testprj\photoshop\photoshop\debug\scriptingsupport.tlh
//
// C++ source equivalent of Win32 type library D:\Program Files\Adobe\Adobe Photoshop CS6 (64 Bit)\Required\Plug-Ins\Extensions\ScriptingSupport.8li
// compiler-generated file created 09/26/17 at 14:08:18 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace Photoshop {

//
// Forward references and typedefs
//

struct __declspec(uuid("e891ee9a-d0ae-4cb4-8871-f92c0109f18e"))
/* LIBID */ __Photoshop;
struct __declspec(uuid("5de90358-4d0b-4fa1-ba3e-c91bba863f32"))
/* dispinterface */ _Application;
struct __declspec(uuid("b1adefb6-c536-42d6-8a83-397354a769f8"))
/* dispinterface */ Document;
struct __declspec(uuid("16be80a3-57b1-4871-83ac-7f844eeeb1ca"))
/* dispinterface */ ArtLayer;
enum PsLayerKind;
struct __declspec(uuid("e7a940cd-9ac7-4d76-975d-24d6ba0fdd16"))
/* dispinterface */ TextItem;
enum PsAntiAlias;
enum PsAutoKernType;
struct __declspec(uuid("d2d1665e-c1b9-4ca0-8ac9-529f6a3d9002"))
/* dispinterface */ _SolidColor;
enum PsColorModel;
struct __declspec(uuid("45f1195f-3554-4b3f-a00a-e1d189c0dc3e"))
/* dispinterface */ _RGBColor;
struct __declspec(uuid("1b28b8cd-7578-415f-ac67-dc22a69f4c07"))
/* dispinterface */ _GrayColor;
struct __declspec(uuid("29c13f49-bcef-4fe2-bfc7-6f03b82b726f"))
/* dispinterface */ _CMYKColor;
struct __declspec(uuid("f4d7f5c2-37db-4df7-8a7d-528902056596"))
/* dispinterface */ _LabColor;
struct __declspec(uuid("f91f9c5b-ac34-45b7-aff2-871d9dd2e8ec"))
/* dispinterface */ _HSBColor;
enum PsDirection;
enum PsCase;
enum PsStrikeThruType;
enum PsUnderlineType;
enum PsLanguage;
enum PsTextType;
enum PsJustification;
enum PsTextComposer;
enum PsWarpStyle;
enum PsBlendMode;
enum PsLayerType;
struct __declspec(uuid("c1c35524-2aa4-4630-80b9-011efe3d5779"))
/* dispinterface */ LayerSet;
struct __declspec(uuid("dda16c46-15b2-472d-a659-41aa7bfdc4fd"))
/* dispinterface */ Layers;
struct __declspec(uuid("323dd2bc-0205-4a44-9f8e-0cf2556f00df"))
/* dispinterface */ LayerSets;
struct __declspec(uuid("ec6a366c-f901-488d-a2c3-9e2e78b72dc6"))
/* dispinterface */ ArtLayers;
enum PsElementPlacement;
enum PsRasterizeType;
enum PsRadialBlurMethod;
enum PsRadialBlurQuality;
enum PsSmartBlurQuality;
enum PsSmartBlurMode;
enum PsDisplacementMapType;
enum PsUndefinedAreas;
enum PsPolarConversionType;
enum PsRippleSize;
enum PsSpherizeMode;
enum PsWaveType;
enum PsZigZagType;
enum PsNoiseDistribution;
enum PsLensType;
enum PsEliminateFields;
enum PsCreateFields;
enum PsOffsetUndefinedAreas;
enum PsAdjustmentReference;
enum PsBitsPerChannelType;
enum PsColorProfileType;
enum PsDocumentMode;
struct __declspec(uuid("edc373c3-fe30-40ba-a31c-0251ca7456f1"))
/* dispinterface */ HistoryState;
struct __declspec(uuid("746fef90-a182-4bd0-a4f6-bb6bbae87a78"))
/* dispinterface */ DocumentInfo;
enum PsCopyrightedType;
enum PsUrgency;
struct __declspec(uuid("09da6b10-9684-44ee-a575-01f54660bddc"))
/* dispinterface */ Selection;
struct __declspec(uuid("4b9e6b85-0613-4873-8ab7-575cd2226768"))
/* dispinterface */ Channel;
enum PsChannelType;
struct __declspec(uuid("dc865034-a587-4cc4-8a5a-453032562be4"))
/* dispinterface */ XMPMetadata;
struct __declspec(uuid("632f36b3-1d76-48be-adc3-d7fb62a0c2fb"))
/* dispinterface */ MeasurementScale;
struct __declspec(uuid("2dc64f97-8c69-4016-a8eb-89a00217291f"))
/* dispinterface */ Channels;
struct __declspec(uuid("69172a3f-e06e-42e6-b733-4dc36e2ac948"))
/* dispinterface */ HistoryStates;
struct __declspec(uuid("726b458c-74b0-47ae-b390-99753b55df2e"))
/* dispinterface */ LayerComps;
struct __declspec(uuid("9a37a0ac-e951-4b16-a548-886b77338de0"))
/* dispinterface */ LayerComp;
struct __declspec(uuid("91b5f8ae-3cc5-4775-bcd3-ff1e0724bb01"))
/* dispinterface */ PathItems;
struct __declspec(uuid("8b0cb532-4acc-4bf3-9e42-0949b679d120"))
/* dispinterface */ PathItem;
struct __declspec(uuid("b7283eec-23b1-49a6-b151-0e97e4af353c"))
/* dispinterface */ SubPathItems;
struct __declspec(uuid("b6d22eb9-ec6d-46db-b52a-5561433a1217"))
/* dispinterface */ SubPathItem;
enum PsShapeOperation;
struct __declspec(uuid("8214a53c-0e67-49d4-a65a-d56f07b17d37"))
/* dispinterface */ PathPoints;
struct __declspec(uuid("7d14ba29-1672-482f-8f48-9da1e94800fd"))
/* dispinterface */ PathPoint;
enum PsPointKind;
enum PsPathKind;
struct __declspec(uuid("9e01c1da-df69-4c2c-85ec-616370df1cf0"))
/* dispinterface */ CountItems;
struct __declspec(uuid("66869370-9672-492d-93ac-0add62f427f1"))
/* dispinterface */ CountItem;
struct __declspec(uuid("97c81476-3f5d-4934-8caa-1ed0242105b0"))
/* dispinterface */ ColorSamplers;
struct __declspec(uuid("b125a66b-4c94-4e55-af2f-57ec4dcb484b"))
/* dispinterface */ ColorSampler;
enum PsIntent;
enum PsChangeMode;
struct __declspec(uuid("288bc58e-ab6a-467c-b244-d225349e3eb3"))
/* dispinterface */ Preferences;
enum PsColorPicker;
enum PsResampleMethod;
enum PsSaveBehavior;
enum PsQueryStateType;
enum PsPaintingCursors;
enum PsOtherPaintingCursors;
enum PsGridSize;
enum PsUnits;
enum PsTypeUnits;
enum PsPointType;
enum PsGuideLineStyle;
enum PsGridLineStyle;
enum PsSaveLogItemsType;
enum PsEditLogItemsType;
enum PsFontPreviewType;
enum PsDialogModes;
struct __declspec(uuid("662506c7-6aae-4422-aca4-c63627cb1868"))
/* dispinterface */ Documents;
struct __declspec(uuid("bbce52d6-5d4b-4691-99e3-62c174bd2855"))
/* dispinterface */ TextFonts;
struct __declspec(uuid("c88838e3-5a82-4ee7-a66c-e0360c9b0356"))
/* dispinterface */ TextFont;
struct __declspec(uuid("861c9290-2a0c-4614-8606-706b31bfd45b"))
/* dispinterface */ Notifiers;
struct __declspec(uuid("8b4f1f1e-4ed7-4291-ae61-76adf4d1d50b"))
/* dispinterface */ Notifier;
struct __declspec(uuid("84adbf06-8354-4b5c-9cb1-ea2565b66c7c"))
/* dispinterface */ MeasurementLog;
enum PsPurgeTarget;
struct __declspec(uuid("70a60330-e866-46aa-a715-abf418c41453"))
/* dispinterface */ _ActionDescriptor;
struct __declspec(uuid("55031766-e456-4e54-a0d0-8e545601a2d8"))
/* dispinterface */ _ActionList;
struct __declspec(uuid("dff407c7-3bcc-45ac-b6cc-ee6d52032d85"))
/* dispinterface */ _ActionReference;
enum PsReferenceFormType;
enum PsDescValueType;
struct __declspec(uuid("68f15227-7568-47e1-a4f8-5615c24bdd28"))
/* dispinterface */ _PhotoCDOpenOptions;
enum PsPhotoCDSize;
enum PsPhotoCDColorSpace;
enum PsOrientation;
struct __declspec(uuid("6b785d83-5b5f-4402-a712-baebd8c5b812"))
/* dispinterface */ _RawFormatOpenOptions;
enum PsByteOrderType;
struct __declspec(uuid("50d0174f-484d-4a2b-8bf0-a21b84167d82"))
/* dispinterface */ _PDFOpenOptions;
enum PsOpenDocumentMode;
enum PsCropToType;
struct __declspec(uuid("f715c957-54ce-4e55-9856-591d4cd082fd"))
/* dispinterface */ _EPSOpenOptions;
struct __declspec(uuid("ee8364d9-b811-4c7d-a3a8-97c4ebfab83a"))
/* dispinterface */ _DICOMOpenOptions;
struct __declspec(uuid("65d1b010-0d87-481c-b2e6-22efb5a54129"))
/* dispinterface */ _CameraRAWOpenOptions;
enum PsColorSpaceType;
enum PsCameraRAWSize;
enum PsCameraRAWSettingsType;
enum PsWhiteBalanceType;
struct __declspec(uuid("436ce722-7369-4395-acc2-2de7a09269df"))
/* dispinterface */ _PhotoshopSaveOptions;
struct __declspec(uuid("4d40be2d-fe11-4060-b52a-de31c837d51d"))
/* dispinterface */ _BMPSaveOptions;
enum PsOperatingSystem;
enum PsBMPDepthType;
struct __declspec(uuid("89417281-e1af-4800-b82a-9f37ed0478ef"))
/* dispinterface */ _GIFSaveOptions;
enum PsDitherType;
enum PsForcedColors;
enum PsMatteType;
enum PsPaletteType;
struct __declspec(uuid("d54491ef-6f09-4de3-b49a-d57edb2f40b8"))
/* dispinterface */ _EPSSaveOptions;
enum PsPreviewType;
enum PsSaveEncoding;
struct __declspec(uuid("5148663b-f632-4ab0-9484-2dbc197cea82"))
/* dispinterface */ _JPEGSaveOptions;
enum PsFormatOptionsType;
struct __declspec(uuid("f867e6c9-b5db-4c5a-b3ba-63224d08a01b"))
/* dispinterface */ _PDFSaveOptions;
enum PsPDFEncodingType;
enum PsPDFStandardType;
enum PsPDFCompatibilityType;
enum PsPDFResampleType;
struct __declspec(uuid("d334a509-00f8-4092-a9af-6e1176d06536"))
/* dispinterface */ _PICTFileSaveOptions;
enum PsPICTBitsPerPixels;
enum PsPICTCompression;
struct __declspec(uuid("94c016cd-178f-4fd7-85bb-f5925a34a122"))
/* dispinterface */ _PixarSaveOptions;
struct __declspec(uuid("478bf855-e42a-4d63-8c9d-f562de5ff7a8"))
/* dispinterface */ _PNGSaveOptions;
struct __declspec(uuid("d74b820f-aa86-42dd-8d85-f4d67a62f200"))
/* dispinterface */ _RawSaveOptions;
struct __declspec(uuid("01cd87de-1f53-485d-a096-0d318611ab6d"))
/* dispinterface */ _SGIRGBSaveOptions;
struct __declspec(uuid("f4e21694-aebf-44fb-90ab-eecd58c1b6f3"))
/* dispinterface */ _TargaSaveOptions;
enum PsTargaBitsPerPixels;
struct __declspec(uuid("372b4d75-eb10-4d0a-8203-5778d521253d"))
/* dispinterface */ _TiffSaveOptions;
enum PsTiffEncodingType;
enum PsLayerCompressionType;
struct __declspec(uuid("94c4a25a-2c91-4514-a783-3173afc48430"))
/* dispinterface */ _DCS1_SaveOptions;
enum PsDCSType;
struct __declspec(uuid("f1af982e-2bbd-406d-9fd6-ca6c898a7ffe"))
/* dispinterface */ _DCS2_SaveOptions;
struct __declspec(uuid("fc08b435-5f19-49df-abe7-adce9f0729ff"))
/* dispinterface */ _ExportOptionsIllustrator;
enum PsIllustratorPathType;
struct __declspec(uuid("91a3d47b-9579-4013-9206-7b6859439da2"))
/* dispinterface */ _ExportOptionsSaveForWeb;
enum PsSaveDocumentType;
enum PsColorReductionType;
struct __declspec(uuid("643099a1-0b67-4920-9b14-e14be8f63d5f"))
/* dispinterface */ _BitmapConversionOptions;
enum PsBitmapConversionType;
enum PsBitmapHalfToneType;
struct __declspec(uuid("22d0b851-e811-40e2-9a79-e84ea602c9f1"))
/* dispinterface */ _IndexedConversionOptions;
struct __declspec(uuid("750824c6-c347-4cdb-aa96-8aba1ebdf9ea"))
/* dispinterface */ _NoColor;
struct __declspec(uuid("376c4f3b-0345-440b-90d9-fe78aeca249c"))
/* dispinterface */ _PresentationOptions;
enum PsTransitionType;
enum PsMagnificationType;
struct __declspec(uuid("c2783141-b50d-4f0c-9e2e-bf76ea8a4e60"))
/* dispinterface */ _GalleryOptions;
struct __declspec(uuid("5f168d2a-f9ea-4866-8c55-4875e0940622"))
/* dispinterface */ _GalleryBannerOptions;
enum PsGalleryFontType;
struct __declspec(uuid("46ab9a1d-1b32-4c59-8142-b223eccf1f74"))
/* dispinterface */ _GalleryImagesOptions;
enum PsGalleryConstrainType;
struct __declspec(uuid("46dfaf34-75e0-470e-8217-b0c763137dd0"))
/* dispinterface */ _GalleryThumbnailOptions;
enum PsGalleryThumbSizeType;
struct __declspec(uuid("2eb2592d-f02d-4117-a22c-26e5cdfaeee2"))
/* dispinterface */ _GalleryCustomColorOptions;
struct __declspec(uuid("95d69b63-b319-44d3-8307-c988e96e7e58"))
/* dispinterface */ _GallerySecurityOptions;
enum PsGallerySecurityType;
enum PsGallerySecurityTextPositionType;
enum PsGallerySecurityTextRotateType;
struct __declspec(uuid("064bbe94-396d-4b25-9071-ac5b14d0487f"))
/* dispinterface */ _ContactSheetOptions;
enum PsNewDocumentMode;
struct __declspec(uuid("abd0f9ce-822b-4bb1-a811-3ec852b43c0f"))
/* dispinterface */ _PicturePackageOptions;
enum PsPicturePackageTextType;
struct __declspec(uuid("b0d18870-eac3-4d35-8612-6f734b3fa656"))
/* dispinterface */ _BatchOptions;
enum PsBatchDestinationType;
struct __declspec(uuid("7e8f9046-9f8e-4594-a22c-9f6b4c227cd7"))
/* dispinterface */ _SubPathInfo;
struct __declspec(uuid("b3c35001-b625-48d7-9d3b-c9d66d9cf5f1"))
/* dispinterface */ _PathPointInfo;
enum PsOpenDocumentType;
enum PsSaveOptions;
enum PsDocumentFill;
enum PsAnchorPosition;
enum PsExtensionType;
enum PsTrimType;
enum PsResetTarget;
enum PsColorBlendMode;
enum PsSelectionType;
enum PsExportType;
enum PsTextureType;
enum PsStrokeLocation;
enum PsJavaScriptExecutionMode;
enum PsSourceSpaceType;
enum PsGallerySecurityTextColorType;
enum PsToolType;
enum PsFileNamingType;
enum PsDepthMapSource;
enum PsGeometry;
enum PsMeasurementSource;
enum PsMeasurementRange;
struct /* coclass */ Application;
struct /* coclass */ PhotoCDOpenOptions;
struct /* coclass */ RawFormatOpenOptions;
struct /* coclass */ PDFOpenOptions;
struct /* coclass */ EPSOpenOptions;
struct /* coclass */ DICOMOpenOptions;
struct /* coclass */ CameraRAWOpenOptions;
struct /* coclass */ PhotoshopSaveOptions;
struct /* coclass */ BMPSaveOptions;
struct /* coclass */ GIFSaveOptions;
struct /* coclass */ EPSSaveOptions;
struct /* coclass */ JPEGSaveOptions;
struct /* coclass */ PDFSaveOptions;
struct /* coclass */ PICTFileSaveOptions;
struct /* coclass */ PixarSaveOptions;
struct /* coclass */ PNGSaveOptions;
struct /* coclass */ RawSaveOptions;
struct /* coclass */ SGIRGBSaveOptions;
struct /* coclass */ TargaSaveOptions;
struct /* coclass */ TiffSaveOptions;
struct /* coclass */ DCS1_SaveOptions;
struct /* coclass */ DCS2_SaveOptions;
struct /* coclass */ ExportOptionsIllustrator;
struct /* coclass */ ExportOptionsSaveForWeb;
struct /* coclass */ BitmapConversionOptions;
struct /* coclass */ IndexedConversionOptions;
struct /* coclass */ SolidColor;
struct /* coclass */ GrayColor;
struct /* coclass */ RGBColor;
struct /* coclass */ CMYKColor;
struct /* coclass */ LabColor;
struct /* coclass */ HSBColor;
struct /* coclass */ NoColor;
struct /* coclass */ PresentationOptions;
struct /* coclass */ GalleryOptions;
struct /* coclass */ GalleryBannerOptions;
struct /* coclass */ GalleryImagesOptions;
struct /* coclass */ GalleryThumbnailOptions;
struct /* coclass */ GalleryCustomColorOptions;
struct /* coclass */ GallerySecurityOptions;
struct /* coclass */ ContactSheetOptions;
struct /* coclass */ PicturePackageOptions;
struct /* coclass */ BatchOptions;
struct /* coclass */ SubPathInfo;
struct /* coclass */ PathPointInfo;
struct /* coclass */ ActionDescriptor;
struct /* coclass */ ActionList;
struct /* coclass */ ActionReference;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(_Application, __uuidof(_Application));
_COM_SMARTPTR_TYPEDEF(Document, __uuidof(Document));
_COM_SMARTPTR_TYPEDEF(ArtLayer, __uuidof(ArtLayer));
_COM_SMARTPTR_TYPEDEF(TextItem, __uuidof(TextItem));
_COM_SMARTPTR_TYPEDEF(_SolidColor, __uuidof(_SolidColor));
_COM_SMARTPTR_TYPEDEF(_RGBColor, __uuidof(_RGBColor));
_COM_SMARTPTR_TYPEDEF(_GrayColor, __uuidof(_GrayColor));
_COM_SMARTPTR_TYPEDEF(_CMYKColor, __uuidof(_CMYKColor));
_COM_SMARTPTR_TYPEDEF(_LabColor, __uuidof(_LabColor));
_COM_SMARTPTR_TYPEDEF(_HSBColor, __uuidof(_HSBColor));
_COM_SMARTPTR_TYPEDEF(LayerSet, __uuidof(LayerSet));
_COM_SMARTPTR_TYPEDEF(Layers, __uuidof(Layers));
_COM_SMARTPTR_TYPEDEF(LayerSets, __uuidof(LayerSets));
_COM_SMARTPTR_TYPEDEF(ArtLayers, __uuidof(ArtLayers));
_COM_SMARTPTR_TYPEDEF(HistoryState, __uuidof(HistoryState));
_COM_SMARTPTR_TYPEDEF(DocumentInfo, __uuidof(DocumentInfo));
_COM_SMARTPTR_TYPEDEF(Selection, __uuidof(Selection));
_COM_SMARTPTR_TYPEDEF(Channel, __uuidof(Channel));
_COM_SMARTPTR_TYPEDEF(XMPMetadata, __uuidof(XMPMetadata));
_COM_SMARTPTR_TYPEDEF(MeasurementScale, __uuidof(MeasurementScale));
_COM_SMARTPTR_TYPEDEF(Channels, __uuidof(Channels));
_COM_SMARTPTR_TYPEDEF(HistoryStates, __uuidof(HistoryStates));
_COM_SMARTPTR_TYPEDEF(LayerComps, __uuidof(LayerComps));
_COM_SMARTPTR_TYPEDEF(LayerComp, __uuidof(LayerComp));
_COM_SMARTPTR_TYPEDEF(PathItems, __uuidof(PathItems));
_COM_SMARTPTR_TYPEDEF(PathItem, __uuidof(PathItem));
_COM_SMARTPTR_TYPEDEF(SubPathItems, __uuidof(SubPathItems));
_COM_SMARTPTR_TYPEDEF(SubPathItem, __uuidof(SubPathItem));
_COM_SMARTPTR_TYPEDEF(PathPoints, __uuidof(PathPoints));
_COM_SMARTPTR_TYPEDEF(PathPoint, __uuidof(PathPoint));
_COM_SMARTPTR_TYPEDEF(CountItems, __uuidof(CountItems));
_COM_SMARTPTR_TYPEDEF(CountItem, __uuidof(CountItem));
_COM_SMARTPTR_TYPEDEF(ColorSamplers, __uuidof(ColorSamplers));
_COM_SMARTPTR_TYPEDEF(ColorSampler, __uuidof(ColorSampler));
_COM_SMARTPTR_TYPEDEF(Preferences, __uuidof(Preferences));
_COM_SMARTPTR_TYPEDEF(Documents, __uuidof(Documents));
_COM_SMARTPTR_TYPEDEF(TextFonts, __uuidof(TextFonts));
_COM_SMARTPTR_TYPEDEF(TextFont, __uuidof(TextFont));
_COM_SMARTPTR_TYPEDEF(Notifiers, __uuidof(Notifiers));
_COM_SMARTPTR_TYPEDEF(Notifier, __uuidof(Notifier));
_COM_SMARTPTR_TYPEDEF(MeasurementLog, __uuidof(MeasurementLog));
_COM_SMARTPTR_TYPEDEF(_ActionDescriptor, __uuidof(_ActionDescriptor));
_COM_SMARTPTR_TYPEDEF(_ActionList, __uuidof(_ActionList));
_COM_SMARTPTR_TYPEDEF(_ActionReference, __uuidof(_ActionReference));
_COM_SMARTPTR_TYPEDEF(_PhotoCDOpenOptions, __uuidof(_PhotoCDOpenOptions));
_COM_SMARTPTR_TYPEDEF(_RawFormatOpenOptions, __uuidof(_RawFormatOpenOptions));
_COM_SMARTPTR_TYPEDEF(_PDFOpenOptions, __uuidof(_PDFOpenOptions));
_COM_SMARTPTR_TYPEDEF(_EPSOpenOptions, __uuidof(_EPSOpenOptions));
_COM_SMARTPTR_TYPEDEF(_DICOMOpenOptions, __uuidof(_DICOMOpenOptions));
_COM_SMARTPTR_TYPEDEF(_CameraRAWOpenOptions, __uuidof(_CameraRAWOpenOptions));
_COM_SMARTPTR_TYPEDEF(_PhotoshopSaveOptions, __uuidof(_PhotoshopSaveOptions));
_COM_SMARTPTR_TYPEDEF(_BMPSaveOptions, __uuidof(_BMPSaveOptions));
_COM_SMARTPTR_TYPEDEF(_GIFSaveOptions, __uuidof(_GIFSaveOptions));
_COM_SMARTPTR_TYPEDEF(_EPSSaveOptions, __uuidof(_EPSSaveOptions));
_COM_SMARTPTR_TYPEDEF(_JPEGSaveOptions, __uuidof(_JPEGSaveOptions));
_COM_SMARTPTR_TYPEDEF(_PDFSaveOptions, __uuidof(_PDFSaveOptions));
_COM_SMARTPTR_TYPEDEF(_PICTFileSaveOptions, __uuidof(_PICTFileSaveOptions));
_COM_SMARTPTR_TYPEDEF(_PixarSaveOptions, __uuidof(_PixarSaveOptions));
_COM_SMARTPTR_TYPEDEF(_PNGSaveOptions, __uuidof(_PNGSaveOptions));
_COM_SMARTPTR_TYPEDEF(_RawSaveOptions, __uuidof(_RawSaveOptions));
_COM_SMARTPTR_TYPEDEF(_SGIRGBSaveOptions, __uuidof(_SGIRGBSaveOptions));
_COM_SMARTPTR_TYPEDEF(_TargaSaveOptions, __uuidof(_TargaSaveOptions));
_COM_SMARTPTR_TYPEDEF(_TiffSaveOptions, __uuidof(_TiffSaveOptions));
_COM_SMARTPTR_TYPEDEF(_DCS1_SaveOptions, __uuidof(_DCS1_SaveOptions));
_COM_SMARTPTR_TYPEDEF(_DCS2_SaveOptions, __uuidof(_DCS2_SaveOptions));
_COM_SMARTPTR_TYPEDEF(_ExportOptionsIllustrator, __uuidof(_ExportOptionsIllustrator));
_COM_SMARTPTR_TYPEDEF(_ExportOptionsSaveForWeb, __uuidof(_ExportOptionsSaveForWeb));
_COM_SMARTPTR_TYPEDEF(_BitmapConversionOptions, __uuidof(_BitmapConversionOptions));
_COM_SMARTPTR_TYPEDEF(_IndexedConversionOptions, __uuidof(_IndexedConversionOptions));
_COM_SMARTPTR_TYPEDEF(_NoColor, __uuidof(_NoColor));
_COM_SMARTPTR_TYPEDEF(_PresentationOptions, __uuidof(_PresentationOptions));
_COM_SMARTPTR_TYPEDEF(_GalleryOptions, __uuidof(_GalleryOptions));
_COM_SMARTPTR_TYPEDEF(_GalleryBannerOptions, __uuidof(_GalleryBannerOptions));
_COM_SMARTPTR_TYPEDEF(_GalleryImagesOptions, __uuidof(_GalleryImagesOptions));
_COM_SMARTPTR_TYPEDEF(_GalleryThumbnailOptions, __uuidof(_GalleryThumbnailOptions));
_COM_SMARTPTR_TYPEDEF(_GalleryCustomColorOptions, __uuidof(_GalleryCustomColorOptions));
_COM_SMARTPTR_TYPEDEF(_GallerySecurityOptions, __uuidof(_GallerySecurityOptions));
_COM_SMARTPTR_TYPEDEF(_ContactSheetOptions, __uuidof(_ContactSheetOptions));
_COM_SMARTPTR_TYPEDEF(_PicturePackageOptions, __uuidof(_PicturePackageOptions));
_COM_SMARTPTR_TYPEDEF(_BatchOptions, __uuidof(_BatchOptions));
_COM_SMARTPTR_TYPEDEF(_SubPathInfo, __uuidof(_SubPathInfo));
_COM_SMARTPTR_TYPEDEF(_PathPointInfo, __uuidof(_PathPointInfo));

//
// Type library items
//

struct __declspec(uuid("5de90358-4d0b-4fa1-ba3e-c91bba863f32"))
_Application : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetForegroundColor,put=PutRefForegroundColor))
    _SolidColorPtr ForegroundColor;
    __declspec(property(get=GetBackgroundColor,put=PutRefBackgroundColor))
    _SolidColorPtr BackgroundColor;
    __declspec(property(get=GetWindowsFileTypes))
    _variant_t WindowsFileTypes;
    __declspec(property(get=GetMacintoshFileTypes))
    _variant_t MacintoshFileTypes;
    __declspec(property(get=GetScriptingVersion))
    _bstr_t ScriptingVersion;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetWinColorSettings))
    _bstr_t WinColorSettings;
    __declspec(property(get=GetColorSettings))
    _bstr_t ColorSettings;
    __declspec(property(get=GetNotifiers))
    NotifiersPtr Notifiers;
    __declspec(property(get=GetMeasurementLog))
    MeasurementLogPtr MeasurementLog;
    __declspec(property(get=GetNotifiersEnabled,put=PutNotifiersEnabled))
    VARIANT_BOOL NotifiersEnabled;
    __declspec(property(get=GetPreferences))
    PreferencesPtr Preferences;
    __declspec(property(get=GetScriptingBuildDate))
    _bstr_t ScriptingBuildDate;
    __declspec(property(get=GetDisplayDialogs,put=PutDisplayDialogs))
    enum PsDialogModes DisplayDialogs;
    __declspec(property(get=GetDocuments))
    DocumentsPtr Documents;
    __declspec(property(get=GetFonts))
    TextFontsPtr Fonts;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetFreeMemory))
    double FreeMemory;
    __declspec(property(get=GetSystemInformation))
    _bstr_t SystemInformation;
    __declspec(property(get=GetLocale))
    _bstr_t Locale;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetActiveDocument,put=PutActiveDocument))
    DocumentPtr ActiveDocument;
    __declspec(property(get=GetPreferencesFolder))
    _bstr_t PreferencesFolder;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetRecentFiles))
    _variant_t RecentFiles;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetColorSettings ( );
    _bstr_t GetWinColorSettings ( );
    DocumentPtr GetActiveDocument ( );
    void PutActiveDocument (
        struct Document * _arg1 );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    PreferencesPtr GetPreferences ( );
    _bstr_t GetScriptingVersion ( );
    double GetFreeMemory ( );
    _bstr_t GetVersion ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    enum PsDialogModes GetDisplayDialogs ( );
    void PutDisplayDialogs (
        enum PsDialogModes _arg1 );
    _SolidColorPtr GetForegroundColor ( );
    void PutForegroundColor (
        struct _SolidColor * _arg1 );
    void PutRefForegroundColor (
        struct _SolidColor * _arg1 );
    _SolidColorPtr GetBackgroundColor ( );
    void PutBackgroundColor (
        struct _SolidColor * _arg1 );
    void PutRefBackgroundColor (
        struct _SolidColor * _arg1 );
    VARIANT_BOOL GetNotifiersEnabled ( );
    void PutNotifiersEnabled (
        VARIANT_BOOL _arg1 );
    _variant_t GetWindowsFileTypes ( );
    _variant_t GetMacintoshFileTypes ( );
    _bstr_t GetPreferencesFolder ( );
    _bstr_t GetLocale ( );
    DocumentsPtr GetDocuments ( );
    TextFontsPtr GetFonts ( );
    NotifiersPtr GetNotifiers ( );
    _bstr_t GetScriptingBuildDate ( );
    _variant_t GetRecentFiles ( );
    _bstr_t GetBuild ( );
    _bstr_t GetSystemInformation ( );
    MeasurementLogPtr GetMeasurementLog ( );
    _ApplicationPtr GetApplication ( );
    HRESULT DoAction (
        _bstr_t Action,
        _bstr_t From );
    HRESULT Load (
        _bstr_t Document );
    DocumentPtr Open (
        _bstr_t Document,
        const _variant_t & As = vtMissing,
        const _variant_t & AsSmartObject = vtMissing );
    HRESULT Purge (
        enum PsPurgeTarget Target );
    _bstr_t DoJavaScript (
        _bstr_t JavaScriptCode,
        const _variant_t & Arguments = vtMissing,
        const _variant_t & ExecutionMode = vtMissing );
    _bstr_t DoJavaScriptFile (
        _bstr_t JavaScriptFile,
        const _variant_t & Arguments = vtMissing,
        const _variant_t & ExecutionMode = vtMissing );
    _bstr_t MakePhotoGallery (
        const _variant_t & InputFolder,
        _bstr_t OutputFolder,
        const _variant_t & Options = vtMissing );
    _bstr_t MakePDFPresentation (
        const _variant_t & InputFiles,
        _bstr_t OutputFile,
        const _variant_t & Options = vtMissing );
    _bstr_t MakePhotomerge (
        const _variant_t & InputFiles );
    _bstr_t MakeContactSheet (
        const _variant_t & InputFiles,
        const _variant_t & Options = vtMissing );
    _bstr_t MakePicturePackage (
        const _variant_t & InputFiles,
        const _variant_t & Options = vtMissing );
    _bstr_t Batch (
        const _variant_t & InputFiles,
        _bstr_t Action,
        _bstr_t From,
        const _variant_t & Options = vtMissing );
    HRESULT Quit ( );
    HRESULT Refresh ( );
    VARIANT_BOOL FeatureEnabled (
        _bstr_t Name );
    _variant_t OpenDialog ( );
    _ActionDescriptorPtr ExecuteAction (
        long EventID,
        const _variant_t & Descriptor = vtMissing,
        const _variant_t & DisplayDialogs = vtMissing );
    _ActionDescriptorPtr ExecuteActionGet (
        struct _ActionReference * Reference );
    long StringIDToTypeID (
        _bstr_t StringID );
    _bstr_t TypeIDToStringID (
        long TypeID );
    long CharIDToTypeID (
        _bstr_t CharID );
    _bstr_t TypeIDToCharID (
        long TypeID );
    HRESULT ChangeColorSettings (
        const _variant_t & Name = vtMissing,
        const _variant_t & File = vtMissing );
};

struct __declspec(uuid("b1adefb6-c536-42d6-8a83-397354a769f8"))
Document : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInfo))
    DocumentInfoPtr Info;
    __declspec(property(get=GetChannels))
    ChannelsPtr Channels;
    __declspec(property(get=GetActiveHistoryBrushSource,put=PutActiveHistoryBrushSource))
    HistoryStatePtr ActiveHistoryBrushSource;
    __declspec(property(get=Getid))
    long id;
    __declspec(property(get=GetBitsPerChannel,put=PutBitsPerChannel))
    enum PsBitsPerChannelType BitsPerChannel;
    __declspec(property(get=GetActiveChannels,put=PutActiveChannels))
    _variant_t ActiveChannels;
    __declspec(property(get=GetColorProfileName,put=PutColorProfileName))
    _bstr_t ColorProfileName;
    __declspec(property(get=GetManaged))
    VARIANT_BOOL Managed;
    __declspec(property(get=GetQuickMaskMode,put=PutQuickMaskMode))
    VARIANT_BOOL QuickMaskMode;
    __declspec(property(get=GetXMPMetadata))
    XMPMetadataPtr XMPMetadata;
    __declspec(property(get=GetPixelAspectRatio,put=PutPixelAspectRatio))
    double PixelAspectRatio;
    __declspec(property(get=GetLayers))
    LayersPtr Layers;
    __declspec(property(get=GetColorProfileType,put=PutColorProfileType))
    enum PsColorProfileType ColorProfileType;
    __declspec(property(get=GetBackgroundLayer))
    ArtLayerPtr BackgroundLayer;
    __declspec(property(get=GetSaved))
    VARIANT_BOOL Saved;
    __declspec(property(get=GetActiveLayer,put=PutActiveLayer))
    IDispatchPtr ActiveLayer;
    __declspec(property(get=GetArtLayers))
    ArtLayersPtr ArtLayers;
    __declspec(property(get=GetMode))
    enum PsDocumentMode Mode;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSelection))
    SelectionPtr Selection;
    __declspec(property(get=GetHistogram))
    _variant_t Histogram;
    __declspec(property(get=GetHistoryStates))
    HistoryStatesPtr HistoryStates;
    __declspec(property(get=GetLayerComps))
    LayerCompsPtr LayerComps;
    __declspec(property(get=GetActiveHistoryState,put=PutActiveHistoryState))
    HistoryStatePtr ActiveHistoryState;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPathItems))
    PathItemsPtr PathItems;
    __declspec(property(get=GetCountItems))
    CountItemsPtr CountItems;
    __declspec(property(get=GetMeasurementScale))
    MeasurementScalePtr MeasurementScale;
    __declspec(property(get=GetComponentChannels))
    _variant_t ComponentChannels;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLayerSets))
    LayerSetsPtr LayerSets;
    __declspec(property(get=GetResolution))
    double Resolution;
    __declspec(property(get=GetColorSamplers))
    ColorSamplersPtr ColorSamplers;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ArtLayerPtr GetBackgroundLayer ( );
    enum PsBitsPerChannelType GetBitsPerChannel ( );
    void PutBitsPerChannel (
        enum PsBitsPerChannelType _arg1 );
    enum PsColorProfileType GetColorProfileType ( );
    void PutColorProfileType (
        enum PsColorProfileType _arg1 );
    _bstr_t GetColorProfileName ( );
    void PutColorProfileName (
        _bstr_t _arg1 );
    enum PsDocumentMode GetMode ( );
    _variant_t GetComponentChannels ( );
    HistoryStatePtr GetActiveHistoryState ( );
    void PutActiveHistoryState (
        struct HistoryState * _arg1 );
    HistoryStatePtr GetActiveHistoryBrushSource ( );
    void PutActiveHistoryBrushSource (
        struct HistoryState * _arg1 );
    IDispatchPtr GetActiveLayer ( );
    void PutActiveLayer (
        IDispatch * _arg1 );
    _variant_t GetActiveChannels ( );
    void PutActiveChannels (
        const _variant_t & _arg1 );
    DocumentInfoPtr GetInfo ( );
    _bstr_t GetFullName ( );
    double GetHeight ( );
    VARIANT_BOOL GetManaged ( );
    VARIANT_BOOL GetSaved ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetQuickMaskMode ( );
    void PutQuickMaskMode (
        VARIANT_BOOL _arg1 );
    double GetResolution ( );
    SelectionPtr GetSelection ( );
    double GetWidth ( );
    _variant_t GetHistogram ( );
    double GetPixelAspectRatio ( );
    void PutPixelAspectRatio (
        double _arg1 );
    XMPMetadataPtr GetXMPMetadata ( );
    MeasurementScalePtr GetMeasurementScale ( );
    long Getid ( );
    LayersPtr GetLayers ( );
    LayerSetsPtr GetLayerSets ( );
    ArtLayersPtr GetArtLayers ( );
    ChannelsPtr GetChannels ( );
    HistoryStatesPtr GetHistoryStates ( );
    LayerCompsPtr GetLayerComps ( );
    PathItemsPtr GetPathItems ( );
    CountItemsPtr GetCountItems ( );
    ColorSamplersPtr GetColorSamplers ( );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Close (
        const _variant_t & Saving = vtMissing );
    HRESULT ConvertProfile (
        _bstr_t DestinationProfile,
        enum PsIntent Intent,
        const _variant_t & BlackPointCompensation = vtMissing,
        const _variant_t & Dither = vtMissing );
    HRESULT ChangeMode (
        enum PsChangeMode DestinationMode,
        const _variant_t & Options = vtMissing );
    HRESULT Crop (
        const _variant_t & Bounds,
        const _variant_t & Angle = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    HRESULT Export (
        _bstr_t ExportIn,
        const _variant_t & ExportAs = vtMissing,
        const _variant_t & Options = vtMissing );
    HRESULT FlipCanvas (
        enum PsDirection Direction );
    HRESULT ImportAnnotations (
        _bstr_t File );
    HRESULT Flatten ( );
    HRESULT MergeVisibleLayers ( );
    ArtLayerPtr Paste (
        const _variant_t & IntoSelection = vtMissing );
    HRESULT PrintOut (
        const _variant_t & SourceSpace = vtMissing,
        const _variant_t & PrintSpace = vtMissing,
        const _variant_t & Intent = vtMissing,
        const _variant_t & BlackPointCompensation = vtMissing );
    HRESULT RevealAll ( );
    HRESULT RasterizeAllLayers ( );
    HRESULT RecordMeasurements (
        const _variant_t & Source = vtMissing,
        const _variant_t & DataPoints = vtMissing );
    HRESULT RotateCanvas (
        double Angle );
    HRESULT ResizeCanvas (
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing,
        const _variant_t & Anchor = vtMissing );
    HRESULT ResizeImage (
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing,
        const _variant_t & Resolution = vtMissing,
        const _variant_t & ResampleMethod = vtMissing );
    _variant_t SplitChannels ( );
    HRESULT Save ( );
    HRESULT SaveAs (
        _bstr_t SaveIn,
        const _variant_t & Options = vtMissing,
        const _variant_t & AsCopy = vtMissing,
        const _variant_t & ExtensionType = vtMissing );
    HRESULT Trap (
        long Width );
    HRESULT Trim (
        const _variant_t & Type = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Bottom = vtMissing,
        const _variant_t & Right = vtMissing );
    DocumentPtr Duplicate (
        const _variant_t & Name = vtMissing,
        const _variant_t & MergeLayersOnly = vtMissing );
    HRESULT AutoCount (
        struct Channel * Channel,
        long Threshold );
};

struct __declspec(uuid("16be80a3-57b1-4871-83ac-7f844eeeb1ca"))
ArtLayer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFillOpacity,put=PutFillOpacity))
    double FillOpacity;
    __declspec(property(get=GetPixelsLocked,put=PutPixelsLocked))
    VARIANT_BOOL PixelsLocked;
    __declspec(property(get=GetPositionLocked,put=PutPositionLocked))
    VARIANT_BOOL PositionLocked;
    __declspec(property(get=GetTransparentPixelsLocked,put=PutTransparentPixelsLocked))
    VARIANT_BOOL TransparentPixelsLocked;
    __declspec(property(get=GetKind,put=PutKind))
    enum PsLayerKind Kind;
    __declspec(property(get=GetAllLocked,put=PutAllLocked))
    VARIANT_BOOL AllLocked;
    __declspec(property(get=GetBlendMode,put=PutBlendMode))
    enum PsBlendMode BlendMode;
    __declspec(property(get=GetLinkedLayers))
    _variant_t LinkedLayers;
    __declspec(property(get=GetLayerType))
    enum PsLayerType LayerType;
    __declspec(property(get=GetArtLayer))
    ArtLayerPtr _ArtLayer;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGrouped,put=PutGrouped))
    VARIANT_BOOL Grouped;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetIsBackgroundLayer,put=PutIsBackgroundLayer))
    VARIANT_BOOL IsBackgroundLayer;
    __declspec(property(get=GetLayer))
    IDispatchPtr Layer;
    __declspec(property(get=GetTextItem))
    TextItemPtr TextItem;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    double Opacity;
    __declspec(property(get=GetBounds))
    _variant_t Bounds;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLayerSet))
    LayerSetPtr LayerSet;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetFillOpacity ( );
    void PutFillOpacity (
        double _arg1 );
    VARIANT_BOOL GetGrouped ( );
    void PutGrouped (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIsBackgroundLayer ( );
    void PutIsBackgroundLayer (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPixelsLocked ( );
    void PutPixelsLocked (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPositionLocked ( );
    void PutPositionLocked (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTransparentPixelsLocked ( );
    void PutTransparentPixelsLocked (
        VARIANT_BOOL _arg1 );
    enum PsLayerKind GetKind ( );
    void PutKind (
        enum PsLayerKind _arg1 );
    TextItemPtr GetTextItem ( );
    IDispatchPtr GetLayer ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetAllLocked ( );
    void PutAllLocked (
        VARIANT_BOOL _arg1 );
    enum PsBlendMode GetBlendMode ( );
    void PutBlendMode (
        enum PsBlendMode _arg1 );
    _variant_t GetLinkedLayers ( );
    double GetOpacity ( );
    void PutOpacity (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    enum PsLayerType GetLayerType ( );
    ArtLayerPtr GetArtLayer ( );
    LayerSetPtr GetLayerSet ( );
    _variant_t GetBounds ( );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT ApplyStyle (
        _bstr_t StyleName );
    HRESULT Clear ( );
    HRESULT Copy (
        const _variant_t & Merge = vtMissing );
    HRESULT Cut ( );
    ArtLayerPtr Merge ( );
    HRESULT Rasterize (
        enum PsRasterizeType Target );
    HRESULT ApplyAverage ( );
    HRESULT ApplyGaussianBlur (
        double Radius );
    HRESULT ApplyLensBlur (
        const _variant_t & Source = vtMissing,
        const _variant_t & FocalDistance = vtMissing,
        const _variant_t & InvertDepthMap = vtMissing,
        const _variant_t & Shape = vtMissing,
        const _variant_t & Radius = vtMissing,
        const _variant_t & BladeCurvature = vtMissing,
        const _variant_t & Rotation = vtMissing,
        const _variant_t & Brightness = vtMissing,
        const _variant_t & Threshold = vtMissing,
        const _variant_t & Amount = vtMissing,
        const _variant_t & Distribution = vtMissing,
        const _variant_t & Monochromatic = vtMissing );
    HRESULT ApplyBlur ( );
    HRESULT ApplyBlurMore ( );
    HRESULT ApplyMotionBlur (
        long Angle,
        double Radius );
    HRESULT ApplyRadialBlur (
        long Amount,
        enum PsRadialBlurMethod BlurMethod,
        enum PsRadialBlurQuality BlurQuality );
    HRESULT ApplySmartBlur (
        double Radius,
        double Threshold,
        enum PsSmartBlurQuality BlurQuality,
        enum PsSmartBlurMode Mode );
    HRESULT ApplyDiffuseGlow (
        long Graininess,
        long GlowAmount,
        long ClearAmount );
    HRESULT ApplyDisplace (
        long HorizontalScale,
        long VerticalScale,
        enum PsDisplacementMapType DisplacementType,
        enum PsUndefinedAreas UndefinedAreas,
        _bstr_t DisplacementMapFile );
    HRESULT ApplyGlassEffect (
        long Distortion,
        long Smoothness,
        long Scaling,
        const _variant_t & Invert = vtMissing,
        const _variant_t & Texture = vtMissing,
        const _variant_t & TextureFile = vtMissing );
    HRESULT ApplyOceanRipple (
        long Size,
        long Magnitude );
    HRESULT ApplyPinch (
        long Amount );
    HRESULT ApplyPolarCoordinates (
        enum PsPolarConversionType Conversion );
    HRESULT ApplyRipple (
        long Amount,
        enum PsRippleSize Size );
    HRESULT ApplyShear (
        const _variant_t & Curve,
        enum PsUndefinedAreas UndefinedAreas );
    HRESULT ApplySpherize (
        long Amount,
        enum PsSpherizeMode Mode );
    HRESULT ApplyTwirl (
        long Angle );
    HRESULT ApplyWave (
        long GeneratorNumber,
        long MinimumWavelength,
        long MaximumWavelength,
        long MinimumAmplitude,
        long MaximumAmplitude,
        long HorizontalScale,
        long VerticalScale,
        enum PsWaveType WaveType,
        enum PsUndefinedAreas UndefinedAreas,
        long RandomSeed );
    HRESULT ApplyZigZag (
        long Amount,
        long Ridges,
        enum PsZigZagType Style );
    HRESULT ApplyAddNoise (
        double Amount,
        enum PsNoiseDistribution Distribution,
        VARIANT_BOOL Monochromatic );
    HRESULT ApplyDespeckle ( );
    HRESULT ApplyDustAndScratches (
        long Radius,
        long Threshold );
    HRESULT ApplyMedianNoise (
        double Radius );
    HRESULT ApplyClouds ( );
    HRESULT ApplyDifferenceClouds ( );
    HRESULT ApplyLensFlare (
        long Brightness,
        const _variant_t & FlareCenter,
        enum PsLensType LensType );
    HRESULT ApplyTextureFill (
        _bstr_t TextureFile );
    HRESULT ApplySharpen ( );
    HRESULT ApplySharpenEdges ( );
    HRESULT ApplySharpenMore ( );
    HRESULT ApplyUnSharpMask (
        double Amount,
        double Radius,
        long Threshold );
    HRESULT ApplyDeInterlace (
        enum PsEliminateFields EliminateFields,
        enum PsCreateFields CreateFields );
    HRESULT ApplyNTSC ( );
    HRESULT ApplyCustomFilter (
        const _variant_t & Characteristics,
        long Scale,
        long Offset );
    HRESULT ApplyHighPass (
        double Radius );
    HRESULT ApplyMaximum (
        double Radius );
    HRESULT ApplyMinimum (
        double Radius );
    HRESULT ApplyOffset (
        double Horizontal,
        double Vertical,
        enum PsOffsetUndefinedAreas UndefinedAreas );
    HRESULT AdjustLevels (
        long InputRangeStart,
        long InputRangeEnd,
        double InputRangeGamma,
        long OutputRangeStart,
        long OutputRangeEnd );
    HRESULT AutoLevels ( );
    HRESULT AutoContrast ( );
    HRESULT AdjustCurves (
        const _variant_t & CurveShape );
    HRESULT AdjustBrightnessContrast (
        long Brightness,
        long Contrast );
    HRESULT AdjustColorBalance (
        const _variant_t & Shadows = vtMissing,
        const _variant_t & Midtones = vtMissing,
        const _variant_t & Highlights = vtMissing,
        const _variant_t & PreserveLuminosity = vtMissing );
    HRESULT Desaturate ( );
    HRESULT SelectiveColor (
        enum PsAdjustmentReference SelectionMethod,
        const _variant_t & Reds = vtMissing,
        const _variant_t & Yellows = vtMissing,
        const _variant_t & Greens = vtMissing,
        const _variant_t & Cyans = vtMissing,
        const _variant_t & Blues = vtMissing,
        const _variant_t & Magentas = vtMissing,
        const _variant_t & Whites = vtMissing,
        const _variant_t & Neutrals = vtMissing,
        const _variant_t & Blacks = vtMissing );
    HRESULT MixChannels (
        const _variant_t & OutputChannels,
        const _variant_t & Monochrome = vtMissing );
    HRESULT Invert ( );
    HRESULT Equalize ( );
    HRESULT Threshold (
        long Level );
    HRESULT Posterize (
        long Levels );
    HRESULT PhotoFilter (
        const _variant_t & FillColor = vtMissing,
        const _variant_t & Density = vtMissing,
        const _variant_t & PreserveLuminosity = vtMissing );
    HRESULT ShadowHighlight (
        const _variant_t & ShadowAmount = vtMissing,
        const _variant_t & ShadowWidth = vtMissing,
        const _variant_t & ShadowRaduis = vtMissing,
        const _variant_t & HighlightAmount = vtMissing,
        const _variant_t & HighlightWidth = vtMissing,
        const _variant_t & HighlightRaduis = vtMissing,
        const _variant_t & ColorCorrection = vtMissing,
        const _variant_t & MidtoneContrast = vtMissing,
        const _variant_t & BlackClip = vtMissing,
        const _variant_t & WhiteClip = vtMissing );
    HRESULT Unlink ( );
    HRESULT Link (
        IDispatch * With );
    HRESULT Translate (
        const _variant_t & DeltaX = vtMissing,
        const _variant_t & DeltaY = vtMissing );
    HRESULT Rotate (
        double Angle,
        const _variant_t & Anchor = vtMissing );
    HRESULT Resize (
        const _variant_t & Horizontal = vtMissing,
        const _variant_t & Vertical = vtMissing,
        const _variant_t & Anchor = vtMissing );
    HRESULT MoveToBeginning (
        IDispatch * Container );
    HRESULT MoveToEnd (
        IDispatch * Container );
    HRESULT MoveBefore (
        IDispatch * RelativeObject );
    HRESULT MoveAfter (
        IDispatch * RelativeObject );
    IDispatchPtr Duplicate (
        const _variant_t & RelativeObject = vtMissing,
        const _variant_t & InsertionLocation = vtMissing );
    HRESULT Move (
        IDispatch * RelativeObject,
        enum PsElementPlacement InsertionLocation );
    HRESULT Delete ( );
};

enum PsLayerKind
{
    psNormalLayer = 1,
    psTextLayer = 2,
    psSolidFillLayer = 3,
    psGradientFillLayer = 4,
    psPatternFillLayer = 5,
    psLevelsLayer = 6,
    psCurvesLayer = 7,
    psColorBalanceLayer = 8,
    psBrightnessContrastLayer = 9,
    psHueSaturationLayer = 10,
    psSelectiveColorLayer = 11,
    psChannelMixerLayer = 12,
    psGradientMapLayer = 13,
    psInversionLayer = 14,
    psThresholdLayer = 15,
    psPosterizeLayer = 16,
    psSmartObjectLayer = 17,
    psPhotoFilterLayer = 18,
    psExposureLayer = 19,
    psLayer3D = 20,
    psVideoLayer = 21,
    psBlackAndWhiteLayer = 22,
    psVibrance = 23
};

struct __declspec(uuid("e7a940cd-9ac7-4d76-975d-24d6ba0fdd16"))
TextItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDesiredLetterScaling,put=PutDesiredLetterScaling))
    double DesiredLetterScaling;
    __declspec(property(get=GetAlternateLigatures,put=PutAlternateLigatures))
    VARIANT_BOOL AlternateLigatures;
    __declspec(property(get=GetTracking,put=PutTracking))
    double Tracking;
    __declspec(property(get=GetMaximumLetterScaling,put=PutMaximumLetterScaling))
    double MaximumLetterScaling;
    __declspec(property(get=GetColor,put=PutRefColor))
    _SolidColorPtr Color;
    __declspec(property(get=GetNoBreak,put=PutNoBreak))
    VARIANT_BOOL NoBreak;
    __declspec(property(get=GetContents,put=PutContents))
    _bstr_t Contents;
    __declspec(property(get=GetVerticalScale,put=PutVerticalScale))
    long VerticalScale;
    __declspec(property(get=GetHorizontalScale,put=PutHorizontalScale))
    long HorizontalScale;
    __declspec(property(get=GetFont,put=PutFont))
    _bstr_t Font;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOldStyle,put=PutOldStyle))
    VARIANT_BOOL OldStyle;
    __declspec(property(get=GetLeftIndent,put=PutLeftIndent))
    double LeftIndent;
    __declspec(property(get=GetFirstLineIndent,put=PutFirstLineIndent))
    double FirstLineIndent;
    __declspec(property(get=GetRightIndent,put=PutRightIndent))
    double RightIndent;
    __declspec(property(get=GetMinimumGlyphScaling,put=PutMinimumGlyphScaling))
    double MinimumGlyphScaling;
    __declspec(property(get=GetDesiredGlyphScaling,put=PutDesiredGlyphScaling))
    double DesiredGlyphScaling;
    __declspec(property(get=GetMaximumGlyphScaling,put=PutMaximumGlyphScaling))
    double MaximumGlyphScaling;
    __declspec(property(get=GetAutoKerning,put=PutAutoKerning))
    enum PsAutoKernType AutoKerning;
    __declspec(property(get=GetWarpHorizontalDistortion,put=PutWarpHorizontalDistortion))
    double WarpHorizontalDistortion;
    __declspec(property(get=GetWarpVerticalDistortion,put=PutWarpVerticalDistortion))
    double WarpVerticalDistortion;
    __declspec(property(get=GetLigatures,put=PutLigatures))
    VARIANT_BOOL Ligatures;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    enum PsUnderlineType Underline;
    __declspec(property(get=GetStrikeThru,put=PutStrikeThru))
    enum PsStrikeThruType StrikeThru;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum PsDirection Direction;
    __declspec(property(get=GetWarpDirection,put=PutWarpDirection))
    enum PsDirection WarpDirection;
    __declspec(property(get=GetHyphenateBeforeLast,put=PutHyphenateBeforeLast))
    long HyphenateBeforeLast;
    __declspec(property(get=GetHyphenateAfterFirst,put=PutHyphenateAfterFirst))
    long HyphenateAfterFirst;
    __declspec(property(get=GetAutoLeadingAmount,put=PutAutoLeadingAmount))
    double AutoLeadingAmount;
    __declspec(property(get=GetHangingPuntuation,put=PutHangingPuntuation))
    VARIANT_BOOL HangingPuntuation;
    __declspec(property(get=GetMinimumWordScaling,put=PutMinimumWordScaling))
    double MinimumWordScaling;
    __declspec(property(get=GetDesiredWordScaling,put=PutDesiredWordScaling))
    double DesiredWordScaling;
    __declspec(property(get=GetMaximumWordScaling,put=PutMaximumWordScaling))
    double MaximumWordScaling;
    __declspec(property(get=GetSpaceBefore,put=PutSpaceBefore))
    double SpaceBefore;
    __declspec(property(get=GetBaselineShift,put=PutBaselineShift))
    double BaselineShift;
    __declspec(property(get=GetFauxBold,put=PutFauxBold))
    VARIANT_BOOL FauxBold;
    __declspec(property(get=GetHyphenation,put=PutHyphenation))
    VARIANT_BOOL Hyphenation;
    __declspec(property(get=GetUseAutoLeading,put=PutUseAutoLeading))
    VARIANT_BOOL UseAutoLeading;
    __declspec(property(get=GetSpaceAfter,put=PutSpaceAfter))
    double SpaceAfter;
    __declspec(property(get=GetLeading,put=PutLeading))
    double Leading;
    __declspec(property(get=GetJustification,put=PutJustification))
    enum PsJustification Justification;
    __declspec(property(get=GetCapitalization,put=PutCapitalization))
    enum PsCase Capitalization;
    __declspec(property(get=GetTextComposer,put=PutTextComposer))
    enum PsTextComposer TextComposer;
    __declspec(property(get=GetHyphenateCapitalWords,put=PutHyphenateCapitalWords))
    VARIANT_BOOL HyphenateCapitalWords;
    __declspec(property(get=GetHyphenLimit,put=PutHyphenLimit))
    long HyphenLimit;
    __declspec(property(get=GetPosition,put=PutPosition))
    _variant_t Position;
    __declspec(property(get=GetSize,put=PutSize))
    double Size;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetKind,put=PutKind))
    enum PsTextType Kind;
    __declspec(property(get=GetHyphenationZone,put=PutHyphenationZone))
    double HyphenationZone;
    __declspec(property(get=GetWarpBend,put=PutWarpBend))
    double WarpBend;
    __declspec(property(get=GetFauxItalic,put=PutFauxItalic))
    VARIANT_BOOL FauxItalic;
    __declspec(property(get=GetWarpStyle,put=PutWarpStyle))
    enum PsWarpStyle WarpStyle;
    __declspec(property(get=GetHyphenateWordsLongerThan,put=PutHyphenateWordsLongerThan))
    long HyphenateWordsLongerThan;
    __declspec(property(get=GetLanguage,put=PutLanguage))
    enum PsLanguage Language;
    __declspec(property(get=GetAntiAliasMethod,put=PutAntiAliasMethod))
    enum PsAntiAlias AntiAliasMethod;
    __declspec(property(get=GetMinimumLetterScaling,put=PutMinimumLetterScaling))
    double MinimumLetterScaling;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum PsAntiAlias GetAntiAliasMethod ( );
    void PutAntiAliasMethod (
        enum PsAntiAlias _arg1 );
    enum PsAutoKernType GetAutoKerning ( );
    void PutAutoKerning (
        enum PsAutoKernType _arg1 );
    _SolidColorPtr GetColor ( );
    void PutColor (
        struct _SolidColor * _arg1 );
    void PutRefColor (
        struct _SolidColor * _arg1 );
    VARIANT_BOOL GetUseAutoLeading ( );
    void PutUseAutoLeading (
        VARIANT_BOOL _arg1 );
    double GetTracking ( );
    void PutTracking (
        double _arg1 );
    long GetVerticalScale ( );
    void PutVerticalScale (
        long _arg1 );
    long GetHorizontalScale ( );
    void PutHorizontalScale (
        long _arg1 );
    double GetBaselineShift ( );
    void PutBaselineShift (
        double _arg1 );
    _bstr_t GetContents ( );
    void PutContents (
        _bstr_t _arg1 );
    _bstr_t GetFont ( );
    void PutFont (
        _bstr_t _arg1 );
    double GetLeading ( );
    void PutLeading (
        double _arg1 );
    VARIANT_BOOL GetLigatures ( );
    void PutLigatures (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAlternateLigatures ( );
    void PutAlternateLigatures (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetOldStyle ( );
    void PutOldStyle (
        VARIANT_BOOL _arg1 );
    _variant_t GetPosition ( );
    void PutPosition (
        const _variant_t & _arg1 );
    enum PsDirection GetDirection ( );
    void PutDirection (
        enum PsDirection _arg1 );
    double GetSize ( );
    void PutSize (
        double _arg1 );
    VARIANT_BOOL GetFauxBold ( );
    void PutFauxBold (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFauxItalic ( );
    void PutFauxItalic (
        VARIANT_BOOL _arg1 );
    enum PsCase GetCapitalization ( );
    void PutCapitalization (
        enum PsCase _arg1 );
    enum PsStrikeThruType GetStrikeThru ( );
    void PutStrikeThru (
        enum PsStrikeThruType _arg1 );
    enum PsUnderlineType GetUnderline ( );
    void PutUnderline (
        enum PsUnderlineType _arg1 );
    enum PsLanguage GetLanguage ( );
    void PutLanguage (
        enum PsLanguage _arg1 );
    VARIANT_BOOL GetNoBreak ( );
    void PutNoBreak (
        VARIANT_BOOL _arg1 );
    enum PsTextType GetKind ( );
    void PutKind (
        enum PsTextType _arg1 );
    enum PsJustification GetJustification ( );
    void PutJustification (
        enum PsJustification _arg1 );
    double GetLeftIndent ( );
    void PutLeftIndent (
        double _arg1 );
    double GetFirstLineIndent ( );
    void PutFirstLineIndent (
        double _arg1 );
    double GetRightIndent ( );
    void PutRightIndent (
        double _arg1 );
    double GetSpaceBefore ( );
    void PutSpaceBefore (
        double _arg1 );
    double GetSpaceAfter ( );
    void PutSpaceAfter (
        double _arg1 );
    VARIANT_BOOL GetHangingPuntuation ( );
    void PutHangingPuntuation (
        VARIANT_BOOL _arg1 );
    enum PsTextComposer GetTextComposer ( );
    void PutTextComposer (
        enum PsTextComposer _arg1 );
    VARIANT_BOOL GetHyphenation ( );
    void PutHyphenation (
        VARIANT_BOOL _arg1 );
    double GetMinimumGlyphScaling ( );
    void PutMinimumGlyphScaling (
        double _arg1 );
    double GetDesiredGlyphScaling ( );
    void PutDesiredGlyphScaling (
        double _arg1 );
    double GetMaximumGlyphScaling ( );
    void PutMaximumGlyphScaling (
        double _arg1 );
    double GetMinimumLetterScaling ( );
    void PutMinimumLetterScaling (
        double _arg1 );
    double GetDesiredLetterScaling ( );
    void PutDesiredLetterScaling (
        double _arg1 );
    double GetMaximumLetterScaling ( );
    void PutMaximumLetterScaling (
        double _arg1 );
    double GetMinimumWordScaling ( );
    void PutMinimumWordScaling (
        double _arg1 );
    double GetDesiredWordScaling ( );
    void PutDesiredWordScaling (
        double _arg1 );
    double GetMaximumWordScaling ( );
    void PutMaximumWordScaling (
        double _arg1 );
    double GetAutoLeadingAmount ( );
    void PutAutoLeadingAmount (
        double _arg1 );
    long GetHyphenateWordsLongerThan ( );
    void PutHyphenateWordsLongerThan (
        long _arg1 );
    long GetHyphenateAfterFirst ( );
    void PutHyphenateAfterFirst (
        long _arg1 );
    long GetHyphenateBeforeLast ( );
    void PutHyphenateBeforeLast (
        long _arg1 );
    long GetHyphenLimit ( );
    void PutHyphenLimit (
        long _arg1 );
    double GetHyphenationZone ( );
    void PutHyphenationZone (
        double _arg1 );
    VARIANT_BOOL GetHyphenateCapitalWords ( );
    void PutHyphenateCapitalWords (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    enum PsWarpStyle GetWarpStyle ( );
    void PutWarpStyle (
        enum PsWarpStyle _arg1 );
    enum PsDirection GetWarpDirection ( );
    void PutWarpDirection (
        enum PsDirection _arg1 );
    double GetWarpBend ( );
    void PutWarpBend (
        double _arg1 );
    double GetWarpHorizontalDistortion ( );
    void PutWarpHorizontalDistortion (
        double _arg1 );
    double GetWarpVerticalDistortion ( );
    void PutWarpVerticalDistortion (
        double _arg1 );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT CreatePath ( );
    HRESULT ConvertToShape ( );
};

enum PsAntiAlias
{
    psNoAntialias = 1,
    psSharp = 2,
    psCrisp = 3,
    psStrong = 4,
    psSmooth = 5
};

enum PsAutoKernType
{
    psManual = 1,
    psMetrics = 2,
    psOptical = 3
};

struct __declspec(uuid("d2d1665e-c1b9-4ca0-8ac9-529f6a3d9002"))
_SolidColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _SolidColorPtr ObjectValue;
    __declspec(property(get=GetModel,put=PutModel))
    enum PsColorModel Model;
    __declspec(property(get=GetNearestWebColor))
    _RGBColorPtr NearestWebColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetRGB,put=PutRefRGB))
    _RGBColorPtr RGB;
    __declspec(property(get=GetGray,put=PutRefGray))
    _GrayColorPtr Gray;
    __declspec(property(get=GetCMYK,put=PutRefCMYK))
    _CMYKColorPtr CMYK;
    __declspec(property(get=GetLab,put=PutRefLab))
    _LabColorPtr Lab;
    __declspec(property(get=GetHSB,put=PutRefHSB))
    _HSBColorPtr HSB;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum PsColorModel GetModel ( );
    void PutModel (
        enum PsColorModel _arg1 );
    _RGBColorPtr GetRGB ( );
    void PutRGB (
        struct _RGBColor * _arg1 );
    void PutRefRGB (
        struct _RGBColor * _arg1 );
    _GrayColorPtr GetGray ( );
    void PutGray (
        struct _GrayColor * _arg1 );
    void PutRefGray (
        struct _GrayColor * _arg1 );
    _CMYKColorPtr GetCMYK ( );
    void PutCMYK (
        struct _CMYKColor * _arg1 );
    void PutRefCMYK (
        struct _CMYKColor * _arg1 );
    _LabColorPtr GetLab ( );
    void PutLab (
        struct _LabColor * _arg1 );
    void PutRefLab (
        struct _LabColor * _arg1 );
    _HSBColorPtr GetHSB ( );
    void PutHSB (
        struct _HSBColor * _arg1 );
    void PutRefHSB (
        struct _HSBColor * _arg1 );
    _RGBColorPtr GetNearestWebColor ( );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _SolidColor * _arg1 );
    void PutRefObjectValue (
        struct _SolidColor * _arg1 );
    VARIANT_BOOL IsEqual (
        struct _SolidColor * Color );
};

enum PsColorModel
{
    psGrayscaleModel = 1,
    psRGBModel = 2,
    psCMYKModel = 3,
    psLabModel = 4,
    psHSBModel = 5,
    psNoModel = 50
};

struct __declspec(uuid("45f1195f-3554-4b3f-a00a-e1d189c0dc3e"))
_RGBColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _RGBColorPtr ObjectValue;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetRed,put=PutRed))
    double Red;
    __declspec(property(get=GetGreen,put=PutGreen))
    double Green;
    __declspec(property(get=GetBlue,put=PutBlue))
    double Blue;
    __declspec(property(get=GetHexValue,put=PutHexValue))
    _bstr_t HexValue;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetRed ( );
    void PutRed (
        double _arg1 );
    double GetGreen ( );
    void PutGreen (
        double _arg1 );
    double GetBlue ( );
    void PutBlue (
        double _arg1 );
    _bstr_t GetHexValue ( );
    void PutHexValue (
        _bstr_t _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _RGBColor * _arg1 );
    void PutRefObjectValue (
        struct _RGBColor * _arg1 );
};

struct __declspec(uuid("1b28b8cd-7578-415f-ac67-dc22a69f4c07"))
_GrayColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _GrayColorPtr ObjectValue;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetGray,put=PutGray))
    double Gray;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetGray ( );
    void PutGray (
        double _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _GrayColor * _arg1 );
    void PutRefObjectValue (
        struct _GrayColor * _arg1 );
};

struct __declspec(uuid("29c13f49-bcef-4fe2-bfc7-6f03b82b726f"))
_CMYKColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _CMYKColorPtr ObjectValue;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCyan,put=PutCyan))
    double Cyan;
    __declspec(property(get=GetMagenta,put=PutMagenta))
    double Magenta;
    __declspec(property(get=GetYellow,put=PutYellow))
    double Yellow;
    __declspec(property(get=GetBlack,put=PutBlack))
    double Black;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetCyan ( );
    void PutCyan (
        double _arg1 );
    double GetMagenta ( );
    void PutMagenta (
        double _arg1 );
    double GetYellow ( );
    void PutYellow (
        double _arg1 );
    double GetBlack ( );
    void PutBlack (
        double _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _CMYKColor * _arg1 );
    void PutRefObjectValue (
        struct _CMYKColor * _arg1 );
};

struct __declspec(uuid("f4d7f5c2-37db-4df7-8a7d-528902056596"))
_LabColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _LabColorPtr ObjectValue;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=GetL,put=PutL))
    double L;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetL ( );
    void PutL (
        double _arg1 );
    double GetA ( );
    void PutA (
        double _arg1 );
    double GetB ( );
    void PutB (
        double _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _LabColor * _arg1 );
    void PutRefObjectValue (
        struct _LabColor * _arg1 );
};

struct __declspec(uuid("f91f9c5b-ac34-45b7-aff2-871d9dd2e8ec"))
_HSBColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _HSBColorPtr ObjectValue;
    __declspec(property(get=GetHue,put=PutHue))
    double Hue;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    double Brightness;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetSaturation,put=PutSaturation))
    double Saturation;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetHue ( );
    void PutHue (
        double _arg1 );
    double GetSaturation ( );
    void PutSaturation (
        double _arg1 );
    double GetBrightness ( );
    void PutBrightness (
        double _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _HSBColor * _arg1 );
    void PutRefObjectValue (
        struct _HSBColor * _arg1 );
};

enum PsDirection
{
    psHorizontal = 1,
    psVertical = 2
};

enum PsCase
{
    psNormalCase = 1,
    psAllCaps = 2,
    psSmallCaps = 3
};

enum PsStrikeThruType
{
    psStrikeOff = 1,
    psStrikeHeight = 2,
    psStrikeBox = 3
};

enum PsUnderlineType
{
    psUnderlineOff = 1,
    psUnderlineRight = 2,
    psUnderlineLeft = 3
};

enum PsLanguage
{
    psEnglishUSA = 1,
    psEnglishUK = 2,
    psFrench = 3,
    psCanadianFrench = 4,
    psFinnish = 5,
    psGerman = 6,
    psOldGerman = 7,
    psSwissGerman = 8,
    psItalian = 9,
    psNorwegian = 10,
    psNynorskNorwegian = 11,
    psPortuguese = 12,
    psBrazillianPortuguese = 13,
    psSpanish = 14,
    psSwedish = 15,
    psDutch = 16,
    psDanish = 17
};

enum PsTextType
{
    psPointText = 1,
    psParagraphText = 2
};

enum PsJustification
{
    psLeft = 1,
    psCenter = 2,
    psRight = 3,
    psLeftJustified = 4,
    psCenterJustified = 5,
    psRightJustified = 6,
    psFullyJustified = 7
};

enum PsTextComposer
{
    psAdobeSingleLine = 1,
    psAdobeEveryLine = 2
};

enum PsWarpStyle
{
    psNoWarp = 1,
    psArc = 2,
    psArcLower = 3,
    psArcUpper = 4,
    psArch = 5,
    psBulge = 6,
    psShellLower = 7,
    psShellUpper = 8,
    psFlag = 9,
    psWave = 10,
    psFish = 11,
    psRise = 12,
    psFishEye = 13,
    psInflate = 14,
    psSqueeze = 15,
    psTwist = 16
};

enum PsBlendMode
{
    psPassThrough = 1,
    psNormalBlend = 2,
    psDissolve = 3,
    psDarken = 4,
    psMultiply = 5,
    psColorBurn = 6,
    psLinearBurn = 7,
    psLighten = 8,
    psScreen = 9,
    psColorDodge = 10,
    psLinearDodge = 11,
    psOverlay = 12,
    psSoftLight = 13,
    psHardLight = 14,
    psVividLight = 15,
    psLinearLight = 16,
    psPinLight = 17,
    psDifference = 18,
    psExclusion = 19,
    psSubtract = 29,
    psDivide = 30,
    psHue = 20,
    psSaturationBlend = 21,
    psColorBlend = 22,
    psLuminosity = 23,
    psHardMix = 26,
    psLighterColor = 27,
    psDarkerColor = 28
};

enum PsLayerType
{
    psArtLayer = 1,
    psLayerSet = 2
};

struct __declspec(uuid("c1c35524-2aa4-4630-80b9-011efe3d5779"))
LayerSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAllLocked,put=PutAllLocked))
    VARIANT_BOOL AllLocked;
    __declspec(property(get=GetBlendMode,put=PutBlendMode))
    enum PsBlendMode BlendMode;
    __declspec(property(get=GetLinkedLayers))
    _variant_t LinkedLayers;
    __declspec(property(get=GetLayerType))
    enum PsLayerType LayerType;
    __declspec(property(get=GetEnabledChannels,put=PutEnabledChannels))
    _variant_t EnabledChannels;
    __declspec(property(get=GetArtLayer))
    ArtLayerPtr ArtLayer;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLayers))
    LayersPtr Layers;
    __declspec(property(get=GetArtLayers))
    ArtLayersPtr ArtLayers;
    __declspec(property(get=GetLayerSets))
    LayerSetsPtr LayerSets;
    __declspec(property(get=GetLayer))
    IDispatchPtr Layer;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    double Opacity;
    __declspec(property(get=GetBounds))
    _variant_t Bounds;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLayerSet))
    LayerSetPtr _LayerSet;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _variant_t GetEnabledChannels ( );
    void PutEnabledChannels (
        const _variant_t & _arg1 );
    LayersPtr GetLayers ( );
    LayerSetsPtr GetLayerSets ( );
    ArtLayersPtr GetArtLayers ( );
    IDispatchPtr GetLayer ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetAllLocked ( );
    void PutAllLocked (
        VARIANT_BOOL _arg1 );
    enum PsBlendMode GetBlendMode ( );
    void PutBlendMode (
        enum PsBlendMode _arg1 );
    _variant_t GetLinkedLayers ( );
    double GetOpacity ( );
    void PutOpacity (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    enum PsLayerType GetLayerType ( );
    ArtLayerPtr GetArtLayer ( );
    LayerSetPtr GetLayerSet ( );
    _variant_t GetBounds ( );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ArtLayerPtr Merge ( );
    HRESULT Unlink ( );
    HRESULT Link (
        IDispatch * With );
    HRESULT Translate (
        const _variant_t & DeltaX = vtMissing,
        const _variant_t & DeltaY = vtMissing );
    HRESULT Rotate (
        double Angle,
        const _variant_t & Anchor = vtMissing );
    HRESULT Resize (
        const _variant_t & Horizontal = vtMissing,
        const _variant_t & Vertical = vtMissing,
        const _variant_t & Anchor = vtMissing );
    HRESULT MoveToBeginning (
        IDispatch * Container );
    HRESULT MoveToEnd (
        IDispatch * Container );
    HRESULT MoveBefore (
        IDispatch * RelativeObject );
    HRESULT MoveAfter (
        IDispatch * RelativeObject );
    IDispatchPtr Duplicate (
        const _variant_t & RelativeObject = vtMissing,
        const _variant_t & InsertionLocation = vtMissing );
    HRESULT Move (
        IDispatch * RelativeObject,
        enum PsElementPlacement InsertionLocation );
    HRESULT Delete ( );
};

struct __declspec(uuid("dda16c46-15b2-472d-a659-41aa7bfdc4fd"))
Layers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HRESULT Remove (
        IDispatch * Item );
    HRESULT RemoveAll ( );
    IDispatchPtr GetItem (
        const _variant_t & ItemKey );
    long Index (
        IDispatch * ItemPtr );
};

struct __declspec(uuid("323dd2bc-0205-4a44-9f8e-0cf2556f00df"))
LayerSets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    LayerSetPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HRESULT Remove (
        struct LayerSet * Item );
    HRESULT RemoveAll ( );
    LayerSetPtr GetItem (
        const _variant_t & ItemKey );
    long Index (
        struct LayerSet * ItemPtr );
    LayerSetPtr Add ( );
};

struct __declspec(uuid("ec6a366c-f901-488d-a2c3-9e2e78b72dc6"))
ArtLayers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ArtLayerPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HRESULT Remove (
        struct ArtLayer * Item );
    HRESULT RemoveAll ( );
    ArtLayerPtr GetItem (
        const _variant_t & ItemKey );
    long Index (
        struct ArtLayer * ItemPtr );
    ArtLayerPtr Add ( );
};

enum PsElementPlacement
{
    psPlaceInside = 0,
    psPlaceAtBeginning = 1,
    psPlaceAtEnd = 2,
    psPlaceBefore = 3,
    psPlaceAfter = 4
};

enum PsRasterizeType
{
    psTextContents = 1,
    psShape = 2,
    psFillContent = 3,
    psLayerClippingPath = 4,
    psEntireLayer = 5,
    psLinkedLayers = 6
};

enum PsRadialBlurMethod
{
    psSpin = 1,
    psZoom = 2
};

enum PsRadialBlurQuality
{
    psRadialBlurDraft = 1,
    psRadialBlurGood = 2,
    psRadialBlurBest = 3
};

enum PsSmartBlurQuality
{
    psSmartBlurLow = 1,
    psSmartBlurMedium = 2,
    psSmartBlurHigh = 3
};

enum PsSmartBlurMode
{
    psSmartBlurNormal = 1,
    psSmartBlurEdgeOnly = 2,
    psSmartBlurOverlayEdge = 3
};

enum PsDisplacementMapType
{
    psStretchToFit = 1,
    psTile = 2
};

enum PsUndefinedAreas
{
    psWrapAround = 1,
    psRepeatEdgePixels = 2
};

enum PsPolarConversionType
{
    psRectangularToPolar = 1,
    psPolarToRectangular = 2
};

enum PsRippleSize
{
    psSmallRipple = 1,
    psMediumRipple = 2,
    psLargeRipple = 3
};

enum PsSpherizeMode
{
    psNormalSpherize = 1,
    psHorizontalSpherize = 2,
    psVerticalSpherize = 3
};

enum PsWaveType
{
    psSine = 1,
    psTriangular = 2,
    psSquare = 3
};

enum PsZigZagType
{
    psAroundCenter = 1,
    psOutFromCenter = 2,
    psPondRipples = 3
};

enum PsNoiseDistribution
{
    psUniformNoise = 1,
    psGaussianNoise = 2
};

enum PsLensType
{
    psZoomLens = 1,
    psPrime35 = 2,
    psPrime105 = 3,
    psMoviePrime = 5
};

enum PsEliminateFields
{
    psOddFields = 1,
    psEvenFields = 2
};

enum PsCreateFields
{
    psDuplication = 1,
    psInterpolation = 2
};

enum PsOffsetUndefinedAreas
{
    psOffsetSetToLayerFill = 1,
    psOffsetWrapAround = 2,
    psOffsetRepeatEdgePixels = 3
};

enum PsAdjustmentReference
{
    psRelative = 1,
    psAbsolute = 2
};

enum PsBitsPerChannelType
{
    psDocument1Bit = 1,
    psDocument8Bits = 8,
    psDocument16Bits = 16,
    psDocument32Bits = 32
};

enum PsColorProfileType
{
    psNo = 1,
    psWorking = 2,
    psCustom = 3
};

enum PsDocumentMode
{
    psGrayscale = 1,
    psRGB = 2,
    psCMYK = 3,
    psLab = 4,
    psBitmap = 5,
    psIndexedColor = 6,
    psMultiChannel = 7,
    psDuotone = 8
};

struct __declspec(uuid("edc373c3-fe30-40ba-a31c-0251ca7456f1"))
HistoryState : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSnapshot))
    VARIANT_BOOL Snapshot;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetName ( );
    VARIANT_BOOL GetSnapshot ( );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
};

struct __declspec(uuid("746fef90-a182-4bd0-a4f6-bb6bbae87a78"))
DocumentInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCopyrightNotice,put=PutCopyrightNotice))
    _bstr_t CopyrightNotice;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetAuthorPosition,put=PutAuthorPosition))
    _bstr_t AuthorPosition;
    __declspec(property(get=GetJobName,put=PutJobName))
    _bstr_t JobName;
    __declspec(property(get=GetEXIF))
    _variant_t EXIF;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCredit,put=PutCredit))
    _bstr_t Credit;
    __declspec(property(get=GetSource,put=PutSource))
    _bstr_t Source;
    __declspec(property(get=GetCreationDate,put=PutCreationDate))
    _bstr_t CreationDate;
    __declspec(property(get=GetCity,put=PutCity))
    _bstr_t City;
    __declspec(property(get=GetProvinceState,put=PutProvinceState))
    _bstr_t ProvinceState;
    __declspec(property(get=GetCountry,put=PutCountry))
    _bstr_t Country;
    __declspec(property(get=GetTransmissionReference,put=PutTransmissionReference))
    _bstr_t TransmissionReference;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetCaptionWriter,put=PutCaptionWriter))
    _bstr_t CaptionWriter;
    __declspec(property(get=GetHeadline,put=PutHeadline))
    _bstr_t Headline;
    __declspec(property(get=GetInstructions,put=PutInstructions))
    _bstr_t Instructions;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _variant_t Keywords;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetCopyrighted,put=PutCopyrighted))
    enum PsCopyrightedType Copyrighted;
    __declspec(property(get=GetUrgency,put=PutUrgency))
    enum PsUrgency Urgency;
    __declspec(property(get=GetSupplementalCategories,put=PutSupplementalCategories))
    _variant_t SupplementalCategories;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOwnerUrl,put=PutOwnerUrl))
    _bstr_t OwnerUrl;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t _arg1 );
    _bstr_t GetAuthor ( );
    void PutAuthor (
        _bstr_t _arg1 );
    _bstr_t GetAuthorPosition ( );
    void PutAuthorPosition (
        _bstr_t _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    _bstr_t GetCaptionWriter ( );
    void PutCaptionWriter (
        _bstr_t _arg1 );
    _bstr_t GetJobName ( );
    void PutJobName (
        _bstr_t _arg1 );
    enum PsCopyrightedType GetCopyrighted ( );
    void PutCopyrighted (
        enum PsCopyrightedType _arg1 );
    _bstr_t GetCopyrightNotice ( );
    void PutCopyrightNotice (
        _bstr_t _arg1 );
    _bstr_t GetOwnerUrl ( );
    void PutOwnerUrl (
        _bstr_t _arg1 );
    _variant_t GetKeywords ( );
    void PutKeywords (
        const _variant_t & _arg1 );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t _arg1 );
    _variant_t GetSupplementalCategories ( );
    void PutSupplementalCategories (
        const _variant_t & _arg1 );
    _bstr_t GetCreationDate ( );
    void PutCreationDate (
        _bstr_t _arg1 );
    _bstr_t GetCity ( );
    void PutCity (
        _bstr_t _arg1 );
    _bstr_t GetProvinceState ( );
    void PutProvinceState (
        _bstr_t _arg1 );
    _bstr_t GetCountry ( );
    void PutCountry (
        _bstr_t _arg1 );
    _bstr_t GetCredit ( );
    void PutCredit (
        _bstr_t _arg1 );
    _bstr_t GetSource ( );
    void PutSource (
        _bstr_t _arg1 );
    _bstr_t GetHeadline ( );
    void PutHeadline (
        _bstr_t _arg1 );
    _bstr_t GetInstructions ( );
    void PutInstructions (
        _bstr_t _arg1 );
    _bstr_t GetTransmissionReference ( );
    void PutTransmissionReference (
        _bstr_t _arg1 );
    enum PsUrgency GetUrgency ( );
    void PutUrgency (
        enum PsUrgency _arg1 );
    _variant_t GetEXIF ( );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
};

enum PsCopyrightedType
{
    psCopyrightedWork = 1,
    psPublicDomain = 2,
    psUnmarked = 3
};

enum PsUrgency
{
    psNone = 0,
    psLow = 1,
    psTwo = 2,
    psThree = 3,
    psFour = 4,
    psNormal = 5,
    psSix = 6,
    psSeven = 7,
    psHigh = 8
};

struct __declspec(uuid("09da6b10-9684-44ee-a575-01f54660bddc"))
Selection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSolid))
    VARIANT_BOOL Solid;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBounds))
    _variant_t Bounds;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _variant_t GetBounds ( );
    VARIANT_BOOL GetSolid ( );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Clear ( );
    HRESULT Copy (
        const _variant_t & Merge = vtMissing );
    HRESULT Cut ( );
    HRESULT SelectBorder (
        double Width );
    HRESULT Contract (
        double By );
    HRESULT Fill (
        const _variant_t & FillType,
        const _variant_t & Mode = vtMissing,
        const _variant_t & Opacity = vtMissing,
        const _variant_t & PreserveTransparency = vtMissing );
    HRESULT Stroke (
        const _variant_t & StrokeColor,
        long Width,
        const _variant_t & Location = vtMissing,
        const _variant_t & Mode = vtMissing,
        const _variant_t & Opacity = vtMissing,
        const _variant_t & PreserveTransparency = vtMissing );
    HRESULT SelectAll ( );
    HRESULT Deselect ( );
    HRESULT Select (
        const _variant_t & Region,
        const _variant_t & Type = vtMissing,
        const _variant_t & Feather = vtMissing,
        const _variant_t & AntiAlias = vtMissing );
    HRESULT Expand (
        double By );
    HRESULT Feather (
        double By );
    HRESULT Grow (
        long Tolerance,
        VARIANT_BOOL AntiAlias );
    HRESULT Invert ( );
    HRESULT Similar (
        long Tolerance,
        VARIANT_BOOL AntiAlias );
    HRESULT Smooth (
        long Radius );
    HRESULT Store (
        struct Channel * Into,
        const _variant_t & Combination = vtMissing );
    HRESULT Load (
        struct Channel * From,
        const _variant_t & Combination = vtMissing,
        const _variant_t & Inverting = vtMissing );
    HRESULT Translate (
        const _variant_t & DeltaX = vtMissing,
        const _variant_t & DeltaY = vtMissing );
    HRESULT TranslateBoundary (
        const _variant_t & DeltaX = vtMissing,
        const _variant_t & DeltaY = vtMissing );
    HRESULT Rotate (
        double Angle,
        const _variant_t & Anchor = vtMissing );
    HRESULT RotateBoundary (
        double Angle,
        const _variant_t & Anchor = vtMissing );
    HRESULT Resize (
        const _variant_t & Horizontal = vtMissing,
        const _variant_t & Vertical = vtMissing,
        const _variant_t & Anchor = vtMissing );
    HRESULT ResizeBoundary (
        const _variant_t & Horizontal = vtMissing,
        const _variant_t & Vertical = vtMissing,
        const _variant_t & Anchor = vtMissing );
    HRESULT MakeWorkPath (
        const _variant_t & Tolerance = vtMissing );
};

struct __declspec(uuid("4b9e6b85-0613-4873-8ab7-575cd2226768"))
Channel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetColor,put=PutRefColor))
    _SolidColorPtr Color;
    __declspec(property(get=GetKind,put=PutKind))
    enum PsChannelType Kind;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHistogram))
    _variant_t Histogram;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    double Opacity;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _variant_t GetHistogram ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    enum PsChannelType GetKind ( );
    void PutKind (
        enum PsChannelType _arg1 );
    double GetOpacity ( );
    void PutOpacity (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    _SolidColorPtr GetColor ( );
    void PutColor (
        struct _SolidColor * _arg1 );
    void PutRefColor (
        struct _SolidColor * _arg1 );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Merge ( );
    ChannelPtr Duplicate (
        const _variant_t & TargetDocument = vtMissing );
    HRESULT Delete ( );
};

enum PsChannelType
{
    psComponentChannel = 1,
    psMaskedAreaAlphaChannel = 2,
    psSelectedAreaAlphaChannel = 3,
    psSpotColorChannel = 4
};

struct __declspec(uuid("dc865034-a587-4cc4-8a5a-453032562be4"))
XMPMetadata : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRawData,put=PutRawData))
    _bstr_t RawData;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetRawData ( );
    void PutRawData (
        _bstr_t _arg1 );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
};

struct __declspec(uuid("632f36b3-1d76-48be-adc3-d7fb62a0c2fb"))
MeasurementScale : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPixelLength,put=PutPixelLength))
    long PixelLength;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetLogicalLength,put=PutLogicalLength))
    double LogicalLength;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLogicalUnits,put=PutLogicalUnits))
    _bstr_t LogicalUnits;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    long GetPixelLength ( );
    void PutPixelLength (
        long _arg1 );
    double GetLogicalLength ( );
    void PutLogicalLength (
        double _arg1 );
    _bstr_t GetLogicalUnits ( );
    void PutLogicalUnits (
        _bstr_t _arg1 );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
};

struct __declspec(uuid("2dc64f97-8c69-4016-a8eb-89a00217291f"))
Channels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ChannelPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HRESULT Remove (
        struct Channel * Item );
    HRESULT RemoveAll ( );
    ChannelPtr GetItem (
        const _variant_t & ItemKey );
    long Index (
        struct Channel * ItemPtr );
    ChannelPtr Add ( );
};

struct __declspec(uuid("69172a3f-e06e-42e6-b733-4dc36e2ac948"))
HistoryStates : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    HistoryStatePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HistoryStatePtr GetItem (
        const _variant_t & ItemKey );
    long Index (
        struct HistoryState * ItemPtr );
};

struct __declspec(uuid("726b458c-74b0-47ae-b390-99753b55df2e"))
LayerComps : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    LayerCompPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HRESULT RemoveAll ( );
    LayerCompPtr GetItem (
        const _variant_t & ItemKey );
    long Index (
        struct LayerComp * ItemPtr );
    LayerCompPtr Add (
        _bstr_t Name,
        const _variant_t & Comment = vtMissing,
        const _variant_t & Appearance = vtMissing,
        const _variant_t & Position = vtMissing,
        const _variant_t & Visibility = vtMissing );
};

struct __declspec(uuid("9a37a0ac-e951-4b16-a548-886b77338de0"))
LayerComp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPosition,put=PutPosition))
    VARIANT_BOOL Position;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetComment,put=PutComment))
    _variant_t Comment;
    __declspec(property(get=GetAppearance,put=PutAppearance))
    VARIANT_BOOL Appearance;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisibility,put=PutVisibility))
    VARIANT_BOOL Visibility;
    __declspec(property(get=GetSelected))
    VARIANT_BOOL Selected;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t GetComment ( );
    void PutComment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAppearance ( );
    void PutAppearance (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPosition ( );
    void PutPosition (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetVisibility ( );
    void PutVisibility (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSelected ( );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Recapture ( );
    HRESULT ResetFromComp ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("91b5f8ae-3cc5-4775-bcd3-ff1e0724bb01"))
PathItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    PathItemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HRESULT RemoveAll ( );
    PathItemPtr GetItem (
        const _variant_t & ItemKey );
    long Index (
        struct PathItem * ItemPtr );
    PathItemPtr Add (
        _bstr_t Name,
        const _variant_t & EntirePath );
};

struct __declspec(uuid("8b0cb532-4acc-4bf3-9e42-0949b679d120"))
PathItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind,put=PutKind))
    enum PsPathKind Kind;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSubPathItems))
    SubPathItemsPtr SubPathItems;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    SubPathItemsPtr GetSubPathItems ( );
    enum PsPathKind GetKind ( );
    void PutKind (
        enum PsPathKind _arg1 );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    PathItemPtr Duplicate (
        const _variant_t & Name = vtMissing );
    HRESULT MakeSelection (
        const _variant_t & Feather = vtMissing,
        const _variant_t & AntiAlias = vtMissing,
        const _variant_t & Operation = vtMissing );
    HRESULT FillPath (
        const _variant_t & FillColor = vtMissing,
        const _variant_t & Mode = vtMissing,
        const _variant_t & Opacity = vtMissing,
        const _variant_t & PreserveTransparency = vtMissing,
        const _variant_t & Feather = vtMissing,
        const _variant_t & AntiAlias = vtMissing,
        const _variant_t & WholePath = vtMissing );
    HRESULT StrokePath (
        const _variant_t & Tool = vtMissing,
        const _variant_t & SimulatePressure = vtMissing );
    HRESULT MakeClippingPath (
        const _variant_t & Flatness = vtMissing );
    HRESULT Select ( );
    HRESULT Deselect ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("b7283eec-23b1-49a6-b151-0e97e4af353c"))
SubPathItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    SubPathItemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    SubPathItemPtr GetItem (
        const _variant_t & ItemKey );
    long Index (
        struct SubPathItem * ItemPtr );
};

struct __declspec(uuid("b6d22eb9-ec6d-46db-b52a-5561433a1217"))
SubPathItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPathPoints))
    PathPointsPtr PathPoints;
    __declspec(property(get=GetOperation))
    enum PsShapeOperation Operation;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetClosed ( );
    enum PsShapeOperation GetOperation ( );
    PathPointsPtr GetPathPoints ( );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
};

enum PsShapeOperation
{
    psShapeAdd = 1,
    psShapeXOR = 2,
    psShapeIntersect = 3,
    psShapeSubtract = 4
};

struct __declspec(uuid("8214a53c-0e67-49d4-a65a-d56f07b17d37"))
PathPoints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    PathPointPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PathPointPtr GetItem (
        const _variant_t & ItemKey );
    long Index (
        struct PathPoint * ItemPtr );
};

struct __declspec(uuid("7d14ba29-1672-482f-8f48-9da1e94800fd"))
PathPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum PsPointKind Kind;
    __declspec(property(get=GetRightDirection))
    _variant_t RightDirection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAnchor))
    _variant_t Anchor;
    __declspec(property(get=GetLeftDirection))
    _variant_t LeftDirection;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _variant_t GetAnchor ( );
    _variant_t GetLeftDirection ( );
    _variant_t GetRightDirection ( );
    enum PsPointKind GetKind ( );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
};

enum PsPointKind
{
    psSmoothPoint = 1,
    psCornerPoint = 2
};

enum PsPathKind
{
    psNormalPath = 1,
    psClippingPath = 2,
    psWorkPath = 3,
    psVectorMask = 4,
    psTextMask = 5
};

struct __declspec(uuid("9e01c1da-df69-4c2c-85ec-616370df1cf0"))
CountItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    CountItemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HRESULT RemoveAll ( );
    CountItemPtr GetItem (
        const _variant_t & ItemKey );
    long Index (
        struct CountItem * ItemPtr );
    CountItemPtr Add (
        const _variant_t & Position );
};

struct __declspec(uuid("66869370-9672-492d-93ac-0add62f427f1"))
CountItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    _variant_t Position;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _variant_t GetPosition ( );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("97c81476-3f5d-4934-8caa-1ed0242105b0"))
ColorSamplers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ColorSamplerPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HRESULT RemoveAll ( );
    ColorSamplerPtr GetItem (
        const _variant_t & ItemKey );
    long Index (
        struct ColorSampler * ItemPtr );
    ColorSamplerPtr Add (
        const _variant_t & Position );
};

struct __declspec(uuid("b125a66b-4c94-4e55-af2f-57ec4dcb484b"))
ColorSampler : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor))
    _SolidColorPtr Color;
    __declspec(property(get=GetPosition))
    _variant_t Position;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _variant_t GetPosition ( );
    _SolidColorPtr GetColor ( );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Move (
        const _variant_t & Position );
    HRESULT Delete ( );
};

enum PsIntent
{
    psPerceptual = 1,
    psSaturation = 2,
    psRelativeColorimetric = 3,
    psAbsoluteColorimetric = 4
};

enum PsChangeMode
{
    psConvertToGrayscale = 1,
    psConvertToRGB = 2,
    psConvertToCMYK = 3,
    psConvertToLab = 4,
    psConvertToBitmap = 5,
    psConvertToIndexedColor = 6,
    psConvertToMultiChannel = 7
};

struct __declspec(uuid("288bc58e-ab6a-467c-b244-d225349e3eb3"))
Preferences : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSaveLogItems,put=PutSaveLogItems))
    enum PsSaveLogItemsType SaveLogItems;
    __declspec(property(get=GetEditLogItems,put=PutEditLogItems))
    enum PsEditLogItemsType EditLogItems;
    __declspec(property(get=GetSaveLogItemsFile,put=PutSaveLogItemsFile))
    _bstr_t SaveLogItemsFile;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetInterpolation,put=PutInterpolation))
    enum PsResampleMethod Interpolation;
    __declspec(property(get=GetColorPicker,put=PutColorPicker))
    enum PsColorPicker ColorPicker;
    __declspec(property(get=GetMaximizeCompatibility,put=PutMaximizeCompatibility))
    enum PsQueryStateType MaximizeCompatibility;
    __declspec(property(get=GetExportClipboard,put=PutExportClipboard))
    VARIANT_BOOL ExportClipboard;
    __declspec(property(get=GetShowToolTips,put=PutShowToolTips))
    VARIANT_BOOL ShowToolTips;
    __declspec(property(get=GetAutoUpdateOpenDocuments,put=PutAutoUpdateOpenDocuments))
    VARIANT_BOOL AutoUpdateOpenDocuments;
    __declspec(property(get=GetShowAsianTextOptions,put=PutShowAsianTextOptions))
    VARIANT_BOOL ShowAsianTextOptions;
    __declspec(property(get=GetBeepWhenDone,put=PutBeepWhenDone))
    VARIANT_BOOL BeepWhenDone;
    __declspec(property(get=GetDynamicColorSliders,put=PutDynamicColorSliders))
    VARIANT_BOOL DynamicColorSliders;
    __declspec(property(get=GetSavePaletteLocations,put=PutSavePaletteLocations))
    VARIANT_BOOL SavePaletteLocations;
    __declspec(property(get=GetShowEnglishFontNames,put=PutShowEnglishFontNames))
    VARIANT_BOOL ShowEnglishFontNames;
    __declspec(property(get=GetUseShiftKeyForToolSwitch,put=PutUseShiftKeyForToolSwitch))
    VARIANT_BOOL UseShiftKeyForToolSwitch;
    __declspec(property(get=GetNumberOfHistoryStates,put=PutNumberOfHistoryStates))
    long NumberOfHistoryStates;
    __declspec(property(get=GetImagePreviews,put=PutImagePreviews))
    enum PsSaveBehavior ImagePreviews;
    __declspec(property(get=GetUseLowerCaseExtension,put=PutUseLowerCaseExtension))
    VARIANT_BOOL UseLowerCaseExtension;
    __declspec(property(get=GetAskBeforeSavingLayeredTIFF,put=PutAskBeforeSavingLayeredTIFF))
    VARIANT_BOOL AskBeforeSavingLayeredTIFF;
    __declspec(property(get=GetRecentFileListLength,put=PutRecentFileListLength))
    long RecentFileListLength;
    __declspec(property(get=GetColorChannelsInColor,put=PutColorChannelsInColor))
    VARIANT_BOOL ColorChannelsInColor;
    __declspec(property(get=GetUseDiffusionDither,put=PutUseDiffusionDither))
    VARIANT_BOOL UseDiffusionDither;
    __declspec(property(get=GetPixelDoubling,put=PutPixelDoubling))
    VARIANT_BOOL PixelDoubling;
    __declspec(property(get=GetPaintingCursors,put=PutPaintingCursors))
    enum PsPaintingCursors PaintingCursors;
    __declspec(property(get=GetOtherCursors,put=PutOtherCursors))
    enum PsOtherPaintingCursors OtherCursors;
    __declspec(property(get=GetGridSize,put=PutGridSize))
    enum PsGridSize GridSize;
    __declspec(property(get=GetFontPreviewSize,put=PutFontPreviewSize))
    enum PsFontPreviewType FontPreviewSize;
    __declspec(property(get=GetUseVideoAlpha,put=PutUseVideoAlpha))
    VARIANT_BOOL UseVideoAlpha;
    __declspec(property(get=GetGamutWarningOpacity,put=PutGamutWarningOpacity))
    double GamutWarningOpacity;
    __declspec(property(get=GetRulerUnits,put=PutRulerUnits))
    enum PsUnits RulerUnits;
    __declspec(property(get=GetTypeUnits,put=PutTypeUnits))
    enum PsTypeUnits TypeUnits;
    __declspec(property(get=GetColumnWidth,put=PutColumnWidth))
    double ColumnWidth;
    __declspec(property(get=GetColumnGutter,put=PutColumnGutter))
    double ColumnGutter;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    enum PsPointType PointSize;
    __declspec(property(get=GetGuideStyle,put=PutGuideStyle))
    enum PsGuideLineStyle GuideStyle;
    __declspec(property(get=GetGridStyle,put=PutGridStyle))
    enum PsGridLineStyle GridStyle;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetGridSubDivisions,put=PutGridSubDivisions))
    long GridSubDivisions;
    __declspec(property(get=GetShowSliceNumber,put=PutShowSliceNumber))
    VARIANT_BOOL ShowSliceNumber;
    __declspec(property(get=GetAdditionalPluginFolder,put=PutAdditionalPluginFolder))
    _bstr_t AdditionalPluginFolder;
    __declspec(property(get=GetImageCacheLevels,put=PutImageCacheLevels))
    long ImageCacheLevels;
    __declspec(property(get=GetImageCacheForHistograms,put=PutImageCacheForHistograms))
    VARIANT_BOOL ImageCacheForHistograms;
    __declspec(property(get=GetCreateFirstSnapshot,put=PutCreateFirstSnapshot))
    VARIANT_BOOL CreateFirstSnapshot;
    __declspec(property(get=GetNonLinearHistory,put=PutNonLinearHistory))
    VARIANT_BOOL NonLinearHistory;
    __declspec(property(get=GetSmartQuotes,put=PutSmartQuotes))
    VARIANT_BOOL SmartQuotes;
    __declspec(property(get=GetUseAdditionalPluginFolder,put=PutUseAdditionalPluginFolder))
    VARIANT_BOOL UseAdditionalPluginFolder;
    __declspec(property(get=GetKeyboardZoomResizesWindows,put=PutKeyboardZoomResizesWindows))
    VARIANT_BOOL KeyboardZoomResizesWindows;
    __declspec(property(get=GetMaxRAMuse,put=PutMaxRAMuse))
    long MaxRAMuse;
    __declspec(property(get=GetUseHistoryLog,put=PutUseHistoryLog))
    VARIANT_BOOL UseHistoryLog;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum PsColorPicker GetColorPicker ( );
    void PutColorPicker (
        enum PsColorPicker _arg1 );
    enum PsResampleMethod GetInterpolation ( );
    void PutInterpolation (
        enum PsResampleMethod _arg1 );
    VARIANT_BOOL GetExportClipboard ( );
    void PutExportClipboard (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowToolTips ( );
    void PutShowToolTips (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetKeyboardZoomResizesWindows ( );
    void PutKeyboardZoomResizesWindows (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoUpdateOpenDocuments ( );
    void PutAutoUpdateOpenDocuments (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowAsianTextOptions ( );
    void PutShowAsianTextOptions (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBeepWhenDone ( );
    void PutBeepWhenDone (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDynamicColorSliders ( );
    void PutDynamicColorSliders (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSavePaletteLocations ( );
    void PutSavePaletteLocations (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowEnglishFontNames ( );
    void PutShowEnglishFontNames (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUseShiftKeyForToolSwitch ( );
    void PutUseShiftKeyForToolSwitch (
        VARIANT_BOOL _arg1 );
    long GetNumberOfHistoryStates ( );
    void PutNumberOfHistoryStates (
        long _arg1 );
    VARIANT_BOOL GetCreateFirstSnapshot ( );
    void PutCreateFirstSnapshot (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetNonLinearHistory ( );
    void PutNonLinearHistory (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSmartQuotes ( );
    void PutSmartQuotes (
        VARIANT_BOOL _arg1 );
    enum PsSaveBehavior GetImagePreviews ( );
    void PutImagePreviews (
        enum PsSaveBehavior _arg1 );
    VARIANT_BOOL GetUseLowerCaseExtension ( );
    void PutUseLowerCaseExtension (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAskBeforeSavingLayeredTIFF ( );
    void PutAskBeforeSavingLayeredTIFF (
        VARIANT_BOOL _arg1 );
    enum PsQueryStateType GetMaximizeCompatibility ( );
    void PutMaximizeCompatibility (
        enum PsQueryStateType _arg1 );
    long GetRecentFileListLength ( );
    void PutRecentFileListLength (
        long _arg1 );
    VARIANT_BOOL GetColorChannelsInColor ( );
    void PutColorChannelsInColor (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUseDiffusionDither ( );
    void PutUseDiffusionDither (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPixelDoubling ( );
    void PutPixelDoubling (
        VARIANT_BOOL _arg1 );
    enum PsPaintingCursors GetPaintingCursors ( );
    void PutPaintingCursors (
        enum PsPaintingCursors _arg1 );
    enum PsOtherPaintingCursors GetOtherCursors ( );
    void PutOtherCursors (
        enum PsOtherPaintingCursors _arg1 );
    enum PsGridSize GetGridSize ( );
    void PutGridSize (
        enum PsGridSize _arg1 );
    VARIANT_BOOL GetUseVideoAlpha ( );
    void PutUseVideoAlpha (
        VARIANT_BOOL _arg1 );
    double GetGamutWarningOpacity ( );
    void PutGamutWarningOpacity (
        double _arg1 );
    enum PsUnits GetRulerUnits ( );
    void PutRulerUnits (
        enum PsUnits _arg1 );
    enum PsTypeUnits GetTypeUnits ( );
    void PutTypeUnits (
        enum PsTypeUnits _arg1 );
    double GetColumnWidth ( );
    void PutColumnWidth (
        double _arg1 );
    double GetColumnGutter ( );
    void PutColumnGutter (
        double _arg1 );
    enum PsPointType GetPointSize ( );
    void PutPointSize (
        enum PsPointType _arg1 );
    enum PsGuideLineStyle GetGuideStyle ( );
    void PutGuideStyle (
        enum PsGuideLineStyle _arg1 );
    enum PsGridLineStyle GetGridStyle ( );
    void PutGridStyle (
        enum PsGridLineStyle _arg1 );
    long GetGridSubDivisions ( );
    void PutGridSubDivisions (
        long _arg1 );
    VARIANT_BOOL GetShowSliceNumber ( );
    void PutShowSliceNumber (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUseAdditionalPluginFolder ( );
    void PutUseAdditionalPluginFolder (
        VARIANT_BOOL _arg1 );
    _bstr_t GetAdditionalPluginFolder ( );
    void PutAdditionalPluginFolder (
        _bstr_t _arg1 );
    long GetImageCacheLevels ( );
    void PutImageCacheLevels (
        long _arg1 );
    VARIANT_BOOL GetImageCacheForHistograms ( );
    void PutImageCacheForHistograms (
        VARIANT_BOOL _arg1 );
    long GetMaxRAMuse ( );
    void PutMaxRAMuse (
        long _arg1 );
    VARIANT_BOOL GetUseHistoryLog ( );
    void PutUseHistoryLog (
        VARIANT_BOOL _arg1 );
    enum PsSaveLogItemsType GetSaveLogItems ( );
    void PutSaveLogItems (
        enum PsSaveLogItemsType _arg1 );
    enum PsEditLogItemsType GetEditLogItems ( );
    void PutEditLogItems (
        enum PsEditLogItemsType _arg1 );
    _bstr_t GetSaveLogItemsFile ( );
    void PutSaveLogItemsFile (
        _bstr_t _arg1 );
    enum PsFontPreviewType GetFontPreviewSize ( );
    void PutFontPreviewSize (
        enum PsFontPreviewType _arg1 );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
};

enum PsColorPicker
{
    psAdobeColorPicker = 1,
    psAppleColorPicker = 2,
    psWindowsColorPicker = 3,
    psPlugInColorPicker = 4
};

enum PsResampleMethod
{
    psNoResampling = 1,
    psNearestNeighbor = 2,
    psBilinear = 3,
    psBicubic = 4,
    psBicubicSharper = 5,
    psBicubicSmoother = 6
};

enum PsSaveBehavior
{
    psNeverSave = 1,
    psAlwaysSave = 2,
    psAskWhenSaving = 3
};

enum PsQueryStateType
{
    psAlways = 1,
    psAsk = 2,
    psNever = 3
};

enum PsPaintingCursors
{
    psStandard = 1,
    psPrecise = 2,
    psBrushSize = 3
};

enum PsOtherPaintingCursors
{
    psStandardOther = 1,
    psPreciseOther = 2
};

enum PsGridSize
{
    psNoGrid = 1,
    psSmallGrid = 2,
    psMediumGrid = 3,
    psLargeGrid = 4
};

enum PsUnits
{
    psPixels = 1,
    psInches = 2,
    psCM = 3,
    psMM = 4,
    psPoints = 5,
    psPicas = 6,
    psPercent = 7
};

enum PsTypeUnits
{
    psTypePixels = 1,
    psTypeMM = 4,
    psTypePoints = 5
};

enum PsPointType
{
    psPostScriptPoints = 1,
    psTraditionalPoints = 2
};

enum PsGuideLineStyle
{
    psGuideSolidLine = 1,
    psGuideDashedLine = 2
};

enum PsGridLineStyle
{
    psGridSolidLine = 1,
    psGridDashedLine = 2,
    psGridDottedLine = 3
};

enum PsSaveLogItemsType
{
    psMetadata = 1,
    psLogFile = 2,
    psLogFileAndMetadata = 3
};

enum PsEditLogItemsType
{
    psSessionOnly = 1,
    psConcise = 2,
    psDetailed = 3
};

enum PsFontPreviewType
{
    psFontPreviewNone = 0,
    psFontPreviewSmall = 1,
    psFontPreviewMedium = 2,
    psFontPreviewLarge = 3,
    psFontPreviewExtraLarge = 4,
    psFontPreviewHuge = 5
};

enum PsDialogModes
{
    psDisplayAllDialogs = 1,
    psDisplayErrorDialogs = 2,
    psDisplayNoDialogs = 3
};

struct __declspec(uuid("662506c7-6aae-4422-aca4-c63627cb1868"))
Documents : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    DocumentPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    DocumentPtr GetItem (
        const _variant_t & ItemKey );
    long Index (
        struct Document * ItemPtr );
    DocumentPtr Add (
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing,
        const _variant_t & Resolution = vtMissing,
        const _variant_t & Name = vtMissing,
        const _variant_t & Mode = vtMissing,
        const _variant_t & InitialFill = vtMissing,
        const _variant_t & PixelAspectRatio = vtMissing,
        const _variant_t & BitsPerChannel = vtMissing,
        const _variant_t & ColorProfileName = vtMissing );
};

struct __declspec(uuid("bbce52d6-5d4b-4691-99e3-62c174bd2855"))
TextFonts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    TextFontPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    TextFontPtr GetItem (
        const _variant_t & ItemKey );
    long Index (
        struct TextFont * ItemPtr );
};

struct __declspec(uuid("c88838e3-5a82-4ee7-a66c-e0360c9b0356"))
TextFont : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    _bstr_t Style;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPostScriptName))
    _bstr_t PostScriptName;
    __declspec(property(get=GetFamily))
    _bstr_t Family;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetName ( );
    _bstr_t GetPostScriptName ( );
    _bstr_t GetFamily ( );
    _bstr_t GetStyle ( );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
};

struct __declspec(uuid("861c9290-2a0c-4614-8606-706b31bfd45b"))
Notifiers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    NotifierPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HRESULT RemoveAll ( );
    NotifierPtr GetItem (
        const _variant_t & ItemKey );
    long Index (
        struct Notifier * ItemPtr );
    NotifierPtr Add (
        _bstr_t Event,
        _bstr_t EventFile,
        const _variant_t & EventClass = vtMissing );
};

struct __declspec(uuid("8b4f1f1e-4ed7-4291-ae61-76adf4d1d50b"))
Notifier : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEvent))
    _bstr_t Event;
    __declspec(property(get=GetEventFile))
    _bstr_t EventFile;
    __declspec(property(get=GetEventClass))
    _bstr_t EventClass;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetEvent ( );
    _bstr_t GetEventFile ( );
    _bstr_t GetEventClass ( );
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("84adbf06-8354-4b5c-9cb1-ea2565b66c7c"))
MeasurementLog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT ExportMeasurements (
        _bstr_t File,
        const _variant_t & Range = vtMissing,
        const _variant_t & DataPoints = vtMissing );
    HRESULT DeleteMeasurements (
        const _variant_t & Range = vtMissing );
};

enum PsPurgeTarget
{
    psUndoCaches = 1,
    psHistoryCaches = 2,
    psClipboardCache = 3,
    psAllCaches = 4
};

struct __declspec(uuid("70a60330-e866-46aa-a715-abf418c41453"))
_ActionDescriptor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _ActionDescriptorPtr ObjectValue;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _ActionDescriptor * _arg1 );
    void PutRefObjectValue (
        struct _ActionDescriptor * _arg1 );
    HRESULT Clear ( );
    HRESULT Erase (
        long Key );
    VARIANT_BOOL GetBoolean (
        long Key );
    long GetClass (
        long Key );
    double GetDouble (
        long Key );
    long GetEnumerationType (
        long Key );
    long GetEnumerationValue (
        long Key );
    long GetInteger (
        long Key );
    long GetLargeInteger (
        long Key );
    long GetKey (
        long Index );
    _ActionListPtr GetList (
        long Key );
    long GetObjectType (
        long Key );
    _ActionDescriptorPtr GetObjectValue (
        long Key );
    _bstr_t GetPath (
        long Key );
    _ActionReferencePtr GetReference (
        long Key );
    _bstr_t GetString (
        long Key );
    enum PsDescValueType GetType (
        long Key );
    long GetUnitDoubleType (
        long Key );
    double GetUnitDoubleValue (
        long Key );
    VARIANT_BOOL HasKey (
        long Key );
    VARIANT_BOOL IsEqual (
        struct _ActionDescriptor * OtherDesc );
    HRESULT PutBoolean (
        long Key,
        VARIANT_BOOL Value );
    HRESULT PutClass (
        long Key,
        long Value );
    HRESULT PutDouble (
        long Key,
        double Value );
    HRESULT PutEnumerated (
        long Key,
        long EnumType,
        long Value );
    HRESULT PutInteger (
        long Key,
        long Value );
    HRESULT PutLargeInteger (
        long Key,
        long Value );
    HRESULT PutList (
        long Key,
        struct _ActionList * Value );
    HRESULT PutObject (
        long Key,
        long ClassID,
        struct _ActionDescriptor * Value );
    HRESULT PutPath (
        long Key,
        _bstr_t Value );
    HRESULT PutReference (
        long Key,
        struct _ActionReference * Value );
    HRESULT PutString (
        long Key,
        _bstr_t Value );
    HRESULT PutUnitDouble (
        long Key,
        long UnitID,
        double Value );
};

struct __declspec(uuid("55031766-e456-4e54-a0d0-8e545601a2d8"))
_ActionList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _ActionListPtr ObjectValue;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _ActionList * _arg1 );
    void PutRefObjectValue (
        struct _ActionList * _arg1 );
    HRESULT Clear ( );
    VARIANT_BOOL GetBoolean (
        long Index );
    long GetClass (
        long Index );
    double GetDouble (
        long Index );
    long GetEnumerationType (
        long Index );
    long GetEnumerationValue (
        long Index );
    long GetInteger (
        long Index );
    long GetLargeInteger (
        long Index );
    _ActionListPtr GetList (
        long Index );
    long GetObjectType (
        long Index );
    _ActionDescriptorPtr GetObjectValue (
        long Index );
    _bstr_t GetPath (
        long Index );
    _ActionReferencePtr GetReference (
        long Index );
    _bstr_t GetString (
        long Index );
    enum PsDescValueType GetType (
        long Index );
    long GetUnitDoubleType (
        long Index );
    double GetUnitDoubleValue (
        long Index );
    HRESULT PutBoolean (
        VARIANT_BOOL Value );
    HRESULT PutClass (
        long Value );
    HRESULT PutDouble (
        double Value );
    HRESULT PutEnumerated (
        long EnumType,
        long Value );
    HRESULT PutInteger (
        long Value );
    HRESULT PutLargeInteger (
        long Value );
    HRESULT PutList (
        struct _ActionList * Value );
    HRESULT PutObject (
        long ClassID,
        struct _ActionDescriptor * Value );
    HRESULT PutPath (
        _bstr_t Value );
    HRESULT PutReference (
        struct _ActionReference * Value );
    HRESULT PutString (
        _bstr_t Value );
    HRESULT PutUnitDouble (
        long UnitID,
        double Value );
};

struct __declspec(uuid("dff407c7-3bcc-45ac-b6cc-ee6d52032d85"))
_ActionReference : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _ActionReferencePtr ObjectValue;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _ActionReference * _arg1 );
    void PutRefObjectValue (
        struct _ActionReference * _arg1 );
    _ActionReferencePtr GetContainer ( );
    long GetDesiredClass ( );
    long GetEnumeratedType ( );
    long GetEnumeratedValue ( );
    enum PsReferenceFormType GetForm ( );
    long GetIdentifier ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    long GetOffset ( );
    long GetProperty ( );
    HRESULT PutClass (
        long DesiredClass );
    HRESULT PutEnumerated (
        long DesiredClass,
        long EnumType,
        long Value );
    HRESULT PutIdentifier (
        long DesiredClass,
        long Value );
    HRESULT PutIndex (
        long DesiredClass,
        long Value );
    HRESULT PutName (
        long DesiredClass,
        _bstr_t Value );
    HRESULT PutOffset (
        long DesiredClass,
        long Value );
    HRESULT PutProperty (
        long DesiredClass,
        long Value );
};

enum PsReferenceFormType
{
    psReferenceNameType = 1,
    psReferenceIndexType = 2,
    psReferenceIdentifierType = 3,
    psReferenceOffsetType = 4,
    psReferenceEnumeratedType = 5,
    psReferencePropertyType = 6,
    psReferenceClassType = 7
};

enum PsDescValueType
{
    psIntegerType = 1,
    psDoubleType = 2,
    psUnitDoubleType = 3,
    psStringType = 4,
    psBooleanType = 5,
    psListType = 6,
    psObjectType = 7,
    psEnumeratedType = 8,
    psReferenceType = 9,
    psClassType = 10,
    psAliasType = 11,
    psRawType = 12,
    psLargeIntegerType = 13
};

struct __declspec(uuid("68f15227-7568-47e1-a4f8-5615c24bdd28"))
_PhotoCDOpenOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _PhotoCDOpenOptionsPtr ObjectValue;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum PsOrientation Orientation;
    __declspec(property(get=GetResolution,put=PutResolution))
    double Resolution;
    __declspec(property(get=GetColorProfileName,put=PutColorProfileName))
    _bstr_t ColorProfileName;
    __declspec(property(get=GetColorSpace,put=PutColorSpace))
    enum PsPhotoCDColorSpace ColorSpace;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetPixelSize,put=PutPixelSize))
    enum PsPhotoCDSize PixelSize;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum PsPhotoCDSize GetPixelSize ( );
    void PutPixelSize (
        enum PsPhotoCDSize _arg1 );
    _bstr_t GetColorProfileName ( );
    void PutColorProfileName (
        _bstr_t _arg1 );
    double GetResolution ( );
    void PutResolution (
        double _arg1 );
    enum PsPhotoCDColorSpace GetColorSpace ( );
    void PutColorSpace (
        enum PsPhotoCDColorSpace _arg1 );
    enum PsOrientation GetOrientation ( );
    void PutOrientation (
        enum PsOrientation _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _PhotoCDOpenOptions * _arg1 );
    void PutRefObjectValue (
        struct _PhotoCDOpenOptions * _arg1 );
};

enum PsPhotoCDSize
{
    psMinimumPhotoCD = 1,
    psSmallPhotoCD = 2,
    psMediumPhotoCD = 3,
    psLargePhotoCD = 4,
    psExtraLargePhotoCD = 5,
    psMaximumPhotoCD = 6
};

enum PsPhotoCDColorSpace
{
    psRGB8 = 1,
    psRGB16 = 2,
    psLab8 = 3,
    psLab16 = 4
};

enum PsOrientation
{
    psLandscape = 1,
    psPortrait = 2
};

struct __declspec(uuid("6b785d83-5b5f-4402-a712-baebd8c5b812"))
_RawFormatOpenOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _RawFormatOpenOptionsPtr ObjectValue;
    __declspec(property(get=GetRetainHeader,put=PutRetainHeader))
    VARIANT_BOOL RetainHeader;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetBitsPerChannel,put=PutBitsPerChannel))
    long BitsPerChannel;
    __declspec(property(get=GetChannelNumber,put=PutChannelNumber))
    long ChannelNumber;
    __declspec(property(get=GetByteOrder,put=PutByteOrder))
    enum PsByteOrderType ByteOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetInterleaveChannels,put=PutInterleaveChannels))
    VARIANT_BOOL InterleaveChannels;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetHeaderSize,put=PutHeaderSize))
    long HeaderSize;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetHeight ( );
    void PutHeight (
        long _arg1 );
    long GetWidth ( );
    void PutWidth (
        long _arg1 );
    long GetChannelNumber ( );
    void PutChannelNumber (
        long _arg1 );
    VARIANT_BOOL GetInterleaveChannels ( );
    void PutInterleaveChannels (
        VARIANT_BOOL _arg1 );
    long GetBitsPerChannel ( );
    void PutBitsPerChannel (
        long _arg1 );
    enum PsByteOrderType GetByteOrder ( );
    void PutByteOrder (
        enum PsByteOrderType _arg1 );
    long GetHeaderSize ( );
    void PutHeaderSize (
        long _arg1 );
    VARIANT_BOOL GetRetainHeader ( );
    void PutRetainHeader (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _RawFormatOpenOptions * _arg1 );
    void PutRefObjectValue (
        struct _RawFormatOpenOptions * _arg1 );
};

enum PsByteOrderType
{
    psIBMByteOrder = 1,
    psMacOSByteOrder = 2
};

struct __declspec(uuid("50d0174f-484d-4a2b-8bf0-a21b84167d82"))
_PDFOpenOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _PDFOpenOptionsPtr ObjectValue;
    __declspec(property(get=GetMode,put=PutMode))
    enum PsOpenDocumentMode Mode;
    __declspec(property(get=GetUsePageNumber,put=PutUsePageNumber))
    VARIANT_BOOL UsePageNumber;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetBitsPerChannel,put=PutBitsPerChannel))
    enum PsBitsPerChannelType BitsPerChannel;
    __declspec(property(get=GetResolution,put=PutResolution))
    double Resolution;
    __declspec(property(get=GetAntiAlias,put=PutAntiAlias))
    VARIANT_BOOL AntiAlias;
    __declspec(property(get=GetPage,put=PutPage))
    long Page;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetConstrainProportions,put=PutConstrainProportions))
    VARIANT_BOOL ConstrainProportions;
    __declspec(property(get=GetCropPage,put=PutCropPage))
    enum PsCropToType CropPage;
    __declspec(property(get=GetSuppressWarnings,put=PutSuppressWarnings))
    VARIANT_BOOL SuppressWarnings;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetResolution ( );
    void PutResolution (
        double _arg1 );
    enum PsOpenDocumentMode GetMode ( );
    void PutMode (
        enum PsOpenDocumentMode _arg1 );
    VARIANT_BOOL GetAntiAlias ( );
    void PutAntiAlias (
        VARIANT_BOOL _arg1 );
    long GetPage ( );
    void PutPage (
        long _arg1 );
    VARIANT_BOOL GetConstrainProportions ( );
    void PutConstrainProportions (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    enum PsBitsPerChannelType GetBitsPerChannel ( );
    void PutBitsPerChannel (
        enum PsBitsPerChannelType _arg1 );
    VARIANT_BOOL GetUsePageNumber ( );
    void PutUsePageNumber (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    enum PsCropToType GetCropPage ( );
    void PutCropPage (
        enum PsCropToType _arg1 );
    VARIANT_BOOL GetSuppressWarnings ( );
    void PutSuppressWarnings (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _PDFOpenOptions * _arg1 );
    void PutRefObjectValue (
        struct _PDFOpenOptions * _arg1 );
};

enum PsOpenDocumentMode
{
    psOpenGray = 1,
    psOpenRGB = 2,
    psOpenCMYK = 3,
    psOpenLab = 4
};

enum PsCropToType
{
    psBoundingBox = 0,
    psMediaBox = 1,
    psCropBox = 2,
    psBleedBox = 3,
    psTrimBox = 4,
    psArtBox = 5
};

struct __declspec(uuid("f715c957-54ce-4e55-9856-591d4cd082fd"))
_EPSOpenOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _EPSOpenOptionsPtr ObjectValue;
    __declspec(property(get=GetMode,put=PutMode))
    enum PsOpenDocumentMode Mode;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetResolution,put=PutResolution))
    double Resolution;
    __declspec(property(get=GetAntiAlias,put=PutAntiAlias))
    VARIANT_BOOL AntiAlias;
    __declspec(property(get=GetConstrainProportions,put=PutConstrainProportions))
    VARIANT_BOOL ConstrainProportions;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    double GetResolution ( );
    void PutResolution (
        double _arg1 );
    enum PsOpenDocumentMode GetMode ( );
    void PutMode (
        enum PsOpenDocumentMode _arg1 );
    VARIANT_BOOL GetAntiAlias ( );
    void PutAntiAlias (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetConstrainProportions ( );
    void PutConstrainProportions (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _EPSOpenOptions * _arg1 );
    void PutRefObjectValue (
        struct _EPSOpenOptions * _arg1 );
};

struct __declspec(uuid("ee8364d9-b811-4c7d-a3a8-97c4ebfab83a"))
_DICOMOpenOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _DICOMOpenOptionsPtr ObjectValue;
    __declspec(property(get=GetReverse,put=PutReverse))
    VARIANT_BOOL Reverse;
    __declspec(property(get=GetAnonymize,put=PutAnonymize))
    VARIANT_BOOL Anonymize;
    __declspec(property(get=GetColumns,put=PutColumns))
    long Columns;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetRows,put=PutRows))
    long Rows;
    __declspec(property(get=GetWindowWidth,put=PutWindowWidth))
    long WindowWidth;
    __declspec(property(get=GetWindowLevel,put=PutWindowLevel))
    long WindowLevel;
    __declspec(property(get=GetShowOverlays,put=PutShowOverlays))
    VARIANT_BOOL ShowOverlays;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetAnonymize ( );
    void PutAnonymize (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowOverlays ( );
    void PutShowOverlays (
        VARIANT_BOOL _arg1 );
    long GetRows ( );
    void PutRows (
        long _arg1 );
    long GetColumns ( );
    void PutColumns (
        long _arg1 );
    long GetWindowWidth ( );
    void PutWindowWidth (
        long _arg1 );
    long GetWindowLevel ( );
    void PutWindowLevel (
        long _arg1 );
    VARIANT_BOOL GetReverse ( );
    void PutReverse (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _DICOMOpenOptions * _arg1 );
    void PutRefObjectValue (
        struct _DICOMOpenOptions * _arg1 );
};

struct __declspec(uuid("65d1b010-0d87-481c-b2e6-22efb5a54129"))
_CameraRAWOpenOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSharpness,put=PutSharpness))
    long Sharpness;
    __declspec(property(get=GetLuminanceSmoothing,put=PutLuminanceSmoothing))
    long LuminanceSmoothing;
    __declspec(property(get=GetSaturation,put=PutSaturation))
    long Saturation;
    __declspec(property(get=GetColorNoiseReduction,put=PutColorNoiseReduction))
    long ColorNoiseReduction;
    __declspec(property(get=GetChromaticAberrationRC,put=PutChromaticAberrationRC))
    long ChromaticAberrationRC;
    __declspec(property(get=GetChromaticAberrationBY,put=PutChromaticAberrationBY))
    long ChromaticAberrationBY;
    __declspec(property(get=GetVignettingAmount,put=PutVignettingAmount))
    long VignettingAmount;
    __declspec(property(get=GetShadowTint,put=PutShadowTint))
    long ShadowTint;
    __declspec(property(get=GetRedHue,put=PutRedHue))
    long RedHue;
    __declspec(property(get=GetVignettingMidpoint,put=PutVignettingMidpoint))
    long VignettingMidpoint;
    __declspec(property(get=GetRedSaturation,put=PutRedSaturation))
    long RedSaturation;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetWhiteBalance,put=PutWhiteBalance))
    enum PsWhiteBalanceType WhiteBalance;
    __declspec(property(get=GetTemperature,put=PutTemperature))
    long Temperature;
    __declspec(property(get=GetTint,put=PutTint))
    long Tint;
    __declspec(property(get=GetExposure,put=PutExposure))
    double Exposure;
    __declspec(property(get=GetBitsPerChannel,put=PutBitsPerChannel))
    enum PsBitsPerChannelType BitsPerChannel;
    __declspec(property(get=GetShadows,put=PutShadows))
    long Shadows;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    long Brightness;
    __declspec(property(get=GetContrast,put=PutContrast))
    long Contrast;
    __declspec(property(get=GetColorSpace,put=PutColorSpace))
    enum PsColorSpaceType ColorSpace;
    __declspec(property(put=PutRefObjectValue))
    _CameraRAWOpenOptionsPtr ObjectValue;
    __declspec(property(get=GetSettings,put=PutSettings))
    enum PsCameraRAWSettingsType Settings;
    __declspec(property(get=GetResolution,put=PutResolution))
    double Resolution;
    __declspec(property(get=GetGreenHue,put=PutGreenHue))
    long GreenHue;
    __declspec(property(get=GetSize,put=PutSize))
    enum PsCameraRAWSize Size;
    __declspec(property(get=GetGreenSaturation,put=PutGreenSaturation))
    long GreenSaturation;
    __declspec(property(get=GetBlueHue,put=PutBlueHue))
    long BlueHue;
    __declspec(property(get=GetBlueSaturation,put=PutBlueSaturation))
    long BlueSaturation;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum PsColorSpaceType GetColorSpace ( );
    void PutColorSpace (
        enum PsColorSpaceType _arg1 );
    enum PsBitsPerChannelType GetBitsPerChannel ( );
    void PutBitsPerChannel (
        enum PsBitsPerChannelType _arg1 );
    enum PsCameraRAWSize GetSize ( );
    void PutSize (
        enum PsCameraRAWSize _arg1 );
    double GetResolution ( );
    void PutResolution (
        double _arg1 );
    enum PsCameraRAWSettingsType GetSettings ( );
    void PutSettings (
        enum PsCameraRAWSettingsType _arg1 );
    enum PsWhiteBalanceType GetWhiteBalance ( );
    void PutWhiteBalance (
        enum PsWhiteBalanceType _arg1 );
    long GetTemperature ( );
    void PutTemperature (
        long _arg1 );
    long GetTint ( );
    void PutTint (
        long _arg1 );
    double GetExposure ( );
    void PutExposure (
        double _arg1 );
    long GetShadows ( );
    void PutShadows (
        long _arg1 );
    long GetBrightness ( );
    void PutBrightness (
        long _arg1 );
    long GetContrast ( );
    void PutContrast (
        long _arg1 );
    long GetSaturation ( );
    void PutSaturation (
        long _arg1 );
    long GetSharpness ( );
    void PutSharpness (
        long _arg1 );
    long GetLuminanceSmoothing ( );
    void PutLuminanceSmoothing (
        long _arg1 );
    long GetColorNoiseReduction ( );
    void PutColorNoiseReduction (
        long _arg1 );
    long GetChromaticAberrationRC ( );
    void PutChromaticAberrationRC (
        long _arg1 );
    long GetChromaticAberrationBY ( );
    void PutChromaticAberrationBY (
        long _arg1 );
    long GetVignettingAmount ( );
    void PutVignettingAmount (
        long _arg1 );
    long GetVignettingMidpoint ( );
    void PutVignettingMidpoint (
        long _arg1 );
    long GetShadowTint ( );
    void PutShadowTint (
        long _arg1 );
    long GetRedHue ( );
    void PutRedHue (
        long _arg1 );
    long GetRedSaturation ( );
    void PutRedSaturation (
        long _arg1 );
    long GetGreenHue ( );
    void PutGreenHue (
        long _arg1 );
    long GetGreenSaturation ( );
    void PutGreenSaturation (
        long _arg1 );
    long GetBlueHue ( );
    void PutBlueHue (
        long _arg1 );
    long GetBlueSaturation ( );
    void PutBlueSaturation (
        long _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _CameraRAWOpenOptions * _arg1 );
    void PutRefObjectValue (
        struct _CameraRAWOpenOptions * _arg1 );
};

enum PsColorSpaceType
{
    psAdobeRGB = 0,
    psColorMatchRGB = 1,
    psProPhotoRGB = 2,
    psSRGB = 3
};

enum PsCameraRAWSize
{
    psMinimumCameraRAW = 0,
    psSmallCameraRAW = 1,
    psMediumCameraRAW = 2,
    psLargeCameraRAW = 3,
    psExtraLargeCameraRAW = 4,
    psMaximumCameraRAW = 5
};

enum PsCameraRAWSettingsType
{
    psCameraDefault = 0,
    psSelectedImage = 1,
    psCustomSettings = 2
};

enum PsWhiteBalanceType
{
    psAsShot = 0,
    psAuto = 1,
    psDaylight = 2,
    psCloudy = 3,
    psShade = 4,
    psTungsten = 5,
    psFluorescent = 6,
    psFlash = 7,
    psCustomCameraSettings = 8
};

struct __declspec(uuid("436ce722-7369-4395-acc2-2de7a09269df"))
_PhotoshopSaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _PhotoshopSaveOptionsPtr ObjectValue;
    __declspec(property(get=GetAlphaChannels,put=PutAlphaChannels))
    VARIANT_BOOL AlphaChannels;
    __declspec(property(get=GetAnnotations,put=PutAnnotations))
    VARIANT_BOOL Annotations;
    __declspec(property(get=GetEmbedColorProfile,put=PutEmbedColorProfile))
    VARIANT_BOOL EmbedColorProfile;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLayers,put=PutLayers))
    VARIANT_BOOL Layers;
    __declspec(property(get=GetSpotColors,put=PutSpotColors))
    VARIANT_BOOL SpotColors;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetAlphaChannels ( );
    void PutAlphaChannels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLayers ( );
    void PutLayers (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAnnotations ( );
    void PutAnnotations (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSpotColors ( );
    void PutSpotColors (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEmbedColorProfile ( );
    void PutEmbedColorProfile (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _PhotoshopSaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _PhotoshopSaveOptions * _arg1 );
};

struct __declspec(uuid("4d40be2d-fe11-4060-b52a-de31c837d51d"))
_BMPSaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _BMPSaveOptionsPtr ObjectValue;
    __declspec(property(get=GetAlphaChannels,put=PutAlphaChannels))
    VARIANT_BOOL AlphaChannels;
    __declspec(property(get=GetRLECompression,put=PutRLECompression))
    VARIANT_BOOL RLECompression;
    __declspec(property(get=GetDepth,put=PutDepth))
    enum PsBMPDepthType Depth;
    __declspec(property(get=GetFlipRowOrder,put=PutFlipRowOrder))
    VARIANT_BOOL FlipRowOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetOSType,put=PutOSType))
    enum PsOperatingSystem OSType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetAlphaChannels ( );
    void PutAlphaChannels (
        VARIANT_BOOL _arg1 );
    enum PsOperatingSystem GetOSType ( );
    void PutOSType (
        enum PsOperatingSystem _arg1 );
    enum PsBMPDepthType GetDepth ( );
    void PutDepth (
        enum PsBMPDepthType _arg1 );
    VARIANT_BOOL GetRLECompression ( );
    void PutRLECompression (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFlipRowOrder ( );
    void PutFlipRowOrder (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _BMPSaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _BMPSaveOptions * _arg1 );
};

enum PsOperatingSystem
{
    psOS2 = 1,
    psWindows = 2
};

enum PsBMPDepthType
{
    psBMP1Bit = 1,
    psBMP4Bits = 4,
    psBMP8Bits = 8,
    psBMP16Bits = 16,
    psBMP24Bits = 24,
    psBMP32Bits = 32,
    psBMP_X1R5G5B5 = 60,
    psBMP_A1R5G5B5 = 61,
    psBMP_R5G6B5 = 62,
    psBMP_X4R4G4B4 = 63,
    psBMP_A4R4G4B4 = 64,
    psBMP_R8G8B8 = 65,
    psBMP_X8R8G8B8 = 66,
    psBMP_A8R8G8B8 = 67
};

struct __declspec(uuid("89417281-e1af-4800-b82a-9f37ed0478ef"))
_GIFSaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _GIFSaveOptionsPtr ObjectValue;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    VARIANT_BOOL Transparency;
    __declspec(property(get=GetMatte,put=PutMatte))
    enum PsMatteType Matte;
    __declspec(property(get=GetForced,put=PutForced))
    enum PsForcedColors Forced;
    __declspec(property(get=GetDitherAmount,put=PutDitherAmount))
    long DitherAmount;
    __declspec(property(get=GetColors,put=PutColors))
    long Colors;
    __declspec(property(get=GetDither,put=PutDither))
    enum PsDitherType Dither;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetInterlaced,put=PutInterlaced))
    VARIANT_BOOL Interlaced;
    __declspec(property(get=GetPalette,put=PutPalette))
    enum PsPaletteType Palette;
    __declspec(property(get=GetPreserveExactColors,put=PutPreserveExactColors))
    VARIANT_BOOL PreserveExactColors;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetColors ( );
    void PutColors (
        long _arg1 );
    enum PsDitherType GetDither ( );
    void PutDither (
        enum PsDitherType _arg1 );
    long GetDitherAmount ( );
    void PutDitherAmount (
        long _arg1 );
    enum PsForcedColors GetForced ( );
    void PutForced (
        enum PsForcedColors _arg1 );
    VARIANT_BOOL GetInterlaced ( );
    void PutInterlaced (
        VARIANT_BOOL _arg1 );
    enum PsMatteType GetMatte ( );
    void PutMatte (
        enum PsMatteType _arg1 );
    enum PsPaletteType GetPalette ( );
    void PutPalette (
        enum PsPaletteType _arg1 );
    VARIANT_BOOL GetPreserveExactColors ( );
    void PutPreserveExactColors (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTransparency ( );
    void PutTransparency (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _GIFSaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _GIFSaveOptions * _arg1 );
};

enum PsDitherType
{
    psNoDither = 1,
    psDiffusion = 2,
    psPattern = 3,
    psNoise = 4
};

enum PsForcedColors
{
    psNoForced = 1,
    psBlackWhite = 2,
    psPrimaries = 3,
    psWeb = 4
};

enum PsMatteType
{
    psNoMatte = 1,
    psForegroundColorMatte = 2,
    psBackgroundColorMatte = 3,
    psWhiteMatte = 4,
    psBlackMatte = 5,
    psSemiGray = 6,
    psNetscapeGrayMatte = 7
};

enum PsPaletteType
{
    psExact = 1,
    psMacOSPalette = 2,
    psWindowsPalette = 3,
    psWebPalette = 4,
    psUniform = 5,
    psLocalPerceptual = 6,
    psLocalSelective = 7,
    psLocalAdaptive = 8,
    psMasterPerceptual = 9,
    psMasterSelective = 10,
    psMasterAdaptive = 11,
    psPreviousPalette = 12
};

struct __declspec(uuid("d54491ef-6f09-4de3-b49a-d57edb2f40b8"))
_EPSSaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _EPSSaveOptionsPtr ObjectValue;
    __declspec(property(get=GetPreview,put=PutPreview))
    enum PsPreviewType Preview;
    __declspec(property(get=GetEncoding,put=PutEncoding))
    enum PsSaveEncoding Encoding;
    __declspec(property(get=GetTransparentWhites,put=PutTransparentWhites))
    VARIANT_BOOL TransparentWhites;
    __declspec(property(get=GetPSColorManagement,put=PutPSColorManagement))
    VARIANT_BOOL PSColorManagement;
    __declspec(property(get=GetHalftoneScreen,put=PutHalftoneScreen))
    VARIANT_BOOL HalftoneScreen;
    __declspec(property(get=GetEmbedColorProfile,put=PutEmbedColorProfile))
    VARIANT_BOOL EmbedColorProfile;
    __declspec(property(get=GetInterpolation,put=PutInterpolation))
    VARIANT_BOOL Interpolation;
    __declspec(property(get=GetTransferFunction,put=PutTransferFunction))
    VARIANT_BOOL TransferFunction;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetVectorData,put=PutVectorData))
    VARIANT_BOOL VectorData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetEmbedColorProfile ( );
    void PutEmbedColorProfile (
        VARIANT_BOOL _arg1 );
    enum PsPreviewType GetPreview ( );
    void PutPreview (
        enum PsPreviewType _arg1 );
    enum PsSaveEncoding GetEncoding ( );
    void PutEncoding (
        enum PsSaveEncoding _arg1 );
    VARIANT_BOOL GetHalftoneScreen ( );
    void PutHalftoneScreen (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTransferFunction ( );
    void PutTransferFunction (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPSColorManagement ( );
    void PutPSColorManagement (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetVectorData ( );
    void PutVectorData (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetInterpolation ( );
    void PutInterpolation (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTransparentWhites ( );
    void PutTransparentWhites (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _EPSSaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _EPSSaveOptions * _arg1 );
};

enum PsPreviewType
{
    psNoPreview = 1,
    psMonochromeTIFF = 2,
    psEightBitTIFF = 3
};

enum PsSaveEncoding
{
    psAscii = 3,
    psBinary = 1,
    psJPEGLow = 2,
    psJPEGMedium = 4,
    psJPEGHigh = 5,
    psJPEGMaximum = 6
};

struct __declspec(uuid("5148663b-f632-4ab0-9484-2dbc197cea82"))
_JPEGSaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _JPEGSaveOptionsPtr ObjectValue;
    __declspec(property(get=GetMatte,put=PutMatte))
    enum PsMatteType Matte;
    __declspec(property(get=GetEmbedColorProfile,put=PutEmbedColorProfile))
    VARIANT_BOOL EmbedColorProfile;
    __declspec(property(get=GetFormatOptions,put=PutFormatOptions))
    enum PsFormatOptionsType FormatOptions;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetScans,put=PutScans))
    long Scans;
    __declspec(property(get=GetQuality,put=PutQuality))
    long Quality;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetEmbedColorProfile ( );
    void PutEmbedColorProfile (
        VARIANT_BOOL _arg1 );
    enum PsFormatOptionsType GetFormatOptions ( );
    void PutFormatOptions (
        enum PsFormatOptionsType _arg1 );
    enum PsMatteType GetMatte ( );
    void PutMatte (
        enum PsMatteType _arg1 );
    long GetScans ( );
    void PutScans (
        long _arg1 );
    long GetQuality ( );
    void PutQuality (
        long _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _JPEGSaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _JPEGSaveOptions * _arg1 );
};

enum PsFormatOptionsType
{
    psStandardBaseline = 1,
    psOptimizedBaseline = 2,
    psProgressive = 3
};

struct __declspec(uuid("f867e6c9-b5db-4c5a-b3ba-63224d08a01b"))
_PDFSaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _PDFSaveOptionsPtr ObjectValue;
    __declspec(property(get=GetSpotColors,put=PutSpotColors))
    VARIANT_BOOL SpotColors;
    __declspec(property(get=GetVectorData,put=PutVectorData))
    VARIANT_BOOL VectorData;
    __declspec(property(get=GetTileSize,put=PutTileSize))
    long TileSize;
    __declspec(property(get=GetConvertToEightBit,put=PutConvertToEightBit))
    VARIANT_BOOL ConvertToEightBit;
    __declspec(property(get=GetDestinationProfile,put=PutDestinationProfile))
    _bstr_t DestinationProfile;
    __declspec(property(get=GetOutputCondition,put=PutOutputCondition))
    _bstr_t OutputCondition;
    __declspec(property(get=GetAnnotations,put=PutAnnotations))
    VARIANT_BOOL Annotations;
    __declspec(property(get=GetLayers,put=PutLayers))
    VARIANT_BOOL Layers;
    __declspec(property(get=GetOptimizeForWeb,put=PutOptimizeForWeb))
    VARIANT_BOOL OptimizeForWeb;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetDownSampleSize,put=PutDownSampleSize))
    double DownSampleSize;
    __declspec(property(get=GetDownSampleSizeLimit,put=PutDownSampleSizeLimit))
    double DownSampleSizeLimit;
    __declspec(property(get=GetOutputConditionID,put=PutOutputConditionID))
    _bstr_t OutputConditionID;
    __declspec(property(get=GetRegistryName,put=PutRegistryName))
    _bstr_t RegistryName;
    __declspec(property(get=GetColorConversion,put=PutColorConversion))
    VARIANT_BOOL ColorConversion;
    __declspec(property(get=GetProfileInclusionPolicy,put=PutProfileInclusionPolicy))
    VARIANT_BOOL ProfileInclusionPolicy;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    VARIANT_BOOL Transparency;
    __declspec(property(get=GetEncoding,put=PutEncoding))
    enum PsPDFEncodingType Encoding;
    __declspec(property(get=GetView,put=PutView))
    VARIANT_BOOL View;
    __declspec(property(get=GetJPEGQuality,put=PutJPEGQuality))
    long JPEGQuality;
    __declspec(property(get=GetEmbedFonts,put=PutEmbedFonts))
    VARIANT_BOOL EmbedFonts;
    __declspec(property(get=GetPDFStandard,put=PutPDFStandard))
    enum PsPDFStandardType PDFStandard;
    __declspec(property(get=GetPDFCompatibility,put=PutPDFCompatibility))
    enum PsPDFCompatibilityType PDFCompatibility;
    __declspec(property(get=GetEmbedColorProfile,put=PutEmbedColorProfile))
    VARIANT_BOOL EmbedColorProfile;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetDowngradeColorProfile,put=PutDowngradeColorProfile))
    VARIANT_BOOL DowngradeColorProfile;
    __declspec(property(get=GetPresetFile,put=PutPresetFile))
    _bstr_t PresetFile;
    __declspec(property(get=GetInterpolation,put=PutInterpolation))
    VARIANT_BOOL Interpolation;
    __declspec(property(get=GetUseOutlines,put=PutUseOutlines))
    VARIANT_BOOL UseOutlines;
    __declspec(property(get=GetPreserveEditing,put=PutPreserveEditing))
    VARIANT_BOOL PreserveEditing;
    __declspec(property(get=GetEmbedThumbnail,put=PutEmbedThumbnail))
    VARIANT_BOOL EmbedThumbnail;
    __declspec(property(get=GetDownSample,put=PutDownSample))
    enum PsPDFResampleType DownSample;
    __declspec(property(get=GetAlphaChannels,put=PutAlphaChannels))
    VARIANT_BOOL AlphaChannels;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetAlphaChannels ( );
    void PutAlphaChannels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLayers ( );
    void PutLayers (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAnnotations ( );
    void PutAnnotations (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSpotColors ( );
    void PutSpotColors (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEmbedColorProfile ( );
    void PutEmbedColorProfile (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDowngradeColorProfile ( );
    void PutDowngradeColorProfile (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTransparency ( );
    void PutTransparency (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetInterpolation ( );
    void PutInterpolation (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetVectorData ( );
    void PutVectorData (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEmbedFonts ( );
    void PutEmbedFonts (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUseOutlines ( );
    void PutUseOutlines (
        VARIANT_BOOL _arg1 );
    enum PsPDFEncodingType GetEncoding ( );
    void PutEncoding (
        enum PsPDFEncodingType _arg1 );
    long GetJPEGQuality ( );
    void PutJPEGQuality (
        long _arg1 );
    _bstr_t GetPresetFile ( );
    void PutPresetFile (
        _bstr_t _arg1 );
    enum PsPDFStandardType GetPDFStandard ( );
    void PutPDFStandard (
        enum PsPDFStandardType _arg1 );
    enum PsPDFCompatibilityType GetPDFCompatibility ( );
    void PutPDFCompatibility (
        enum PsPDFCompatibilityType _arg1 );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t _arg1 );
    VARIANT_BOOL GetPreserveEditing ( );
    void PutPreserveEditing (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEmbedThumbnail ( );
    void PutEmbedThumbnail (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetOptimizeForWeb ( );
    void PutOptimizeForWeb (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetView ( );
    void PutView (
        VARIANT_BOOL _arg1 );
    enum PsPDFResampleType GetDownSample ( );
    void PutDownSample (
        enum PsPDFResampleType _arg1 );
    double GetDownSampleSize ( );
    void PutDownSampleSize (
        double _arg1 );
    double GetDownSampleSizeLimit ( );
    void PutDownSampleSizeLimit (
        double _arg1 );
    long GetTileSize ( );
    void PutTileSize (
        long _arg1 );
    VARIANT_BOOL GetConvertToEightBit ( );
    void PutConvertToEightBit (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetColorConversion ( );
    void PutColorConversion (
        VARIANT_BOOL _arg1 );
    _bstr_t GetDestinationProfile ( );
    void PutDestinationProfile (
        _bstr_t _arg1 );
    VARIANT_BOOL GetProfileInclusionPolicy ( );
    void PutProfileInclusionPolicy (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOutputCondition ( );
    void PutOutputCondition (
        _bstr_t _arg1 );
    _bstr_t GetOutputConditionID ( );
    void PutOutputConditionID (
        _bstr_t _arg1 );
    _bstr_t GetRegistryName ( );
    void PutRegistryName (
        _bstr_t _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _PDFSaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _PDFSaveOptions * _arg1 );
};

enum PsPDFEncodingType
{
    psPDFNone = 0,
    psPDFZip = 1,
    psPDFJPEG = 2,
    psPDFZip4Bit = 3,
    psPDFJPEGHIGH = 4,
    psPDFJPEGMEDHIGH = 5,
    psPDFJPEGMED = 6,
    psPDFJPEGMEDLOW = 7,
    psPDFJPEGLOW = 8,
    psPDFJPEG2000HIGH = 9,
    psPDFJPEG2000MEDHIGH = 10,
    psPDFJPEG2000MED = 11,
    psPDFJPEG2000MEDLOW = 12,
    psPDFJPEG2000LOW = 13,
    psPDFJPEG2000LOSSLESS = 14
};

enum PsPDFStandardType
{
    psNoStandard = 0,
    psPDFX1A2001 = 1,
    psPDFX1A2003 = 2,
    psPDFX32002 = 3,
    psPDFX32003 = 4,
    psPDFX42008 = 5
};

enum PsPDFCompatibilityType
{
    psPDF13 = 1,
    psPDF14 = 2,
    psPDF15 = 3,
    psPDF16 = 4,
    psPDF17 = 5
};

enum PsPDFResampleType
{
    psNoResample = 0,
    psPDFAverage = 1,
    psPDFSubSample = 2,
    psPDFBicubic = 3
};

struct __declspec(uuid("d334a509-00f8-4092-a9af-6e1176d06536"))
_PICTFileSaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _PICTFileSaveOptionsPtr ObjectValue;
    __declspec(property(get=GetAlphaChannels,put=PutAlphaChannels))
    VARIANT_BOOL AlphaChannels;
    __declspec(property(get=GetResolution,put=PutResolution))
    enum PsPICTBitsPerPixels Resolution;
    __declspec(property(get=GetEmbedColorProfile,put=PutEmbedColorProfile))
    VARIANT_BOOL EmbedColorProfile;
    __declspec(property(get=GetCompression,put=PutCompression))
    enum PsPICTCompression Compression;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetAlphaChannels ( );
    void PutAlphaChannels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEmbedColorProfile ( );
    void PutEmbedColorProfile (
        VARIANT_BOOL _arg1 );
    enum PsPICTBitsPerPixels GetResolution ( );
    void PutResolution (
        enum PsPICTBitsPerPixels _arg1 );
    enum PsPICTCompression GetCompression ( );
    void PutCompression (
        enum PsPICTCompression _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _PICTFileSaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _PICTFileSaveOptions * _arg1 );
};

enum PsPICTBitsPerPixels
{
    psPICT2Bits = 2,
    psPICT4Bits = 4,
    psPICT8Bits = 8,
    psPICT16Bits = 16,
    psPICT32Bits = 32
};

enum PsPICTCompression
{
    psNoPICTCompression = 1,
    psJPEGLowPICT = 2,
    psJPEGMediumPICT = 4,
    psJPEGHighPICT = 5,
    psJPEGMaximumPICT = 6
};

struct __declspec(uuid("94c016cd-178f-4fd7-85bb-f5925a34a122"))
_PixarSaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _PixarSaveOptionsPtr ObjectValue;
    __declspec(property(get=GetAlphaChannels,put=PutAlphaChannels))
    VARIANT_BOOL AlphaChannels;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetAlphaChannels ( );
    void PutAlphaChannels (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _PixarSaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _PixarSaveOptions * _arg1 );
};

struct __declspec(uuid("478bf855-e42a-4d63-8c9d-f562de5ff7a8"))
_PNGSaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _PNGSaveOptionsPtr ObjectValue;
    __declspec(property(get=GetCompression,put=PutCompression))
    long Compression;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetInterlaced,put=PutInterlaced))
    VARIANT_BOOL Interlaced;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetInterlaced ( );
    void PutInterlaced (
        VARIANT_BOOL _arg1 );
    long GetCompression ( );
    void PutCompression (
        long _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _PNGSaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _PNGSaveOptions * _arg1 );
};

struct __declspec(uuid("d74b820f-aa86-42dd-8d85-f4d67a62f200"))
_RawSaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _RawSaveOptionsPtr ObjectValue;
    __declspec(property(get=GetAlphaChannels,put=PutAlphaChannels))
    VARIANT_BOOL AlphaChannels;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetSpotColors,put=PutSpotColors))
    VARIANT_BOOL SpotColors;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetAlphaChannels ( );
    void PutAlphaChannels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSpotColors ( );
    void PutSpotColors (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _RawSaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _RawSaveOptions * _arg1 );
};

struct __declspec(uuid("01cd87de-1f53-485d-a096-0d318611ab6d"))
_SGIRGBSaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _SGIRGBSaveOptionsPtr ObjectValue;
    __declspec(property(get=GetAlphaChannels,put=PutAlphaChannels))
    VARIANT_BOOL AlphaChannels;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetSpotColors,put=PutSpotColors))
    VARIANT_BOOL SpotColors;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetAlphaChannels ( );
    void PutAlphaChannels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSpotColors ( );
    void PutSpotColors (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _SGIRGBSaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _SGIRGBSaveOptions * _arg1 );
};

struct __declspec(uuid("f4e21694-aebf-44fb-90ab-eecd58c1b6f3"))
_TargaSaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _TargaSaveOptionsPtr ObjectValue;
    __declspec(property(get=GetAlphaChannels,put=PutAlphaChannels))
    VARIANT_BOOL AlphaChannels;
    __declspec(property(get=GetRLECompression,put=PutRLECompression))
    VARIANT_BOOL RLECompression;
    __declspec(property(get=GetResolution,put=PutResolution))
    enum PsTargaBitsPerPixels Resolution;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum PsTargaBitsPerPixels GetResolution ( );
    void PutResolution (
        enum PsTargaBitsPerPixels _arg1 );
    VARIANT_BOOL GetRLECompression ( );
    void PutRLECompression (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAlphaChannels ( );
    void PutAlphaChannels (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _TargaSaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _TargaSaveOptions * _arg1 );
};

enum PsTargaBitsPerPixels
{
    psTarga16Bits = 16,
    psTarga24Bits = 24,
    psTarga32Bits = 32
};

struct __declspec(uuid("372b4d75-eb10-4d0a-8203-5778d521253d"))
_TiffSaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _TiffSaveOptionsPtr ObjectValue;
    __declspec(property(get=GetAlphaChannels,put=PutAlphaChannels))
    VARIANT_BOOL AlphaChannels;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    VARIANT_BOOL Transparency;
    __declspec(property(get=GetJPEGQuality,put=PutJPEGQuality))
    long JPEGQuality;
    __declspec(property(get=GetAnnotations,put=PutAnnotations))
    VARIANT_BOOL Annotations;
    __declspec(property(get=GetByteOrder,put=PutByteOrder))
    enum PsByteOrderType ByteOrder;
    __declspec(property(get=GetEmbedColorProfile,put=PutEmbedColorProfile))
    VARIANT_BOOL EmbedColorProfile;
    __declspec(property(get=GetImageCompression,put=PutImageCompression))
    enum PsTiffEncodingType ImageCompression;
    __declspec(property(get=GetLayers,put=PutLayers))
    VARIANT_BOOL Layers;
    __declspec(property(get=GetSpotColors,put=PutSpotColors))
    VARIANT_BOOL SpotColors;
    __declspec(property(get=GetSaveImagePyramid,put=PutSaveImagePyramid))
    VARIANT_BOOL SaveImagePyramid;
    __declspec(property(get=GetLayerCompression,put=PutLayerCompression))
    enum PsLayerCompressionType LayerCompression;
    __declspec(property(get=GetInterleaveChannels,put=PutInterleaveChannels))
    VARIANT_BOOL InterleaveChannels;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetAlphaChannels ( );
    void PutAlphaChannels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLayers ( );
    void PutLayers (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAnnotations ( );
    void PutAnnotations (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSpotColors ( );
    void PutSpotColors (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEmbedColorProfile ( );
    void PutEmbedColorProfile (
        VARIANT_BOOL _arg1 );
    enum PsTiffEncodingType GetImageCompression ( );
    void PutImageCompression (
        enum PsTiffEncodingType _arg1 );
    long GetJPEGQuality ( );
    void PutJPEGQuality (
        long _arg1 );
    enum PsByteOrderType GetByteOrder ( );
    void PutByteOrder (
        enum PsByteOrderType _arg1 );
    VARIANT_BOOL GetSaveImagePyramid ( );
    void PutSaveImagePyramid (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTransparency ( );
    void PutTransparency (
        VARIANT_BOOL _arg1 );
    enum PsLayerCompressionType GetLayerCompression ( );
    void PutLayerCompression (
        enum PsLayerCompressionType _arg1 );
    VARIANT_BOOL GetInterleaveChannels ( );
    void PutInterleaveChannels (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _TiffSaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _TiffSaveOptions * _arg1 );
};

enum PsTiffEncodingType
{
    psNoTIFFCompression = 1,
    psTiffLZW = 2,
    psTiffJPEG = 3,
    psTiffZIP = 4
};

enum PsLayerCompressionType
{
    psRLELayerCompression = 1,
    psZIPLayerCompression = 2
};

struct __declspec(uuid("94c4a25a-2c91-4514-a783-3173afc48430"))
_DCS1_SaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _DCS1_SaveOptionsPtr ObjectValue;
    __declspec(property(get=GetPreview,put=PutPreview))
    enum PsPreviewType Preview;
    __declspec(property(get=GetDCS,put=PutDCS))
    enum PsDCSType DCS;
    __declspec(property(get=GetEncoding,put=PutEncoding))
    enum PsSaveEncoding Encoding;
    __declspec(property(get=GetHalftoneScreen,put=PutHalftoneScreen))
    VARIANT_BOOL HalftoneScreen;
    __declspec(property(get=GetEmbedColorProfile,put=PutEmbedColorProfile))
    VARIANT_BOOL EmbedColorProfile;
    __declspec(property(get=GetInterpolation,put=PutInterpolation))
    VARIANT_BOOL Interpolation;
    __declspec(property(get=GetTransferFunction,put=PutTransferFunction))
    VARIANT_BOOL TransferFunction;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetVectorData,put=PutVectorData))
    VARIANT_BOOL VectorData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetEmbedColorProfile ( );
    void PutEmbedColorProfile (
        VARIANT_BOOL _arg1 );
    enum PsPreviewType GetPreview ( );
    void PutPreview (
        enum PsPreviewType _arg1 );
    enum PsDCSType GetDCS ( );
    void PutDCS (
        enum PsDCSType _arg1 );
    enum PsSaveEncoding GetEncoding ( );
    void PutEncoding (
        enum PsSaveEncoding _arg1 );
    VARIANT_BOOL GetHalftoneScreen ( );
    void PutHalftoneScreen (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTransferFunction ( );
    void PutTransferFunction (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetVectorData ( );
    void PutVectorData (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetInterpolation ( );
    void PutInterpolation (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _DCS1_SaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _DCS1_SaveOptions * _arg1 );
};

enum PsDCSType
{
    psNoComposite = 1,
    psGrayscaleComposite = 2,
    psColorComposite = 3
};

struct __declspec(uuid("f1af982e-2bbd-406d-9fd6-ca6c898a7ffe"))
_DCS2_SaveOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _DCS2_SaveOptionsPtr ObjectValue;
    __declspec(property(get=GetPreview,put=PutPreview))
    enum PsPreviewType Preview;
    __declspec(property(get=GetDCS,put=PutDCS))
    enum PsDCSType DCS;
    __declspec(property(get=GetEncoding,put=PutEncoding))
    enum PsSaveEncoding Encoding;
    __declspec(property(get=GetMultiFileDCS,put=PutMultiFileDCS))
    VARIANT_BOOL MultiFileDCS;
    __declspec(property(get=GetHalftoneScreen,put=PutHalftoneScreen))
    VARIANT_BOOL HalftoneScreen;
    __declspec(property(get=GetEmbedColorProfile,put=PutEmbedColorProfile))
    VARIANT_BOOL EmbedColorProfile;
    __declspec(property(get=GetInterpolation,put=PutInterpolation))
    VARIANT_BOOL Interpolation;
    __declspec(property(get=GetTransferFunction,put=PutTransferFunction))
    VARIANT_BOOL TransferFunction;
    __declspec(property(get=GetSpotColors,put=PutSpotColors))
    VARIANT_BOOL SpotColors;
    __declspec(property(get=GetVectorData,put=PutVectorData))
    VARIANT_BOOL VectorData;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetSpotColors ( );
    void PutSpotColors (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEmbedColorProfile ( );
    void PutEmbedColorProfile (
        VARIANT_BOOL _arg1 );
    enum PsPreviewType GetPreview ( );
    void PutPreview (
        enum PsPreviewType _arg1 );
    enum PsDCSType GetDCS ( );
    void PutDCS (
        enum PsDCSType _arg1 );
    VARIANT_BOOL GetMultiFileDCS ( );
    void PutMultiFileDCS (
        VARIANT_BOOL _arg1 );
    enum PsSaveEncoding GetEncoding ( );
    void PutEncoding (
        enum PsSaveEncoding _arg1 );
    VARIANT_BOOL GetHalftoneScreen ( );
    void PutHalftoneScreen (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTransferFunction ( );
    void PutTransferFunction (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetVectorData ( );
    void PutVectorData (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetInterpolation ( );
    void PutInterpolation (
        VARIANT_BOOL _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _DCS2_SaveOptions * _arg1 );
    void PutRefObjectValue (
        struct _DCS2_SaveOptions * _arg1 );
};

struct __declspec(uuid("fc08b435-5f19-49df-abe7-adce9f0729ff"))
_ExportOptionsIllustrator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _ExportOptionsIllustratorPtr ObjectValue;
    __declspec(property(get=GetPathName,put=PutPathName))
    _bstr_t PathName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetPath,put=PutPath))
    enum PsIllustratorPathType Path;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum PsIllustratorPathType GetPath ( );
    void PutPath (
        enum PsIllustratorPathType _arg1 );
    _bstr_t GetPathName ( );
    void PutPathName (
        _bstr_t _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _ExportOptionsIllustrator * _arg1 );
    void PutRefObjectValue (
        struct _ExportOptionsIllustrator * _arg1 );
};

enum PsIllustratorPathType
{
    psDocumentBounds = 1,
    psAllPaths = 2,
    psNamedPath = 3
};

struct __declspec(uuid("91a3d47b-9579-4013-9206-7b6859439da2"))
_ExportOptionsSaveForWeb : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _ExportOptionsSaveForWebPtr ObjectValue;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    VARIANT_BOOL Transparency;
    __declspec(property(get=GetMatteColor,put=PutRefMatteColor))
    _RGBColorPtr MatteColor;
    __declspec(property(get=GetDitherAmount,put=PutDitherAmount))
    long DitherAmount;
    __declspec(property(get=GetColors,put=PutColors))
    long Colors;
    __declspec(property(get=GetFormat,put=PutFormat))
    enum PsSaveDocumentType Format;
    __declspec(property(get=GetDither,put=PutDither))
    enum PsDitherType Dither;
    __declspec(property(get=GetPNG8,put=PutPNG8))
    VARIANT_BOOL PNG8;
    __declspec(property(get=GetLossy,put=PutLossy))
    long Lossy;
    __declspec(property(get=GetColorReduction,put=PutColorReduction))
    enum PsColorReductionType ColorReduction;
    __declspec(property(get=GetTransparencyDither,put=PutTransparencyDither))
    enum PsDitherType TransparencyDither;
    __declspec(property(get=GetTransparencyAmount,put=PutTransparencyAmount))
    long TransparencyAmount;
    __declspec(property(get=GetInterlaced,put=PutInterlaced))
    VARIANT_BOOL Interlaced;
    __declspec(property(get=GetWebSnap,put=PutWebSnap))
    long WebSnap;
    __declspec(property(get=GetOptimized,put=PutOptimized))
    VARIANT_BOOL Optimized;
    __declspec(property(get=GetQuality,put=PutQuality))
    long Quality;
    __declspec(property(get=GetIncludeProfile,put=PutIncludeProfile))
    VARIANT_BOOL IncludeProfile;
    __declspec(property(get=GetBlur,put=PutBlur))
    double Blur;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum PsSaveDocumentType GetFormat ( );
    void PutFormat (
        enum PsSaveDocumentType _arg1 );
    VARIANT_BOOL GetPNG8 ( );
    void PutPNG8 (
        VARIANT_BOOL _arg1 );
    long GetLossy ( );
    void PutLossy (
        long _arg1 );
    enum PsColorReductionType GetColorReduction ( );
    void PutColorReduction (
        enum PsColorReductionType _arg1 );
    long GetColors ( );
    void PutColors (
        long _arg1 );
    enum PsDitherType GetDither ( );
    void PutDither (
        enum PsDitherType _arg1 );
    long GetDitherAmount ( );
    void PutDitherAmount (
        long _arg1 );
    VARIANT_BOOL GetTransparency ( );
    void PutTransparency (
        VARIANT_BOOL _arg1 );
    enum PsDitherType GetTransparencyDither ( );
    void PutTransparencyDither (
        enum PsDitherType _arg1 );
    long GetTransparencyAmount ( );
    void PutTransparencyAmount (
        long _arg1 );
    VARIANT_BOOL GetInterlaced ( );
    void PutInterlaced (
        VARIANT_BOOL _arg1 );
    _RGBColorPtr GetMatteColor ( );
    void PutMatteColor (
        struct _RGBColor * _arg1 );
    void PutRefMatteColor (
        struct _RGBColor * _arg1 );
    long GetWebSnap ( );
    void PutWebSnap (
        long _arg1 );
    VARIANT_BOOL GetOptimized ( );
    void PutOptimized (
        VARIANT_BOOL _arg1 );
    long GetQuality ( );
    void PutQuality (
        long _arg1 );
    VARIANT_BOOL GetIncludeProfile ( );
    void PutIncludeProfile (
        VARIANT_BOOL _arg1 );
    double GetBlur ( );
    void PutBlur (
        double _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _ExportOptionsSaveForWeb * _arg1 );
    void PutRefObjectValue (
        struct _ExportOptionsSaveForWeb * _arg1 );
};

enum PsSaveDocumentType
{
    psPhotoshopSave = 1,
    psBMPSave = 2,
    psCompuServeGIFSave = 3,
    psPhotoshopEPSSave = 4,
    psJPEGSave = 6,
    psPCXSave = 7,
    psPhotoshopPDFSave = 8,
    psPICTFileFormatSave = 10,
    psPICTResourceFormatSave = 11,
    psPixarSave = 12,
    psPNGSave = 13,
    psRawSave = 14,
    psScitexCTSave = 15,
    psTargaSave = 16,
    psTIFFSave = 17,
    psPhotoshopDCS_1Save = 18,
    psPhotoshopDCS_2Save = 19,
    psAliasPIXSave = 25,
    psElectricImageSave = 26,
    psPortableBitmapSave = 27,
    psWavefrontRLASave = 28,
    psSGIRGBSave = 29,
    psSoftImageSave = 30,
    psWirelessBitmapSave = 31
};

enum PsColorReductionType
{
    psPerceptualReduction = 0,
    psSelective = 1,
    psAdaptive = 2,
    psRestrictive = 3,
    psCustomReduction = 4,
    psBlackWhiteReduction = 5,
    psSFWGrayscale = 6,
    psMacintoshColors = 7,
    psWindowsColors = 8
};

struct __declspec(uuid("643099a1-0b67-4920-9b14-e14be8f63d5f"))
_BitmapConversionOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _BitmapConversionOptionsPtr ObjectValue;
    __declspec(property(get=GetShape,put=PutShape))
    enum PsBitmapHalfToneType Shape;
    __declspec(property(get=GetResolution,put=PutResolution))
    double Resolution;
    __declspec(property(get=GetPatternName,put=PutPatternName))
    _bstr_t PatternName;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetMethod,put=PutMethod))
    enum PsBitmapConversionType Method;
    __declspec(property(get=GetFrequency,put=PutFrequency))
    double Frequency;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetResolution ( );
    void PutResolution (
        double _arg1 );
    enum PsBitmapConversionType GetMethod ( );
    void PutMethod (
        enum PsBitmapConversionType _arg1 );
    _bstr_t GetPatternName ( );
    void PutPatternName (
        _bstr_t _arg1 );
    double GetFrequency ( );
    void PutFrequency (
        double _arg1 );
    double GetAngle ( );
    void PutAngle (
        double _arg1 );
    enum PsBitmapHalfToneType GetShape ( );
    void PutShape (
        enum PsBitmapHalfToneType _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _BitmapConversionOptions * _arg1 );
    void PutRefObjectValue (
        struct _BitmapConversionOptions * _arg1 );
};

enum PsBitmapConversionType
{
    psHalfThreshold = 1,
    psPatternDither = 2,
    psDiffusionDither = 3,
    psHalftoneScreen = 4,
    psCustomPattern = 5
};

enum PsBitmapHalfToneType
{
    psHalftoneRound = 1,
    psHalftoneDiamond = 2,
    psHalftoneEllipse = 3,
    psHalftoneLine = 4,
    psHalftoneSquare = 5,
    psHalftoneCross = 6
};

struct __declspec(uuid("22d0b851-e811-40e2-9a79-e84ea602c9f1"))
_IndexedConversionOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _IndexedConversionOptionsPtr ObjectValue;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    VARIANT_BOOL Transparency;
    __declspec(property(get=GetMatte,put=PutMatte))
    enum PsMatteType Matte;
    __declspec(property(get=GetForced,put=PutForced))
    enum PsForcedColors Forced;
    __declspec(property(get=GetDitherAmount,put=PutDitherAmount))
    long DitherAmount;
    __declspec(property(get=GetColors,put=PutColors))
    long Colors;
    __declspec(property(get=GetDither,put=PutDither))
    enum PsDitherType Dither;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetPalette,put=PutPalette))
    enum PsPaletteType Palette;
    __declspec(property(get=GetPreserveExactColors,put=PutPreserveExactColors))
    VARIANT_BOOL PreserveExactColors;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum PsPaletteType GetPalette ( );
    void PutPalette (
        enum PsPaletteType _arg1 );
    long GetColors ( );
    void PutColors (
        long _arg1 );
    enum PsForcedColors GetForced ( );
    void PutForced (
        enum PsForcedColors _arg1 );
    VARIANT_BOOL GetTransparency ( );
    void PutTransparency (
        VARIANT_BOOL _arg1 );
    enum PsDitherType GetDither ( );
    void PutDither (
        enum PsDitherType _arg1 );
    long GetDitherAmount ( );
    void PutDitherAmount (
        long _arg1 );
    VARIANT_BOOL GetPreserveExactColors ( );
    void PutPreserveExactColors (
        VARIANT_BOOL _arg1 );
    enum PsMatteType GetMatte ( );
    void PutMatte (
        enum PsMatteType _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _IndexedConversionOptions * _arg1 );
    void PutRefObjectValue (
        struct _IndexedConversionOptions * _arg1 );
};

struct __declspec(uuid("750824c6-c347-4cdb-aa96-8aba1ebdf9ea"))
_NoColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _NoColorPtr ObjectValue;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _NoColor * _arg1 );
    void PutRefObjectValue (
        struct _NoColor * _arg1 );
};

struct __declspec(uuid("376c4f3b-0345-440b-90d9-fe78aeca249c"))
_PresentationOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _PresentationOptionsPtr ObjectValue;
    __declspec(property(get=GetTransition,put=PutTransition))
    enum PsTransitionType Transition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetIncludeFilename,put=PutIncludeFilename))
    VARIANT_BOOL IncludeFilename;
    __declspec(property(get=GetPDFFileOptions,put=PutRefPDFFileOptions))
    _PDFSaveOptionsPtr PDFFileOptions;
    __declspec(property(get=GetPresentation,put=PutPresentation))
    VARIANT_BOOL Presentation;
    __declspec(property(get=GetMagnification,put=PutMagnification))
    enum PsMagnificationType Magnification;
    __declspec(property(get=GetAutoAdvance,put=PutAutoAdvance))
    VARIANT_BOOL AutoAdvance;
    __declspec(property(get=GetInterval,put=PutInterval))
    long Interval;
    __declspec(property(get=GetLoop,put=PutLoop))
    VARIANT_BOOL Loop;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetPresentation ( );
    void PutPresentation (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoAdvance ( );
    void PutAutoAdvance (
        VARIANT_BOOL _arg1 );
    long GetInterval ( );
    void PutInterval (
        long _arg1 );
    VARIANT_BOOL GetLoop ( );
    void PutLoop (
        VARIANT_BOOL _arg1 );
    enum PsTransitionType GetTransition ( );
    void PutTransition (
        enum PsTransitionType _arg1 );
    enum PsMagnificationType GetMagnification ( );
    void PutMagnification (
        enum PsMagnificationType _arg1 );
    VARIANT_BOOL GetIncludeFilename ( );
    void PutIncludeFilename (
        VARIANT_BOOL _arg1 );
    _PDFSaveOptionsPtr GetPDFFileOptions ( );
    void PutPDFFileOptions (
        struct _PDFSaveOptions * _arg1 );
    void PutRefPDFFileOptions (
        struct _PDFSaveOptions * _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _PresentationOptions * _arg1 );
    void PutRefObjectValue (
        struct _PresentationOptions * _arg1 );
};

enum PsTransitionType
{
    psBlindsHorizontal = 1,
    psBlindsVertical = 2,
    psDissolveTransition = 3,
    psBoxIn = 4,
    psBoxOut = 5,
    psGlitterDown = 6,
    psGlitterRight = 7,
    psGlitterRightDown = 8,
    psNoTrasition = 9,
    psRandom = 10,
    psSplitHorizontalIn = 11,
    psSplitHorizontalOut = 12,
    psSplitVerticalIn = 13,
    psSplitVerticalOut = 14,
    psWipeDown = 15,
    psWipeLeft = 16,
    psWipeRight = 17,
    psWipeUp = 18
};

enum PsMagnificationType
{
    psActualSize = 0,
    psFitPage = 1
};

struct __declspec(uuid("c2783141-b50d-4f0c-9e2e-bf76ea8a4e60"))
_GalleryOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _GalleryOptionsPtr ObjectValue;
    __declspec(property(get=GetUseShortExtension,put=PutUseShortExtension))
    VARIANT_BOOL UseShortExtension;
    __declspec(property(get=GetUseUTF8Encoding,put=PutUseUTF8Encoding))
    VARIANT_BOOL UseUTF8Encoding;
    __declspec(property(get=GetIncludeSubFolders,put=PutIncludeSubFolders))
    VARIANT_BOOL IncludeSubFolders;
    __declspec(property(get=GetAddSizeAttributes,put=PutAddSizeAttributes))
    VARIANT_BOOL AddSizeAttributes;
    __declspec(property(get=GetPreserveAllMetadata,put=PutPreserveAllMetadata))
    VARIANT_BOOL PreserveAllMetadata;
    __declspec(property(get=GetBannerOptions,put=PutRefBannerOptions))
    _GalleryBannerOptionsPtr BannerOptions;
    __declspec(property(get=GetImagesOptions,put=PutRefImagesOptions))
    _GalleryImagesOptionsPtr ImagesOptions;
    __declspec(property(get=GetThumbnailOptions,put=PutRefThumbnailOptions))
    _GalleryThumbnailOptionsPtr ThumbnailOptions;
    __declspec(property(get=GetLayoutStyle,put=PutLayoutStyle))
    _bstr_t LayoutStyle;
    __declspec(property(get=GetEmailAddress,put=PutEmailAddress))
    _bstr_t EmailAddress;
    __declspec(property(get=GetCustomColorOptions,put=PutRefCustomColorOptions))
    _GalleryCustomColorOptionsPtr CustomColorOptions;
    __declspec(property(get=GetSecurityOptions,put=PutRefSecurityOptions))
    _GallerySecurityOptionsPtr SecurityOptions;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetLayoutStyle ( );
    void PutLayoutStyle (
        _bstr_t _arg1 );
    _bstr_t GetEmailAddress ( );
    void PutEmailAddress (
        _bstr_t _arg1 );
    VARIANT_BOOL GetUseShortExtension ( );
    void PutUseShortExtension (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUseUTF8Encoding ( );
    void PutUseUTF8Encoding (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeSubFolders ( );
    void PutIncludeSubFolders (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAddSizeAttributes ( );
    void PutAddSizeAttributes (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPreserveAllMetadata ( );
    void PutPreserveAllMetadata (
        VARIANT_BOOL _arg1 );
    _GalleryBannerOptionsPtr GetBannerOptions ( );
    void PutBannerOptions (
        struct _GalleryBannerOptions * _arg1 );
    void PutRefBannerOptions (
        struct _GalleryBannerOptions * _arg1 );
    _GalleryImagesOptionsPtr GetImagesOptions ( );
    void PutImagesOptions (
        struct _GalleryImagesOptions * _arg1 );
    void PutRefImagesOptions (
        struct _GalleryImagesOptions * _arg1 );
    _GalleryThumbnailOptionsPtr GetThumbnailOptions ( );
    void PutThumbnailOptions (
        struct _GalleryThumbnailOptions * _arg1 );
    void PutRefThumbnailOptions (
        struct _GalleryThumbnailOptions * _arg1 );
    _GalleryCustomColorOptionsPtr GetCustomColorOptions ( );
    void PutCustomColorOptions (
        struct _GalleryCustomColorOptions * _arg1 );
    void PutRefCustomColorOptions (
        struct _GalleryCustomColorOptions * _arg1 );
    _GallerySecurityOptionsPtr GetSecurityOptions ( );
    void PutSecurityOptions (
        struct _GallerySecurityOptions * _arg1 );
    void PutRefSecurityOptions (
        struct _GallerySecurityOptions * _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _GalleryOptions * _arg1 );
    void PutRefObjectValue (
        struct _GalleryOptions * _arg1 );
};

struct __declspec(uuid("5f168d2a-f9ea-4866-8c55-4875e0940622"))
_GalleryBannerOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _GalleryBannerOptionsPtr ObjectValue;
    __declspec(property(get=GetPhotographer,put=PutPhotographer))
    _bstr_t Photographer;
    __declspec(property(get=GetContactInfo,put=PutContactInfo))
    _bstr_t ContactInfo;
    __declspec(property(get=GetDate,put=PutDate))
    _bstr_t Date;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetFont,put=PutFont))
    enum PsGalleryFontType Font;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    long FontSize;
    __declspec(property(get=GetSiteName,put=PutSiteName))
    _bstr_t SiteName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetSiteName ( );
    void PutSiteName (
        _bstr_t _arg1 );
    _bstr_t GetPhotographer ( );
    void PutPhotographer (
        _bstr_t _arg1 );
    _bstr_t GetContactInfo ( );
    void PutContactInfo (
        _bstr_t _arg1 );
    _bstr_t GetDate ( );
    void PutDate (
        _bstr_t _arg1 );
    enum PsGalleryFontType GetFont ( );
    void PutFont (
        enum PsGalleryFontType _arg1 );
    long GetFontSize ( );
    void PutFontSize (
        long _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _GalleryBannerOptions * _arg1 );
    void PutRefObjectValue (
        struct _GalleryBannerOptions * _arg1 );
};

enum PsGalleryFontType
{
    psArial = 1,
    psCourierNew = 2,
    psHelvetica = 3,
    psTimesNewRoman = 4
};

struct __declspec(uuid("46ab9a1d-1b32-4c59-8142-b223eccf1f74"))
_GalleryImagesOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _GalleryImagesOptionsPtr ObjectValue;
    __declspec(property(get=GetBorder,put=PutBorder))
    long Border;
    __declspec(property(get=GetIncludeFilename,put=PutIncludeFilename))
    VARIANT_BOOL IncludeFilename;
    __declspec(property(get=GetCaption,put=PutCaption))
    VARIANT_BOOL Caption;
    __declspec(property(get=GetIncludeCredits,put=PutIncludeCredits))
    VARIANT_BOOL IncludeCredits;
    __declspec(property(get=GetIncludeTitle,put=PutIncludeTitle))
    VARIANT_BOOL IncludeTitle;
    __declspec(property(get=GetNumericLinks,put=PutNumericLinks))
    VARIANT_BOOL NumericLinks;
    __declspec(property(get=GetResizeImages,put=PutResizeImages))
    VARIANT_BOOL ResizeImages;
    __declspec(property(get=GetDimension,put=PutDimension))
    long Dimension;
    __declspec(property(get=GetResizeConstraint,put=PutResizeConstraint))
    enum PsGalleryConstrainType ResizeConstraint;
    __declspec(property(get=GetImageQuality,put=PutImageQuality))
    long ImageQuality;
    __declspec(property(get=GetIncludeCopyright,put=PutIncludeCopyright))
    VARIANT_BOOL IncludeCopyright;
    __declspec(property(get=GetFont,put=PutFont))
    enum PsGalleryFontType Font;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    long FontSize;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetNumericLinks ( );
    void PutNumericLinks (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetResizeImages ( );
    void PutResizeImages (
        VARIANT_BOOL _arg1 );
    long GetDimension ( );
    void PutDimension (
        long _arg1 );
    enum PsGalleryConstrainType GetResizeConstraint ( );
    void PutResizeConstraint (
        enum PsGalleryConstrainType _arg1 );
    long GetImageQuality ( );
    void PutImageQuality (
        long _arg1 );
    long GetBorder ( );
    void PutBorder (
        long _arg1 );
    VARIANT_BOOL GetIncludeFilename ( );
    void PutIncludeFilename (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCaption ( );
    void PutCaption (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeCredits ( );
    void PutIncludeCredits (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeTitle ( );
    void PutIncludeTitle (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeCopyright ( );
    void PutIncludeCopyright (
        VARIANT_BOOL _arg1 );
    enum PsGalleryFontType GetFont ( );
    void PutFont (
        enum PsGalleryFontType _arg1 );
    long GetFontSize ( );
    void PutFontSize (
        long _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _GalleryImagesOptions * _arg1 );
    void PutRefObjectValue (
        struct _GalleryImagesOptions * _arg1 );
};

enum PsGalleryConstrainType
{
    psConstrainWidth = 1,
    psConstrainHeight = 2,
    psConstrainBoth = 3
};

struct __declspec(uuid("46dfaf34-75e0-470e-8217-b0c763137dd0"))
_GalleryThumbnailOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _GalleryThumbnailOptionsPtr ObjectValue;
    __declspec(property(get=GetBorder,put=PutBorder))
    long Border;
    __declspec(property(get=GetIncludeFilename,put=PutIncludeFilename))
    VARIANT_BOOL IncludeFilename;
    __declspec(property(get=GetCaption,put=PutCaption))
    VARIANT_BOOL Caption;
    __declspec(property(get=GetIncludeCredits,put=PutIncludeCredits))
    VARIANT_BOOL IncludeCredits;
    __declspec(property(get=GetIncludeTitle,put=PutIncludeTitle))
    VARIANT_BOOL IncludeTitle;
    __declspec(property(get=GetIncludeCopyright,put=PutIncludeCopyright))
    VARIANT_BOOL IncludeCopyright;
    __declspec(property(get=GetFont,put=PutFont))
    enum PsGalleryFontType Font;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    long FontSize;
    __declspec(property(get=GetDimension,put=PutDimension))
    long Dimension;
    __declspec(property(get=GetColumnCount,put=PutColumnCount))
    long ColumnCount;
    __declspec(property(get=GetSize,put=PutSize))
    enum PsGalleryThumbSizeType Size;
    __declspec(property(get=GetRowCount,put=PutRowCount))
    long RowCount;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetIncludeFilename ( );
    void PutIncludeFilename (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCaption ( );
    void PutCaption (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeCredits ( );
    void PutIncludeCredits (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeTitle ( );
    void PutIncludeTitle (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeCopyright ( );
    void PutIncludeCopyright (
        VARIANT_BOOL _arg1 );
    enum PsGalleryFontType GetFont ( );
    void PutFont (
        enum PsGalleryFontType _arg1 );
    long GetFontSize ( );
    void PutFontSize (
        long _arg1 );
    enum PsGalleryThumbSizeType GetSize ( );
    void PutSize (
        enum PsGalleryThumbSizeType _arg1 );
    long GetDimension ( );
    void PutDimension (
        long _arg1 );
    long GetColumnCount ( );
    void PutColumnCount (
        long _arg1 );
    long GetRowCount ( );
    void PutRowCount (
        long _arg1 );
    long GetBorder ( );
    void PutBorder (
        long _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _GalleryThumbnailOptions * _arg1 );
    void PutRefObjectValue (
        struct _GalleryThumbnailOptions * _arg1 );
};

enum PsGalleryThumbSizeType
{
    psSmall = 1,
    psMedium = 2,
    psLarge = 3,
    psCustomThumbnail = 4
};

struct __declspec(uuid("2eb2592d-f02d-4117-a22c-26e5cdfaeee2"))
_GalleryCustomColorOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _GalleryCustomColorOptionsPtr ObjectValue;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetBannerColor,put=PutRefBannerColor))
    _RGBColorPtr BannerColor;
    __declspec(property(get=GetBackgroundColor,put=PutRefBackgroundColor))
    _RGBColorPtr BackgroundColor;
    __declspec(property(get=GetTextColor,put=PutRefTextColor))
    _RGBColorPtr TextColor;
    __declspec(property(get=GetActiveLinkColor,put=PutRefActiveLinkColor))
    _RGBColorPtr ActiveLinkColor;
    __declspec(property(get=GetLinkColor,put=PutRefLinkColor))
    _RGBColorPtr LinkColor;
    __declspec(property(get=GetVisitedLinkColor,put=PutRefVisitedLinkColor))
    _RGBColorPtr VisitedLinkColor;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _RGBColorPtr GetBackgroundColor ( );
    void PutBackgroundColor (
        struct _RGBColor * _arg1 );
    void PutRefBackgroundColor (
        struct _RGBColor * _arg1 );
    _RGBColorPtr GetBannerColor ( );
    void PutBannerColor (
        struct _RGBColor * _arg1 );
    void PutRefBannerColor (
        struct _RGBColor * _arg1 );
    _RGBColorPtr GetTextColor ( );
    void PutTextColor (
        struct _RGBColor * _arg1 );
    void PutRefTextColor (
        struct _RGBColor * _arg1 );
    _RGBColorPtr GetActiveLinkColor ( );
    void PutActiveLinkColor (
        struct _RGBColor * _arg1 );
    void PutRefActiveLinkColor (
        struct _RGBColor * _arg1 );
    _RGBColorPtr GetLinkColor ( );
    void PutLinkColor (
        struct _RGBColor * _arg1 );
    void PutRefLinkColor (
        struct _RGBColor * _arg1 );
    _RGBColorPtr GetVisitedLinkColor ( );
    void PutVisitedLinkColor (
        struct _RGBColor * _arg1 );
    void PutRefVisitedLinkColor (
        struct _RGBColor * _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _GalleryCustomColorOptions * _arg1 );
    void PutRefObjectValue (
        struct _GalleryCustomColorOptions * _arg1 );
};

struct __declspec(uuid("95d69b63-b319-44d3-8307-c988e96e7e58"))
_GallerySecurityOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _GallerySecurityOptionsPtr ObjectValue;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetTextColor,put=PutRefTextColor))
    _RGBColorPtr TextColor;
    __declspec(property(get=GetTextPosition,put=PutTextPosition))
    enum PsGallerySecurityTextPositionType TextPosition;
    __declspec(property(get=GetFont,put=PutFont))
    enum PsGalleryFontType Font;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    long FontSize;
    __declspec(property(get=GetContent,put=PutContent))
    enum PsGallerySecurityType Content;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    long Opacity;
    __declspec(property(get=GetTextRotate,put=PutTextRotate))
    enum PsGallerySecurityTextRotateType TextRotate;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum PsGallerySecurityType GetContent ( );
    void PutContent (
        enum PsGallerySecurityType _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    enum PsGalleryFontType GetFont ( );
    void PutFont (
        enum PsGalleryFontType _arg1 );
    long GetFontSize ( );
    void PutFontSize (
        long _arg1 );
    _RGBColorPtr GetTextColor ( );
    void PutTextColor (
        struct _RGBColor * _arg1 );
    void PutRefTextColor (
        struct _RGBColor * _arg1 );
    long GetOpacity ( );
    void PutOpacity (
        long _arg1 );
    enum PsGallerySecurityTextPositionType GetTextPosition ( );
    void PutTextPosition (
        enum PsGallerySecurityTextPositionType _arg1 );
    enum PsGallerySecurityTextRotateType GetTextRotate ( );
    void PutTextRotate (
        enum PsGallerySecurityTextRotateType _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _GallerySecurityOptions * _arg1 );
    void PutRefObjectValue (
        struct _GallerySecurityOptions * _arg1 );
};

enum PsGallerySecurityType
{
    psNoSecurity = 1,
    psCustomSecurityText = 2,
    psFilename = 3,
    psCopyright = 4,
    psCaption = 5,
    psCredit = 6,
    psTitle = 7
};

enum PsGallerySecurityTextPositionType
{
    psCentered = 1,
    psUpperLeft = 2,
    psLowerLeft = 3,
    psUpperRight = 4,
    psLowerRight = 5
};

enum PsGallerySecurityTextRotateType
{
    psZero = 1,
    psClockwise45 = 2,
    psClockwise90 = 3,
    psCounterClockwise45 = 4,
    psCounterClockwise90 = 5
};

struct __declspec(uuid("064bbe94-396d-4b25-9071-ac5b14d0487f"))
_ContactSheetOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _ContactSheetOptionsPtr ObjectValue;
    __declspec(property(get=GetMode,put=PutMode))
    enum PsNewDocumentMode Mode;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetResolution,put=PutResolution))
    double Resolution;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCaption,put=PutCaption))
    VARIANT_BOOL Caption;
    __declspec(property(get=GetAcrossFirst,put=PutAcrossFirst))
    VARIANT_BOOL AcrossFirst;
    __declspec(property(get=GetUseAutoSpacing,put=PutUseAutoSpacing))
    VARIANT_BOOL UseAutoSpacing;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetFlatten,put=PutFlatten))
    VARIANT_BOOL Flatten;
    __declspec(property(get=GetBestFit,put=PutBestFit))
    VARIANT_BOOL BestFit;
    __declspec(property(get=GetColumnCount,put=PutColumnCount))
    long ColumnCount;
    __declspec(property(get=GetRowCount,put=PutRowCount))
    long RowCount;
    __declspec(property(get=GetFont,put=PutFont))
    enum PsGalleryFontType Font;
    __declspec(property(get=GetVertical,put=PutVertical))
    long Vertical;
    __declspec(property(get=GetHorizontal,put=PutHorizontal))
    long Horizontal;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    long FontSize;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetWidth ( );
    void PutWidth (
        long _arg1 );
    long GetHeight ( );
    void PutHeight (
        long _arg1 );
    double GetResolution ( );
    void PutResolution (
        double _arg1 );
    enum PsNewDocumentMode GetMode ( );
    void PutMode (
        enum PsNewDocumentMode _arg1 );
    VARIANT_BOOL GetFlatten ( );
    void PutFlatten (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAcrossFirst ( );
    void PutAcrossFirst (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUseAutoSpacing ( );
    void PutUseAutoSpacing (
        VARIANT_BOOL _arg1 );
    long GetColumnCount ( );
    void PutColumnCount (
        long _arg1 );
    long GetRowCount ( );
    void PutRowCount (
        long _arg1 );
    long GetVertical ( );
    void PutVertical (
        long _arg1 );
    long GetHorizontal ( );
    void PutHorizontal (
        long _arg1 );
    VARIANT_BOOL GetBestFit ( );
    void PutBestFit (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCaption ( );
    void PutCaption (
        VARIANT_BOOL _arg1 );
    enum PsGalleryFontType GetFont ( );
    void PutFont (
        enum PsGalleryFontType _arg1 );
    long GetFontSize ( );
    void PutFontSize (
        long _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _ContactSheetOptions * _arg1 );
    void PutRefObjectValue (
        struct _ContactSheetOptions * _arg1 );
};

enum PsNewDocumentMode
{
    psNewGray = 1,
    psNewRGB = 2,
    psNewCMYK = 3,
    psNewLab = 4,
    psNewBitmap = 5
};

struct __declspec(uuid("abd0f9ce-822b-4bb1-a811-3ec852b43c0f"))
_PicturePackageOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _PicturePackageOptionsPtr ObjectValue;
    __declspec(property(get=GetMode,put=PutMode))
    enum PsNewDocumentMode Mode;
    __declspec(property(get=GetResolution,put=PutResolution))
    double Resolution;
    __declspec(property(get=GetLayout,put=PutLayout))
    _bstr_t Layout;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetTextColor,put=PutRefTextColor))
    _RGBColorPtr TextColor;
    __declspec(property(get=GetTextPosition,put=PutTextPosition))
    enum PsGallerySecurityTextPositionType TextPosition;
    __declspec(property(get=GetFlatten,put=PutFlatten))
    VARIANT_BOOL Flatten;
    __declspec(property(get=GetFont,put=PutFont))
    enum PsGalleryFontType Font;
    __declspec(property(get=GetContent,put=PutContent))
    enum PsPicturePackageTextType Content;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    long FontSize;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    long Opacity;
    __declspec(property(get=GetTextRotate,put=PutTextRotate))
    enum PsGallerySecurityTextRotateType TextRotate;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetLayout ( );
    void PutLayout (
        _bstr_t _arg1 );
    double GetResolution ( );
    void PutResolution (
        double _arg1 );
    enum PsNewDocumentMode GetMode ( );
    void PutMode (
        enum PsNewDocumentMode _arg1 );
    VARIANT_BOOL GetFlatten ( );
    void PutFlatten (
        VARIANT_BOOL _arg1 );
    enum PsPicturePackageTextType GetContent ( );
    void PutContent (
        enum PsPicturePackageTextType _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    enum PsGalleryFontType GetFont ( );
    void PutFont (
        enum PsGalleryFontType _arg1 );
    long GetFontSize ( );
    void PutFontSize (
        long _arg1 );
    long GetOpacity ( );
    void PutOpacity (
        long _arg1 );
    _RGBColorPtr GetTextColor ( );
    void PutTextColor (
        struct _RGBColor * _arg1 );
    void PutRefTextColor (
        struct _RGBColor * _arg1 );
    enum PsGallerySecurityTextPositionType GetTextPosition ( );
    void PutTextPosition (
        enum PsGallerySecurityTextPositionType _arg1 );
    enum PsGallerySecurityTextRotateType GetTextRotate ( );
    void PutTextRotate (
        enum PsGallerySecurityTextRotateType _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _PicturePackageOptions * _arg1 );
    void PutRefObjectValue (
        struct _PicturePackageOptions * _arg1 );
};

enum PsPicturePackageTextType
{
    psNoText = 1,
    psUserText = 2,
    psFilenameText = 3,
    psCopyrightText = 4,
    psCaptionText = 5,
    psCreditText = 6,
    psOriginText = 7
};

struct __declspec(uuid("b0d18870-eac3-4d35-8612-6f734b3fa656"))
_BatchOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _BatchOptionsPtr ObjectValue;
    __declspec(property(get=GetWindowsCompatible,put=PutWindowsCompatible))
    VARIANT_BOOL WindowsCompatible;
    __declspec(property(get=GetMacintoshCompatible,put=PutMacintoshCompatible))
    VARIANT_BOOL MacintoshCompatible;
    __declspec(property(get=GetUnixCompatible,put=PutUnixCompatible))
    VARIANT_BOOL UnixCompatible;
    __declspec(property(get=GetOverrideOpen,put=PutOverrideOpen))
    VARIANT_BOOL OverrideOpen;
    __declspec(property(get=GetSuppressOpen,put=PutSuppressOpen))
    VARIANT_BOOL SuppressOpen;
    __declspec(property(get=GetSuppressProfile,put=PutSuppressProfile))
    VARIANT_BOOL SuppressProfile;
    __declspec(property(get=GetDestination,put=PutDestination))
    enum PsBatchDestinationType Destination;
    __declspec(property(get=GetDestinationFolder,put=PutDestinationFolder))
    _bstr_t DestinationFolder;
    __declspec(property(get=GetOverrideSave,put=PutOverrideSave))
    VARIANT_BOOL OverrideSave;
    __declspec(property(get=GetFileNaming,put=PutFileNaming))
    _variant_t FileNaming;
    __declspec(property(get=GetStartingSerial,put=PutStartingSerial))
    long StartingSerial;
    __declspec(property(get=GetErrorFile,put=PutErrorFile))
    _bstr_t ErrorFile;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetOverrideOpen ( );
    void PutOverrideOpen (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSuppressOpen ( );
    void PutSuppressOpen (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSuppressProfile ( );
    void PutSuppressProfile (
        VARIANT_BOOL _arg1 );
    enum PsBatchDestinationType GetDestination ( );
    void PutDestination (
        enum PsBatchDestinationType _arg1 );
    _bstr_t GetDestinationFolder ( );
    void PutDestinationFolder (
        _bstr_t _arg1 );
    VARIANT_BOOL GetOverrideSave ( );
    void PutOverrideSave (
        VARIANT_BOOL _arg1 );
    _variant_t GetFileNaming ( );
    void PutFileNaming (
        const _variant_t & _arg1 );
    long GetStartingSerial ( );
    void PutStartingSerial (
        long _arg1 );
    VARIANT_BOOL GetWindowsCompatible ( );
    void PutWindowsCompatible (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMacintoshCompatible ( );
    void PutMacintoshCompatible (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUnixCompatible ( );
    void PutUnixCompatible (
        VARIANT_BOOL _arg1 );
    _bstr_t GetErrorFile ( );
    void PutErrorFile (
        _bstr_t _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _BatchOptions * _arg1 );
    void PutRefObjectValue (
        struct _BatchOptions * _arg1 );
};

enum PsBatchDestinationType
{
    psNoDestination = 1,
    psSaveAndClose = 2,
    psFolder = 3
};

struct __declspec(uuid("7e8f9046-9f8e-4594-a22c-9f6b4c227cd7"))
_SubPathInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _SubPathInfoPtr ObjectValue;
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetEntireSubPath,put=PutEntireSubPath))
    _variant_t EntireSubPath;
    __declspec(property(get=GetOperation,put=PutOperation))
    enum PsShapeOperation Operation;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum PsShapeOperation GetOperation ( );
    void PutOperation (
        enum PsShapeOperation _arg1 );
    VARIANT_BOOL GetClosed ( );
    void PutClosed (
        VARIANT_BOOL _arg1 );
    _variant_t GetEntireSubPath ( );
    void PutEntireSubPath (
        const _variant_t & _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _SubPathInfo * _arg1 );
    void PutRefObjectValue (
        struct _SubPathInfo * _arg1 );
};

struct __declspec(uuid("b3c35001-b625-48d7-9d3b-c9d66d9cf5f1"))
_PathPointInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefObjectValue))
    _PathPointInfoPtr ObjectValue;
    __declspec(property(get=GetKind,put=PutKind))
    enum PsPointKind Kind;
    __declspec(property(get=GetRightDirection,put=PutRightDirection))
    _variant_t RightDirection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetAnchor,put=PutAnchor))
    _variant_t Anchor;
    __declspec(property(get=GetLeftDirection,put=PutLeftDirection))
    _variant_t LeftDirection;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _variant_t GetAnchor ( );
    void PutAnchor (
        const _variant_t & _arg1 );
    _variant_t GetLeftDirection ( );
    void PutLeftDirection (
        const _variant_t & _arg1 );
    _variant_t GetRightDirection ( );
    void PutRightDirection (
        const _variant_t & _arg1 );
    enum PsPointKind GetKind ( );
    void PutKind (
        enum PsPointKind _arg1 );
    _ApplicationPtr GetApplication ( );
    void PutObjectValue (
        struct _PathPointInfo * _arg1 );
    void PutRefObjectValue (
        struct _PathPointInfo * _arg1 );
};

enum PsOpenDocumentType
{
    psPhotoshopOpen = 1,
    psBMPOpen = 2,
    psCompuServeGIFOpen = 3,
    psPhotoshopEPSOpen = 4,
    psFilmstripOpen = 5,
    psJPEGOpen = 6,
    psPCXOpen = 7,
    psPhotoshopPDFOpen = 8,
    psPhotoCDOpen = 9,
    psPICTFileFormatOpen = 10,
    psPICTResourceFormatOpen = 11,
    psPixarOpen = 12,
    psPNGOpen = 13,
    psRawOpen = 14,
    psScitexCTOpen = 15,
    psTargaOpen = 16,
    psTIFFOpen = 17,
    psPhotoshopDCS_1Open = 18,
    psPhotoshopDCS_2Open = 19,
    psPDFOpen = 21,
    psEPSOpen = 22,
    psEPSPICTPreviewOpen = 23,
    psEPSTIFFPreviewOpen = 24,
    psAliasPIXOpen = 25,
    psElectricImageOpen = 26,
    psPortableBitmapOpen = 27,
    psWavefrontRLAOpen = 28,
    psSGIRGBOpen = 29,
    psSoftImageOpen = 30,
    psWirelessBitmapOpen = 31,
    psCameraRAWOpen = 32,
    psDICOMOpen = 33
};

enum PsSaveOptions
{
    psSaveChanges = 1,
    psDoNotSaveChanges = 2,
    psPromptToSaveChanges = 3
};

enum PsDocumentFill
{
    psWhite = 1,
    psBackgroundColor = 2,
    psTransparent = 3
};

enum PsAnchorPosition
{
    psTopLeft = 1,
    psTopCenter = 2,
    psTopRight = 3,
    psMiddleLeft = 4,
    psMiddleCenter = 5,
    psMiddleRight = 6,
    psBottomLeft = 7,
    psBottomCenter = 8,
    psBottomRight = 9
};

enum PsExtensionType
{
    psLowercase = 2,
    psUppercase = 3
};

enum PsTrimType
{
    psTransparentPixels = 0,
    psTopLeftPixel = 1,
    psBottomRightPixel = 9
};

enum PsResetTarget
{
    psAllWarnings = 1,
    psAllTools = 2,
    psEverything = 3
};

enum PsColorBlendMode
{
    psNormalBlendColor = 2,
    psDissolveBlend = 3,
    psBehindBlend = 24,
    psClearBlend = 25,
    psDarkenBlend = 4,
    psMultiplyBlend = 5,
    psColorBurnBlend = 6,
    psLinearBurnBlend = 7,
    psLightenBlend = 8,
    psScreenBlend = 9,
    psColorDodgeBlend = 10,
    psLinearDodgeBlend = 11,
    psOverlayBlend = 12,
    psSoftLightBlend = 13,
    psHardLightBlend = 14,
    psVividLightBlend = 15,
    psLinearLightBlend = 16,
    psPinLightBlend = 17,
    psDifferenceBlend = 18,
    psExclusionBlend = 19,
    psSubtractBlend = 27,
    psDivideBlend = 28,
    psHueBlend = 20,
    psSaturationBlendColor = 21,
    _PsColorBlendMode = 22,
    psLuminosityBlend = 23,
    psHardMixBlend = 26
};

enum PsSelectionType
{
    psReplaceSelection = 1,
    psExtendSelection = 2,
    psDiminishSelection = 3,
    psIntersectSelection = 4
};

enum PsExportType
{
    psIllustratorPaths = 1,
    psSaveForWeb = 2
};

enum PsTextureType
{
    psBlocksTexture = 1,
    psCanvasTexture = 2,
    psFrostedTexture = 3,
    psTinyLensTexture = 4,
    psTextureFile = 5
};

enum PsStrokeLocation
{
    psInsideStroke = 1,
    psCenterStroke = 2,
    psOutsideStroke = 3
};

enum PsJavaScriptExecutionMode
{
    psNeverShowDebugger = 1,
    psDebuggerOnError = 2,
    psBeforeRunning = 3
};

enum PsSourceSpaceType
{
    psDocumentSpace = 1,
    psProofSpace = 2
};

enum PsGallerySecurityTextColorType
{
    psBlackText = 1,
    psWhiteText = 2,
    psCustomText = 3
};

enum PsToolType
{
    psPencil = 1,
    psBrush = 2,
    psEraser = 3,
    psBackgroundEraser = 4,
    psCloneStamp = 5,
    psPatternStamp = 6,
    psHealingBrush = 7,
    psHistoryBrush = 8,
    psArtHistoryBrush = 9,
    psSmudge = 10,
    psBlur = 11,
    psSharpen = 12,
    psDodge = 13,
    psBurn = 14,
    psSponge = 15,
    psColorReplacementTool = 16
};

enum PsFileNamingType
{
    psDocumentNameMixed = 1,
    psDocumentNameLower = 2,
    psDocumentNameUpper = 3,
    psSerialNumber1 = 4,
    psSerialNumber2 = 5,
    psSerialNumber3 = 6,
    psSerialNumber4 = 7,
    psSerialLetterLower = 8,
    psSerialLetterUpper = 9,
    psMmddyy = 10,
    psMmdd = 11,
    psYyyymmdd = 12,
    psYymmdd = 13,
    psYyddmm = 14,
    psDdmmyy = 15,
    psDdmm = 16,
    psExtensionLower = 17,
    psExtensionUpper = 18
};

enum PsDepthMapSource
{
    psNoSource = 1,
    psTransparencyChannel = 2,
    psLayerMask = 3,
    psImageHighlight = 4
};

enum PsGeometry
{
    psTriangle = 0,
    psPentagon = 1,
    psHexagon = 2,
    psSquareGeometry = 3,
    psHeptagon = 4,
    psOctagon = 5
};

enum PsMeasurementSource
{
    psMeasureSelection = 1,
    psMeasureCountTool = 2,
    psMeasureRulerTool = 3
};

enum PsMeasurementRange
{
    psAllMeasurements = 1,
    psActiveMeasurements = 2
};

struct __declspec(uuid("99aea70e-4d13-44bf-a878-33345cbfcbc8"))
Application;
    // [ default ] dispinterface _Application

struct __declspec(uuid("e548108c-5b87-4bd5-bd88-c034db5b10e4"))
PhotoCDOpenOptions;
    // [ default ] dispinterface _PhotoCDOpenOptions

struct __declspec(uuid("96d48725-75bf-4733-962f-120c5681ade4"))
RawFormatOpenOptions;
    // [ default ] dispinterface _RawFormatOpenOptions

struct __declspec(uuid("d2616c9b-22b5-491b-8285-ff1b2b0b944a"))
PDFOpenOptions;
    // [ default ] dispinterface _PDFOpenOptions

struct __declspec(uuid("6a16cf17-ee0b-4a2f-9f9a-76fac0d51ec5"))
EPSOpenOptions;
    // [ default ] dispinterface _EPSOpenOptions

struct __declspec(uuid("a24cee4d-f054-4189-865a-df11d77ba60b"))
DICOMOpenOptions;
    // [ default ] dispinterface _DICOMOpenOptions

struct __declspec(uuid("9e582123-c2ba-4a25-9e56-3fd3baf8cb71"))
CameraRAWOpenOptions;
    // [ default ] dispinterface _CameraRAWOpenOptions

struct __declspec(uuid("fbbc7d1e-78ab-432d-970a-daaea9aa1c4d"))
PhotoshopSaveOptions;
    // [ default ] dispinterface _PhotoshopSaveOptions

struct __declspec(uuid("a2dfd5e5-3983-4121-ac5d-e51e392f4dff"))
BMPSaveOptions;
    // [ default ] dispinterface _BMPSaveOptions

struct __declspec(uuid("a5f25dbb-333f-4397-8d33-99e7d9b84e1c"))
GIFSaveOptions;
    // [ default ] dispinterface _GIFSaveOptions

struct __declspec(uuid("ba94feb3-1812-4d0b-8954-4aac46c6fc24"))
EPSSaveOptions;
    // [ default ] dispinterface _EPSSaveOptions

struct __declspec(uuid("098a6e1b-2858-452a-861e-768ecf77342b"))
JPEGSaveOptions;
    // [ default ] dispinterface _JPEGSaveOptions

struct __declspec(uuid("299fcd63-098d-4039-8aec-f4d83de04865"))
PDFSaveOptions;
    // [ default ] dispinterface _PDFSaveOptions

struct __declspec(uuid("9fe8667d-3d4d-4509-8c39-659f961e10c6"))
PICTFileSaveOptions;
    // [ default ] dispinterface _PICTFileSaveOptions

struct __declspec(uuid("48f059ef-bc3e-4763-b820-aa3bb88875ff"))
PixarSaveOptions;
    // [ default ] dispinterface _PixarSaveOptions

struct __declspec(uuid("12b598b3-499f-4789-b6a4-900f0125e6eb"))
PNGSaveOptions;
    // [ default ] dispinterface _PNGSaveOptions

struct __declspec(uuid("b46396c2-8295-4754-b3a0-65c6512fb8f5"))
RawSaveOptions;
    // [ default ] dispinterface _RawSaveOptions

struct __declspec(uuid("2bd9d654-530e-4ba5-b6d2-b0eb1fea1b32"))
SGIRGBSaveOptions;
    // [ default ] dispinterface _SGIRGBSaveOptions

struct __declspec(uuid("8aea5346-0dd7-4d56-ae28-0c993f35b6f1"))
TargaSaveOptions;
    // [ default ] dispinterface _TargaSaveOptions

struct __declspec(uuid("cbc6639c-1c24-4820-80d9-1166c7d59782"))
TiffSaveOptions;
    // [ default ] dispinterface _TiffSaveOptions

struct __declspec(uuid("a2770b5c-794a-41fd-8370-feff0ca6fbf9"))
DCS1_SaveOptions;
    // [ default ] dispinterface _DCS1_SaveOptions

struct __declspec(uuid("2c7f9b6c-0676-4acc-91b9-53bbe3d4f5ed"))
DCS2_SaveOptions;
    // [ default ] dispinterface _DCS2_SaveOptions

struct __declspec(uuid("a9701d4d-73d2-4547-9ca9-3e655c9d8327"))
ExportOptionsIllustrator;
    // [ default ] dispinterface _ExportOptionsIllustrator

struct __declspec(uuid("599d4b7a-8c9f-41d0-afbc-54cc1d0f957a"))
ExportOptionsSaveForWeb;
    // [ default ] dispinterface _ExportOptionsSaveForWeb

struct __declspec(uuid("3407d9a0-a820-4be5-8e28-410d677488aa"))
BitmapConversionOptions;
    // [ default ] dispinterface _BitmapConversionOptions

struct __declspec(uuid("d8cdc179-c3d5-4eed-a042-938683c29355"))
IndexedConversionOptions;
    // [ default ] dispinterface _IndexedConversionOptions

struct __declspec(uuid("24f0ab76-0d84-4c40-8b96-570fb3985310"))
SolidColor;
    // [ default ] dispinterface _SolidColor

struct __declspec(uuid("13c5c35e-b099-4275-80b6-cf17de8f2336"))
GrayColor;
    // [ default ] dispinterface _GrayColor

struct __declspec(uuid("d26a2bbd-cb80-486d-bc0e-1218f778d385"))
RGBColor;
    // [ default ] dispinterface _RGBColor

struct __declspec(uuid("e595896f-0407-4659-994f-19235ffb4d97"))
CMYKColor;
    // [ default ] dispinterface _CMYKColor

struct __declspec(uuid("9f67edb6-f1d0-458e-b254-67379cabaaa0"))
LabColor;
    // [ default ] dispinterface _LabColor

struct __declspec(uuid("1f7a215c-382b-4973-8093-bc1090a0107b"))
HSBColor;
    // [ default ] dispinterface _HSBColor

struct __declspec(uuid("ecc0e713-bc0d-4c54-86ca-777823d0dbe4"))
NoColor;
    // [ default ] dispinterface _NoColor

struct __declspec(uuid("9e6aaf3b-3cd1-47fd-a80a-ebb7adbc53ad"))
PresentationOptions;
    // [ default ] dispinterface _PresentationOptions

struct __declspec(uuid("47473c27-0ef2-4604-aec9-85bce5364137"))
GalleryOptions;
    // [ default ] dispinterface _GalleryOptions

struct __declspec(uuid("ecf6155e-bfaa-40f5-8438-f967fde1f5ff"))
GalleryBannerOptions;
    // [ default ] dispinterface _GalleryBannerOptions

struct __declspec(uuid("1ad38eeb-c67d-4fac-bdf4-779f0cfc85ab"))
GalleryImagesOptions;
    // [ default ] dispinterface _GalleryImagesOptions

struct __declspec(uuid("77afa639-a23d-4710-94a0-5d5de8f19677"))
GalleryThumbnailOptions;
    // [ default ] dispinterface _GalleryThumbnailOptions

struct __declspec(uuid("7bdd6e7b-8ff7-4977-8e6a-5b62cfa47268"))
GalleryCustomColorOptions;
    // [ default ] dispinterface _GalleryCustomColorOptions

struct __declspec(uuid("fa15f3c2-ce4f-4df2-a37a-adae44a50d55"))
GallerySecurityOptions;
    // [ default ] dispinterface _GallerySecurityOptions

struct __declspec(uuid("8fd90215-58cf-4301-9f13-b0c26ba9fabf"))
ContactSheetOptions;
    // [ default ] dispinterface _ContactSheetOptions

struct __declspec(uuid("568c23fd-cee1-4e9c-a743-5335a23a9134"))
PicturePackageOptions;
    // [ default ] dispinterface _PicturePackageOptions

struct __declspec(uuid("ff49950b-15cf-4228-833c-aaa05baf919e"))
BatchOptions;
    // [ default ] dispinterface _BatchOptions

struct __declspec(uuid("4a304587-695b-482a-a48d-cdc2c9ac597a"))
SubPathInfo;
    // [ default ] dispinterface _SubPathInfo

struct __declspec(uuid("177e3ca8-73ea-4d4e-a6f0-e2aef336f273"))
PathPointInfo;
    // [ default ] dispinterface _PathPointInfo

struct __declspec(uuid("1db7f789-1d27-49dd-a0c2-91b13f4ecca4"))
ActionDescriptor;
    // [ default ] dispinterface _ActionDescriptor

struct __declspec(uuid("c21b3526-8bac-496a-8e87-d2edb1fc87d5"))
ActionList;
    // [ default ] dispinterface _ActionList

struct __declspec(uuid("2c253307-8cd7-4747-ad28-64d9d88fe2d9"))
ActionReference;
    // [ default ] dispinterface _ActionReference

//
// Function implementation mapping
//

#pragma start_map_region(".\Mark\Photoshop\PSscriptingsupport.tli")
__declspec(implementation_key(1)) _bstr_t _Application::GetColorSettings ( );
__declspec(implementation_key(2)) _bstr_t _Application::GetWinColorSettings ( );
__declspec(implementation_key(3)) DocumentPtr _Application::GetActiveDocument ( );
__declspec(implementation_key(4)) void _Application::PutActiveDocument ( struct Document * _arg1 );
__declspec(implementation_key(5)) _bstr_t _Application::GetName ( );
__declspec(implementation_key(6)) _bstr_t _Application::GetPath ( );
__declspec(implementation_key(7)) PreferencesPtr _Application::GetPreferences ( );
__declspec(implementation_key(8)) _bstr_t _Application::GetScriptingVersion ( );
__declspec(implementation_key(9)) double _Application::GetFreeMemory ( );
__declspec(implementation_key(10)) _bstr_t _Application::GetVersion ( );
__declspec(implementation_key(11)) VARIANT_BOOL _Application::GetVisible ( );
__declspec(implementation_key(12)) void _Application::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13)) enum PsDialogModes _Application::GetDisplayDialogs ( );
__declspec(implementation_key(14)) void _Application::PutDisplayDialogs ( enum PsDialogModes _arg1 );
__declspec(implementation_key(15)) _SolidColorPtr _Application::GetForegroundColor ( );
__declspec(implementation_key(16)) void _Application::PutForegroundColor ( struct _SolidColor * _arg1 );
__declspec(implementation_key(17)) void _Application::PutRefForegroundColor ( struct _SolidColor * _arg1 );
__declspec(implementation_key(18)) _SolidColorPtr _Application::GetBackgroundColor ( );
__declspec(implementation_key(19)) void _Application::PutBackgroundColor ( struct _SolidColor * _arg1 );
__declspec(implementation_key(20)) void _Application::PutRefBackgroundColor ( struct _SolidColor * _arg1 );
__declspec(implementation_key(21)) VARIANT_BOOL _Application::GetNotifiersEnabled ( );
__declspec(implementation_key(22)) void _Application::PutNotifiersEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(23)) _variant_t _Application::GetWindowsFileTypes ( );
__declspec(implementation_key(24)) _variant_t _Application::GetMacintoshFileTypes ( );
__declspec(implementation_key(25)) _bstr_t _Application::GetPreferencesFolder ( );
__declspec(implementation_key(26)) _bstr_t _Application::GetLocale ( );
__declspec(implementation_key(27)) DocumentsPtr _Application::GetDocuments ( );
__declspec(implementation_key(28)) TextFontsPtr _Application::GetFonts ( );
__declspec(implementation_key(29)) NotifiersPtr _Application::GetNotifiers ( );
__declspec(implementation_key(30)) _bstr_t _Application::GetScriptingBuildDate ( );
__declspec(implementation_key(31)) _variant_t _Application::GetRecentFiles ( );
__declspec(implementation_key(32)) _bstr_t _Application::GetBuild ( );
__declspec(implementation_key(33)) _bstr_t _Application::GetSystemInformation ( );
__declspec(implementation_key(34)) MeasurementLogPtr _Application::GetMeasurementLog ( );
__declspec(implementation_key(35)) _ApplicationPtr _Application::GetApplication ( );
__declspec(implementation_key(36)) HRESULT _Application::DoAction ( _bstr_t Action, _bstr_t From );
__declspec(implementation_key(37)) HRESULT _Application::Load ( _bstr_t Document );
__declspec(implementation_key(38)) DocumentPtr _Application::Open ( _bstr_t Document, const _variant_t & As, const _variant_t & AsSmartObject );
__declspec(implementation_key(39)) HRESULT _Application::Purge ( enum PsPurgeTarget Target );
__declspec(implementation_key(40)) _bstr_t _Application::DoJavaScript ( _bstr_t JavaScriptCode, const _variant_t & Arguments, const _variant_t & ExecutionMode );
__declspec(implementation_key(41)) _bstr_t _Application::DoJavaScriptFile ( _bstr_t JavaScriptFile, const _variant_t & Arguments, const _variant_t & ExecutionMode );
__declspec(implementation_key(42)) _bstr_t _Application::MakePhotoGallery ( const _variant_t & InputFolder, _bstr_t OutputFolder, const _variant_t & Options );
__declspec(implementation_key(43)) _bstr_t _Application::MakePDFPresentation ( const _variant_t & InputFiles, _bstr_t OutputFile, const _variant_t & Options );
__declspec(implementation_key(44)) _bstr_t _Application::MakePhotomerge ( const _variant_t & InputFiles );
__declspec(implementation_key(45)) _bstr_t _Application::MakeContactSheet ( const _variant_t & InputFiles, const _variant_t & Options );
__declspec(implementation_key(46)) _bstr_t _Application::MakePicturePackage ( const _variant_t & InputFiles, const _variant_t & Options );
__declspec(implementation_key(47)) _bstr_t _Application::Batch ( const _variant_t & InputFiles, _bstr_t Action, _bstr_t From, const _variant_t & Options );
__declspec(implementation_key(48)) HRESULT _Application::Quit ( );
__declspec(implementation_key(49)) HRESULT _Application::Refresh ( );
__declspec(implementation_key(50)) VARIANT_BOOL _Application::FeatureEnabled ( _bstr_t Name );
__declspec(implementation_key(51)) _variant_t _Application::OpenDialog ( );
__declspec(implementation_key(52)) _ActionDescriptorPtr _Application::ExecuteAction ( long EventID, const _variant_t & Descriptor, const _variant_t & DisplayDialogs );
__declspec(implementation_key(53)) _ActionDescriptorPtr _Application::ExecuteActionGet ( struct _ActionReference * Reference );
__declspec(implementation_key(54)) long _Application::StringIDToTypeID ( _bstr_t StringID );
__declspec(implementation_key(55)) _bstr_t _Application::TypeIDToStringID ( long TypeID );
__declspec(implementation_key(56)) long _Application::CharIDToTypeID ( _bstr_t CharID );
__declspec(implementation_key(57)) _bstr_t _Application::TypeIDToCharID ( long TypeID );
__declspec(implementation_key(58)) HRESULT _Application::ChangeColorSettings ( const _variant_t & Name, const _variant_t & File );
__declspec(implementation_key(59)) ArtLayerPtr Document::GetBackgroundLayer ( );
__declspec(implementation_key(60)) enum PsBitsPerChannelType Document::GetBitsPerChannel ( );
__declspec(implementation_key(61)) void Document::PutBitsPerChannel ( enum PsBitsPerChannelType _arg1 );
__declspec(implementation_key(62)) enum PsColorProfileType Document::GetColorProfileType ( );
__declspec(implementation_key(63)) void Document::PutColorProfileType ( enum PsColorProfileType _arg1 );
__declspec(implementation_key(64)) _bstr_t Document::GetColorProfileName ( );
__declspec(implementation_key(65)) void Document::PutColorProfileName ( _bstr_t _arg1 );
__declspec(implementation_key(66)) enum PsDocumentMode Document::GetMode ( );
__declspec(implementation_key(67)) _variant_t Document::GetComponentChannels ( );
__declspec(implementation_key(68)) HistoryStatePtr Document::GetActiveHistoryState ( );
__declspec(implementation_key(69)) void Document::PutActiveHistoryState ( struct HistoryState * _arg1 );
__declspec(implementation_key(70)) HistoryStatePtr Document::GetActiveHistoryBrushSource ( );
__declspec(implementation_key(71)) void Document::PutActiveHistoryBrushSource ( struct HistoryState * _arg1 );
__declspec(implementation_key(72)) IDispatchPtr Document::GetActiveLayer ( );
__declspec(implementation_key(73)) void Document::PutActiveLayer ( IDispatch * _arg1 );
__declspec(implementation_key(74)) _variant_t Document::GetActiveChannels ( );
__declspec(implementation_key(75)) void Document::PutActiveChannels ( const _variant_t & _arg1 );
__declspec(implementation_key(76)) DocumentInfoPtr Document::GetInfo ( );
__declspec(implementation_key(77)) _bstr_t Document::GetFullName ( );
__declspec(implementation_key(78)) double Document::GetHeight ( );
__declspec(implementation_key(79)) VARIANT_BOOL Document::GetManaged ( );
__declspec(implementation_key(80)) VARIANT_BOOL Document::GetSaved ( );
__declspec(implementation_key(81)) _bstr_t Document::GetName ( );
__declspec(implementation_key(82)) _bstr_t Document::GetPath ( );
__declspec(implementation_key(83)) VARIANT_BOOL Document::GetQuickMaskMode ( );
__declspec(implementation_key(84)) void Document::PutQuickMaskMode ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(85)) double Document::GetResolution ( );
__declspec(implementation_key(86)) SelectionPtr Document::GetSelection ( );
__declspec(implementation_key(87)) double Document::GetWidth ( );
__declspec(implementation_key(88)) _variant_t Document::GetHistogram ( );
__declspec(implementation_key(89)) double Document::GetPixelAspectRatio ( );
__declspec(implementation_key(90)) void Document::PutPixelAspectRatio ( double _arg1 );
__declspec(implementation_key(91)) XMPMetadataPtr Document::GetXMPMetadata ( );
__declspec(implementation_key(92)) MeasurementScalePtr Document::GetMeasurementScale ( );
__declspec(implementation_key(93)) long Document::Getid ( );
__declspec(implementation_key(94)) LayersPtr Document::GetLayers ( );
__declspec(implementation_key(95)) LayerSetsPtr Document::GetLayerSets ( );
__declspec(implementation_key(96)) ArtLayersPtr Document::GetArtLayers ( );
__declspec(implementation_key(97)) ChannelsPtr Document::GetChannels ( );
__declspec(implementation_key(98)) HistoryStatesPtr Document::GetHistoryStates ( );
__declspec(implementation_key(99)) LayerCompsPtr Document::GetLayerComps ( );
__declspec(implementation_key(100)) PathItemsPtr Document::GetPathItems ( );
__declspec(implementation_key(101)) CountItemsPtr Document::GetCountItems ( );
__declspec(implementation_key(102)) ColorSamplersPtr Document::GetColorSamplers ( );
__declspec(implementation_key(103)) _ApplicationPtr Document::GetApplication ( );
__declspec(implementation_key(104)) IDispatchPtr Document::GetParent ( );
__declspec(implementation_key(105)) HRESULT Document::Close ( const _variant_t & Saving );
__declspec(implementation_key(106)) HRESULT Document::ConvertProfile ( _bstr_t DestinationProfile, enum PsIntent Intent, const _variant_t & BlackPointCompensation, const _variant_t & Dither );
__declspec(implementation_key(107)) HRESULT Document::ChangeMode ( enum PsChangeMode DestinationMode, const _variant_t & Options );
__declspec(implementation_key(108)) HRESULT Document::Crop ( const _variant_t & Bounds, const _variant_t & Angle, const _variant_t & Width, const _variant_t & Height );
__declspec(implementation_key(109)) HRESULT Document::Export ( _bstr_t ExportIn, const _variant_t & ExportAs, const _variant_t & Options );
__declspec(implementation_key(110)) HRESULT Document::FlipCanvas ( enum PsDirection Direction );
__declspec(implementation_key(111)) HRESULT Document::ImportAnnotations ( _bstr_t File );
__declspec(implementation_key(112)) HRESULT Document::Flatten ( );
__declspec(implementation_key(113)) HRESULT Document::MergeVisibleLayers ( );
__declspec(implementation_key(114)) ArtLayerPtr Document::Paste ( const _variant_t & IntoSelection );
__declspec(implementation_key(115)) HRESULT Document::PrintOut ( const _variant_t & SourceSpace, const _variant_t & PrintSpace, const _variant_t & Intent, const _variant_t & BlackPointCompensation );
__declspec(implementation_key(116)) HRESULT Document::RevealAll ( );
__declspec(implementation_key(117)) HRESULT Document::RasterizeAllLayers ( );
__declspec(implementation_key(118)) HRESULT Document::RecordMeasurements ( const _variant_t & Source, const _variant_t & DataPoints );
__declspec(implementation_key(119)) HRESULT Document::RotateCanvas ( double Angle );
__declspec(implementation_key(120)) HRESULT Document::ResizeCanvas ( const _variant_t & Width, const _variant_t & Height, const _variant_t & Anchor );
__declspec(implementation_key(121)) HRESULT Document::ResizeImage ( const _variant_t & Width, const _variant_t & Height, const _variant_t & Resolution, const _variant_t & ResampleMethod );
__declspec(implementation_key(122)) _variant_t Document::SplitChannels ( );
__declspec(implementation_key(123)) HRESULT Document::Save ( );
__declspec(implementation_key(124)) HRESULT Document::SaveAs ( _bstr_t SaveIn, const _variant_t & Options, const _variant_t & AsCopy, const _variant_t & ExtensionType );
__declspec(implementation_key(125)) HRESULT Document::Trap ( long Width );
__declspec(implementation_key(126)) HRESULT Document::Trim ( const _variant_t & Type, const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right );
__declspec(implementation_key(127)) DocumentPtr Document::Duplicate ( const _variant_t & Name, const _variant_t & MergeLayersOnly );
__declspec(implementation_key(128)) HRESULT Document::AutoCount ( struct Channel * Channel, long Threshold );
__declspec(implementation_key(129)) double ArtLayer::GetFillOpacity ( );
__declspec(implementation_key(130)) void ArtLayer::PutFillOpacity ( double _arg1 );
__declspec(implementation_key(131)) VARIANT_BOOL ArtLayer::GetGrouped ( );
__declspec(implementation_key(132)) void ArtLayer::PutGrouped ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(133)) VARIANT_BOOL ArtLayer::GetIsBackgroundLayer ( );
__declspec(implementation_key(134)) void ArtLayer::PutIsBackgroundLayer ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(135)) VARIANT_BOOL ArtLayer::GetPixelsLocked ( );
__declspec(implementation_key(136)) void ArtLayer::PutPixelsLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(137)) VARIANT_BOOL ArtLayer::GetPositionLocked ( );
__declspec(implementation_key(138)) void ArtLayer::PutPositionLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(139)) VARIANT_BOOL ArtLayer::GetTransparentPixelsLocked ( );
__declspec(implementation_key(140)) void ArtLayer::PutTransparentPixelsLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(141)) enum PsLayerKind ArtLayer::GetKind ( );
__declspec(implementation_key(142)) void ArtLayer::PutKind ( enum PsLayerKind _arg1 );
__declspec(implementation_key(143)) TextItemPtr ArtLayer::GetTextItem ( );
__declspec(implementation_key(144)) IDispatchPtr ArtLayer::GetLayer ( );
__declspec(implementation_key(145)) _bstr_t ArtLayer::GetName ( );
__declspec(implementation_key(146)) void ArtLayer::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(147)) VARIANT_BOOL ArtLayer::GetAllLocked ( );
__declspec(implementation_key(148)) void ArtLayer::PutAllLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(149)) enum PsBlendMode ArtLayer::GetBlendMode ( );
__declspec(implementation_key(150)) void ArtLayer::PutBlendMode ( enum PsBlendMode _arg1 );
__declspec(implementation_key(151)) _variant_t ArtLayer::GetLinkedLayers ( );
__declspec(implementation_key(152)) double ArtLayer::GetOpacity ( );
__declspec(implementation_key(153)) void ArtLayer::PutOpacity ( double _arg1 );
__declspec(implementation_key(154)) VARIANT_BOOL ArtLayer::GetVisible ( );
__declspec(implementation_key(155)) void ArtLayer::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(156)) enum PsLayerType ArtLayer::GetLayerType ( );
__declspec(implementation_key(157)) ArtLayerPtr ArtLayer::GetArtLayer ( );
__declspec(implementation_key(158)) LayerSetPtr ArtLayer::GetLayerSet ( );
__declspec(implementation_key(159)) _variant_t ArtLayer::GetBounds ( );
__declspec(implementation_key(160)) _ApplicationPtr ArtLayer::GetApplication ( );
__declspec(implementation_key(161)) IDispatchPtr ArtLayer::GetParent ( );
__declspec(implementation_key(162)) HRESULT ArtLayer::ApplyStyle ( _bstr_t StyleName );
__declspec(implementation_key(163)) HRESULT ArtLayer::Clear ( );
__declspec(implementation_key(164)) HRESULT ArtLayer::Copy ( const _variant_t & Merge );
__declspec(implementation_key(165)) HRESULT ArtLayer::Cut ( );
__declspec(implementation_key(166)) ArtLayerPtr ArtLayer::Merge ( );
__declspec(implementation_key(167)) HRESULT ArtLayer::Rasterize ( enum PsRasterizeType Target );
__declspec(implementation_key(168)) HRESULT ArtLayer::ApplyAverage ( );
__declspec(implementation_key(169)) HRESULT ArtLayer::ApplyGaussianBlur ( double Radius );
__declspec(implementation_key(170)) HRESULT ArtLayer::ApplyLensBlur ( const _variant_t & Source, const _variant_t & FocalDistance, const _variant_t & InvertDepthMap, const _variant_t & Shape, const _variant_t & Radius, const _variant_t & BladeCurvature, const _variant_t & Rotation, const _variant_t & Brightness, const _variant_t & Threshold, const _variant_t & Amount, const _variant_t & Distribution, const _variant_t & Monochromatic );
__declspec(implementation_key(171)) HRESULT ArtLayer::ApplyBlur ( );
__declspec(implementation_key(172)) HRESULT ArtLayer::ApplyBlurMore ( );
__declspec(implementation_key(173)) HRESULT ArtLayer::ApplyMotionBlur ( long Angle, double Radius );
__declspec(implementation_key(174)) HRESULT ArtLayer::ApplyRadialBlur ( long Amount, enum PsRadialBlurMethod BlurMethod, enum PsRadialBlurQuality BlurQuality );
__declspec(implementation_key(175)) HRESULT ArtLayer::ApplySmartBlur ( double Radius, double Threshold, enum PsSmartBlurQuality BlurQuality, enum PsSmartBlurMode Mode );
__declspec(implementation_key(176)) HRESULT ArtLayer::ApplyDiffuseGlow ( long Graininess, long GlowAmount, long ClearAmount );
__declspec(implementation_key(177)) HRESULT ArtLayer::ApplyDisplace ( long HorizontalScale, long VerticalScale, enum PsDisplacementMapType DisplacementType, enum PsUndefinedAreas UndefinedAreas, _bstr_t DisplacementMapFile );
__declspec(implementation_key(178)) HRESULT ArtLayer::ApplyGlassEffect ( long Distortion, long Smoothness, long Scaling, const _variant_t & Invert, const _variant_t & Texture, const _variant_t & TextureFile );
__declspec(implementation_key(179)) HRESULT ArtLayer::ApplyOceanRipple ( long Size, long Magnitude );
__declspec(implementation_key(180)) HRESULT ArtLayer::ApplyPinch ( long Amount );
__declspec(implementation_key(181)) HRESULT ArtLayer::ApplyPolarCoordinates ( enum PsPolarConversionType Conversion );
__declspec(implementation_key(182)) HRESULT ArtLayer::ApplyRipple ( long Amount, enum PsRippleSize Size );
__declspec(implementation_key(183)) HRESULT ArtLayer::ApplyShear ( const _variant_t & Curve, enum PsUndefinedAreas UndefinedAreas );
__declspec(implementation_key(184)) HRESULT ArtLayer::ApplySpherize ( long Amount, enum PsSpherizeMode Mode );
__declspec(implementation_key(185)) HRESULT ArtLayer::ApplyTwirl ( long Angle );
__declspec(implementation_key(186)) HRESULT ArtLayer::ApplyWave ( long GeneratorNumber, long MinimumWavelength, long MaximumWavelength, long MinimumAmplitude, long MaximumAmplitude, long HorizontalScale, long VerticalScale, enum PsWaveType WaveType, enum PsUndefinedAreas UndefinedAreas, long RandomSeed );
__declspec(implementation_key(187)) HRESULT ArtLayer::ApplyZigZag ( long Amount, long Ridges, enum PsZigZagType Style );
__declspec(implementation_key(188)) HRESULT ArtLayer::ApplyAddNoise ( double Amount, enum PsNoiseDistribution Distribution, VARIANT_BOOL Monochromatic );
__declspec(implementation_key(189)) HRESULT ArtLayer::ApplyDespeckle ( );
__declspec(implementation_key(190)) HRESULT ArtLayer::ApplyDustAndScratches ( long Radius, long Threshold );
__declspec(implementation_key(191)) HRESULT ArtLayer::ApplyMedianNoise ( double Radius );
__declspec(implementation_key(192)) HRESULT ArtLayer::ApplyClouds ( );
__declspec(implementation_key(193)) HRESULT ArtLayer::ApplyDifferenceClouds ( );
__declspec(implementation_key(194)) HRESULT ArtLayer::ApplyLensFlare ( long Brightness, const _variant_t & FlareCenter, enum PsLensType LensType );
__declspec(implementation_key(195)) HRESULT ArtLayer::ApplyTextureFill ( _bstr_t TextureFile );
__declspec(implementation_key(196)) HRESULT ArtLayer::ApplySharpen ( );
__declspec(implementation_key(197)) HRESULT ArtLayer::ApplySharpenEdges ( );
__declspec(implementation_key(198)) HRESULT ArtLayer::ApplySharpenMore ( );
__declspec(implementation_key(199)) HRESULT ArtLayer::ApplyUnSharpMask ( double Amount, double Radius, long Threshold );
__declspec(implementation_key(200)) HRESULT ArtLayer::ApplyDeInterlace ( enum PsEliminateFields EliminateFields, enum PsCreateFields CreateFields );
__declspec(implementation_key(201)) HRESULT ArtLayer::ApplyNTSC ( );
__declspec(implementation_key(202)) HRESULT ArtLayer::ApplyCustomFilter ( const _variant_t & Characteristics, long Scale, long Offset );
__declspec(implementation_key(203)) HRESULT ArtLayer::ApplyHighPass ( double Radius );
__declspec(implementation_key(204)) HRESULT ArtLayer::ApplyMaximum ( double Radius );
__declspec(implementation_key(205)) HRESULT ArtLayer::ApplyMinimum ( double Radius );
__declspec(implementation_key(206)) HRESULT ArtLayer::ApplyOffset ( double Horizontal, double Vertical, enum PsOffsetUndefinedAreas UndefinedAreas );
__declspec(implementation_key(207)) HRESULT ArtLayer::AdjustLevels ( long InputRangeStart, long InputRangeEnd, double InputRangeGamma, long OutputRangeStart, long OutputRangeEnd );
__declspec(implementation_key(208)) HRESULT ArtLayer::AutoLevels ( );
__declspec(implementation_key(209)) HRESULT ArtLayer::AutoContrast ( );
__declspec(implementation_key(210)) HRESULT ArtLayer::AdjustCurves ( const _variant_t & CurveShape );
__declspec(implementation_key(211)) HRESULT ArtLayer::AdjustBrightnessContrast ( long Brightness, long Contrast );
__declspec(implementation_key(212)) HRESULT ArtLayer::AdjustColorBalance ( const _variant_t & Shadows, const _variant_t & Midtones, const _variant_t & Highlights, const _variant_t & PreserveLuminosity );
__declspec(implementation_key(213)) HRESULT ArtLayer::Desaturate ( );
__declspec(implementation_key(214)) HRESULT ArtLayer::SelectiveColor ( enum PsAdjustmentReference SelectionMethod, const _variant_t & Reds, const _variant_t & Yellows, const _variant_t & Greens, const _variant_t & Cyans, const _variant_t & Blues, const _variant_t & Magentas, const _variant_t & Whites, const _variant_t & Neutrals, const _variant_t & Blacks );
__declspec(implementation_key(215)) HRESULT ArtLayer::MixChannels ( const _variant_t & OutputChannels, const _variant_t & Monochrome );
__declspec(implementation_key(216)) HRESULT ArtLayer::Invert ( );
__declspec(implementation_key(217)) HRESULT ArtLayer::Equalize ( );
__declspec(implementation_key(218)) HRESULT ArtLayer::Threshold ( long Level );
__declspec(implementation_key(219)) HRESULT ArtLayer::Posterize ( long Levels );
__declspec(implementation_key(220)) HRESULT ArtLayer::PhotoFilter ( const _variant_t & FillColor, const _variant_t & Density, const _variant_t & PreserveLuminosity );
__declspec(implementation_key(221)) HRESULT ArtLayer::ShadowHighlight ( const _variant_t & ShadowAmount, const _variant_t & ShadowWidth, const _variant_t & ShadowRaduis, const _variant_t & HighlightAmount, const _variant_t & HighlightWidth, const _variant_t & HighlightRaduis, const _variant_t & ColorCorrection, const _variant_t & MidtoneContrast, const _variant_t & BlackClip, const _variant_t & WhiteClip );
__declspec(implementation_key(222)) HRESULT ArtLayer::Unlink ( );
__declspec(implementation_key(223)) HRESULT ArtLayer::Link ( IDispatch * With );
__declspec(implementation_key(224)) HRESULT ArtLayer::Translate ( const _variant_t & DeltaX, const _variant_t & DeltaY );
__declspec(implementation_key(225)) HRESULT ArtLayer::Rotate ( double Angle, const _variant_t & Anchor );
__declspec(implementation_key(226)) HRESULT ArtLayer::Resize ( const _variant_t & Horizontal, const _variant_t & Vertical, const _variant_t & Anchor );
__declspec(implementation_key(227)) HRESULT ArtLayer::MoveToBeginning ( IDispatch * Container );
__declspec(implementation_key(228)) HRESULT ArtLayer::MoveToEnd ( IDispatch * Container );
__declspec(implementation_key(229)) HRESULT ArtLayer::MoveBefore ( IDispatch * RelativeObject );
__declspec(implementation_key(230)) HRESULT ArtLayer::MoveAfter ( IDispatch * RelativeObject );
__declspec(implementation_key(231)) IDispatchPtr ArtLayer::Duplicate ( const _variant_t & RelativeObject, const _variant_t & InsertionLocation );
__declspec(implementation_key(232)) HRESULT ArtLayer::Move ( IDispatch * RelativeObject, enum PsElementPlacement InsertionLocation );
__declspec(implementation_key(233)) HRESULT ArtLayer::Delete ( );
__declspec(implementation_key(234)) enum PsAntiAlias TextItem::GetAntiAliasMethod ( );
__declspec(implementation_key(235)) void TextItem::PutAntiAliasMethod ( enum PsAntiAlias _arg1 );
__declspec(implementation_key(236)) enum PsAutoKernType TextItem::GetAutoKerning ( );
__declspec(implementation_key(237)) void TextItem::PutAutoKerning ( enum PsAutoKernType _arg1 );
__declspec(implementation_key(238)) _SolidColorPtr TextItem::GetColor ( );
__declspec(implementation_key(239)) void TextItem::PutColor ( struct _SolidColor * _arg1 );
__declspec(implementation_key(240)) void TextItem::PutRefColor ( struct _SolidColor * _arg1 );
__declspec(implementation_key(241)) VARIANT_BOOL TextItem::GetUseAutoLeading ( );
__declspec(implementation_key(242)) void TextItem::PutUseAutoLeading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(243)) double TextItem::GetTracking ( );
__declspec(implementation_key(244)) void TextItem::PutTracking ( double _arg1 );
__declspec(implementation_key(245)) long TextItem::GetVerticalScale ( );
__declspec(implementation_key(246)) void TextItem::PutVerticalScale ( long _arg1 );
__declspec(implementation_key(247)) long TextItem::GetHorizontalScale ( );
__declspec(implementation_key(248)) void TextItem::PutHorizontalScale ( long _arg1 );
__declspec(implementation_key(249)) double TextItem::GetBaselineShift ( );
__declspec(implementation_key(250)) void TextItem::PutBaselineShift ( double _arg1 );
__declspec(implementation_key(251)) _bstr_t TextItem::GetContents ( );
__declspec(implementation_key(252)) void TextItem::PutContents ( _bstr_t _arg1 );
__declspec(implementation_key(253)) _bstr_t TextItem::GetFont ( );
__declspec(implementation_key(254)) void TextItem::PutFont ( _bstr_t _arg1 );
__declspec(implementation_key(255)) double TextItem::GetLeading ( );
__declspec(implementation_key(256)) void TextItem::PutLeading ( double _arg1 );
__declspec(implementation_key(257)) VARIANT_BOOL TextItem::GetLigatures ( );
__declspec(implementation_key(258)) void TextItem::PutLigatures ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(259)) VARIANT_BOOL TextItem::GetAlternateLigatures ( );
__declspec(implementation_key(260)) void TextItem::PutAlternateLigatures ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(261)) VARIANT_BOOL TextItem::GetOldStyle ( );
__declspec(implementation_key(262)) void TextItem::PutOldStyle ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(263)) _variant_t TextItem::GetPosition ( );
__declspec(implementation_key(264)) void TextItem::PutPosition ( const _variant_t & _arg1 );
__declspec(implementation_key(265)) enum PsDirection TextItem::GetDirection ( );
__declspec(implementation_key(266)) void TextItem::PutDirection ( enum PsDirection _arg1 );
__declspec(implementation_key(267)) double TextItem::GetSize ( );
__declspec(implementation_key(268)) void TextItem::PutSize ( double _arg1 );
__declspec(implementation_key(269)) VARIANT_BOOL TextItem::GetFauxBold ( );
__declspec(implementation_key(270)) void TextItem::PutFauxBold ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(271)) VARIANT_BOOL TextItem::GetFauxItalic ( );
__declspec(implementation_key(272)) void TextItem::PutFauxItalic ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(273)) enum PsCase TextItem::GetCapitalization ( );
__declspec(implementation_key(274)) void TextItem::PutCapitalization ( enum PsCase _arg1 );
__declspec(implementation_key(275)) enum PsStrikeThruType TextItem::GetStrikeThru ( );
__declspec(implementation_key(276)) void TextItem::PutStrikeThru ( enum PsStrikeThruType _arg1 );
__declspec(implementation_key(277)) enum PsUnderlineType TextItem::GetUnderline ( );
__declspec(implementation_key(278)) void TextItem::PutUnderline ( enum PsUnderlineType _arg1 );
__declspec(implementation_key(279)) enum PsLanguage TextItem::GetLanguage ( );
__declspec(implementation_key(280)) void TextItem::PutLanguage ( enum PsLanguage _arg1 );
__declspec(implementation_key(281)) VARIANT_BOOL TextItem::GetNoBreak ( );
__declspec(implementation_key(282)) void TextItem::PutNoBreak ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(283)) enum PsTextType TextItem::GetKind ( );
__declspec(implementation_key(284)) void TextItem::PutKind ( enum PsTextType _arg1 );
__declspec(implementation_key(285)) enum PsJustification TextItem::GetJustification ( );
__declspec(implementation_key(286)) void TextItem::PutJustification ( enum PsJustification _arg1 );
__declspec(implementation_key(287)) double TextItem::GetLeftIndent ( );
__declspec(implementation_key(288)) void TextItem::PutLeftIndent ( double _arg1 );
__declspec(implementation_key(289)) double TextItem::GetFirstLineIndent ( );
__declspec(implementation_key(290)) void TextItem::PutFirstLineIndent ( double _arg1 );
__declspec(implementation_key(291)) double TextItem::GetRightIndent ( );
__declspec(implementation_key(292)) void TextItem::PutRightIndent ( double _arg1 );
__declspec(implementation_key(293)) double TextItem::GetSpaceBefore ( );
__declspec(implementation_key(294)) void TextItem::PutSpaceBefore ( double _arg1 );
__declspec(implementation_key(295)) double TextItem::GetSpaceAfter ( );
__declspec(implementation_key(296)) void TextItem::PutSpaceAfter ( double _arg1 );
__declspec(implementation_key(297)) VARIANT_BOOL TextItem::GetHangingPuntuation ( );
__declspec(implementation_key(298)) void TextItem::PutHangingPuntuation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(299)) enum PsTextComposer TextItem::GetTextComposer ( );
__declspec(implementation_key(300)) void TextItem::PutTextComposer ( enum PsTextComposer _arg1 );
__declspec(implementation_key(301)) VARIANT_BOOL TextItem::GetHyphenation ( );
__declspec(implementation_key(302)) void TextItem::PutHyphenation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(303)) double TextItem::GetMinimumGlyphScaling ( );
__declspec(implementation_key(304)) void TextItem::PutMinimumGlyphScaling ( double _arg1 );
__declspec(implementation_key(305)) double TextItem::GetDesiredGlyphScaling ( );
__declspec(implementation_key(306)) void TextItem::PutDesiredGlyphScaling ( double _arg1 );
__declspec(implementation_key(307)) double TextItem::GetMaximumGlyphScaling ( );
__declspec(implementation_key(308)) void TextItem::PutMaximumGlyphScaling ( double _arg1 );
__declspec(implementation_key(309)) double TextItem::GetMinimumLetterScaling ( );
__declspec(implementation_key(310)) void TextItem::PutMinimumLetterScaling ( double _arg1 );
__declspec(implementation_key(311)) double TextItem::GetDesiredLetterScaling ( );
__declspec(implementation_key(312)) void TextItem::PutDesiredLetterScaling ( double _arg1 );
__declspec(implementation_key(313)) double TextItem::GetMaximumLetterScaling ( );
__declspec(implementation_key(314)) void TextItem::PutMaximumLetterScaling ( double _arg1 );
__declspec(implementation_key(315)) double TextItem::GetMinimumWordScaling ( );
__declspec(implementation_key(316)) void TextItem::PutMinimumWordScaling ( double _arg1 );
__declspec(implementation_key(317)) double TextItem::GetDesiredWordScaling ( );
__declspec(implementation_key(318)) void TextItem::PutDesiredWordScaling ( double _arg1 );
__declspec(implementation_key(319)) double TextItem::GetMaximumWordScaling ( );
__declspec(implementation_key(320)) void TextItem::PutMaximumWordScaling ( double _arg1 );
__declspec(implementation_key(321)) double TextItem::GetAutoLeadingAmount ( );
__declspec(implementation_key(322)) void TextItem::PutAutoLeadingAmount ( double _arg1 );
__declspec(implementation_key(323)) long TextItem::GetHyphenateWordsLongerThan ( );
__declspec(implementation_key(324)) void TextItem::PutHyphenateWordsLongerThan ( long _arg1 );
__declspec(implementation_key(325)) long TextItem::GetHyphenateAfterFirst ( );
__declspec(implementation_key(326)) void TextItem::PutHyphenateAfterFirst ( long _arg1 );
__declspec(implementation_key(327)) long TextItem::GetHyphenateBeforeLast ( );
__declspec(implementation_key(328)) void TextItem::PutHyphenateBeforeLast ( long _arg1 );
__declspec(implementation_key(329)) long TextItem::GetHyphenLimit ( );
__declspec(implementation_key(330)) void TextItem::PutHyphenLimit ( long _arg1 );
__declspec(implementation_key(331)) double TextItem::GetHyphenationZone ( );
__declspec(implementation_key(332)) void TextItem::PutHyphenationZone ( double _arg1 );
__declspec(implementation_key(333)) VARIANT_BOOL TextItem::GetHyphenateCapitalWords ( );
__declspec(implementation_key(334)) void TextItem::PutHyphenateCapitalWords ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(335)) double TextItem::GetWidth ( );
__declspec(implementation_key(336)) void TextItem::PutWidth ( double _arg1 );
__declspec(implementation_key(337)) double TextItem::GetHeight ( );
__declspec(implementation_key(338)) void TextItem::PutHeight ( double _arg1 );
__declspec(implementation_key(339)) enum PsWarpStyle TextItem::GetWarpStyle ( );
__declspec(implementation_key(340)) void TextItem::PutWarpStyle ( enum PsWarpStyle _arg1 );
__declspec(implementation_key(341)) enum PsDirection TextItem::GetWarpDirection ( );
__declspec(implementation_key(342)) void TextItem::PutWarpDirection ( enum PsDirection _arg1 );
__declspec(implementation_key(343)) double TextItem::GetWarpBend ( );
__declspec(implementation_key(344)) void TextItem::PutWarpBend ( double _arg1 );
__declspec(implementation_key(345)) double TextItem::GetWarpHorizontalDistortion ( );
__declspec(implementation_key(346)) void TextItem::PutWarpHorizontalDistortion ( double _arg1 );
__declspec(implementation_key(347)) double TextItem::GetWarpVerticalDistortion ( );
__declspec(implementation_key(348)) void TextItem::PutWarpVerticalDistortion ( double _arg1 );
__declspec(implementation_key(349)) _ApplicationPtr TextItem::GetApplication ( );
__declspec(implementation_key(350)) IDispatchPtr TextItem::GetParent ( );
__declspec(implementation_key(351)) HRESULT TextItem::CreatePath ( );
__declspec(implementation_key(352)) HRESULT TextItem::ConvertToShape ( );
__declspec(implementation_key(353)) enum PsColorModel _SolidColor::GetModel ( );
__declspec(implementation_key(354)) void _SolidColor::PutModel ( enum PsColorModel _arg1 );
__declspec(implementation_key(355)) _RGBColorPtr _SolidColor::GetRGB ( );
__declspec(implementation_key(356)) void _SolidColor::PutRGB ( struct _RGBColor * _arg1 );
__declspec(implementation_key(357)) void _SolidColor::PutRefRGB ( struct _RGBColor * _arg1 );
__declspec(implementation_key(358)) _GrayColorPtr _SolidColor::GetGray ( );
__declspec(implementation_key(359)) void _SolidColor::PutGray ( struct _GrayColor * _arg1 );
__declspec(implementation_key(360)) void _SolidColor::PutRefGray ( struct _GrayColor * _arg1 );
__declspec(implementation_key(361)) _CMYKColorPtr _SolidColor::GetCMYK ( );
__declspec(implementation_key(362)) void _SolidColor::PutCMYK ( struct _CMYKColor * _arg1 );
__declspec(implementation_key(363)) void _SolidColor::PutRefCMYK ( struct _CMYKColor * _arg1 );
__declspec(implementation_key(364)) _LabColorPtr _SolidColor::GetLab ( );
__declspec(implementation_key(365)) void _SolidColor::PutLab ( struct _LabColor * _arg1 );
__declspec(implementation_key(366)) void _SolidColor::PutRefLab ( struct _LabColor * _arg1 );
__declspec(implementation_key(367)) _HSBColorPtr _SolidColor::GetHSB ( );
__declspec(implementation_key(368)) void _SolidColor::PutHSB ( struct _HSBColor * _arg1 );
__declspec(implementation_key(369)) void _SolidColor::PutRefHSB ( struct _HSBColor * _arg1 );
__declspec(implementation_key(370)) _RGBColorPtr _SolidColor::GetNearestWebColor ( );
__declspec(implementation_key(371)) _ApplicationPtr _SolidColor::GetApplication ( );
__declspec(implementation_key(372)) void _SolidColor::PutObjectValue ( struct _SolidColor * _arg1 );
__declspec(implementation_key(373)) void _SolidColor::PutRefObjectValue ( struct _SolidColor * _arg1 );
__declspec(implementation_key(374)) VARIANT_BOOL _SolidColor::IsEqual ( struct _SolidColor * Color );
__declspec(implementation_key(375)) double _RGBColor::GetRed ( );
__declspec(implementation_key(376)) void _RGBColor::PutRed ( double _arg1 );
__declspec(implementation_key(377)) double _RGBColor::GetGreen ( );
__declspec(implementation_key(378)) void _RGBColor::PutGreen ( double _arg1 );
__declspec(implementation_key(379)) double _RGBColor::GetBlue ( );
__declspec(implementation_key(380)) void _RGBColor::PutBlue ( double _arg1 );
__declspec(implementation_key(381)) _bstr_t _RGBColor::GetHexValue ( );
__declspec(implementation_key(382)) void _RGBColor::PutHexValue ( _bstr_t _arg1 );
__declspec(implementation_key(383)) _ApplicationPtr _RGBColor::GetApplication ( );
__declspec(implementation_key(384)) void _RGBColor::PutObjectValue ( struct _RGBColor * _arg1 );
__declspec(implementation_key(385)) void _RGBColor::PutRefObjectValue ( struct _RGBColor * _arg1 );
__declspec(implementation_key(386)) double _GrayColor::GetGray ( );
__declspec(implementation_key(387)) void _GrayColor::PutGray ( double _arg1 );
__declspec(implementation_key(388)) _ApplicationPtr _GrayColor::GetApplication ( );
__declspec(implementation_key(389)) void _GrayColor::PutObjectValue ( struct _GrayColor * _arg1 );
__declspec(implementation_key(390)) void _GrayColor::PutRefObjectValue ( struct _GrayColor * _arg1 );
__declspec(implementation_key(391)) double _CMYKColor::GetCyan ( );
__declspec(implementation_key(392)) void _CMYKColor::PutCyan ( double _arg1 );
__declspec(implementation_key(393)) double _CMYKColor::GetMagenta ( );
__declspec(implementation_key(394)) void _CMYKColor::PutMagenta ( double _arg1 );
__declspec(implementation_key(395)) double _CMYKColor::GetYellow ( );
__declspec(implementation_key(396)) void _CMYKColor::PutYellow ( double _arg1 );
__declspec(implementation_key(397)) double _CMYKColor::GetBlack ( );
__declspec(implementation_key(398)) void _CMYKColor::PutBlack ( double _arg1 );
__declspec(implementation_key(399)) _ApplicationPtr _CMYKColor::GetApplication ( );
__declspec(implementation_key(400)) void _CMYKColor::PutObjectValue ( struct _CMYKColor * _arg1 );
__declspec(implementation_key(401)) void _CMYKColor::PutRefObjectValue ( struct _CMYKColor * _arg1 );
__declspec(implementation_key(402)) double _LabColor::GetL ( );
__declspec(implementation_key(403)) void _LabColor::PutL ( double _arg1 );
__declspec(implementation_key(404)) double _LabColor::GetA ( );
__declspec(implementation_key(405)) void _LabColor::PutA ( double _arg1 );
__declspec(implementation_key(406)) double _LabColor::GetB ( );
__declspec(implementation_key(407)) void _LabColor::PutB ( double _arg1 );
__declspec(implementation_key(408)) _ApplicationPtr _LabColor::GetApplication ( );
__declspec(implementation_key(409)) void _LabColor::PutObjectValue ( struct _LabColor * _arg1 );
__declspec(implementation_key(410)) void _LabColor::PutRefObjectValue ( struct _LabColor * _arg1 );
__declspec(implementation_key(411)) double _HSBColor::GetHue ( );
__declspec(implementation_key(412)) void _HSBColor::PutHue ( double _arg1 );
__declspec(implementation_key(413)) double _HSBColor::GetSaturation ( );
__declspec(implementation_key(414)) void _HSBColor::PutSaturation ( double _arg1 );
__declspec(implementation_key(415)) double _HSBColor::GetBrightness ( );
__declspec(implementation_key(416)) void _HSBColor::PutBrightness ( double _arg1 );
__declspec(implementation_key(417)) _ApplicationPtr _HSBColor::GetApplication ( );
__declspec(implementation_key(418)) void _HSBColor::PutObjectValue ( struct _HSBColor * _arg1 );
__declspec(implementation_key(419)) void _HSBColor::PutRefObjectValue ( struct _HSBColor * _arg1 );
__declspec(implementation_key(420)) _variant_t LayerSet::GetEnabledChannels ( );
__declspec(implementation_key(421)) void LayerSet::PutEnabledChannels ( const _variant_t & _arg1 );
__declspec(implementation_key(422)) LayersPtr LayerSet::GetLayers ( );
__declspec(implementation_key(423)) LayerSetsPtr LayerSet::GetLayerSets ( );
__declspec(implementation_key(424)) ArtLayersPtr LayerSet::GetArtLayers ( );
__declspec(implementation_key(425)) IDispatchPtr LayerSet::GetLayer ( );
__declspec(implementation_key(426)) _bstr_t LayerSet::GetName ( );
__declspec(implementation_key(427)) void LayerSet::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(428)) VARIANT_BOOL LayerSet::GetAllLocked ( );
__declspec(implementation_key(429)) void LayerSet::PutAllLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(430)) enum PsBlendMode LayerSet::GetBlendMode ( );
__declspec(implementation_key(431)) void LayerSet::PutBlendMode ( enum PsBlendMode _arg1 );
__declspec(implementation_key(432)) _variant_t LayerSet::GetLinkedLayers ( );
__declspec(implementation_key(433)) double LayerSet::GetOpacity ( );
__declspec(implementation_key(434)) void LayerSet::PutOpacity ( double _arg1 );
__declspec(implementation_key(435)) VARIANT_BOOL LayerSet::GetVisible ( );
__declspec(implementation_key(436)) void LayerSet::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(437)) enum PsLayerType LayerSet::GetLayerType ( );
__declspec(implementation_key(438)) ArtLayerPtr LayerSet::GetArtLayer ( );
__declspec(implementation_key(439)) LayerSetPtr LayerSet::GetLayerSet ( );
__declspec(implementation_key(440)) _variant_t LayerSet::GetBounds ( );
__declspec(implementation_key(441)) _ApplicationPtr LayerSet::GetApplication ( );
__declspec(implementation_key(442)) IDispatchPtr LayerSet::GetParent ( );
__declspec(implementation_key(443)) ArtLayerPtr LayerSet::Merge ( );
__declspec(implementation_key(444)) HRESULT LayerSet::Unlink ( );
__declspec(implementation_key(445)) HRESULT LayerSet::Link ( IDispatch * With );
__declspec(implementation_key(446)) HRESULT LayerSet::Translate ( const _variant_t & DeltaX, const _variant_t & DeltaY );
__declspec(implementation_key(447)) HRESULT LayerSet::Rotate ( double Angle, const _variant_t & Anchor );
__declspec(implementation_key(448)) HRESULT LayerSet::Resize ( const _variant_t & Horizontal, const _variant_t & Vertical, const _variant_t & Anchor );
__declspec(implementation_key(449)) HRESULT LayerSet::MoveToBeginning ( IDispatch * Container );
__declspec(implementation_key(450)) HRESULT LayerSet::MoveToEnd ( IDispatch * Container );
__declspec(implementation_key(451)) HRESULT LayerSet::MoveBefore ( IDispatch * RelativeObject );
__declspec(implementation_key(452)) HRESULT LayerSet::MoveAfter ( IDispatch * RelativeObject );
__declspec(implementation_key(453)) IDispatchPtr LayerSet::Duplicate ( const _variant_t & RelativeObject, const _variant_t & InsertionLocation );
__declspec(implementation_key(454)) HRESULT LayerSet::Move ( IDispatch * RelativeObject, enum PsElementPlacement InsertionLocation );
__declspec(implementation_key(455)) HRESULT LayerSet::Delete ( );
__declspec(implementation_key(456)) _ApplicationPtr Layers::GetApplication ( );
__declspec(implementation_key(457)) IDispatchPtr Layers::GetParent ( );
__declspec(implementation_key(458)) long Layers::GetCount ( );
__declspec(implementation_key(459)) HRESULT Layers::Remove ( IDispatch * Item );
__declspec(implementation_key(460)) HRESULT Layers::RemoveAll ( );
__declspec(implementation_key(461)) IDispatchPtr Layers::GetItem ( const _variant_t & ItemKey );
__declspec(implementation_key(462)) long Layers::Index ( IDispatch * ItemPtr );
__declspec(implementation_key(463)) _ApplicationPtr LayerSets::GetApplication ( );
__declspec(implementation_key(464)) IDispatchPtr LayerSets::GetParent ( );
__declspec(implementation_key(465)) long LayerSets::GetCount ( );
__declspec(implementation_key(466)) HRESULT LayerSets::Remove ( struct LayerSet * Item );
__declspec(implementation_key(467)) HRESULT LayerSets::RemoveAll ( );
__declspec(implementation_key(468)) LayerSetPtr LayerSets::GetItem ( const _variant_t & ItemKey );
__declspec(implementation_key(469)) long LayerSets::Index ( struct LayerSet * ItemPtr );
__declspec(implementation_key(470)) LayerSetPtr LayerSets::Add ( );
__declspec(implementation_key(471)) _ApplicationPtr ArtLayers::GetApplication ( );
__declspec(implementation_key(472)) IDispatchPtr ArtLayers::GetParent ( );
__declspec(implementation_key(473)) long ArtLayers::GetCount ( );
__declspec(implementation_key(474)) HRESULT ArtLayers::Remove ( struct ArtLayer * Item );
__declspec(implementation_key(475)) HRESULT ArtLayers::RemoveAll ( );
__declspec(implementation_key(476)) ArtLayerPtr ArtLayers::GetItem ( const _variant_t & ItemKey );
__declspec(implementation_key(477)) long ArtLayers::Index ( struct ArtLayer * ItemPtr );
__declspec(implementation_key(478)) ArtLayerPtr ArtLayers::Add ( );
__declspec(implementation_key(479)) _bstr_t HistoryState::GetName ( );
__declspec(implementation_key(480)) VARIANT_BOOL HistoryState::GetSnapshot ( );
__declspec(implementation_key(481)) _ApplicationPtr HistoryState::GetApplication ( );
__declspec(implementation_key(482)) IDispatchPtr HistoryState::GetParent ( );
__declspec(implementation_key(483)) _bstr_t DocumentInfo::GetTitle ( );
__declspec(implementation_key(484)) void DocumentInfo::PutTitle ( _bstr_t _arg1 );
__declspec(implementation_key(485)) _bstr_t DocumentInfo::GetAuthor ( );
__declspec(implementation_key(486)) void DocumentInfo::PutAuthor ( _bstr_t _arg1 );
__declspec(implementation_key(487)) _bstr_t DocumentInfo::GetAuthorPosition ( );
__declspec(implementation_key(488)) void DocumentInfo::PutAuthorPosition ( _bstr_t _arg1 );
__declspec(implementation_key(489)) _bstr_t DocumentInfo::GetCaption ( );
__declspec(implementation_key(490)) void DocumentInfo::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(491)) _bstr_t DocumentInfo::GetCaptionWriter ( );
__declspec(implementation_key(492)) void DocumentInfo::PutCaptionWriter ( _bstr_t _arg1 );
__declspec(implementation_key(493)) _bstr_t DocumentInfo::GetJobName ( );
__declspec(implementation_key(494)) void DocumentInfo::PutJobName ( _bstr_t _arg1 );
__declspec(implementation_key(495)) enum PsCopyrightedType DocumentInfo::GetCopyrighted ( );
__declspec(implementation_key(496)) void DocumentInfo::PutCopyrighted ( enum PsCopyrightedType _arg1 );
__declspec(implementation_key(497)) _bstr_t DocumentInfo::GetCopyrightNotice ( );
__declspec(implementation_key(498)) void DocumentInfo::PutCopyrightNotice ( _bstr_t _arg1 );
__declspec(implementation_key(499)) _bstr_t DocumentInfo::GetOwnerUrl ( );
__declspec(implementation_key(500)) void DocumentInfo::PutOwnerUrl ( _bstr_t _arg1 );
__declspec(implementation_key(501)) _variant_t DocumentInfo::GetKeywords ( );
__declspec(implementation_key(502)) void DocumentInfo::PutKeywords ( const _variant_t & _arg1 );
__declspec(implementation_key(503)) _bstr_t DocumentInfo::GetCategory ( );
__declspec(implementation_key(504)) void DocumentInfo::PutCategory ( _bstr_t _arg1 );
__declspec(implementation_key(505)) _variant_t DocumentInfo::GetSupplementalCategories ( );
__declspec(implementation_key(506)) void DocumentInfo::PutSupplementalCategories ( const _variant_t & _arg1 );
__declspec(implementation_key(507)) _bstr_t DocumentInfo::GetCreationDate ( );
__declspec(implementation_key(508)) void DocumentInfo::PutCreationDate ( _bstr_t _arg1 );
__declspec(implementation_key(509)) _bstr_t DocumentInfo::GetCity ( );
__declspec(implementation_key(510)) void DocumentInfo::PutCity ( _bstr_t _arg1 );
__declspec(implementation_key(511)) _bstr_t DocumentInfo::GetProvinceState ( );
__declspec(implementation_key(512)) void DocumentInfo::PutProvinceState ( _bstr_t _arg1 );
__declspec(implementation_key(513)) _bstr_t DocumentInfo::GetCountry ( );
__declspec(implementation_key(514)) void DocumentInfo::PutCountry ( _bstr_t _arg1 );
__declspec(implementation_key(515)) _bstr_t DocumentInfo::GetCredit ( );
__declspec(implementation_key(516)) void DocumentInfo::PutCredit ( _bstr_t _arg1 );
__declspec(implementation_key(517)) _bstr_t DocumentInfo::GetSource ( );
__declspec(implementation_key(518)) void DocumentInfo::PutSource ( _bstr_t _arg1 );
__declspec(implementation_key(519)) _bstr_t DocumentInfo::GetHeadline ( );
__declspec(implementation_key(520)) void DocumentInfo::PutHeadline ( _bstr_t _arg1 );
__declspec(implementation_key(521)) _bstr_t DocumentInfo::GetInstructions ( );
__declspec(implementation_key(522)) void DocumentInfo::PutInstructions ( _bstr_t _arg1 );
__declspec(implementation_key(523)) _bstr_t DocumentInfo::GetTransmissionReference ( );
__declspec(implementation_key(524)) void DocumentInfo::PutTransmissionReference ( _bstr_t _arg1 );
__declspec(implementation_key(525)) enum PsUrgency DocumentInfo::GetUrgency ( );
__declspec(implementation_key(526)) void DocumentInfo::PutUrgency ( enum PsUrgency _arg1 );
__declspec(implementation_key(527)) _variant_t DocumentInfo::GetEXIF ( );
__declspec(implementation_key(528)) _ApplicationPtr DocumentInfo::GetApplication ( );
__declspec(implementation_key(529)) IDispatchPtr DocumentInfo::GetParent ( );
__declspec(implementation_key(530)) _variant_t Selection::GetBounds ( );
__declspec(implementation_key(531)) VARIANT_BOOL Selection::GetSolid ( );
__declspec(implementation_key(532)) _ApplicationPtr Selection::GetApplication ( );
__declspec(implementation_key(533)) IDispatchPtr Selection::GetParent ( );
__declspec(implementation_key(534)) HRESULT Selection::Clear ( );
__declspec(implementation_key(535)) HRESULT Selection::Copy ( const _variant_t & Merge );
__declspec(implementation_key(536)) HRESULT Selection::Cut ( );
__declspec(implementation_key(537)) HRESULT Selection::SelectBorder ( double Width );
__declspec(implementation_key(538)) HRESULT Selection::Contract ( double By );
__declspec(implementation_key(539)) HRESULT Selection::Fill ( const _variant_t & FillType, const _variant_t & Mode, const _variant_t & Opacity, const _variant_t & PreserveTransparency );
__declspec(implementation_key(540)) HRESULT Selection::Stroke ( const _variant_t & StrokeColor, long Width, const _variant_t & Location, const _variant_t & Mode, const _variant_t & Opacity, const _variant_t & PreserveTransparency );
__declspec(implementation_key(541)) HRESULT Selection::SelectAll ( );
__declspec(implementation_key(542)) HRESULT Selection::Deselect ( );
__declspec(implementation_key(543)) HRESULT Selection::Select ( const _variant_t & Region, const _variant_t & Type, const _variant_t & Feather, const _variant_t & AntiAlias );
__declspec(implementation_key(544)) HRESULT Selection::Expand ( double By );
__declspec(implementation_key(545)) HRESULT Selection::Feather ( double By );
__declspec(implementation_key(546)) HRESULT Selection::Grow ( long Tolerance, VARIANT_BOOL AntiAlias );
__declspec(implementation_key(547)) HRESULT Selection::Invert ( );
__declspec(implementation_key(548)) HRESULT Selection::Similar ( long Tolerance, VARIANT_BOOL AntiAlias );
__declspec(implementation_key(549)) HRESULT Selection::Smooth ( long Radius );
__declspec(implementation_key(550)) HRESULT Selection::Store ( struct Channel * Into, const _variant_t & Combination );
__declspec(implementation_key(551)) HRESULT Selection::Load ( struct Channel * From, const _variant_t & Combination, const _variant_t & Inverting );
__declspec(implementation_key(552)) HRESULT Selection::Translate ( const _variant_t & DeltaX, const _variant_t & DeltaY );
__declspec(implementation_key(553)) HRESULT Selection::TranslateBoundary ( const _variant_t & DeltaX, const _variant_t & DeltaY );
__declspec(implementation_key(554)) HRESULT Selection::Rotate ( double Angle, const _variant_t & Anchor );
__declspec(implementation_key(555)) HRESULT Selection::RotateBoundary ( double Angle, const _variant_t & Anchor );
__declspec(implementation_key(556)) HRESULT Selection::Resize ( const _variant_t & Horizontal, const _variant_t & Vertical, const _variant_t & Anchor );
__declspec(implementation_key(557)) HRESULT Selection::ResizeBoundary ( const _variant_t & Horizontal, const _variant_t & Vertical, const _variant_t & Anchor );
__declspec(implementation_key(558)) HRESULT Selection::MakeWorkPath ( const _variant_t & Tolerance );
__declspec(implementation_key(559)) _variant_t Channel::GetHistogram ( );
__declspec(implementation_key(560)) _bstr_t Channel::GetName ( );
__declspec(implementation_key(561)) void Channel::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(562)) enum PsChannelType Channel::GetKind ( );
__declspec(implementation_key(563)) void Channel::PutKind ( enum PsChannelType _arg1 );
__declspec(implementation_key(564)) double Channel::GetOpacity ( );
__declspec(implementation_key(565)) void Channel::PutOpacity ( double _arg1 );
__declspec(implementation_key(566)) VARIANT_BOOL Channel::GetVisible ( );
__declspec(implementation_key(567)) void Channel::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(568)) _SolidColorPtr Channel::GetColor ( );
__declspec(implementation_key(569)) void Channel::PutColor ( struct _SolidColor * _arg1 );
__declspec(implementation_key(570)) void Channel::PutRefColor ( struct _SolidColor * _arg1 );
__declspec(implementation_key(571)) _ApplicationPtr Channel::GetApplication ( );
__declspec(implementation_key(572)) IDispatchPtr Channel::GetParent ( );
__declspec(implementation_key(573)) HRESULT Channel::Merge ( );
__declspec(implementation_key(574)) ChannelPtr Channel::Duplicate ( const _variant_t & TargetDocument );
__declspec(implementation_key(575)) HRESULT Channel::Delete ( );
__declspec(implementation_key(576)) _bstr_t XMPMetadata::GetRawData ( );
__declspec(implementation_key(577)) void XMPMetadata::PutRawData ( _bstr_t _arg1 );
__declspec(implementation_key(578)) _ApplicationPtr XMPMetadata::GetApplication ( );
__declspec(implementation_key(579)) IDispatchPtr XMPMetadata::GetParent ( );
__declspec(implementation_key(580)) _bstr_t MeasurementScale::GetName ( );
__declspec(implementation_key(581)) void MeasurementScale::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(582)) long MeasurementScale::GetPixelLength ( );
__declspec(implementation_key(583)) void MeasurementScale::PutPixelLength ( long _arg1 );
__declspec(implementation_key(584)) double MeasurementScale::GetLogicalLength ( );
__declspec(implementation_key(585)) void MeasurementScale::PutLogicalLength ( double _arg1 );
__declspec(implementation_key(586)) _bstr_t MeasurementScale::GetLogicalUnits ( );
__declspec(implementation_key(587)) void MeasurementScale::PutLogicalUnits ( _bstr_t _arg1 );
__declspec(implementation_key(588)) _ApplicationPtr MeasurementScale::GetApplication ( );
__declspec(implementation_key(589)) IDispatchPtr MeasurementScale::GetParent ( );
__declspec(implementation_key(590)) _ApplicationPtr Channels::GetApplication ( );
__declspec(implementation_key(591)) IDispatchPtr Channels::GetParent ( );
__declspec(implementation_key(592)) long Channels::GetCount ( );
__declspec(implementation_key(593)) HRESULT Channels::Remove ( struct Channel * Item );
__declspec(implementation_key(594)) HRESULT Channels::RemoveAll ( );
__declspec(implementation_key(595)) ChannelPtr Channels::GetItem ( const _variant_t & ItemKey );
__declspec(implementation_key(596)) long Channels::Index ( struct Channel * ItemPtr );
__declspec(implementation_key(597)) ChannelPtr Channels::Add ( );
__declspec(implementation_key(598)) _ApplicationPtr HistoryStates::GetApplication ( );
__declspec(implementation_key(599)) IDispatchPtr HistoryStates::GetParent ( );
__declspec(implementation_key(600)) long HistoryStates::GetCount ( );
__declspec(implementation_key(601)) HistoryStatePtr HistoryStates::GetItem ( const _variant_t & ItemKey );
__declspec(implementation_key(602)) long HistoryStates::Index ( struct HistoryState * ItemPtr );
__declspec(implementation_key(603)) _ApplicationPtr LayerComps::GetApplication ( );
__declspec(implementation_key(604)) IDispatchPtr LayerComps::GetParent ( );
__declspec(implementation_key(605)) long LayerComps::GetCount ( );
__declspec(implementation_key(606)) HRESULT LayerComps::RemoveAll ( );
__declspec(implementation_key(607)) LayerCompPtr LayerComps::GetItem ( const _variant_t & ItemKey );
__declspec(implementation_key(608)) long LayerComps::Index ( struct LayerComp * ItemPtr );
__declspec(implementation_key(609)) LayerCompPtr LayerComps::Add ( _bstr_t Name, const _variant_t & Comment, const _variant_t & Appearance, const _variant_t & Position, const _variant_t & Visibility );
__declspec(implementation_key(610)) _bstr_t LayerComp::GetName ( );
__declspec(implementation_key(611)) void LayerComp::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(612)) _variant_t LayerComp::GetComment ( );
__declspec(implementation_key(613)) void LayerComp::PutComment ( const _variant_t & _arg1 );
__declspec(implementation_key(614)) VARIANT_BOOL LayerComp::GetAppearance ( );
__declspec(implementation_key(615)) void LayerComp::PutAppearance ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(616)) VARIANT_BOOL LayerComp::GetPosition ( );
__declspec(implementation_key(617)) void LayerComp::PutPosition ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(618)) VARIANT_BOOL LayerComp::GetVisibility ( );
__declspec(implementation_key(619)) void LayerComp::PutVisibility ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(620)) VARIANT_BOOL LayerComp::GetSelected ( );
__declspec(implementation_key(621)) _ApplicationPtr LayerComp::GetApplication ( );
__declspec(implementation_key(622)) IDispatchPtr LayerComp::GetParent ( );
__declspec(implementation_key(623)) HRESULT LayerComp::Apply ( );
__declspec(implementation_key(624)) HRESULT LayerComp::Recapture ( );
__declspec(implementation_key(625)) HRESULT LayerComp::ResetFromComp ( );
__declspec(implementation_key(626)) HRESULT LayerComp::Delete ( );
__declspec(implementation_key(627)) _ApplicationPtr PathItems::GetApplication ( );
__declspec(implementation_key(628)) IDispatchPtr PathItems::GetParent ( );
__declspec(implementation_key(629)) long PathItems::GetCount ( );
__declspec(implementation_key(630)) HRESULT PathItems::RemoveAll ( );
__declspec(implementation_key(631)) PathItemPtr PathItems::GetItem ( const _variant_t & ItemKey );
__declspec(implementation_key(632)) long PathItems::Index ( struct PathItem * ItemPtr );
__declspec(implementation_key(633)) PathItemPtr PathItems::Add ( _bstr_t Name, const _variant_t & EntirePath );
__declspec(implementation_key(634)) _bstr_t PathItem::GetName ( );
__declspec(implementation_key(635)) void PathItem::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(636)) SubPathItemsPtr PathItem::GetSubPathItems ( );
__declspec(implementation_key(637)) enum PsPathKind PathItem::GetKind ( );
__declspec(implementation_key(638)) void PathItem::PutKind ( enum PsPathKind _arg1 );
__declspec(implementation_key(639)) _ApplicationPtr PathItem::GetApplication ( );
__declspec(implementation_key(640)) IDispatchPtr PathItem::GetParent ( );
__declspec(implementation_key(641)) PathItemPtr PathItem::Duplicate ( const _variant_t & Name );
__declspec(implementation_key(642)) HRESULT PathItem::MakeSelection ( const _variant_t & Feather, const _variant_t & AntiAlias, const _variant_t & Operation );
__declspec(implementation_key(643)) HRESULT PathItem::FillPath ( const _variant_t & FillColor, const _variant_t & Mode, const _variant_t & Opacity, const _variant_t & PreserveTransparency, const _variant_t & Feather, const _variant_t & AntiAlias, const _variant_t & WholePath );
__declspec(implementation_key(644)) HRESULT PathItem::StrokePath ( const _variant_t & Tool, const _variant_t & SimulatePressure );
__declspec(implementation_key(645)) HRESULT PathItem::MakeClippingPath ( const _variant_t & Flatness );
__declspec(implementation_key(646)) HRESULT PathItem::Select ( );
__declspec(implementation_key(647)) HRESULT PathItem::Deselect ( );
__declspec(implementation_key(648)) HRESULT PathItem::Delete ( );
__declspec(implementation_key(649)) _ApplicationPtr SubPathItems::GetApplication ( );
__declspec(implementation_key(650)) IDispatchPtr SubPathItems::GetParent ( );
__declspec(implementation_key(651)) long SubPathItems::GetCount ( );
__declspec(implementation_key(652)) SubPathItemPtr SubPathItems::GetItem ( const _variant_t & ItemKey );
__declspec(implementation_key(653)) long SubPathItems::Index ( struct SubPathItem * ItemPtr );
__declspec(implementation_key(654)) VARIANT_BOOL SubPathItem::GetClosed ( );
__declspec(implementation_key(655)) enum PsShapeOperation SubPathItem::GetOperation ( );
__declspec(implementation_key(656)) PathPointsPtr SubPathItem::GetPathPoints ( );
__declspec(implementation_key(657)) _ApplicationPtr SubPathItem::GetApplication ( );
__declspec(implementation_key(658)) IDispatchPtr SubPathItem::GetParent ( );
__declspec(implementation_key(659)) _ApplicationPtr PathPoints::GetApplication ( );
__declspec(implementation_key(660)) IDispatchPtr PathPoints::GetParent ( );
__declspec(implementation_key(661)) long PathPoints::GetCount ( );
__declspec(implementation_key(662)) PathPointPtr PathPoints::GetItem ( const _variant_t & ItemKey );
__declspec(implementation_key(663)) long PathPoints::Index ( struct PathPoint * ItemPtr );
__declspec(implementation_key(664)) _variant_t PathPoint::GetAnchor ( );
__declspec(implementation_key(665)) _variant_t PathPoint::GetLeftDirection ( );
__declspec(implementation_key(666)) _variant_t PathPoint::GetRightDirection ( );
__declspec(implementation_key(667)) enum PsPointKind PathPoint::GetKind ( );
__declspec(implementation_key(668)) _ApplicationPtr PathPoint::GetApplication ( );
__declspec(implementation_key(669)) IDispatchPtr PathPoint::GetParent ( );
__declspec(implementation_key(670)) _ApplicationPtr CountItems::GetApplication ( );
__declspec(implementation_key(671)) IDispatchPtr CountItems::GetParent ( );
__declspec(implementation_key(672)) long CountItems::GetCount ( );
__declspec(implementation_key(673)) HRESULT CountItems::RemoveAll ( );
__declspec(implementation_key(674)) CountItemPtr CountItems::GetItem ( const _variant_t & ItemKey );
__declspec(implementation_key(675)) long CountItems::Index ( struct CountItem * ItemPtr );
__declspec(implementation_key(676)) CountItemPtr CountItems::Add ( const _variant_t & Position );
__declspec(implementation_key(677)) _variant_t CountItem::GetPosition ( );
__declspec(implementation_key(678)) _ApplicationPtr CountItem::GetApplication ( );
__declspec(implementation_key(679)) IDispatchPtr CountItem::GetParent ( );
__declspec(implementation_key(680)) HRESULT CountItem::Delete ( );
__declspec(implementation_key(681)) _ApplicationPtr ColorSamplers::GetApplication ( );
__declspec(implementation_key(682)) IDispatchPtr ColorSamplers::GetParent ( );
__declspec(implementation_key(683)) long ColorSamplers::GetCount ( );
__declspec(implementation_key(684)) HRESULT ColorSamplers::RemoveAll ( );
__declspec(implementation_key(685)) ColorSamplerPtr ColorSamplers::GetItem ( const _variant_t & ItemKey );
__declspec(implementation_key(686)) long ColorSamplers::Index ( struct ColorSampler * ItemPtr );
__declspec(implementation_key(687)) ColorSamplerPtr ColorSamplers::Add ( const _variant_t & Position );
__declspec(implementation_key(688)) _variant_t ColorSampler::GetPosition ( );
__declspec(implementation_key(689)) _SolidColorPtr ColorSampler::GetColor ( );
__declspec(implementation_key(690)) _ApplicationPtr ColorSampler::GetApplication ( );
__declspec(implementation_key(691)) IDispatchPtr ColorSampler::GetParent ( );
__declspec(implementation_key(692)) HRESULT ColorSampler::Move ( const _variant_t & Position );
__declspec(implementation_key(693)) HRESULT ColorSampler::Delete ( );
__declspec(implementation_key(694)) enum PsColorPicker Preferences::GetColorPicker ( );
__declspec(implementation_key(695)) void Preferences::PutColorPicker ( enum PsColorPicker _arg1 );
__declspec(implementation_key(696)) enum PsResampleMethod Preferences::GetInterpolation ( );
__declspec(implementation_key(697)) void Preferences::PutInterpolation ( enum PsResampleMethod _arg1 );
__declspec(implementation_key(698)) VARIANT_BOOL Preferences::GetExportClipboard ( );
__declspec(implementation_key(699)) void Preferences::PutExportClipboard ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(700)) VARIANT_BOOL Preferences::GetShowToolTips ( );
__declspec(implementation_key(701)) void Preferences::PutShowToolTips ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(702)) VARIANT_BOOL Preferences::GetKeyboardZoomResizesWindows ( );
__declspec(implementation_key(703)) void Preferences::PutKeyboardZoomResizesWindows ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(704)) VARIANT_BOOL Preferences::GetAutoUpdateOpenDocuments ( );
__declspec(implementation_key(705)) void Preferences::PutAutoUpdateOpenDocuments ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(706)) VARIANT_BOOL Preferences::GetShowAsianTextOptions ( );
__declspec(implementation_key(707)) void Preferences::PutShowAsianTextOptions ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(708)) VARIANT_BOOL Preferences::GetBeepWhenDone ( );
__declspec(implementation_key(709)) void Preferences::PutBeepWhenDone ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(710)) VARIANT_BOOL Preferences::GetDynamicColorSliders ( );
__declspec(implementation_key(711)) void Preferences::PutDynamicColorSliders ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(712)) VARIANT_BOOL Preferences::GetSavePaletteLocations ( );
__declspec(implementation_key(713)) void Preferences::PutSavePaletteLocations ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(714)) VARIANT_BOOL Preferences::GetShowEnglishFontNames ( );
__declspec(implementation_key(715)) void Preferences::PutShowEnglishFontNames ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(716)) VARIANT_BOOL Preferences::GetUseShiftKeyForToolSwitch ( );
__declspec(implementation_key(717)) void Preferences::PutUseShiftKeyForToolSwitch ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(718)) long Preferences::GetNumberOfHistoryStates ( );
__declspec(implementation_key(719)) void Preferences::PutNumberOfHistoryStates ( long _arg1 );
__declspec(implementation_key(720)) VARIANT_BOOL Preferences::GetCreateFirstSnapshot ( );
__declspec(implementation_key(721)) void Preferences::PutCreateFirstSnapshot ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(722)) VARIANT_BOOL Preferences::GetNonLinearHistory ( );
__declspec(implementation_key(723)) void Preferences::PutNonLinearHistory ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(724)) VARIANT_BOOL Preferences::GetSmartQuotes ( );
__declspec(implementation_key(725)) void Preferences::PutSmartQuotes ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(726)) enum PsSaveBehavior Preferences::GetImagePreviews ( );
__declspec(implementation_key(727)) void Preferences::PutImagePreviews ( enum PsSaveBehavior _arg1 );
__declspec(implementation_key(728)) VARIANT_BOOL Preferences::GetUseLowerCaseExtension ( );
__declspec(implementation_key(729)) void Preferences::PutUseLowerCaseExtension ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(730)) VARIANT_BOOL Preferences::GetAskBeforeSavingLayeredTIFF ( );
__declspec(implementation_key(731)) void Preferences::PutAskBeforeSavingLayeredTIFF ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(732)) enum PsQueryStateType Preferences::GetMaximizeCompatibility ( );
__declspec(implementation_key(733)) void Preferences::PutMaximizeCompatibility ( enum PsQueryStateType _arg1 );
__declspec(implementation_key(734)) long Preferences::GetRecentFileListLength ( );
__declspec(implementation_key(735)) void Preferences::PutRecentFileListLength ( long _arg1 );
__declspec(implementation_key(736)) VARIANT_BOOL Preferences::GetColorChannelsInColor ( );
__declspec(implementation_key(737)) void Preferences::PutColorChannelsInColor ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(738)) VARIANT_BOOL Preferences::GetUseDiffusionDither ( );
__declspec(implementation_key(739)) void Preferences::PutUseDiffusionDither ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(740)) VARIANT_BOOL Preferences::GetPixelDoubling ( );
__declspec(implementation_key(741)) void Preferences::PutPixelDoubling ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(742)) enum PsPaintingCursors Preferences::GetPaintingCursors ( );
__declspec(implementation_key(743)) void Preferences::PutPaintingCursors ( enum PsPaintingCursors _arg1 );
__declspec(implementation_key(744)) enum PsOtherPaintingCursors Preferences::GetOtherCursors ( );
__declspec(implementation_key(745)) void Preferences::PutOtherCursors ( enum PsOtherPaintingCursors _arg1 );
__declspec(implementation_key(746)) enum PsGridSize Preferences::GetGridSize ( );
__declspec(implementation_key(747)) void Preferences::PutGridSize ( enum PsGridSize _arg1 );
__declspec(implementation_key(748)) VARIANT_BOOL Preferences::GetUseVideoAlpha ( );
__declspec(implementation_key(749)) void Preferences::PutUseVideoAlpha ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(750)) double Preferences::GetGamutWarningOpacity ( );
__declspec(implementation_key(751)) void Preferences::PutGamutWarningOpacity ( double _arg1 );
__declspec(implementation_key(752)) enum PsUnits Preferences::GetRulerUnits ( );
__declspec(implementation_key(753)) void Preferences::PutRulerUnits ( enum PsUnits _arg1 );
__declspec(implementation_key(754)) enum PsTypeUnits Preferences::GetTypeUnits ( );
__declspec(implementation_key(755)) void Preferences::PutTypeUnits ( enum PsTypeUnits _arg1 );
__declspec(implementation_key(756)) double Preferences::GetColumnWidth ( );
__declspec(implementation_key(757)) void Preferences::PutColumnWidth ( double _arg1 );
__declspec(implementation_key(758)) double Preferences::GetColumnGutter ( );
__declspec(implementation_key(759)) void Preferences::PutColumnGutter ( double _arg1 );
__declspec(implementation_key(760)) enum PsPointType Preferences::GetPointSize ( );
__declspec(implementation_key(761)) void Preferences::PutPointSize ( enum PsPointType _arg1 );
__declspec(implementation_key(762)) enum PsGuideLineStyle Preferences::GetGuideStyle ( );
__declspec(implementation_key(763)) void Preferences::PutGuideStyle ( enum PsGuideLineStyle _arg1 );
__declspec(implementation_key(764)) enum PsGridLineStyle Preferences::GetGridStyle ( );
__declspec(implementation_key(765)) void Preferences::PutGridStyle ( enum PsGridLineStyle _arg1 );
__declspec(implementation_key(766)) long Preferences::GetGridSubDivisions ( );
__declspec(implementation_key(767)) void Preferences::PutGridSubDivisions ( long _arg1 );
__declspec(implementation_key(768)) VARIANT_BOOL Preferences::GetShowSliceNumber ( );
__declspec(implementation_key(769)) void Preferences::PutShowSliceNumber ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(770)) VARIANT_BOOL Preferences::GetUseAdditionalPluginFolder ( );
__declspec(implementation_key(771)) void Preferences::PutUseAdditionalPluginFolder ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(772)) _bstr_t Preferences::GetAdditionalPluginFolder ( );
__declspec(implementation_key(773)) void Preferences::PutAdditionalPluginFolder ( _bstr_t _arg1 );
__declspec(implementation_key(774)) long Preferences::GetImageCacheLevels ( );
__declspec(implementation_key(775)) void Preferences::PutImageCacheLevels ( long _arg1 );
__declspec(implementation_key(776)) VARIANT_BOOL Preferences::GetImageCacheForHistograms ( );
__declspec(implementation_key(777)) void Preferences::PutImageCacheForHistograms ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(778)) long Preferences::GetMaxRAMuse ( );
__declspec(implementation_key(779)) void Preferences::PutMaxRAMuse ( long _arg1 );
__declspec(implementation_key(780)) VARIANT_BOOL Preferences::GetUseHistoryLog ( );
__declspec(implementation_key(781)) void Preferences::PutUseHistoryLog ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(782)) enum PsSaveLogItemsType Preferences::GetSaveLogItems ( );
__declspec(implementation_key(783)) void Preferences::PutSaveLogItems ( enum PsSaveLogItemsType _arg1 );
__declspec(implementation_key(784)) enum PsEditLogItemsType Preferences::GetEditLogItems ( );
__declspec(implementation_key(785)) void Preferences::PutEditLogItems ( enum PsEditLogItemsType _arg1 );
__declspec(implementation_key(786)) _bstr_t Preferences::GetSaveLogItemsFile ( );
__declspec(implementation_key(787)) void Preferences::PutSaveLogItemsFile ( _bstr_t _arg1 );
__declspec(implementation_key(788)) enum PsFontPreviewType Preferences::GetFontPreviewSize ( );
__declspec(implementation_key(789)) void Preferences::PutFontPreviewSize ( enum PsFontPreviewType _arg1 );
__declspec(implementation_key(790)) _ApplicationPtr Preferences::GetApplication ( );
__declspec(implementation_key(791)) IDispatchPtr Preferences::GetParent ( );
__declspec(implementation_key(792)) _ApplicationPtr Documents::GetApplication ( );
__declspec(implementation_key(793)) IDispatchPtr Documents::GetParent ( );
__declspec(implementation_key(794)) long Documents::GetCount ( );
__declspec(implementation_key(795)) DocumentPtr Documents::GetItem ( const _variant_t & ItemKey );
__declspec(implementation_key(796)) long Documents::Index ( struct Document * ItemPtr );
__declspec(implementation_key(797)) DocumentPtr Documents::Add ( const _variant_t & Width, const _variant_t & Height, const _variant_t & Resolution, const _variant_t & Name, const _variant_t & Mode, const _variant_t & InitialFill, const _variant_t & PixelAspectRatio, const _variant_t & BitsPerChannel, const _variant_t & ColorProfileName );
__declspec(implementation_key(798)) _ApplicationPtr TextFonts::GetApplication ( );
__declspec(implementation_key(799)) IDispatchPtr TextFonts::GetParent ( );
__declspec(implementation_key(800)) long TextFonts::GetCount ( );
__declspec(implementation_key(801)) TextFontPtr TextFonts::GetItem ( const _variant_t & ItemKey );
__declspec(implementation_key(802)) long TextFonts::Index ( struct TextFont * ItemPtr );
__declspec(implementation_key(803)) _bstr_t TextFont::GetName ( );
__declspec(implementation_key(804)) _bstr_t TextFont::GetPostScriptName ( );
__declspec(implementation_key(805)) _bstr_t TextFont::GetFamily ( );
__declspec(implementation_key(806)) _bstr_t TextFont::GetStyle ( );
__declspec(implementation_key(807)) _ApplicationPtr TextFont::GetApplication ( );
__declspec(implementation_key(808)) IDispatchPtr TextFont::GetParent ( );
__declspec(implementation_key(809)) _ApplicationPtr Notifiers::GetApplication ( );
__declspec(implementation_key(810)) IDispatchPtr Notifiers::GetParent ( );
__declspec(implementation_key(811)) long Notifiers::GetCount ( );
__declspec(implementation_key(812)) HRESULT Notifiers::RemoveAll ( );
__declspec(implementation_key(813)) NotifierPtr Notifiers::GetItem ( const _variant_t & ItemKey );
__declspec(implementation_key(814)) long Notifiers::Index ( struct Notifier * ItemPtr );
__declspec(implementation_key(815)) NotifierPtr Notifiers::Add ( _bstr_t Event, _bstr_t EventFile, const _variant_t & EventClass );
__declspec(implementation_key(816)) _bstr_t Notifier::GetEvent ( );
__declspec(implementation_key(817)) _bstr_t Notifier::GetEventFile ( );
__declspec(implementation_key(818)) _bstr_t Notifier::GetEventClass ( );
__declspec(implementation_key(819)) _ApplicationPtr Notifier::GetApplication ( );
__declspec(implementation_key(820)) IDispatchPtr Notifier::GetParent ( );
__declspec(implementation_key(821)) HRESULT Notifier::Delete ( );
__declspec(implementation_key(822)) _ApplicationPtr MeasurementLog::GetApplication ( );
__declspec(implementation_key(823)) IDispatchPtr MeasurementLog::GetParent ( );
__declspec(implementation_key(824)) HRESULT MeasurementLog::ExportMeasurements ( _bstr_t File, const _variant_t & Range, const _variant_t & DataPoints );
__declspec(implementation_key(825)) HRESULT MeasurementLog::DeleteMeasurements ( const _variant_t & Range );
__declspec(implementation_key(826)) long _ActionDescriptor::GetCount ( );
__declspec(implementation_key(827)) _ApplicationPtr _ActionDescriptor::GetApplication ( );
__declspec(implementation_key(828)) void _ActionDescriptor::PutObjectValue ( struct _ActionDescriptor * _arg1 );
__declspec(implementation_key(829)) void _ActionDescriptor::PutRefObjectValue ( struct _ActionDescriptor * _arg1 );
__declspec(implementation_key(830)) HRESULT _ActionDescriptor::Clear ( );
__declspec(implementation_key(831)) HRESULT _ActionDescriptor::Erase ( long Key );
__declspec(implementation_key(832)) VARIANT_BOOL _ActionDescriptor::GetBoolean ( long Key );
__declspec(implementation_key(833)) long _ActionDescriptor::GetClass ( long Key );
__declspec(implementation_key(834)) double _ActionDescriptor::GetDouble ( long Key );
__declspec(implementation_key(835)) long _ActionDescriptor::GetEnumerationType ( long Key );
__declspec(implementation_key(836)) long _ActionDescriptor::GetEnumerationValue ( long Key );
__declspec(implementation_key(837)) long _ActionDescriptor::GetInteger ( long Key );
__declspec(implementation_key(838)) long _ActionDescriptor::GetLargeInteger ( long Key );
__declspec(implementation_key(839)) long _ActionDescriptor::GetKey ( long Index );
__declspec(implementation_key(840)) _ActionListPtr _ActionDescriptor::GetList ( long Key );
__declspec(implementation_key(841)) long _ActionDescriptor::GetObjectType ( long Key );
__declspec(implementation_key(842)) _ActionDescriptorPtr _ActionDescriptor::GetObjectValue ( long Key );
__declspec(implementation_key(843)) _bstr_t _ActionDescriptor::GetPath ( long Key );
__declspec(implementation_key(844)) _ActionReferencePtr _ActionDescriptor::GetReference ( long Key );
__declspec(implementation_key(845)) _bstr_t _ActionDescriptor::GetString ( long Key );
__declspec(implementation_key(846)) enum PsDescValueType _ActionDescriptor::GetType ( long Key );
__declspec(implementation_key(847)) long _ActionDescriptor::GetUnitDoubleType ( long Key );
__declspec(implementation_key(848)) double _ActionDescriptor::GetUnitDoubleValue ( long Key );
__declspec(implementation_key(849)) VARIANT_BOOL _ActionDescriptor::HasKey ( long Key );
__declspec(implementation_key(850)) VARIANT_BOOL _ActionDescriptor::IsEqual ( struct _ActionDescriptor * OtherDesc );
__declspec(implementation_key(851)) HRESULT _ActionDescriptor::PutBoolean ( long Key, VARIANT_BOOL Value );
__declspec(implementation_key(852)) HRESULT _ActionDescriptor::PutClass ( long Key, long Value );
__declspec(implementation_key(853)) HRESULT _ActionDescriptor::PutDouble ( long Key, double Value );
__declspec(implementation_key(854)) HRESULT _ActionDescriptor::PutEnumerated ( long Key, long EnumType, long Value );
__declspec(implementation_key(855)) HRESULT _ActionDescriptor::PutInteger ( long Key, long Value );
__declspec(implementation_key(856)) HRESULT _ActionDescriptor::PutLargeInteger ( long Key, long Value );
__declspec(implementation_key(857)) HRESULT _ActionDescriptor::PutList ( long Key, struct _ActionList * Value );
__declspec(implementation_key(858)) HRESULT _ActionDescriptor::PutObject ( long Key, long ClassID, struct _ActionDescriptor * Value );
__declspec(implementation_key(859)) HRESULT _ActionDescriptor::PutPath ( long Key, _bstr_t Value );
__declspec(implementation_key(860)) HRESULT _ActionDescriptor::PutReference ( long Key, struct _ActionReference * Value );
__declspec(implementation_key(861)) HRESULT _ActionDescriptor::PutString ( long Key, _bstr_t Value );
__declspec(implementation_key(862)) HRESULT _ActionDescriptor::PutUnitDouble ( long Key, long UnitID, double Value );
__declspec(implementation_key(863)) long _ActionList::GetCount ( );
__declspec(implementation_key(864)) _ApplicationPtr _ActionList::GetApplication ( );
__declspec(implementation_key(865)) void _ActionList::PutObjectValue ( struct _ActionList * _arg1 );
__declspec(implementation_key(866)) void _ActionList::PutRefObjectValue ( struct _ActionList * _arg1 );
__declspec(implementation_key(867)) HRESULT _ActionList::Clear ( );
__declspec(implementation_key(868)) VARIANT_BOOL _ActionList::GetBoolean ( long Index );
__declspec(implementation_key(869)) long _ActionList::GetClass ( long Index );
__declspec(implementation_key(870)) double _ActionList::GetDouble ( long Index );
__declspec(implementation_key(871)) long _ActionList::GetEnumerationType ( long Index );
__declspec(implementation_key(872)) long _ActionList::GetEnumerationValue ( long Index );
__declspec(implementation_key(873)) long _ActionList::GetInteger ( long Index );
__declspec(implementation_key(874)) long _ActionList::GetLargeInteger ( long Index );
__declspec(implementation_key(875)) _ActionListPtr _ActionList::GetList ( long Index );
__declspec(implementation_key(876)) long _ActionList::GetObjectType ( long Index );
__declspec(implementation_key(877)) _ActionDescriptorPtr _ActionList::GetObjectValue ( long Index );
__declspec(implementation_key(878)) _bstr_t _ActionList::GetPath ( long Index );
__declspec(implementation_key(879)) _ActionReferencePtr _ActionList::GetReference ( long Index );
__declspec(implementation_key(880)) _bstr_t _ActionList::GetString ( long Index );
__declspec(implementation_key(881)) enum PsDescValueType _ActionList::GetType ( long Index );
__declspec(implementation_key(882)) long _ActionList::GetUnitDoubleType ( long Index );
__declspec(implementation_key(883)) double _ActionList::GetUnitDoubleValue ( long Index );
__declspec(implementation_key(884)) HRESULT _ActionList::PutBoolean ( VARIANT_BOOL Value );
__declspec(implementation_key(885)) HRESULT _ActionList::PutClass ( long Value );
__declspec(implementation_key(886)) HRESULT _ActionList::PutDouble ( double Value );
__declspec(implementation_key(887)) HRESULT _ActionList::PutEnumerated ( long EnumType, long Value );
__declspec(implementation_key(888)) HRESULT _ActionList::PutInteger ( long Value );
__declspec(implementation_key(889)) HRESULT _ActionList::PutLargeInteger ( long Value );
__declspec(implementation_key(890)) HRESULT _ActionList::PutList ( struct _ActionList * Value );
__declspec(implementation_key(891)) HRESULT _ActionList::PutObject ( long ClassID, struct _ActionDescriptor * Value );
__declspec(implementation_key(892)) HRESULT _ActionList::PutPath ( _bstr_t Value );
__declspec(implementation_key(893)) HRESULT _ActionList::PutReference ( struct _ActionReference * Value );
__declspec(implementation_key(894)) HRESULT _ActionList::PutString ( _bstr_t Value );
__declspec(implementation_key(895)) HRESULT _ActionList::PutUnitDouble ( long UnitID, double Value );
__declspec(implementation_key(896)) _ApplicationPtr _ActionReference::GetApplication ( );
__declspec(implementation_key(897)) void _ActionReference::PutObjectValue ( struct _ActionReference * _arg1 );
__declspec(implementation_key(898)) void _ActionReference::PutRefObjectValue ( struct _ActionReference * _arg1 );
__declspec(implementation_key(899)) _ActionReferencePtr _ActionReference::GetContainer ( );
__declspec(implementation_key(900)) long _ActionReference::GetDesiredClass ( );
__declspec(implementation_key(901)) long _ActionReference::GetEnumeratedType ( );
__declspec(implementation_key(902)) long _ActionReference::GetEnumeratedValue ( );
__declspec(implementation_key(903)) enum PsReferenceFormType _ActionReference::GetForm ( );
__declspec(implementation_key(904)) long _ActionReference::GetIdentifier ( );
__declspec(implementation_key(905)) long _ActionReference::GetIndex ( );
__declspec(implementation_key(906)) _bstr_t _ActionReference::GetName ( );
__declspec(implementation_key(907)) long _ActionReference::GetOffset ( );
__declspec(implementation_key(908)) long _ActionReference::GetProperty ( );
__declspec(implementation_key(909)) HRESULT _ActionReference::PutClass ( long DesiredClass );
__declspec(implementation_key(910)) HRESULT _ActionReference::PutEnumerated ( long DesiredClass, long EnumType, long Value );
__declspec(implementation_key(911)) HRESULT _ActionReference::PutIdentifier ( long DesiredClass, long Value );
__declspec(implementation_key(912)) HRESULT _ActionReference::PutIndex ( long DesiredClass, long Value );
__declspec(implementation_key(913)) HRESULT _ActionReference::PutName ( long DesiredClass, _bstr_t Value );
__declspec(implementation_key(914)) HRESULT _ActionReference::PutOffset ( long DesiredClass, long Value );
__declspec(implementation_key(915)) HRESULT _ActionReference::PutProperty ( long DesiredClass, long Value );
__declspec(implementation_key(916)) enum PsPhotoCDSize _PhotoCDOpenOptions::GetPixelSize ( );
__declspec(implementation_key(917)) void _PhotoCDOpenOptions::PutPixelSize ( enum PsPhotoCDSize _arg1 );
__declspec(implementation_key(918)) _bstr_t _PhotoCDOpenOptions::GetColorProfileName ( );
__declspec(implementation_key(919)) void _PhotoCDOpenOptions::PutColorProfileName ( _bstr_t _arg1 );
__declspec(implementation_key(920)) double _PhotoCDOpenOptions::GetResolution ( );
__declspec(implementation_key(921)) void _PhotoCDOpenOptions::PutResolution ( double _arg1 );
__declspec(implementation_key(922)) enum PsPhotoCDColorSpace _PhotoCDOpenOptions::GetColorSpace ( );
__declspec(implementation_key(923)) void _PhotoCDOpenOptions::PutColorSpace ( enum PsPhotoCDColorSpace _arg1 );
__declspec(implementation_key(924)) enum PsOrientation _PhotoCDOpenOptions::GetOrientation ( );
__declspec(implementation_key(925)) void _PhotoCDOpenOptions::PutOrientation ( enum PsOrientation _arg1 );
__declspec(implementation_key(926)) _ApplicationPtr _PhotoCDOpenOptions::GetApplication ( );
__declspec(implementation_key(927)) void _PhotoCDOpenOptions::PutObjectValue ( struct _PhotoCDOpenOptions * _arg1 );
__declspec(implementation_key(928)) void _PhotoCDOpenOptions::PutRefObjectValue ( struct _PhotoCDOpenOptions * _arg1 );
__declspec(implementation_key(929)) long _RawFormatOpenOptions::GetHeight ( );
__declspec(implementation_key(930)) void _RawFormatOpenOptions::PutHeight ( long _arg1 );
__declspec(implementation_key(931)) long _RawFormatOpenOptions::GetWidth ( );
__declspec(implementation_key(932)) void _RawFormatOpenOptions::PutWidth ( long _arg1 );
__declspec(implementation_key(933)) long _RawFormatOpenOptions::GetChannelNumber ( );
__declspec(implementation_key(934)) void _RawFormatOpenOptions::PutChannelNumber ( long _arg1 );
__declspec(implementation_key(935)) VARIANT_BOOL _RawFormatOpenOptions::GetInterleaveChannels ( );
__declspec(implementation_key(936)) void _RawFormatOpenOptions::PutInterleaveChannels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(937)) long _RawFormatOpenOptions::GetBitsPerChannel ( );
__declspec(implementation_key(938)) void _RawFormatOpenOptions::PutBitsPerChannel ( long _arg1 );
__declspec(implementation_key(939)) enum PsByteOrderType _RawFormatOpenOptions::GetByteOrder ( );
__declspec(implementation_key(940)) void _RawFormatOpenOptions::PutByteOrder ( enum PsByteOrderType _arg1 );
__declspec(implementation_key(941)) long _RawFormatOpenOptions::GetHeaderSize ( );
__declspec(implementation_key(942)) void _RawFormatOpenOptions::PutHeaderSize ( long _arg1 );
__declspec(implementation_key(943)) VARIANT_BOOL _RawFormatOpenOptions::GetRetainHeader ( );
__declspec(implementation_key(944)) void _RawFormatOpenOptions::PutRetainHeader ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(945)) _ApplicationPtr _RawFormatOpenOptions::GetApplication ( );
__declspec(implementation_key(946)) void _RawFormatOpenOptions::PutObjectValue ( struct _RawFormatOpenOptions * _arg1 );
__declspec(implementation_key(947)) void _RawFormatOpenOptions::PutRefObjectValue ( struct _RawFormatOpenOptions * _arg1 );
__declspec(implementation_key(948)) double _PDFOpenOptions::GetResolution ( );
__declspec(implementation_key(949)) void _PDFOpenOptions::PutResolution ( double _arg1 );
__declspec(implementation_key(950)) enum PsOpenDocumentMode _PDFOpenOptions::GetMode ( );
__declspec(implementation_key(951)) void _PDFOpenOptions::PutMode ( enum PsOpenDocumentMode _arg1 );
__declspec(implementation_key(952)) VARIANT_BOOL _PDFOpenOptions::GetAntiAlias ( );
__declspec(implementation_key(953)) void _PDFOpenOptions::PutAntiAlias ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(954)) long _PDFOpenOptions::GetPage ( );
__declspec(implementation_key(955)) void _PDFOpenOptions::PutPage ( long _arg1 );
__declspec(implementation_key(956)) VARIANT_BOOL _PDFOpenOptions::GetConstrainProportions ( );
__declspec(implementation_key(957)) void _PDFOpenOptions::PutConstrainProportions ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(958)) double _PDFOpenOptions::GetHeight ( );
__declspec(implementation_key(959)) void _PDFOpenOptions::PutHeight ( double _arg1 );
__declspec(implementation_key(960)) double _PDFOpenOptions::GetWidth ( );
__declspec(implementation_key(961)) void _PDFOpenOptions::PutWidth ( double _arg1 );
__declspec(implementation_key(962)) enum PsBitsPerChannelType _PDFOpenOptions::GetBitsPerChannel ( );
__declspec(implementation_key(963)) void _PDFOpenOptions::PutBitsPerChannel ( enum PsBitsPerChannelType _arg1 );
__declspec(implementation_key(964)) VARIANT_BOOL _PDFOpenOptions::GetUsePageNumber ( );
__declspec(implementation_key(965)) void _PDFOpenOptions::PutUsePageNumber ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(966)) _bstr_t _PDFOpenOptions::GetName ( );
__declspec(implementation_key(967)) void _PDFOpenOptions::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(968)) enum PsCropToType _PDFOpenOptions::GetCropPage ( );
__declspec(implementation_key(969)) void _PDFOpenOptions::PutCropPage ( enum PsCropToType _arg1 );
__declspec(implementation_key(970)) VARIANT_BOOL _PDFOpenOptions::GetSuppressWarnings ( );
__declspec(implementation_key(971)) void _PDFOpenOptions::PutSuppressWarnings ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(972)) _ApplicationPtr _PDFOpenOptions::GetApplication ( );
__declspec(implementation_key(973)) void _PDFOpenOptions::PutObjectValue ( struct _PDFOpenOptions * _arg1 );
__declspec(implementation_key(974)) void _PDFOpenOptions::PutRefObjectValue ( struct _PDFOpenOptions * _arg1 );
__declspec(implementation_key(975)) double _EPSOpenOptions::GetHeight ( );
__declspec(implementation_key(976)) void _EPSOpenOptions::PutHeight ( double _arg1 );
__declspec(implementation_key(977)) double _EPSOpenOptions::GetWidth ( );
__declspec(implementation_key(978)) void _EPSOpenOptions::PutWidth ( double _arg1 );
__declspec(implementation_key(979)) double _EPSOpenOptions::GetResolution ( );
__declspec(implementation_key(980)) void _EPSOpenOptions::PutResolution ( double _arg1 );
__declspec(implementation_key(981)) enum PsOpenDocumentMode _EPSOpenOptions::GetMode ( );
__declspec(implementation_key(982)) void _EPSOpenOptions::PutMode ( enum PsOpenDocumentMode _arg1 );
__declspec(implementation_key(983)) VARIANT_BOOL _EPSOpenOptions::GetAntiAlias ( );
__declspec(implementation_key(984)) void _EPSOpenOptions::PutAntiAlias ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(985)) VARIANT_BOOL _EPSOpenOptions::GetConstrainProportions ( );
__declspec(implementation_key(986)) void _EPSOpenOptions::PutConstrainProportions ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(987)) _ApplicationPtr _EPSOpenOptions::GetApplication ( );
__declspec(implementation_key(988)) void _EPSOpenOptions::PutObjectValue ( struct _EPSOpenOptions * _arg1 );
__declspec(implementation_key(989)) void _EPSOpenOptions::PutRefObjectValue ( struct _EPSOpenOptions * _arg1 );
__declspec(implementation_key(990)) VARIANT_BOOL _DICOMOpenOptions::GetAnonymize ( );
__declspec(implementation_key(991)) void _DICOMOpenOptions::PutAnonymize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(992)) VARIANT_BOOL _DICOMOpenOptions::GetShowOverlays ( );
__declspec(implementation_key(993)) void _DICOMOpenOptions::PutShowOverlays ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(994)) long _DICOMOpenOptions::GetRows ( );
__declspec(implementation_key(995)) void _DICOMOpenOptions::PutRows ( long _arg1 );
__declspec(implementation_key(996)) long _DICOMOpenOptions::GetColumns ( );
__declspec(implementation_key(997)) void _DICOMOpenOptions::PutColumns ( long _arg1 );
__declspec(implementation_key(998)) long _DICOMOpenOptions::GetWindowWidth ( );
__declspec(implementation_key(999)) void _DICOMOpenOptions::PutWindowWidth ( long _arg1 );
__declspec(implementation_key(1000)) long _DICOMOpenOptions::GetWindowLevel ( );
__declspec(implementation_key(1001)) void _DICOMOpenOptions::PutWindowLevel ( long _arg1 );
__declspec(implementation_key(1002)) VARIANT_BOOL _DICOMOpenOptions::GetReverse ( );
__declspec(implementation_key(1003)) void _DICOMOpenOptions::PutReverse ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1004)) _ApplicationPtr _DICOMOpenOptions::GetApplication ( );
__declspec(implementation_key(1005)) void _DICOMOpenOptions::PutObjectValue ( struct _DICOMOpenOptions * _arg1 );
__declspec(implementation_key(1006)) void _DICOMOpenOptions::PutRefObjectValue ( struct _DICOMOpenOptions * _arg1 );
__declspec(implementation_key(1007)) enum PsColorSpaceType _CameraRAWOpenOptions::GetColorSpace ( );
__declspec(implementation_key(1008)) void _CameraRAWOpenOptions::PutColorSpace ( enum PsColorSpaceType _arg1 );
__declspec(implementation_key(1009)) enum PsBitsPerChannelType _CameraRAWOpenOptions::GetBitsPerChannel ( );
__declspec(implementation_key(1010)) void _CameraRAWOpenOptions::PutBitsPerChannel ( enum PsBitsPerChannelType _arg1 );
__declspec(implementation_key(1011)) enum PsCameraRAWSize _CameraRAWOpenOptions::GetSize ( );
__declspec(implementation_key(1012)) void _CameraRAWOpenOptions::PutSize ( enum PsCameraRAWSize _arg1 );
__declspec(implementation_key(1013)) double _CameraRAWOpenOptions::GetResolution ( );
__declspec(implementation_key(1014)) void _CameraRAWOpenOptions::PutResolution ( double _arg1 );
__declspec(implementation_key(1015)) enum PsCameraRAWSettingsType _CameraRAWOpenOptions::GetSettings ( );
__declspec(implementation_key(1016)) void _CameraRAWOpenOptions::PutSettings ( enum PsCameraRAWSettingsType _arg1 );
__declspec(implementation_key(1017)) enum PsWhiteBalanceType _CameraRAWOpenOptions::GetWhiteBalance ( );
__declspec(implementation_key(1018)) void _CameraRAWOpenOptions::PutWhiteBalance ( enum PsWhiteBalanceType _arg1 );
__declspec(implementation_key(1019)) long _CameraRAWOpenOptions::GetTemperature ( );
__declspec(implementation_key(1020)) void _CameraRAWOpenOptions::PutTemperature ( long _arg1 );
__declspec(implementation_key(1021)) long _CameraRAWOpenOptions::GetTint ( );
__declspec(implementation_key(1022)) void _CameraRAWOpenOptions::PutTint ( long _arg1 );
__declspec(implementation_key(1023)) double _CameraRAWOpenOptions::GetExposure ( );
__declspec(implementation_key(1024)) void _CameraRAWOpenOptions::PutExposure ( double _arg1 );
__declspec(implementation_key(1025)) long _CameraRAWOpenOptions::GetShadows ( );
__declspec(implementation_key(1026)) void _CameraRAWOpenOptions::PutShadows ( long _arg1 );
__declspec(implementation_key(1027)) long _CameraRAWOpenOptions::GetBrightness ( );
__declspec(implementation_key(1028)) void _CameraRAWOpenOptions::PutBrightness ( long _arg1 );
__declspec(implementation_key(1029)) long _CameraRAWOpenOptions::GetContrast ( );
__declspec(implementation_key(1030)) void _CameraRAWOpenOptions::PutContrast ( long _arg1 );
__declspec(implementation_key(1031)) long _CameraRAWOpenOptions::GetSaturation ( );
__declspec(implementation_key(1032)) void _CameraRAWOpenOptions::PutSaturation ( long _arg1 );
__declspec(implementation_key(1033)) long _CameraRAWOpenOptions::GetSharpness ( );
__declspec(implementation_key(1034)) void _CameraRAWOpenOptions::PutSharpness ( long _arg1 );
__declspec(implementation_key(1035)) long _CameraRAWOpenOptions::GetLuminanceSmoothing ( );
__declspec(implementation_key(1036)) void _CameraRAWOpenOptions::PutLuminanceSmoothing ( long _arg1 );
__declspec(implementation_key(1037)) long _CameraRAWOpenOptions::GetColorNoiseReduction ( );
__declspec(implementation_key(1038)) void _CameraRAWOpenOptions::PutColorNoiseReduction ( long _arg1 );
__declspec(implementation_key(1039)) long _CameraRAWOpenOptions::GetChromaticAberrationRC ( );
__declspec(implementation_key(1040)) void _CameraRAWOpenOptions::PutChromaticAberrationRC ( long _arg1 );
__declspec(implementation_key(1041)) long _CameraRAWOpenOptions::GetChromaticAberrationBY ( );
__declspec(implementation_key(1042)) void _CameraRAWOpenOptions::PutChromaticAberrationBY ( long _arg1 );
__declspec(implementation_key(1043)) long _CameraRAWOpenOptions::GetVignettingAmount ( );
__declspec(implementation_key(1044)) void _CameraRAWOpenOptions::PutVignettingAmount ( long _arg1 );
__declspec(implementation_key(1045)) long _CameraRAWOpenOptions::GetVignettingMidpoint ( );
__declspec(implementation_key(1046)) void _CameraRAWOpenOptions::PutVignettingMidpoint ( long _arg1 );
__declspec(implementation_key(1047)) long _CameraRAWOpenOptions::GetShadowTint ( );
__declspec(implementation_key(1048)) void _CameraRAWOpenOptions::PutShadowTint ( long _arg1 );
__declspec(implementation_key(1049)) long _CameraRAWOpenOptions::GetRedHue ( );
__declspec(implementation_key(1050)) void _CameraRAWOpenOptions::PutRedHue ( long _arg1 );
__declspec(implementation_key(1051)) long _CameraRAWOpenOptions::GetRedSaturation ( );
__declspec(implementation_key(1052)) void _CameraRAWOpenOptions::PutRedSaturation ( long _arg1 );
__declspec(implementation_key(1053)) long _CameraRAWOpenOptions::GetGreenHue ( );
__declspec(implementation_key(1054)) void _CameraRAWOpenOptions::PutGreenHue ( long _arg1 );
__declspec(implementation_key(1055)) long _CameraRAWOpenOptions::GetGreenSaturation ( );
__declspec(implementation_key(1056)) void _CameraRAWOpenOptions::PutGreenSaturation ( long _arg1 );
__declspec(implementation_key(1057)) long _CameraRAWOpenOptions::GetBlueHue ( );
__declspec(implementation_key(1058)) void _CameraRAWOpenOptions::PutBlueHue ( long _arg1 );
__declspec(implementation_key(1059)) long _CameraRAWOpenOptions::GetBlueSaturation ( );
__declspec(implementation_key(1060)) void _CameraRAWOpenOptions::PutBlueSaturation ( long _arg1 );
__declspec(implementation_key(1061)) _ApplicationPtr _CameraRAWOpenOptions::GetApplication ( );
__declspec(implementation_key(1062)) void _CameraRAWOpenOptions::PutObjectValue ( struct _CameraRAWOpenOptions * _arg1 );
__declspec(implementation_key(1063)) void _CameraRAWOpenOptions::PutRefObjectValue ( struct _CameraRAWOpenOptions * _arg1 );
__declspec(implementation_key(1064)) VARIANT_BOOL _PhotoshopSaveOptions::GetAlphaChannels ( );
__declspec(implementation_key(1065)) void _PhotoshopSaveOptions::PutAlphaChannels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1066)) VARIANT_BOOL _PhotoshopSaveOptions::GetLayers ( );
__declspec(implementation_key(1067)) void _PhotoshopSaveOptions::PutLayers ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1068)) VARIANT_BOOL _PhotoshopSaveOptions::GetAnnotations ( );
__declspec(implementation_key(1069)) void _PhotoshopSaveOptions::PutAnnotations ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1070)) VARIANT_BOOL _PhotoshopSaveOptions::GetSpotColors ( );
__declspec(implementation_key(1071)) void _PhotoshopSaveOptions::PutSpotColors ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1072)) VARIANT_BOOL _PhotoshopSaveOptions::GetEmbedColorProfile ( );
__declspec(implementation_key(1073)) void _PhotoshopSaveOptions::PutEmbedColorProfile ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1074)) _ApplicationPtr _PhotoshopSaveOptions::GetApplication ( );
__declspec(implementation_key(1075)) void _PhotoshopSaveOptions::PutObjectValue ( struct _PhotoshopSaveOptions * _arg1 );
__declspec(implementation_key(1076)) void _PhotoshopSaveOptions::PutRefObjectValue ( struct _PhotoshopSaveOptions * _arg1 );
__declspec(implementation_key(1077)) VARIANT_BOOL _BMPSaveOptions::GetAlphaChannels ( );
__declspec(implementation_key(1078)) void _BMPSaveOptions::PutAlphaChannels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1079)) enum PsOperatingSystem _BMPSaveOptions::GetOSType ( );
__declspec(implementation_key(1080)) void _BMPSaveOptions::PutOSType ( enum PsOperatingSystem _arg1 );
__declspec(implementation_key(1081)) enum PsBMPDepthType _BMPSaveOptions::GetDepth ( );
__declspec(implementation_key(1082)) void _BMPSaveOptions::PutDepth ( enum PsBMPDepthType _arg1 );
__declspec(implementation_key(1083)) VARIANT_BOOL _BMPSaveOptions::GetRLECompression ( );
__declspec(implementation_key(1084)) void _BMPSaveOptions::PutRLECompression ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1085)) VARIANT_BOOL _BMPSaveOptions::GetFlipRowOrder ( );
__declspec(implementation_key(1086)) void _BMPSaveOptions::PutFlipRowOrder ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1087)) _ApplicationPtr _BMPSaveOptions::GetApplication ( );
__declspec(implementation_key(1088)) void _BMPSaveOptions::PutObjectValue ( struct _BMPSaveOptions * _arg1 );
__declspec(implementation_key(1089)) void _BMPSaveOptions::PutRefObjectValue ( struct _BMPSaveOptions * _arg1 );
__declspec(implementation_key(1090)) long _GIFSaveOptions::GetColors ( );
__declspec(implementation_key(1091)) void _GIFSaveOptions::PutColors ( long _arg1 );
__declspec(implementation_key(1092)) enum PsDitherType _GIFSaveOptions::GetDither ( );
__declspec(implementation_key(1093)) void _GIFSaveOptions::PutDither ( enum PsDitherType _arg1 );
__declspec(implementation_key(1094)) long _GIFSaveOptions::GetDitherAmount ( );
__declspec(implementation_key(1095)) void _GIFSaveOptions::PutDitherAmount ( long _arg1 );
__declspec(implementation_key(1096)) enum PsForcedColors _GIFSaveOptions::GetForced ( );
__declspec(implementation_key(1097)) void _GIFSaveOptions::PutForced ( enum PsForcedColors _arg1 );
__declspec(implementation_key(1098)) VARIANT_BOOL _GIFSaveOptions::GetInterlaced ( );
__declspec(implementation_key(1099)) void _GIFSaveOptions::PutInterlaced ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1100)) enum PsMatteType _GIFSaveOptions::GetMatte ( );
__declspec(implementation_key(1101)) void _GIFSaveOptions::PutMatte ( enum PsMatteType _arg1 );
__declspec(implementation_key(1102)) enum PsPaletteType _GIFSaveOptions::GetPalette ( );
__declspec(implementation_key(1103)) void _GIFSaveOptions::PutPalette ( enum PsPaletteType _arg1 );
__declspec(implementation_key(1104)) VARIANT_BOOL _GIFSaveOptions::GetPreserveExactColors ( );
__declspec(implementation_key(1105)) void _GIFSaveOptions::PutPreserveExactColors ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1106)) VARIANT_BOOL _GIFSaveOptions::GetTransparency ( );
__declspec(implementation_key(1107)) void _GIFSaveOptions::PutTransparency ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1108)) _ApplicationPtr _GIFSaveOptions::GetApplication ( );
__declspec(implementation_key(1109)) void _GIFSaveOptions::PutObjectValue ( struct _GIFSaveOptions * _arg1 );
__declspec(implementation_key(1110)) void _GIFSaveOptions::PutRefObjectValue ( struct _GIFSaveOptions * _arg1 );
__declspec(implementation_key(1111)) VARIANT_BOOL _EPSSaveOptions::GetEmbedColorProfile ( );
__declspec(implementation_key(1112)) void _EPSSaveOptions::PutEmbedColorProfile ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1113)) enum PsPreviewType _EPSSaveOptions::GetPreview ( );
__declspec(implementation_key(1114)) void _EPSSaveOptions::PutPreview ( enum PsPreviewType _arg1 );
__declspec(implementation_key(1115)) enum PsSaveEncoding _EPSSaveOptions::GetEncoding ( );
__declspec(implementation_key(1116)) void _EPSSaveOptions::PutEncoding ( enum PsSaveEncoding _arg1 );
__declspec(implementation_key(1117)) VARIANT_BOOL _EPSSaveOptions::GetHalftoneScreen ( );
__declspec(implementation_key(1118)) void _EPSSaveOptions::PutHalftoneScreen ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1119)) VARIANT_BOOL _EPSSaveOptions::GetTransferFunction ( );
__declspec(implementation_key(1120)) void _EPSSaveOptions::PutTransferFunction ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1121)) VARIANT_BOOL _EPSSaveOptions::GetPSColorManagement ( );
__declspec(implementation_key(1122)) void _EPSSaveOptions::PutPSColorManagement ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1123)) VARIANT_BOOL _EPSSaveOptions::GetVectorData ( );
__declspec(implementation_key(1124)) void _EPSSaveOptions::PutVectorData ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1125)) VARIANT_BOOL _EPSSaveOptions::GetInterpolation ( );
__declspec(implementation_key(1126)) void _EPSSaveOptions::PutInterpolation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1127)) VARIANT_BOOL _EPSSaveOptions::GetTransparentWhites ( );
__declspec(implementation_key(1128)) void _EPSSaveOptions::PutTransparentWhites ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1129)) _ApplicationPtr _EPSSaveOptions::GetApplication ( );
__declspec(implementation_key(1130)) void _EPSSaveOptions::PutObjectValue ( struct _EPSSaveOptions * _arg1 );
__declspec(implementation_key(1131)) void _EPSSaveOptions::PutRefObjectValue ( struct _EPSSaveOptions * _arg1 );
__declspec(implementation_key(1132)) VARIANT_BOOL _JPEGSaveOptions::GetEmbedColorProfile ( );
__declspec(implementation_key(1133)) void _JPEGSaveOptions::PutEmbedColorProfile ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1134)) enum PsFormatOptionsType _JPEGSaveOptions::GetFormatOptions ( );
__declspec(implementation_key(1135)) void _JPEGSaveOptions::PutFormatOptions ( enum PsFormatOptionsType _arg1 );
__declspec(implementation_key(1136)) enum PsMatteType _JPEGSaveOptions::GetMatte ( );
__declspec(implementation_key(1137)) void _JPEGSaveOptions::PutMatte ( enum PsMatteType _arg1 );
__declspec(implementation_key(1138)) long _JPEGSaveOptions::GetScans ( );
__declspec(implementation_key(1139)) void _JPEGSaveOptions::PutScans ( long _arg1 );
__declspec(implementation_key(1140)) long _JPEGSaveOptions::GetQuality ( );
__declspec(implementation_key(1141)) void _JPEGSaveOptions::PutQuality ( long _arg1 );
__declspec(implementation_key(1142)) _ApplicationPtr _JPEGSaveOptions::GetApplication ( );
__declspec(implementation_key(1143)) void _JPEGSaveOptions::PutObjectValue ( struct _JPEGSaveOptions * _arg1 );
__declspec(implementation_key(1144)) void _JPEGSaveOptions::PutRefObjectValue ( struct _JPEGSaveOptions * _arg1 );
__declspec(implementation_key(1145)) VARIANT_BOOL _PDFSaveOptions::GetAlphaChannels ( );
__declspec(implementation_key(1146)) void _PDFSaveOptions::PutAlphaChannels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1147)) VARIANT_BOOL _PDFSaveOptions::GetLayers ( );
__declspec(implementation_key(1148)) void _PDFSaveOptions::PutLayers ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1149)) VARIANT_BOOL _PDFSaveOptions::GetAnnotations ( );
__declspec(implementation_key(1150)) void _PDFSaveOptions::PutAnnotations ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1151)) VARIANT_BOOL _PDFSaveOptions::GetSpotColors ( );
__declspec(implementation_key(1152)) void _PDFSaveOptions::PutSpotColors ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1153)) VARIANT_BOOL _PDFSaveOptions::GetEmbedColorProfile ( );
__declspec(implementation_key(1154)) void _PDFSaveOptions::PutEmbedColorProfile ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1155)) VARIANT_BOOL _PDFSaveOptions::GetDowngradeColorProfile ( );
__declspec(implementation_key(1156)) void _PDFSaveOptions::PutDowngradeColorProfile ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1157)) VARIANT_BOOL _PDFSaveOptions::GetTransparency ( );
__declspec(implementation_key(1158)) void _PDFSaveOptions::PutTransparency ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1159)) VARIANT_BOOL _PDFSaveOptions::GetInterpolation ( );
__declspec(implementation_key(1160)) void _PDFSaveOptions::PutInterpolation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1161)) VARIANT_BOOL _PDFSaveOptions::GetVectorData ( );
__declspec(implementation_key(1162)) void _PDFSaveOptions::PutVectorData ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1163)) VARIANT_BOOL _PDFSaveOptions::GetEmbedFonts ( );
__declspec(implementation_key(1164)) void _PDFSaveOptions::PutEmbedFonts ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1165)) VARIANT_BOOL _PDFSaveOptions::GetUseOutlines ( );
__declspec(implementation_key(1166)) void _PDFSaveOptions::PutUseOutlines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1167)) enum PsPDFEncodingType _PDFSaveOptions::GetEncoding ( );
__declspec(implementation_key(1168)) void _PDFSaveOptions::PutEncoding ( enum PsPDFEncodingType _arg1 );
__declspec(implementation_key(1169)) long _PDFSaveOptions::GetJPEGQuality ( );
__declspec(implementation_key(1170)) void _PDFSaveOptions::PutJPEGQuality ( long _arg1 );
__declspec(implementation_key(1171)) _bstr_t _PDFSaveOptions::GetPresetFile ( );
__declspec(implementation_key(1172)) void _PDFSaveOptions::PutPresetFile ( _bstr_t _arg1 );
__declspec(implementation_key(1173)) enum PsPDFStandardType _PDFSaveOptions::GetPDFStandard ( );
__declspec(implementation_key(1174)) void _PDFSaveOptions::PutPDFStandard ( enum PsPDFStandardType _arg1 );
__declspec(implementation_key(1175)) enum PsPDFCompatibilityType _PDFSaveOptions::GetPDFCompatibility ( );
__declspec(implementation_key(1176)) void _PDFSaveOptions::PutPDFCompatibility ( enum PsPDFCompatibilityType _arg1 );
__declspec(implementation_key(1177)) _bstr_t _PDFSaveOptions::GetDescription ( );
__declspec(implementation_key(1178)) void _PDFSaveOptions::PutDescription ( _bstr_t _arg1 );
__declspec(implementation_key(1179)) VARIANT_BOOL _PDFSaveOptions::GetPreserveEditing ( );
__declspec(implementation_key(1180)) void _PDFSaveOptions::PutPreserveEditing ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1181)) VARIANT_BOOL _PDFSaveOptions::GetEmbedThumbnail ( );
__declspec(implementation_key(1182)) void _PDFSaveOptions::PutEmbedThumbnail ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1183)) VARIANT_BOOL _PDFSaveOptions::GetOptimizeForWeb ( );
__declspec(implementation_key(1184)) void _PDFSaveOptions::PutOptimizeForWeb ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1185)) VARIANT_BOOL _PDFSaveOptions::GetView ( );
__declspec(implementation_key(1186)) void _PDFSaveOptions::PutView ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1187)) enum PsPDFResampleType _PDFSaveOptions::GetDownSample ( );
__declspec(implementation_key(1188)) void _PDFSaveOptions::PutDownSample ( enum PsPDFResampleType _arg1 );
__declspec(implementation_key(1189)) double _PDFSaveOptions::GetDownSampleSize ( );
__declspec(implementation_key(1190)) void _PDFSaveOptions::PutDownSampleSize ( double _arg1 );
__declspec(implementation_key(1191)) double _PDFSaveOptions::GetDownSampleSizeLimit ( );
__declspec(implementation_key(1192)) void _PDFSaveOptions::PutDownSampleSizeLimit ( double _arg1 );
__declspec(implementation_key(1193)) long _PDFSaveOptions::GetTileSize ( );
__declspec(implementation_key(1194)) void _PDFSaveOptions::PutTileSize ( long _arg1 );
__declspec(implementation_key(1195)) VARIANT_BOOL _PDFSaveOptions::GetConvertToEightBit ( );
__declspec(implementation_key(1196)) void _PDFSaveOptions::PutConvertToEightBit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1197)) VARIANT_BOOL _PDFSaveOptions::GetColorConversion ( );
__declspec(implementation_key(1198)) void _PDFSaveOptions::PutColorConversion ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1199)) _bstr_t _PDFSaveOptions::GetDestinationProfile ( );
__declspec(implementation_key(1200)) void _PDFSaveOptions::PutDestinationProfile ( _bstr_t _arg1 );
__declspec(implementation_key(1201)) VARIANT_BOOL _PDFSaveOptions::GetProfileInclusionPolicy ( );
__declspec(implementation_key(1202)) void _PDFSaveOptions::PutProfileInclusionPolicy ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1203)) _bstr_t _PDFSaveOptions::GetOutputCondition ( );
__declspec(implementation_key(1204)) void _PDFSaveOptions::PutOutputCondition ( _bstr_t _arg1 );
__declspec(implementation_key(1205)) _bstr_t _PDFSaveOptions::GetOutputConditionID ( );
__declspec(implementation_key(1206)) void _PDFSaveOptions::PutOutputConditionID ( _bstr_t _arg1 );
__declspec(implementation_key(1207)) _bstr_t _PDFSaveOptions::GetRegistryName ( );
__declspec(implementation_key(1208)) void _PDFSaveOptions::PutRegistryName ( _bstr_t _arg1 );
__declspec(implementation_key(1209)) _ApplicationPtr _PDFSaveOptions::GetApplication ( );
__declspec(implementation_key(1210)) void _PDFSaveOptions::PutObjectValue ( struct _PDFSaveOptions * _arg1 );
__declspec(implementation_key(1211)) void _PDFSaveOptions::PutRefObjectValue ( struct _PDFSaveOptions * _arg1 );
__declspec(implementation_key(1212)) VARIANT_BOOL _PICTFileSaveOptions::GetAlphaChannels ( );
__declspec(implementation_key(1213)) void _PICTFileSaveOptions::PutAlphaChannels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1214)) VARIANT_BOOL _PICTFileSaveOptions::GetEmbedColorProfile ( );
__declspec(implementation_key(1215)) void _PICTFileSaveOptions::PutEmbedColorProfile ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1216)) enum PsPICTBitsPerPixels _PICTFileSaveOptions::GetResolution ( );
__declspec(implementation_key(1217)) void _PICTFileSaveOptions::PutResolution ( enum PsPICTBitsPerPixels _arg1 );
__declspec(implementation_key(1218)) enum PsPICTCompression _PICTFileSaveOptions::GetCompression ( );
__declspec(implementation_key(1219)) void _PICTFileSaveOptions::PutCompression ( enum PsPICTCompression _arg1 );
__declspec(implementation_key(1220)) _ApplicationPtr _PICTFileSaveOptions::GetApplication ( );
__declspec(implementation_key(1221)) void _PICTFileSaveOptions::PutObjectValue ( struct _PICTFileSaveOptions * _arg1 );
__declspec(implementation_key(1222)) void _PICTFileSaveOptions::PutRefObjectValue ( struct _PICTFileSaveOptions * _arg1 );
__declspec(implementation_key(1223)) VARIANT_BOOL _PixarSaveOptions::GetAlphaChannels ( );
__declspec(implementation_key(1224)) void _PixarSaveOptions::PutAlphaChannels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1225)) _ApplicationPtr _PixarSaveOptions::GetApplication ( );
__declspec(implementation_key(1226)) void _PixarSaveOptions::PutObjectValue ( struct _PixarSaveOptions * _arg1 );
__declspec(implementation_key(1227)) void _PixarSaveOptions::PutRefObjectValue ( struct _PixarSaveOptions * _arg1 );
__declspec(implementation_key(1228)) VARIANT_BOOL _PNGSaveOptions::GetInterlaced ( );
__declspec(implementation_key(1229)) void _PNGSaveOptions::PutInterlaced ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1230)) long _PNGSaveOptions::GetCompression ( );
__declspec(implementation_key(1231)) void _PNGSaveOptions::PutCompression ( long _arg1 );
__declspec(implementation_key(1232)) _ApplicationPtr _PNGSaveOptions::GetApplication ( );
__declspec(implementation_key(1233)) void _PNGSaveOptions::PutObjectValue ( struct _PNGSaveOptions * _arg1 );
__declspec(implementation_key(1234)) void _PNGSaveOptions::PutRefObjectValue ( struct _PNGSaveOptions * _arg1 );
__declspec(implementation_key(1235)) VARIANT_BOOL _RawSaveOptions::GetAlphaChannels ( );
__declspec(implementation_key(1236)) void _RawSaveOptions::PutAlphaChannels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1237)) VARIANT_BOOL _RawSaveOptions::GetSpotColors ( );
__declspec(implementation_key(1238)) void _RawSaveOptions::PutSpotColors ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1239)) _ApplicationPtr _RawSaveOptions::GetApplication ( );
__declspec(implementation_key(1240)) void _RawSaveOptions::PutObjectValue ( struct _RawSaveOptions * _arg1 );
__declspec(implementation_key(1241)) void _RawSaveOptions::PutRefObjectValue ( struct _RawSaveOptions * _arg1 );
__declspec(implementation_key(1242)) VARIANT_BOOL _SGIRGBSaveOptions::GetAlphaChannels ( );
__declspec(implementation_key(1243)) void _SGIRGBSaveOptions::PutAlphaChannels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1244)) VARIANT_BOOL _SGIRGBSaveOptions::GetSpotColors ( );
__declspec(implementation_key(1245)) void _SGIRGBSaveOptions::PutSpotColors ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1246)) _ApplicationPtr _SGIRGBSaveOptions::GetApplication ( );
__declspec(implementation_key(1247)) void _SGIRGBSaveOptions::PutObjectValue ( struct _SGIRGBSaveOptions * _arg1 );
__declspec(implementation_key(1248)) void _SGIRGBSaveOptions::PutRefObjectValue ( struct _SGIRGBSaveOptions * _arg1 );
__declspec(implementation_key(1249)) enum PsTargaBitsPerPixels _TargaSaveOptions::GetResolution ( );
__declspec(implementation_key(1250)) void _TargaSaveOptions::PutResolution ( enum PsTargaBitsPerPixels _arg1 );
__declspec(implementation_key(1251)) VARIANT_BOOL _TargaSaveOptions::GetRLECompression ( );
__declspec(implementation_key(1252)) void _TargaSaveOptions::PutRLECompression ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1253)) VARIANT_BOOL _TargaSaveOptions::GetAlphaChannels ( );
__declspec(implementation_key(1254)) void _TargaSaveOptions::PutAlphaChannels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1255)) _ApplicationPtr _TargaSaveOptions::GetApplication ( );
__declspec(implementation_key(1256)) void _TargaSaveOptions::PutObjectValue ( struct _TargaSaveOptions * _arg1 );
__declspec(implementation_key(1257)) void _TargaSaveOptions::PutRefObjectValue ( struct _TargaSaveOptions * _arg1 );
__declspec(implementation_key(1258)) VARIANT_BOOL _TiffSaveOptions::GetAlphaChannels ( );
__declspec(implementation_key(1259)) void _TiffSaveOptions::PutAlphaChannels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1260)) VARIANT_BOOL _TiffSaveOptions::GetLayers ( );
__declspec(implementation_key(1261)) void _TiffSaveOptions::PutLayers ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1262)) VARIANT_BOOL _TiffSaveOptions::GetAnnotations ( );
__declspec(implementation_key(1263)) void _TiffSaveOptions::PutAnnotations ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1264)) VARIANT_BOOL _TiffSaveOptions::GetSpotColors ( );
__declspec(implementation_key(1265)) void _TiffSaveOptions::PutSpotColors ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1266)) VARIANT_BOOL _TiffSaveOptions::GetEmbedColorProfile ( );
__declspec(implementation_key(1267)) void _TiffSaveOptions::PutEmbedColorProfile ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1268)) enum PsTiffEncodingType _TiffSaveOptions::GetImageCompression ( );
__declspec(implementation_key(1269)) void _TiffSaveOptions::PutImageCompression ( enum PsTiffEncodingType _arg1 );
__declspec(implementation_key(1270)) long _TiffSaveOptions::GetJPEGQuality ( );
__declspec(implementation_key(1271)) void _TiffSaveOptions::PutJPEGQuality ( long _arg1 );
__declspec(implementation_key(1272)) enum PsByteOrderType _TiffSaveOptions::GetByteOrder ( );
__declspec(implementation_key(1273)) void _TiffSaveOptions::PutByteOrder ( enum PsByteOrderType _arg1 );
__declspec(implementation_key(1274)) VARIANT_BOOL _TiffSaveOptions::GetSaveImagePyramid ( );
__declspec(implementation_key(1275)) void _TiffSaveOptions::PutSaveImagePyramid ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1276)) VARIANT_BOOL _TiffSaveOptions::GetTransparency ( );
__declspec(implementation_key(1277)) void _TiffSaveOptions::PutTransparency ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1278)) enum PsLayerCompressionType _TiffSaveOptions::GetLayerCompression ( );
__declspec(implementation_key(1279)) void _TiffSaveOptions::PutLayerCompression ( enum PsLayerCompressionType _arg1 );
__declspec(implementation_key(1280)) VARIANT_BOOL _TiffSaveOptions::GetInterleaveChannels ( );
__declspec(implementation_key(1281)) void _TiffSaveOptions::PutInterleaveChannels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1282)) _ApplicationPtr _TiffSaveOptions::GetApplication ( );
__declspec(implementation_key(1283)) void _TiffSaveOptions::PutObjectValue ( struct _TiffSaveOptions * _arg1 );
__declspec(implementation_key(1284)) void _TiffSaveOptions::PutRefObjectValue ( struct _TiffSaveOptions * _arg1 );
__declspec(implementation_key(1285)) VARIANT_BOOL _DCS1_SaveOptions::GetEmbedColorProfile ( );
__declspec(implementation_key(1286)) void _DCS1_SaveOptions::PutEmbedColorProfile ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1287)) enum PsPreviewType _DCS1_SaveOptions::GetPreview ( );
__declspec(implementation_key(1288)) void _DCS1_SaveOptions::PutPreview ( enum PsPreviewType _arg1 );
__declspec(implementation_key(1289)) enum PsDCSType _DCS1_SaveOptions::GetDCS ( );
__declspec(implementation_key(1290)) void _DCS1_SaveOptions::PutDCS ( enum PsDCSType _arg1 );
__declspec(implementation_key(1291)) enum PsSaveEncoding _DCS1_SaveOptions::GetEncoding ( );
__declspec(implementation_key(1292)) void _DCS1_SaveOptions::PutEncoding ( enum PsSaveEncoding _arg1 );
__declspec(implementation_key(1293)) VARIANT_BOOL _DCS1_SaveOptions::GetHalftoneScreen ( );
__declspec(implementation_key(1294)) void _DCS1_SaveOptions::PutHalftoneScreen ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1295)) VARIANT_BOOL _DCS1_SaveOptions::GetTransferFunction ( );
__declspec(implementation_key(1296)) void _DCS1_SaveOptions::PutTransferFunction ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1297)) VARIANT_BOOL _DCS1_SaveOptions::GetVectorData ( );
__declspec(implementation_key(1298)) void _DCS1_SaveOptions::PutVectorData ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1299)) VARIANT_BOOL _DCS1_SaveOptions::GetInterpolation ( );
__declspec(implementation_key(1300)) void _DCS1_SaveOptions::PutInterpolation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1301)) _ApplicationPtr _DCS1_SaveOptions::GetApplication ( );
__declspec(implementation_key(1302)) void _DCS1_SaveOptions::PutObjectValue ( struct _DCS1_SaveOptions * _arg1 );
__declspec(implementation_key(1303)) void _DCS1_SaveOptions::PutRefObjectValue ( struct _DCS1_SaveOptions * _arg1 );
__declspec(implementation_key(1304)) VARIANT_BOOL _DCS2_SaveOptions::GetSpotColors ( );
__declspec(implementation_key(1305)) void _DCS2_SaveOptions::PutSpotColors ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1306)) VARIANT_BOOL _DCS2_SaveOptions::GetEmbedColorProfile ( );
__declspec(implementation_key(1307)) void _DCS2_SaveOptions::PutEmbedColorProfile ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1308)) enum PsPreviewType _DCS2_SaveOptions::GetPreview ( );
__declspec(implementation_key(1309)) void _DCS2_SaveOptions::PutPreview ( enum PsPreviewType _arg1 );
__declspec(implementation_key(1310)) enum PsDCSType _DCS2_SaveOptions::GetDCS ( );
__declspec(implementation_key(1311)) void _DCS2_SaveOptions::PutDCS ( enum PsDCSType _arg1 );
__declspec(implementation_key(1312)) VARIANT_BOOL _DCS2_SaveOptions::GetMultiFileDCS ( );
__declspec(implementation_key(1313)) void _DCS2_SaveOptions::PutMultiFileDCS ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1314)) enum PsSaveEncoding _DCS2_SaveOptions::GetEncoding ( );
__declspec(implementation_key(1315)) void _DCS2_SaveOptions::PutEncoding ( enum PsSaveEncoding _arg1 );
__declspec(implementation_key(1316)) VARIANT_BOOL _DCS2_SaveOptions::GetHalftoneScreen ( );
__declspec(implementation_key(1317)) void _DCS2_SaveOptions::PutHalftoneScreen ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1318)) VARIANT_BOOL _DCS2_SaveOptions::GetTransferFunction ( );
__declspec(implementation_key(1319)) void _DCS2_SaveOptions::PutTransferFunction ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1320)) VARIANT_BOOL _DCS2_SaveOptions::GetVectorData ( );
__declspec(implementation_key(1321)) void _DCS2_SaveOptions::PutVectorData ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1322)) VARIANT_BOOL _DCS2_SaveOptions::GetInterpolation ( );
__declspec(implementation_key(1323)) void _DCS2_SaveOptions::PutInterpolation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1324)) _ApplicationPtr _DCS2_SaveOptions::GetApplication ( );
__declspec(implementation_key(1325)) void _DCS2_SaveOptions::PutObjectValue ( struct _DCS2_SaveOptions * _arg1 );
__declspec(implementation_key(1326)) void _DCS2_SaveOptions::PutRefObjectValue ( struct _DCS2_SaveOptions * _arg1 );
__declspec(implementation_key(1327)) enum PsIllustratorPathType _ExportOptionsIllustrator::GetPath ( );
__declspec(implementation_key(1328)) void _ExportOptionsIllustrator::PutPath ( enum PsIllustratorPathType _arg1 );
__declspec(implementation_key(1329)) _bstr_t _ExportOptionsIllustrator::GetPathName ( );
__declspec(implementation_key(1330)) void _ExportOptionsIllustrator::PutPathName ( _bstr_t _arg1 );
__declspec(implementation_key(1331)) _ApplicationPtr _ExportOptionsIllustrator::GetApplication ( );
__declspec(implementation_key(1332)) void _ExportOptionsIllustrator::PutObjectValue ( struct _ExportOptionsIllustrator * _arg1 );
__declspec(implementation_key(1333)) void _ExportOptionsIllustrator::PutRefObjectValue ( struct _ExportOptionsIllustrator * _arg1 );
__declspec(implementation_key(1334)) enum PsSaveDocumentType _ExportOptionsSaveForWeb::GetFormat ( );
__declspec(implementation_key(1335)) void _ExportOptionsSaveForWeb::PutFormat ( enum PsSaveDocumentType _arg1 );
__declspec(implementation_key(1336)) VARIANT_BOOL _ExportOptionsSaveForWeb::GetPNG8 ( );
__declspec(implementation_key(1337)) void _ExportOptionsSaveForWeb::PutPNG8 ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1338)) long _ExportOptionsSaveForWeb::GetLossy ( );
__declspec(implementation_key(1339)) void _ExportOptionsSaveForWeb::PutLossy ( long _arg1 );
__declspec(implementation_key(1340)) enum PsColorReductionType _ExportOptionsSaveForWeb::GetColorReduction ( );
__declspec(implementation_key(1341)) void _ExportOptionsSaveForWeb::PutColorReduction ( enum PsColorReductionType _arg1 );
__declspec(implementation_key(1342)) long _ExportOptionsSaveForWeb::GetColors ( );
__declspec(implementation_key(1343)) void _ExportOptionsSaveForWeb::PutColors ( long _arg1 );
__declspec(implementation_key(1344)) enum PsDitherType _ExportOptionsSaveForWeb::GetDither ( );
__declspec(implementation_key(1345)) void _ExportOptionsSaveForWeb::PutDither ( enum PsDitherType _arg1 );
__declspec(implementation_key(1346)) long _ExportOptionsSaveForWeb::GetDitherAmount ( );
__declspec(implementation_key(1347)) void _ExportOptionsSaveForWeb::PutDitherAmount ( long _arg1 );
__declspec(implementation_key(1348)) VARIANT_BOOL _ExportOptionsSaveForWeb::GetTransparency ( );
__declspec(implementation_key(1349)) void _ExportOptionsSaveForWeb::PutTransparency ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1350)) enum PsDitherType _ExportOptionsSaveForWeb::GetTransparencyDither ( );
__declspec(implementation_key(1351)) void _ExportOptionsSaveForWeb::PutTransparencyDither ( enum PsDitherType _arg1 );
__declspec(implementation_key(1352)) long _ExportOptionsSaveForWeb::GetTransparencyAmount ( );
__declspec(implementation_key(1353)) void _ExportOptionsSaveForWeb::PutTransparencyAmount ( long _arg1 );
__declspec(implementation_key(1354)) VARIANT_BOOL _ExportOptionsSaveForWeb::GetInterlaced ( );
__declspec(implementation_key(1355)) void _ExportOptionsSaveForWeb::PutInterlaced ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1356)) _RGBColorPtr _ExportOptionsSaveForWeb::GetMatteColor ( );
__declspec(implementation_key(1357)) void _ExportOptionsSaveForWeb::PutMatteColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1358)) void _ExportOptionsSaveForWeb::PutRefMatteColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1359)) long _ExportOptionsSaveForWeb::GetWebSnap ( );
__declspec(implementation_key(1360)) void _ExportOptionsSaveForWeb::PutWebSnap ( long _arg1 );
__declspec(implementation_key(1361)) VARIANT_BOOL _ExportOptionsSaveForWeb::GetOptimized ( );
__declspec(implementation_key(1362)) void _ExportOptionsSaveForWeb::PutOptimized ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1363)) long _ExportOptionsSaveForWeb::GetQuality ( );
__declspec(implementation_key(1364)) void _ExportOptionsSaveForWeb::PutQuality ( long _arg1 );
__declspec(implementation_key(1365)) VARIANT_BOOL _ExportOptionsSaveForWeb::GetIncludeProfile ( );
__declspec(implementation_key(1366)) void _ExportOptionsSaveForWeb::PutIncludeProfile ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1367)) double _ExportOptionsSaveForWeb::GetBlur ( );
__declspec(implementation_key(1368)) void _ExportOptionsSaveForWeb::PutBlur ( double _arg1 );
__declspec(implementation_key(1369)) _ApplicationPtr _ExportOptionsSaveForWeb::GetApplication ( );
__declspec(implementation_key(1370)) void _ExportOptionsSaveForWeb::PutObjectValue ( struct _ExportOptionsSaveForWeb * _arg1 );
__declspec(implementation_key(1371)) void _ExportOptionsSaveForWeb::PutRefObjectValue ( struct _ExportOptionsSaveForWeb * _arg1 );
__declspec(implementation_key(1372)) double _BitmapConversionOptions::GetResolution ( );
__declspec(implementation_key(1373)) void _BitmapConversionOptions::PutResolution ( double _arg1 );
__declspec(implementation_key(1374)) enum PsBitmapConversionType _BitmapConversionOptions::GetMethod ( );
__declspec(implementation_key(1375)) void _BitmapConversionOptions::PutMethod ( enum PsBitmapConversionType _arg1 );
__declspec(implementation_key(1376)) _bstr_t _BitmapConversionOptions::GetPatternName ( );
__declspec(implementation_key(1377)) void _BitmapConversionOptions::PutPatternName ( _bstr_t _arg1 );
__declspec(implementation_key(1378)) double _BitmapConversionOptions::GetFrequency ( );
__declspec(implementation_key(1379)) void _BitmapConversionOptions::PutFrequency ( double _arg1 );
__declspec(implementation_key(1380)) double _BitmapConversionOptions::GetAngle ( );
__declspec(implementation_key(1381)) void _BitmapConversionOptions::PutAngle ( double _arg1 );
__declspec(implementation_key(1382)) enum PsBitmapHalfToneType _BitmapConversionOptions::GetShape ( );
__declspec(implementation_key(1383)) void _BitmapConversionOptions::PutShape ( enum PsBitmapHalfToneType _arg1 );
__declspec(implementation_key(1384)) _ApplicationPtr _BitmapConversionOptions::GetApplication ( );
__declspec(implementation_key(1385)) void _BitmapConversionOptions::PutObjectValue ( struct _BitmapConversionOptions * _arg1 );
__declspec(implementation_key(1386)) void _BitmapConversionOptions::PutRefObjectValue ( struct _BitmapConversionOptions * _arg1 );
__declspec(implementation_key(1387)) enum PsPaletteType _IndexedConversionOptions::GetPalette ( );
__declspec(implementation_key(1388)) void _IndexedConversionOptions::PutPalette ( enum PsPaletteType _arg1 );
__declspec(implementation_key(1389)) long _IndexedConversionOptions::GetColors ( );
__declspec(implementation_key(1390)) void _IndexedConversionOptions::PutColors ( long _arg1 );
__declspec(implementation_key(1391)) enum PsForcedColors _IndexedConversionOptions::GetForced ( );
__declspec(implementation_key(1392)) void _IndexedConversionOptions::PutForced ( enum PsForcedColors _arg1 );
__declspec(implementation_key(1393)) VARIANT_BOOL _IndexedConversionOptions::GetTransparency ( );
__declspec(implementation_key(1394)) void _IndexedConversionOptions::PutTransparency ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1395)) enum PsDitherType _IndexedConversionOptions::GetDither ( );
__declspec(implementation_key(1396)) void _IndexedConversionOptions::PutDither ( enum PsDitherType _arg1 );
__declspec(implementation_key(1397)) long _IndexedConversionOptions::GetDitherAmount ( );
__declspec(implementation_key(1398)) void _IndexedConversionOptions::PutDitherAmount ( long _arg1 );
__declspec(implementation_key(1399)) VARIANT_BOOL _IndexedConversionOptions::GetPreserveExactColors ( );
__declspec(implementation_key(1400)) void _IndexedConversionOptions::PutPreserveExactColors ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1401)) enum PsMatteType _IndexedConversionOptions::GetMatte ( );
__declspec(implementation_key(1402)) void _IndexedConversionOptions::PutMatte ( enum PsMatteType _arg1 );
__declspec(implementation_key(1403)) _ApplicationPtr _IndexedConversionOptions::GetApplication ( );
__declspec(implementation_key(1404)) void _IndexedConversionOptions::PutObjectValue ( struct _IndexedConversionOptions * _arg1 );
__declspec(implementation_key(1405)) void _IndexedConversionOptions::PutRefObjectValue ( struct _IndexedConversionOptions * _arg1 );
__declspec(implementation_key(1406)) _ApplicationPtr _NoColor::GetApplication ( );
__declspec(implementation_key(1407)) void _NoColor::PutObjectValue ( struct _NoColor * _arg1 );
__declspec(implementation_key(1408)) void _NoColor::PutRefObjectValue ( struct _NoColor * _arg1 );
__declspec(implementation_key(1409)) VARIANT_BOOL _PresentationOptions::GetPresentation ( );
__declspec(implementation_key(1410)) void _PresentationOptions::PutPresentation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1411)) VARIANT_BOOL _PresentationOptions::GetAutoAdvance ( );
__declspec(implementation_key(1412)) void _PresentationOptions::PutAutoAdvance ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1413)) long _PresentationOptions::GetInterval ( );
__declspec(implementation_key(1414)) void _PresentationOptions::PutInterval ( long _arg1 );
__declspec(implementation_key(1415)) VARIANT_BOOL _PresentationOptions::GetLoop ( );
__declspec(implementation_key(1416)) void _PresentationOptions::PutLoop ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1417)) enum PsTransitionType _PresentationOptions::GetTransition ( );
__declspec(implementation_key(1418)) void _PresentationOptions::PutTransition ( enum PsTransitionType _arg1 );
__declspec(implementation_key(1419)) enum PsMagnificationType _PresentationOptions::GetMagnification ( );
__declspec(implementation_key(1420)) void _PresentationOptions::PutMagnification ( enum PsMagnificationType _arg1 );
__declspec(implementation_key(1421)) VARIANT_BOOL _PresentationOptions::GetIncludeFilename ( );
__declspec(implementation_key(1422)) void _PresentationOptions::PutIncludeFilename ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1423)) _PDFSaveOptionsPtr _PresentationOptions::GetPDFFileOptions ( );
__declspec(implementation_key(1424)) void _PresentationOptions::PutPDFFileOptions ( struct _PDFSaveOptions * _arg1 );
__declspec(implementation_key(1425)) void _PresentationOptions::PutRefPDFFileOptions ( struct _PDFSaveOptions * _arg1 );
__declspec(implementation_key(1426)) _ApplicationPtr _PresentationOptions::GetApplication ( );
__declspec(implementation_key(1427)) void _PresentationOptions::PutObjectValue ( struct _PresentationOptions * _arg1 );
__declspec(implementation_key(1428)) void _PresentationOptions::PutRefObjectValue ( struct _PresentationOptions * _arg1 );
__declspec(implementation_key(1429)) _bstr_t _GalleryOptions::GetLayoutStyle ( );
__declspec(implementation_key(1430)) void _GalleryOptions::PutLayoutStyle ( _bstr_t _arg1 );
__declspec(implementation_key(1431)) _bstr_t _GalleryOptions::GetEmailAddress ( );
__declspec(implementation_key(1432)) void _GalleryOptions::PutEmailAddress ( _bstr_t _arg1 );
__declspec(implementation_key(1433)) VARIANT_BOOL _GalleryOptions::GetUseShortExtension ( );
__declspec(implementation_key(1434)) void _GalleryOptions::PutUseShortExtension ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1435)) VARIANT_BOOL _GalleryOptions::GetUseUTF8Encoding ( );
__declspec(implementation_key(1436)) void _GalleryOptions::PutUseUTF8Encoding ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1437)) VARIANT_BOOL _GalleryOptions::GetIncludeSubFolders ( );
__declspec(implementation_key(1438)) void _GalleryOptions::PutIncludeSubFolders ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1439)) VARIANT_BOOL _GalleryOptions::GetAddSizeAttributes ( );
__declspec(implementation_key(1440)) void _GalleryOptions::PutAddSizeAttributes ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1441)) VARIANT_BOOL _GalleryOptions::GetPreserveAllMetadata ( );
__declspec(implementation_key(1442)) void _GalleryOptions::PutPreserveAllMetadata ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1443)) _GalleryBannerOptionsPtr _GalleryOptions::GetBannerOptions ( );
__declspec(implementation_key(1444)) void _GalleryOptions::PutBannerOptions ( struct _GalleryBannerOptions * _arg1 );
__declspec(implementation_key(1445)) void _GalleryOptions::PutRefBannerOptions ( struct _GalleryBannerOptions * _arg1 );
__declspec(implementation_key(1446)) _GalleryImagesOptionsPtr _GalleryOptions::GetImagesOptions ( );
__declspec(implementation_key(1447)) void _GalleryOptions::PutImagesOptions ( struct _GalleryImagesOptions * _arg1 );
__declspec(implementation_key(1448)) void _GalleryOptions::PutRefImagesOptions ( struct _GalleryImagesOptions * _arg1 );
__declspec(implementation_key(1449)) _GalleryThumbnailOptionsPtr _GalleryOptions::GetThumbnailOptions ( );
__declspec(implementation_key(1450)) void _GalleryOptions::PutThumbnailOptions ( struct _GalleryThumbnailOptions * _arg1 );
__declspec(implementation_key(1451)) void _GalleryOptions::PutRefThumbnailOptions ( struct _GalleryThumbnailOptions * _arg1 );
__declspec(implementation_key(1452)) _GalleryCustomColorOptionsPtr _GalleryOptions::GetCustomColorOptions ( );
__declspec(implementation_key(1453)) void _GalleryOptions::PutCustomColorOptions ( struct _GalleryCustomColorOptions * _arg1 );
__declspec(implementation_key(1454)) void _GalleryOptions::PutRefCustomColorOptions ( struct _GalleryCustomColorOptions * _arg1 );
__declspec(implementation_key(1455)) _GallerySecurityOptionsPtr _GalleryOptions::GetSecurityOptions ( );
__declspec(implementation_key(1456)) void _GalleryOptions::PutSecurityOptions ( struct _GallerySecurityOptions * _arg1 );
__declspec(implementation_key(1457)) void _GalleryOptions::PutRefSecurityOptions ( struct _GallerySecurityOptions * _arg1 );
__declspec(implementation_key(1458)) _ApplicationPtr _GalleryOptions::GetApplication ( );
__declspec(implementation_key(1459)) void _GalleryOptions::PutObjectValue ( struct _GalleryOptions * _arg1 );
__declspec(implementation_key(1460)) void _GalleryOptions::PutRefObjectValue ( struct _GalleryOptions * _arg1 );
__declspec(implementation_key(1461)) _bstr_t _GalleryBannerOptions::GetSiteName ( );
__declspec(implementation_key(1462)) void _GalleryBannerOptions::PutSiteName ( _bstr_t _arg1 );
__declspec(implementation_key(1463)) _bstr_t _GalleryBannerOptions::GetPhotographer ( );
__declspec(implementation_key(1464)) void _GalleryBannerOptions::PutPhotographer ( _bstr_t _arg1 );
__declspec(implementation_key(1465)) _bstr_t _GalleryBannerOptions::GetContactInfo ( );
__declspec(implementation_key(1466)) void _GalleryBannerOptions::PutContactInfo ( _bstr_t _arg1 );
__declspec(implementation_key(1467)) _bstr_t _GalleryBannerOptions::GetDate ( );
__declspec(implementation_key(1468)) void _GalleryBannerOptions::PutDate ( _bstr_t _arg1 );
__declspec(implementation_key(1469)) enum PsGalleryFontType _GalleryBannerOptions::GetFont ( );
__declspec(implementation_key(1470)) void _GalleryBannerOptions::PutFont ( enum PsGalleryFontType _arg1 );
__declspec(implementation_key(1471)) long _GalleryBannerOptions::GetFontSize ( );
__declspec(implementation_key(1472)) void _GalleryBannerOptions::PutFontSize ( long _arg1 );
__declspec(implementation_key(1473)) _ApplicationPtr _GalleryBannerOptions::GetApplication ( );
__declspec(implementation_key(1474)) void _GalleryBannerOptions::PutObjectValue ( struct _GalleryBannerOptions * _arg1 );
__declspec(implementation_key(1475)) void _GalleryBannerOptions::PutRefObjectValue ( struct _GalleryBannerOptions * _arg1 );
__declspec(implementation_key(1476)) VARIANT_BOOL _GalleryImagesOptions::GetNumericLinks ( );
__declspec(implementation_key(1477)) void _GalleryImagesOptions::PutNumericLinks ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1478)) VARIANT_BOOL _GalleryImagesOptions::GetResizeImages ( );
__declspec(implementation_key(1479)) void _GalleryImagesOptions::PutResizeImages ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1480)) long _GalleryImagesOptions::GetDimension ( );
__declspec(implementation_key(1481)) void _GalleryImagesOptions::PutDimension ( long _arg1 );
__declspec(implementation_key(1482)) enum PsGalleryConstrainType _GalleryImagesOptions::GetResizeConstraint ( );
__declspec(implementation_key(1483)) void _GalleryImagesOptions::PutResizeConstraint ( enum PsGalleryConstrainType _arg1 );
__declspec(implementation_key(1484)) long _GalleryImagesOptions::GetImageQuality ( );
__declspec(implementation_key(1485)) void _GalleryImagesOptions::PutImageQuality ( long _arg1 );
__declspec(implementation_key(1486)) long _GalleryImagesOptions::GetBorder ( );
__declspec(implementation_key(1487)) void _GalleryImagesOptions::PutBorder ( long _arg1 );
__declspec(implementation_key(1488)) VARIANT_BOOL _GalleryImagesOptions::GetIncludeFilename ( );
__declspec(implementation_key(1489)) void _GalleryImagesOptions::PutIncludeFilename ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1490)) VARIANT_BOOL _GalleryImagesOptions::GetCaption ( );
__declspec(implementation_key(1491)) void _GalleryImagesOptions::PutCaption ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1492)) VARIANT_BOOL _GalleryImagesOptions::GetIncludeCredits ( );
__declspec(implementation_key(1493)) void _GalleryImagesOptions::PutIncludeCredits ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1494)) VARIANT_BOOL _GalleryImagesOptions::GetIncludeTitle ( );
__declspec(implementation_key(1495)) void _GalleryImagesOptions::PutIncludeTitle ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1496)) VARIANT_BOOL _GalleryImagesOptions::GetIncludeCopyright ( );
__declspec(implementation_key(1497)) void _GalleryImagesOptions::PutIncludeCopyright ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1498)) enum PsGalleryFontType _GalleryImagesOptions::GetFont ( );
__declspec(implementation_key(1499)) void _GalleryImagesOptions::PutFont ( enum PsGalleryFontType _arg1 );
__declspec(implementation_key(1500)) long _GalleryImagesOptions::GetFontSize ( );
__declspec(implementation_key(1501)) void _GalleryImagesOptions::PutFontSize ( long _arg1 );
__declspec(implementation_key(1502)) _ApplicationPtr _GalleryImagesOptions::GetApplication ( );
__declspec(implementation_key(1503)) void _GalleryImagesOptions::PutObjectValue ( struct _GalleryImagesOptions * _arg1 );
__declspec(implementation_key(1504)) void _GalleryImagesOptions::PutRefObjectValue ( struct _GalleryImagesOptions * _arg1 );
__declspec(implementation_key(1505)) VARIANT_BOOL _GalleryThumbnailOptions::GetIncludeFilename ( );
__declspec(implementation_key(1506)) void _GalleryThumbnailOptions::PutIncludeFilename ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1507)) VARIANT_BOOL _GalleryThumbnailOptions::GetCaption ( );
__declspec(implementation_key(1508)) void _GalleryThumbnailOptions::PutCaption ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1509)) VARIANT_BOOL _GalleryThumbnailOptions::GetIncludeCredits ( );
__declspec(implementation_key(1510)) void _GalleryThumbnailOptions::PutIncludeCredits ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1511)) VARIANT_BOOL _GalleryThumbnailOptions::GetIncludeTitle ( );
__declspec(implementation_key(1512)) void _GalleryThumbnailOptions::PutIncludeTitle ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1513)) VARIANT_BOOL _GalleryThumbnailOptions::GetIncludeCopyright ( );
__declspec(implementation_key(1514)) void _GalleryThumbnailOptions::PutIncludeCopyright ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1515)) enum PsGalleryFontType _GalleryThumbnailOptions::GetFont ( );
__declspec(implementation_key(1516)) void _GalleryThumbnailOptions::PutFont ( enum PsGalleryFontType _arg1 );
__declspec(implementation_key(1517)) long _GalleryThumbnailOptions::GetFontSize ( );
__declspec(implementation_key(1518)) void _GalleryThumbnailOptions::PutFontSize ( long _arg1 );
__declspec(implementation_key(1519)) enum PsGalleryThumbSizeType _GalleryThumbnailOptions::GetSize ( );
__declspec(implementation_key(1520)) void _GalleryThumbnailOptions::PutSize ( enum PsGalleryThumbSizeType _arg1 );
__declspec(implementation_key(1521)) long _GalleryThumbnailOptions::GetDimension ( );
__declspec(implementation_key(1522)) void _GalleryThumbnailOptions::PutDimension ( long _arg1 );
__declspec(implementation_key(1523)) long _GalleryThumbnailOptions::GetColumnCount ( );
__declspec(implementation_key(1524)) void _GalleryThumbnailOptions::PutColumnCount ( long _arg1 );
__declspec(implementation_key(1525)) long _GalleryThumbnailOptions::GetRowCount ( );
__declspec(implementation_key(1526)) void _GalleryThumbnailOptions::PutRowCount ( long _arg1 );
__declspec(implementation_key(1527)) long _GalleryThumbnailOptions::GetBorder ( );
__declspec(implementation_key(1528)) void _GalleryThumbnailOptions::PutBorder ( long _arg1 );
__declspec(implementation_key(1529)) _ApplicationPtr _GalleryThumbnailOptions::GetApplication ( );
__declspec(implementation_key(1530)) void _GalleryThumbnailOptions::PutObjectValue ( struct _GalleryThumbnailOptions * _arg1 );
__declspec(implementation_key(1531)) void _GalleryThumbnailOptions::PutRefObjectValue ( struct _GalleryThumbnailOptions * _arg1 );
__declspec(implementation_key(1532)) _RGBColorPtr _GalleryCustomColorOptions::GetBackgroundColor ( );
__declspec(implementation_key(1533)) void _GalleryCustomColorOptions::PutBackgroundColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1534)) void _GalleryCustomColorOptions::PutRefBackgroundColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1535)) _RGBColorPtr _GalleryCustomColorOptions::GetBannerColor ( );
__declspec(implementation_key(1536)) void _GalleryCustomColorOptions::PutBannerColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1537)) void _GalleryCustomColorOptions::PutRefBannerColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1538)) _RGBColorPtr _GalleryCustomColorOptions::GetTextColor ( );
__declspec(implementation_key(1539)) void _GalleryCustomColorOptions::PutTextColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1540)) void _GalleryCustomColorOptions::PutRefTextColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1541)) _RGBColorPtr _GalleryCustomColorOptions::GetActiveLinkColor ( );
__declspec(implementation_key(1542)) void _GalleryCustomColorOptions::PutActiveLinkColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1543)) void _GalleryCustomColorOptions::PutRefActiveLinkColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1544)) _RGBColorPtr _GalleryCustomColorOptions::GetLinkColor ( );
__declspec(implementation_key(1545)) void _GalleryCustomColorOptions::PutLinkColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1546)) void _GalleryCustomColorOptions::PutRefLinkColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1547)) _RGBColorPtr _GalleryCustomColorOptions::GetVisitedLinkColor ( );
__declspec(implementation_key(1548)) void _GalleryCustomColorOptions::PutVisitedLinkColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1549)) void _GalleryCustomColorOptions::PutRefVisitedLinkColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1550)) _ApplicationPtr _GalleryCustomColorOptions::GetApplication ( );
__declspec(implementation_key(1551)) void _GalleryCustomColorOptions::PutObjectValue ( struct _GalleryCustomColorOptions * _arg1 );
__declspec(implementation_key(1552)) void _GalleryCustomColorOptions::PutRefObjectValue ( struct _GalleryCustomColorOptions * _arg1 );
__declspec(implementation_key(1553)) enum PsGallerySecurityType _GallerySecurityOptions::GetContent ( );
__declspec(implementation_key(1554)) void _GallerySecurityOptions::PutContent ( enum PsGallerySecurityType _arg1 );
__declspec(implementation_key(1555)) _bstr_t _GallerySecurityOptions::GetText ( );
__declspec(implementation_key(1556)) void _GallerySecurityOptions::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1557)) enum PsGalleryFontType _GallerySecurityOptions::GetFont ( );
__declspec(implementation_key(1558)) void _GallerySecurityOptions::PutFont ( enum PsGalleryFontType _arg1 );
__declspec(implementation_key(1559)) long _GallerySecurityOptions::GetFontSize ( );
__declspec(implementation_key(1560)) void _GallerySecurityOptions::PutFontSize ( long _arg1 );
__declspec(implementation_key(1561)) _RGBColorPtr _GallerySecurityOptions::GetTextColor ( );
__declspec(implementation_key(1562)) void _GallerySecurityOptions::PutTextColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1563)) void _GallerySecurityOptions::PutRefTextColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1564)) long _GallerySecurityOptions::GetOpacity ( );
__declspec(implementation_key(1565)) void _GallerySecurityOptions::PutOpacity ( long _arg1 );
__declspec(implementation_key(1566)) enum PsGallerySecurityTextPositionType _GallerySecurityOptions::GetTextPosition ( );
__declspec(implementation_key(1567)) void _GallerySecurityOptions::PutTextPosition ( enum PsGallerySecurityTextPositionType _arg1 );
__declspec(implementation_key(1568)) enum PsGallerySecurityTextRotateType _GallerySecurityOptions::GetTextRotate ( );
__declspec(implementation_key(1569)) void _GallerySecurityOptions::PutTextRotate ( enum PsGallerySecurityTextRotateType _arg1 );
__declspec(implementation_key(1570)) _ApplicationPtr _GallerySecurityOptions::GetApplication ( );
__declspec(implementation_key(1571)) void _GallerySecurityOptions::PutObjectValue ( struct _GallerySecurityOptions * _arg1 );
__declspec(implementation_key(1572)) void _GallerySecurityOptions::PutRefObjectValue ( struct _GallerySecurityOptions * _arg1 );
__declspec(implementation_key(1573)) long _ContactSheetOptions::GetWidth ( );
__declspec(implementation_key(1574)) void _ContactSheetOptions::PutWidth ( long _arg1 );
__declspec(implementation_key(1575)) long _ContactSheetOptions::GetHeight ( );
__declspec(implementation_key(1576)) void _ContactSheetOptions::PutHeight ( long _arg1 );
__declspec(implementation_key(1577)) double _ContactSheetOptions::GetResolution ( );
__declspec(implementation_key(1578)) void _ContactSheetOptions::PutResolution ( double _arg1 );
__declspec(implementation_key(1579)) enum PsNewDocumentMode _ContactSheetOptions::GetMode ( );
__declspec(implementation_key(1580)) void _ContactSheetOptions::PutMode ( enum PsNewDocumentMode _arg1 );
__declspec(implementation_key(1581)) VARIANT_BOOL _ContactSheetOptions::GetFlatten ( );
__declspec(implementation_key(1582)) void _ContactSheetOptions::PutFlatten ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1583)) VARIANT_BOOL _ContactSheetOptions::GetAcrossFirst ( );
__declspec(implementation_key(1584)) void _ContactSheetOptions::PutAcrossFirst ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1585)) VARIANT_BOOL _ContactSheetOptions::GetUseAutoSpacing ( );
__declspec(implementation_key(1586)) void _ContactSheetOptions::PutUseAutoSpacing ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1587)) long _ContactSheetOptions::GetColumnCount ( );
__declspec(implementation_key(1588)) void _ContactSheetOptions::PutColumnCount ( long _arg1 );
__declspec(implementation_key(1589)) long _ContactSheetOptions::GetRowCount ( );
__declspec(implementation_key(1590)) void _ContactSheetOptions::PutRowCount ( long _arg1 );
__declspec(implementation_key(1591)) long _ContactSheetOptions::GetVertical ( );
__declspec(implementation_key(1592)) void _ContactSheetOptions::PutVertical ( long _arg1 );
__declspec(implementation_key(1593)) long _ContactSheetOptions::GetHorizontal ( );
__declspec(implementation_key(1594)) void _ContactSheetOptions::PutHorizontal ( long _arg1 );
__declspec(implementation_key(1595)) VARIANT_BOOL _ContactSheetOptions::GetBestFit ( );
__declspec(implementation_key(1596)) void _ContactSheetOptions::PutBestFit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1597)) VARIANT_BOOL _ContactSheetOptions::GetCaption ( );
__declspec(implementation_key(1598)) void _ContactSheetOptions::PutCaption ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1599)) enum PsGalleryFontType _ContactSheetOptions::GetFont ( );
__declspec(implementation_key(1600)) void _ContactSheetOptions::PutFont ( enum PsGalleryFontType _arg1 );
__declspec(implementation_key(1601)) long _ContactSheetOptions::GetFontSize ( );
__declspec(implementation_key(1602)) void _ContactSheetOptions::PutFontSize ( long _arg1 );
__declspec(implementation_key(1603)) _ApplicationPtr _ContactSheetOptions::GetApplication ( );
__declspec(implementation_key(1604)) void _ContactSheetOptions::PutObjectValue ( struct _ContactSheetOptions * _arg1 );
__declspec(implementation_key(1605)) void _ContactSheetOptions::PutRefObjectValue ( struct _ContactSheetOptions * _arg1 );
__declspec(implementation_key(1606)) _bstr_t _PicturePackageOptions::GetLayout ( );
__declspec(implementation_key(1607)) void _PicturePackageOptions::PutLayout ( _bstr_t _arg1 );
__declspec(implementation_key(1608)) double _PicturePackageOptions::GetResolution ( );
__declspec(implementation_key(1609)) void _PicturePackageOptions::PutResolution ( double _arg1 );
__declspec(implementation_key(1610)) enum PsNewDocumentMode _PicturePackageOptions::GetMode ( );
__declspec(implementation_key(1611)) void _PicturePackageOptions::PutMode ( enum PsNewDocumentMode _arg1 );
__declspec(implementation_key(1612)) VARIANT_BOOL _PicturePackageOptions::GetFlatten ( );
__declspec(implementation_key(1613)) void _PicturePackageOptions::PutFlatten ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1614)) enum PsPicturePackageTextType _PicturePackageOptions::GetContent ( );
__declspec(implementation_key(1615)) void _PicturePackageOptions::PutContent ( enum PsPicturePackageTextType _arg1 );
__declspec(implementation_key(1616)) _bstr_t _PicturePackageOptions::GetText ( );
__declspec(implementation_key(1617)) void _PicturePackageOptions::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1618)) enum PsGalleryFontType _PicturePackageOptions::GetFont ( );
__declspec(implementation_key(1619)) void _PicturePackageOptions::PutFont ( enum PsGalleryFontType _arg1 );
__declspec(implementation_key(1620)) long _PicturePackageOptions::GetFontSize ( );
__declspec(implementation_key(1621)) void _PicturePackageOptions::PutFontSize ( long _arg1 );
__declspec(implementation_key(1622)) long _PicturePackageOptions::GetOpacity ( );
__declspec(implementation_key(1623)) void _PicturePackageOptions::PutOpacity ( long _arg1 );
__declspec(implementation_key(1624)) _RGBColorPtr _PicturePackageOptions::GetTextColor ( );
__declspec(implementation_key(1625)) void _PicturePackageOptions::PutTextColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1626)) void _PicturePackageOptions::PutRefTextColor ( struct _RGBColor * _arg1 );
__declspec(implementation_key(1627)) enum PsGallerySecurityTextPositionType _PicturePackageOptions::GetTextPosition ( );
__declspec(implementation_key(1628)) void _PicturePackageOptions::PutTextPosition ( enum PsGallerySecurityTextPositionType _arg1 );
__declspec(implementation_key(1629)) enum PsGallerySecurityTextRotateType _PicturePackageOptions::GetTextRotate ( );
__declspec(implementation_key(1630)) void _PicturePackageOptions::PutTextRotate ( enum PsGallerySecurityTextRotateType _arg1 );
__declspec(implementation_key(1631)) _ApplicationPtr _PicturePackageOptions::GetApplication ( );
__declspec(implementation_key(1632)) void _PicturePackageOptions::PutObjectValue ( struct _PicturePackageOptions * _arg1 );
__declspec(implementation_key(1633)) void _PicturePackageOptions::PutRefObjectValue ( struct _PicturePackageOptions * _arg1 );
__declspec(implementation_key(1634)) VARIANT_BOOL _BatchOptions::GetOverrideOpen ( );
__declspec(implementation_key(1635)) void _BatchOptions::PutOverrideOpen ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1636)) VARIANT_BOOL _BatchOptions::GetSuppressOpen ( );
__declspec(implementation_key(1637)) void _BatchOptions::PutSuppressOpen ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1638)) VARIANT_BOOL _BatchOptions::GetSuppressProfile ( );
__declspec(implementation_key(1639)) void _BatchOptions::PutSuppressProfile ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1640)) enum PsBatchDestinationType _BatchOptions::GetDestination ( );
__declspec(implementation_key(1641)) void _BatchOptions::PutDestination ( enum PsBatchDestinationType _arg1 );
__declspec(implementation_key(1642)) _bstr_t _BatchOptions::GetDestinationFolder ( );
__declspec(implementation_key(1643)) void _BatchOptions::PutDestinationFolder ( _bstr_t _arg1 );
__declspec(implementation_key(1644)) VARIANT_BOOL _BatchOptions::GetOverrideSave ( );
__declspec(implementation_key(1645)) void _BatchOptions::PutOverrideSave ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1646)) _variant_t _BatchOptions::GetFileNaming ( );
__declspec(implementation_key(1647)) void _BatchOptions::PutFileNaming ( const _variant_t & _arg1 );
__declspec(implementation_key(1648)) long _BatchOptions::GetStartingSerial ( );
__declspec(implementation_key(1649)) void _BatchOptions::PutStartingSerial ( long _arg1 );
__declspec(implementation_key(1650)) VARIANT_BOOL _BatchOptions::GetWindowsCompatible ( );
__declspec(implementation_key(1651)) void _BatchOptions::PutWindowsCompatible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1652)) VARIANT_BOOL _BatchOptions::GetMacintoshCompatible ( );
__declspec(implementation_key(1653)) void _BatchOptions::PutMacintoshCompatible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1654)) VARIANT_BOOL _BatchOptions::GetUnixCompatible ( );
__declspec(implementation_key(1655)) void _BatchOptions::PutUnixCompatible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1656)) _bstr_t _BatchOptions::GetErrorFile ( );
__declspec(implementation_key(1657)) void _BatchOptions::PutErrorFile ( _bstr_t _arg1 );
__declspec(implementation_key(1658)) _ApplicationPtr _BatchOptions::GetApplication ( );
__declspec(implementation_key(1659)) void _BatchOptions::PutObjectValue ( struct _BatchOptions * _arg1 );
__declspec(implementation_key(1660)) void _BatchOptions::PutRefObjectValue ( struct _BatchOptions * _arg1 );
__declspec(implementation_key(1661)) enum PsShapeOperation _SubPathInfo::GetOperation ( );
__declspec(implementation_key(1662)) void _SubPathInfo::PutOperation ( enum PsShapeOperation _arg1 );
__declspec(implementation_key(1663)) VARIANT_BOOL _SubPathInfo::GetClosed ( );
__declspec(implementation_key(1664)) void _SubPathInfo::PutClosed ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1665)) _variant_t _SubPathInfo::GetEntireSubPath ( );
__declspec(implementation_key(1666)) void _SubPathInfo::PutEntireSubPath ( const _variant_t & _arg1 );
__declspec(implementation_key(1667)) _ApplicationPtr _SubPathInfo::GetApplication ( );
__declspec(implementation_key(1668)) void _SubPathInfo::PutObjectValue ( struct _SubPathInfo * _arg1 );
__declspec(implementation_key(1669)) void _SubPathInfo::PutRefObjectValue ( struct _SubPathInfo * _arg1 );
__declspec(implementation_key(1670)) _variant_t _PathPointInfo::GetAnchor ( );
__declspec(implementation_key(1671)) void _PathPointInfo::PutAnchor ( const _variant_t & _arg1 );
__declspec(implementation_key(1672)) _variant_t _PathPointInfo::GetLeftDirection ( );
__declspec(implementation_key(1673)) void _PathPointInfo::PutLeftDirection ( const _variant_t & _arg1 );
__declspec(implementation_key(1674)) _variant_t _PathPointInfo::GetRightDirection ( );
__declspec(implementation_key(1675)) void _PathPointInfo::PutRightDirection ( const _variant_t & _arg1 );
__declspec(implementation_key(1676)) enum PsPointKind _PathPointInfo::GetKind ( );
__declspec(implementation_key(1677)) void _PathPointInfo::PutKind ( enum PsPointKind _arg1 );
__declspec(implementation_key(1678)) _ApplicationPtr _PathPointInfo::GetApplication ( );
__declspec(implementation_key(1679)) void _PathPointInfo::PutObjectValue ( struct _PathPointInfo * _arg1 );
__declspec(implementation_key(1680)) void _PathPointInfo::PutRefObjectValue ( struct _PathPointInfo * _arg1 );
#pragma stop_map_region

} // namespace Photoshop

#pragma pack(pop)
