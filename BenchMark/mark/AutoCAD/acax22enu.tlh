// Created by Microsoft (R) C/C++ Compiler Version 14.00.24215.1 (24459e45).
//
// e:\work\git\cps_mark\benchmark\debug\acax22enu.tlh
//
// C++ source equivalent of type library C:\Program Files\Common Files\Autodesk Shared\acax22enu.tlb
// compiler-generated file created 08/28/19 at 10:16:56 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace AutoCAD {

//
// Forward references and typedefs
//

struct __declspec(uuid("644614d2-93dc-48c6-a061-21abce65a4c0"))
/* LIBID */ __AutoCAD;
enum AcBoolean;
enum AcOnOff;
enum AcEntityName;
enum AcActiveSpace;
enum AcKeyboardAccelerator;
enum AcPlotOrientation;
enum AcColor;
enum AcAttachmentPoint;
enum AcDrawingDirection;
enum AcLeaderType;
enum AcAttributeMode;
enum AcHorizontalAlignment;
enum AcVerticalAlignment;
enum AcTextGenerationFlag;
enum AcSelect;
enum AcPatternType;
enum AcLoopType;
enum AcHatchStyle;
enum AcPolylineType;
enum Ac3DPolylineType;
enum AcViewportSplitType;
enum AcRegenType;
enum AcBooleanType;
enum AcExtendOption;
enum AcAngleUnits;
enum AcUnits;
enum AcCoordinateSystem;
enum AcMeasurementUnits;
enum AcXRefDemandLoad;
enum AcPreviewMode;
enum AcPolymeshType;
enum AcZoomScaleType;
enum AcDragDisplayMode;
enum AcARXDemandLoad;
enum AcTextFontStyle;
enum AcProxyImage;
enum AcKeyboardPriority;
enum AcMenuGroupType;
enum AcMenuFileType;
enum AcMenuItemType;
enum AcToolbarItemType;
enum AcToolbarDockStatus;
enum AcLineWeight;
enum AcWindowState;
enum AcPlotPaperUnits;
enum AcPlotRotation;
enum AcPlotType;
enum AcPlotScale;
enum AcAlignment;
enum AcLineSpacingStyle;
enum AcDimPrecision;
enum AcDimUnits;
enum AcDimLUnits;
enum AcDimArrowheadType;
enum AcDimCenterType;
enum AcDimFit;
enum AcDimFractionType;
enum AcDimArcLengthSymbol;
enum AcDimHorizontalJustification;
enum AcDimVerticalJustification;
enum AcDimTextMovement;
enum AcDimToleranceMethod;
enum AcDimToleranceJustify;
enum AcViewportScale;
enum AcISOPenWidth;
enum AcSaveAsType;
enum AcPrinterSpoolAlert;
enum AcPlotPolicyForNewDwgs;
enum AcPlotPolicyForLegacyDwgs;
enum AcOleQuality;
enum AcLoadPalette;
enum AcInsertUnits;
enum AcAlignmentPointAcquisition;
enum AcInsertUnitsAction;
enum AcPlotPolicy;
enum AcDrawingAreaShortCutMenu;
enum AcDrawingAreaSCMDefault;
enum AcDrawingAreaSCMEdit;
enum AcDrawingAreaSCMCommand;
enum AcLayerStateMask;
enum AcShadePlot;
enum AcHatchObjectType;
enum AcGradientPatternType;
enum AcTableDirection;
enum AcCellAlignment;
enum AcRowType;
enum AcValueDataType;
enum AcValueUnitType;
enum AcParseOption;
enum AcFormatOption;
enum AcGridLineType;
enum AcCellType;
enum AcCellEdgeMask;
enum AcRotationAngle;
enum AcMergeCellStyleOption;
enum AcSelectType;
enum AcOleType;
enum AcOlePlotQuality;
enum AcTableStyleOverrides;
enum AcMLineJustification;
enum AcBlockScaling;
enum AcDynamicBlockReferencePropertyUnitsType;
enum AcSectionState;
enum AcSectionState2;
enum AcSectionSubItem;
enum AcSectionType;
enum AcSectionGeneration;
enum AcHelixConstrainType;
enum AcShadowDisplayType;
enum AcLoftedSurfaceNormalType;
enum AcHelixTwistType;
enum AcUnderlayLayerOverrideType;
enum AcTableFlowDirection;
enum AcCellMargin;
enum AcCellContentLayout;
enum AcCellProperty;
enum AcGridLineStyle;
enum AcDataLinkUpdateDirection;
enum AcDataLinkUpdateOption;
enum AcCellContentType;
enum AcCellState;
enum AcCellOption;
enum AcTextAttachmentType;
enum AcMLeaderType;
enum AcMLeaderContentType;
enum AcTextAlignmentType;
enum AcTextAngleType;
enum AcBlockConnectionType;
enum AcPredefBlockType;
enum AcDrawLeaderOrderType;
enum AcDrawMLeaderOrderType;
enum AcSegmentAngleType;
enum AcTextAttachmentDirection;
enum AcVerticalTextAttachmentType;
enum AcMeshCreaseType;
struct __declspec(uuid("aeb8d2e2-b3e1-499b-a357-7b3f51cec147"))
/* dual interface */ IAcadObject;
struct __declspec(uuid("6bdb570e-652b-4e06-9fa3-17266bc95414"))
/* dual interface */ IAcadDatabase;
struct __declspec(uuid("dd75d714-5662-44ea-bd50-3c48aa71e248"))
/* dual interface */ IAcadModelSpace;
struct __declspec(uuid("181f4481-763e-4e58-ae89-cf4c003ef491"))
/* dual interface */ IAcadBlock;
struct __declspec(uuid("acf0aa82-ffec-402b-9b87-1568f6c24f82"))
/* dual interface */ IAcadEntity;
struct __declspec(uuid("82174a4a-973d-4fc5-b3e7-5d009936ae57"))
/* dual interface */ IAcadAcCmColor;
enum AcColorMethod;
struct __declspec(uuid("d803123c-9777-47a8-a7b4-60c09762ae0d"))
/* dual interface */ IAcadHyperlinks;
struct __declspec(uuid("b4db8063-df62-413b-a300-8847f8a1fb86"))
/* dual interface */ IAcadHyperlink;
struct __declspec(uuid("1759387a-60a3-41e5-a8c5-90a082b32bb2"))
/* dual interface */ IAcad3DFace;
struct __declspec(uuid("039b9382-f2e7-4ab6-9461-cf2e763e7a57"))
/* dual interface */ IAcadPolygonMesh;
struct __declspec(uuid("4fee5511-1bd7-4ec7-9027-a9113a016345"))
/* dual interface */ IAcad3DPolyline;
struct __declspec(uuid("64dc9029-fd27-48de-85b8-a471f654c20b"))
/* dual interface */ IAcadArc;
struct __declspec(uuid("99b991ad-2222-48dd-be16-59e40d03b561"))
/* dual interface */ IAcadAttribute;
struct __declspec(uuid("9af5dc27-d177-4810-b524-a63c9f5993c2"))
/* dual interface */ IAcad3DSolid;
struct __declspec(uuid("60f904e0-3634-4cc3-b4cd-b15940063bf1"))
/* dual interface */ IAcadRegion;
struct __declspec(uuid("4a749d26-4d00-4ea1-a121-a457c30e6f57"))
/* dual interface */ IAcadCircle;
struct __declspec(uuid("52729d26-9908-469d-a87c-b331059b94ea"))
/* dual interface */ IAcadDimAligned;
struct __declspec(uuid("397baf06-05cd-44dd-a56a-11784c4fb7b5"))
/* dual interface */ IAcadDimension;
struct __declspec(uuid("eb3c91ca-7d5a-42cd-92dc-6a78c50b2edb"))
/* dual interface */ IAcadDimAngular;
struct __declspec(uuid("896feaf5-0ad9-4414-aac8-0a1ae672ac83"))
/* dual interface */ IAcadDimDiametric;
struct __declspec(uuid("3e6efac3-4495-43de-a25f-0259ffab4015"))
/* dual interface */ IAcadDimRotated;
struct __declspec(uuid("671d6427-d2e8-4637-98cc-e5e2b60409e5"))
/* dual interface */ IAcadDimOrdinate;
struct __declspec(uuid("18da8524-1491-4cc7-afc7-26d1deccd6bf"))
/* dual interface */ IAcadDimRadial;
struct __declspec(uuid("a35236d3-c2f2-482d-b272-cce9f236fad2"))
/* dual interface */ IAcadEllipse;
struct __declspec(uuid("aa112a3d-c9da-4851-8199-a465584d9d98"))
/* dual interface */ IAcadLeader;
struct __declspec(uuid("95a24d69-4531-4083-925e-69865fbb9a03"))
/* dual interface */ IAcadMText;
struct __declspec(uuid("52485ac7-5e0d-4da4-b642-0796831aa592"))
/* dual interface */ IAcadPoint;
struct __declspec(uuid("0f3fb243-2494-4bac-bfc9-304466f12711"))
/* dual interface */ IAcadLWPolyline;
struct __declspec(uuid("bbc9e18d-538f-43ad-a963-a29e87993cbb"))
/* dual interface */ IAcadPolyline;
struct __declspec(uuid("81989cda-342d-4634-b229-8ace12c27cc3"))
/* dual interface */ IAcadRay;
struct __declspec(uuid("504f080d-45d3-4bfc-bd95-681b1194ec1d"))
/* dual interface */ IAcadShape;
struct __declspec(uuid("a2f91ead-d307-4465-b70e-ecf9fb7103e3"))
/* dual interface */ IAcadSolid;
struct __declspec(uuid("75a55bac-3e9c-47d0-89f6-76fa61bc5366"))
/* dual interface */ IAcadSpline;
enum AcSplineKnotParameterizationType;
enum AcSplineFrameType;
enum AcSplineMethodType;
struct __declspec(uuid("ca2dd247-d133-4646-ba49-ee3dd475a3bc"))
/* dual interface */ IAcadText;
struct __declspec(uuid("6779b954-8464-496a-8458-53405f035358"))
/* dual interface */ IAcadTolerance;
struct __declspec(uuid("d295da05-d626-4b03-8ff3-836da9b97de4"))
/* dual interface */ IAcadTrace;
struct __declspec(uuid("d70f5268-be6d-4ba6-a289-13fba96c3084"))
/* dual interface */ IAcadXline;
struct __declspec(uuid("1d43bc6f-2a8e-4ab4-a171-e05ec82795af"))
/* dual interface */ IAcadBlockReference;
struct __declspec(uuid("53eb1a05-9449-466f-8e62-a34006ba9d3c"))
/* dual interface */ IAcadHatch;
struct __declspec(uuid("98faf084-febc-425b-b3bc-5d5ec5fee54e"))
/* dual interface */ IAcadRasterImage;
struct __declspec(uuid("a02d3284-e931-40ff-a953-0fa655b07980"))
/* dual interface */ IAcadLine;
struct __declspec(uuid("39642510-ece5-4620-a0ee-5ec5c6382c15"))
/* dual interface */ IAcadLayout;
struct __declspec(uuid("0c6a8b60-415e-4625-81a9-ef84216fd3b4"))
/* dual interface */ IAcadPlotConfiguration;
struct __declspec(uuid("1ff467d1-2ef7-4426-a0db-f96572c26b13"))
/* dual interface */ IAcadMInsertBlock;
struct __declspec(uuid("4647dce6-d132-4edd-9447-11b523af4c9e"))
/* dual interface */ IAcadPolyfaceMesh;
struct __declspec(uuid("5f26c199-3259-4a39-8fd9-60285db2f765"))
/* dual interface */ IAcadMLine;
struct __declspec(uuid("0ae304c8-61ef-4d52-be60-7a87dedc2c4e"))
/* dual interface */ IAcadDim3PointAngular;
struct __declspec(uuid("a3aa22e3-7b15-4bda-83fa-80336989010d"))
/* dual interface */ IAcadExternalReference;
struct __declspec(uuid("84fed720-777d-479e-9b15-13cd56f96173"))
/* dual interface */ IAcadTable;
struct __declspec(uuid("84618c65-48f9-450e-bbeb-7149909c0ce4"))
/* dual interface */ IAcadDimArcLength;
struct __declspec(uuid("fbd4807f-e100-4326-ae79-ff93f5dfc2f3"))
/* dual interface */ IAcadDimRadialLarge;
struct __declspec(uuid("23ab4987-f991-408c-a2e9-1c77b50befc3"))
/* dual interface */ IAcadSection;
struct __declspec(uuid("a240ec7f-14cf-4da1-b3d4-74b9062895da"))
/* dual interface */ IAcadSectionSettings;
struct __declspec(uuid("4e77067c-83ba-4446-86de-1136e07542a7"))
/* dual interface */ IAcadSectionTypeSettings;
struct __declspec(uuid("8ee08989-6f86-4685-99c4-3f48a1242bd8"))
/* dual interface */ IAcadMLeader;
struct __declspec(uuid("655a39a8-041f-4156-9f02-f9180a0468a5"))
/* dual interface */ IAcadPaperSpace;
struct __declspec(uuid("d71870d2-e2fe-43c5-90fa-8ff4711fc984"))
/* dual interface */ IAcadPViewport;
struct __declspec(uuid("d886f48c-94ab-4240-877b-a22428d6ffcd"))
/* dual interface */ IAcadView;
struct __declspec(uuid("16effb20-32ce-494d-982c-373a53968a40"))
/* dual interface */ IAcadBlocks;
struct __declspec(uuid("15f4cd6c-78c7-4e34-97bb-88866ab7234c"))
/* dual interface */ IAcadGroups;
struct __declspec(uuid("9f470d4d-44b7-4d3c-82e5-493da2e94215"))
/* dual interface */ IAcadGroup;
struct __declspec(uuid("ddae1905-b805-4444-8c99-0db4ae89f517"))
/* dual interface */ IAcadDimStyles;
struct __declspec(uuid("5f64b0a6-1728-41c4-93e6-24c2daa48e93"))
/* dual interface */ IAcadDimStyle;
struct __declspec(uuid("713e7af3-1517-49fc-b6b4-429bdcd83b40"))
/* dual interface */ IAcadLayers;
struct __declspec(uuid("7abc3225-0845-44cd-96e3-dc73e280aca0"))
/* dual interface */ IAcadLayer;
struct __declspec(uuid("122c5869-568a-4df0-9b0d-fb113e8defce"))
/* dual interface */ IAcadLineTypes;
struct __declspec(uuid("545d3abe-3b77-45c3-afcc-0aff39d25dd5"))
/* dual interface */ IAcadLineType;
struct __declspec(uuid("c2521948-f0c1-4af7-8507-baea76be3687"))
/* dual interface */ IAcadDictionaries;
struct __declspec(uuid("42828358-7505-416b-9a56-98f4e9bb35c6"))
/* dual interface */ IAcadDictionary;
struct __declspec(uuid("67433105-639d-42fb-abc4-1a4e70b638b5"))
/* dual interface */ IAcadXRecord;
struct __declspec(uuid("97beb443-7259-4377-87fa-1a3e5e882b3c"))
/* dual interface */ IAcadRegisteredApplications;
struct __declspec(uuid("553652d5-2c7e-4e81-bbeb-65579ec58471"))
/* dual interface */ IAcadRegisteredApplication;
struct __declspec(uuid("49ed276a-716c-4700-999f-e44f1d10dd8c"))
/* dual interface */ IAcadTextStyles;
struct __declspec(uuid("3b4c686e-d760-4b2e-9737-0cfd0a434d5d"))
/* dual interface */ IAcadTextStyle;
struct __declspec(uuid("1da18452-ee21-4ba4-83f8-80c52fb781fc"))
/* dual interface */ IAcadUCSs;
struct __declspec(uuid("27ca935e-e9c4-44e9-88fb-e6d22eed3f64"))
/* dual interface */ IAcadUCS;
struct __declspec(uuid("692a60f2-6e56-41be-ac25-054aa8b4dd2d"))
/* dual interface */ IAcadViews;
struct __declspec(uuid("8caaf247-a4ae-486a-a886-37f07aa461a0"))
/* dual interface */ IAcadViewports;
struct __declspec(uuid("6fe5c544-2694-48fc-9c50-5b32e38f6ea2"))
/* dual interface */ IAcadViewport;
struct __declspec(uuid("a1bd1006-20ed-48c4-9180-1ee5b26f6848"))
/* dual interface */ IAcadLayouts;
struct __declspec(uuid("b863a2f4-4fcd-4269-9f67-14ed9e75a7ce"))
/* dual interface */ IAcadPlotConfigurations;
struct __declspec(uuid("5b478006-beed-4daa-ac97-3bf847c13c72"))
/* dual interface */ IAcadDatabasePreferences;
struct __declspec(uuid("37d2d493-cbfb-474b-b9b9-4bac8cf79678"))
/* dual interface */ IAcadSummaryInfo;
struct __declspec(uuid("38d109f9-00b7-47bf-89bd-272084478231"))
/* dual interface */ IAcadSectionManager;
struct __declspec(uuid("0f9a3916-cc82-4177-aabd-74d243a15a04"))
/* dual interface */ IAcadMaterials;
struct __declspec(uuid("0c755ca3-0d6a-493a-8a3a-cf00550d7a3c"))
/* dual interface */ IAcadMaterial;
enum AcWireframeType;
enum AcPointCloudColorType;
enum AcPointCloudStylizationType;
enum AcPointCloudIntensityStyle;
enum AcPointCloudExStylizationType;
struct __declspec(uuid("72e04115-1905-4dfa-b65c-1e941c46a114"))
/* dual interface */ IAcadSectionTypeSettings2;
struct /* coclass */ AcadHyperlink;
struct __declspec(uuid("723b19d6-1957-41ed-b6a3-5a4d2de405bb"))
/* dual interface */ IAcadDynamicBlockReferenceProperty;
struct /* coclass */ AcadDynamicBlockReferenceProperty;
struct /* coclass */ AcadAcCmColor;
struct __declspec(uuid("a0df146c-6a67-4497-b546-85af42b60244"))
/* interface */ IAcadObjectEvents;
struct /* coclass */ AcadObject;
struct /* coclass */ AcadXRecord;
struct __declspec(uuid("f24a1ea1-ca8e-4a39-a23c-a28d3423ae5e"))
/* dual interface */ IAcadSortentsTable;
struct /* coclass */ AcadSortentsTable;
struct /* coclass */ AcadDimStyle;
struct /* coclass */ AcadLayer;
struct /* coclass */ AcadLineType;
struct /* coclass */ AcadMaterial;
struct /* coclass */ AcadRegisteredApplication;
struct /* coclass */ AcadTextStyle;
struct /* coclass */ AcadUCS;
struct /* coclass */ AcadView;
struct /* coclass */ AcadViewport;
struct /* coclass */ AcadGroup;
struct /* coclass */ AcadPlotConfiguration;
struct /* coclass */ AcadLayout;
struct __declspec(uuid("96a0858a-afbd-4922-8ff4-06bdd202e229"))
/* dual interface */ IAcadIdPair;
struct /* coclass */ AcadIdPair;
struct __declspec(uuid("0978b906-02e7-42d8-a014-28ea9d61084e"))
/* dual interface */ IAcadTableStyle;
struct /* coclass */ AcadTableStyle;
struct /* coclass */ AcadSectionSettings;
struct /* coclass */ AcadSectionTypeSettings;
struct __declspec(uuid("67388466-a056-4740-97c6-d81837fc8199"))
/* dual interface */ IAcadMLeaderStyle;
struct /* coclass */ AcadMLeaderStyle;
struct /* coclass */ AcadHyperlinks;
struct /* coclass */ AcadDictionary;
struct /* coclass */ AcadLayers;
struct /* coclass */ AcadDimStyles;
struct /* coclass */ AcadDictionaries;
struct /* coclass */ AcadLineTypes;
struct /* coclass */ AcadMaterials;
struct /* coclass */ AcadTextStyles;
struct /* coclass */ AcadUCSs;
struct /* coclass */ AcadRegisteredApplications;
struct /* coclass */ AcadViews;
struct /* coclass */ AcadViewports;
struct /* coclass */ AcadGroups;
struct /* coclass */ AcadBlocks;
struct /* coclass */ AcadLayouts;
struct /* coclass */ AcadPlotConfigurations;
struct /* coclass */ AcadEntity;
struct __declspec(uuid("c476dbac-1c07-4cf1-a84b-38ad1ed8fe2e"))
/* dual interface */ IAcadShadowDisplay;
struct /* coclass */ AcadRasterImage;
struct /* coclass */ Acad3DFace;
struct /* coclass */ Acad3DPolyline;
struct /* coclass */ AcadRegion;
struct /* coclass */ Acad3DSolid;
struct /* coclass */ AcadArc;
struct /* coclass */ AcadAttribute;
struct __declspec(uuid("d867a88e-e78d-4eca-8637-74a342fa32b2"))
/* dual interface */ IAcadAttributeReference;
struct /* coclass */ AcadAttributeReference;
struct /* coclass */ AcadBlockReference;
struct /* coclass */ AcadCircle;
struct /* coclass */ AcadEllipse;
struct /* coclass */ AcadHatch;
struct /* coclass */ AcadLeader;
struct __declspec(uuid("d4623034-9d02-475d-b849-fc2e9d94a1a1"))
/* dual interface */ IAcadSubEntity;
struct __declspec(uuid("fd5750fe-c24d-4556-be06-d37f5a1f821a"))
/* dual interface */ IAcadMLeaderLeader;
struct /* coclass */ AcadMLeaderLeader;
struct /* coclass */ AcadMLeader;
struct /* coclass */ AcadLWPolyline;
struct /* coclass */ AcadLine;
struct /* coclass */ AcadMText;
struct /* coclass */ AcadPoint;
struct /* coclass */ AcadPolyline;
struct /* coclass */ AcadPolygonMesh;
struct /* coclass */ AcadRay;
struct /* coclass */ AcadShape;
struct /* coclass */ AcadSolid;
struct /* coclass */ AcadSpline;
struct /* coclass */ AcadText;
struct /* coclass */ AcadTolerance;
struct /* coclass */ AcadTrace;
struct /* coclass */ AcadXline;
struct /* coclass */ AcadPViewport;
struct /* coclass */ AcadMInsertBlock;
struct /* coclass */ AcadPolyfaceMesh;
struct /* coclass */ AcadMLine;
struct /* coclass */ AcadExternalReference;
struct /* coclass */ AcadTable;
struct __declspec(uuid("5be299ec-70bb-4fe3-8609-d74ec8ff0eaf"))
/* dual interface */ IAcadOle;
struct /* coclass */ AcadOle;
struct __declspec(uuid("be461951-c77e-4c70-bd83-c392820c11fc"))
/* dual interface */ IAcadHelix;
struct /* coclass */ AcadHelix;
struct __declspec(uuid("3d3962e2-e12b-4559-96cf-f32134a0577b"))
/* dual interface */ IAcadSurface;
struct /* coclass */ AcadSurface;
struct __declspec(uuid("fb3fac8e-4f36-4a96-ae22-194b9b686d9f"))
/* dual interface */ IAcadPlaneSurface;
struct /* coclass */ AcadPlaneSurface;
struct __declspec(uuid("813198dd-ef1c-4838-95f4-13a484cae932"))
/* dual interface */ IAcadExtrudedSurface;
struct /* coclass */ AcadExtrudedSurface;
struct __declspec(uuid("60834ece-8e4a-4aec-a217-d0dd2de1b45f"))
/* dual interface */ IAcadRevolvedSurface;
struct /* coclass */ AcadRevolvedSurface;
struct __declspec(uuid("b4ad389f-2624-4670-a480-dc8b29fbc3af"))
/* dual interface */ IAcadSweptSurface;
struct /* coclass */ AcadSweptSurface;
struct __declspec(uuid("a501529b-d232-42a5-91c1-71479187900e"))
/* dual interface */ IAcadLoftedSurface;
struct /* coclass */ AcadLoftedSurface;
struct __declspec(uuid("010c960c-b734-4c93-a50c-e73d8f29d6de"))
/* dual interface */ IAcadSection2;
struct /* coclass */ AcadSection;
struct /* coclass */ AcadSectionManager;
struct __declspec(uuid("92f36a6f-7faf-49de-93f0-93e9bcb8aa6c"))
/* dual interface */ IAcadUnderlay;
struct __declspec(uuid("9e607850-b9bd-4516-8865-58d1ec3d2133"))
/* dual interface */ IAcadDwfUnderlay;
struct /* coclass */ AcadDwfUnderlay;
struct /* coclass */ AcadDgnUnderlay;
struct /* coclass */ AcadPdfUnderlay;
struct /* coclass */ AcadSubEntity;
struct __declspec(uuid("09d386fe-c2ca-499c-b5c8-04669d31b04b"))
/* dual interface */ IAcadSubEntSolidFace;
struct /* coclass */ AcadSubEntSolidFace;
struct __declspec(uuid("8fa9f8d0-d221-406c-b90d-148df7e05454"))
/* dual interface */ IAcadSubEntSolidEdge;
struct /* coclass */ AcadSubEntSolidEdge;
struct __declspec(uuid("a616de10-4b03-4ba8-a213-6a485eda0f68"))
/* dual interface */ IAcadSubEntSolidVertex;
struct /* coclass */ AcadSubEntSolidVertex;
struct __declspec(uuid("9c40da30-7619-4c91-a65f-c714ce7c9179"))
/* dual interface */ IAcadSubEntSolidNode;
struct /* coclass */ AcadSubEntSolidNode;
struct __declspec(uuid("03be17b5-89b0-4341-a5fc-31934bdb5482"))
/* dual interface */ IAcadWipeout;
struct /* coclass */ AcadWipeout;
struct __declspec(uuid("7b142040-0b30-4e59-966d-fa1277604017"))
/* dual interface */ IAcadSubDMesh;
struct /* coclass */ AcadSubDMesh;
struct __declspec(uuid("cd70ef32-6207-4e70-bb30-b0988c7fb089"))
/* dual interface */ IAcadSubDMeshFace;
struct /* coclass */ AcadSubDMeshFace;
struct __declspec(uuid("b8e2ef9f-2d35-433e-a278-1dc5695c4b5d"))
/* dual interface */ IAcadSubDMeshEdge;
struct /* coclass */ AcadSubDMeshEdge;
struct __declspec(uuid("a3fddd7e-946b-48e9-98c3-c23aa15e83fc"))
/* dual interface */ IAcadSubDMeshVertex;
struct /* coclass */ AcadSubDMeshVertex;
struct __declspec(uuid("be4e6da9-6602-4f83-b458-df0fe7602cc8"))
/* dual interface */ IAcadNurbSurface;
struct /* coclass */ AcadNurbSurface;
struct __declspec(uuid("030fbed4-476a-4db5-84c0-6f2cd856fcc3"))
/* dual interface */ IAcadGeoPositionMarker;
struct /* coclass */ AcadGeoPositionMarker;
struct __declspec(uuid("0af8ab47-b44e-4e1c-92ef-20ec0202c3bd"))
/* dual interface */ IAcadGeomapImage;
struct /* coclass */ AcadGeomapImage;
struct /* coclass */ AcadDimension;
struct /* coclass */ AcadDimAligned;
struct /* coclass */ AcadDimAngular;
struct /* coclass */ AcadDimDiametric;
struct /* coclass */ AcadDimOrdinate;
struct /* coclass */ AcadDimRadial;
struct /* coclass */ AcadDimRotated;
struct /* coclass */ AcadDim3PointAngular;
struct /* coclass */ AcadDimArcLength;
struct /* coclass */ AcadDimRadialLarge;
struct /* coclass */ AcadBlock;
struct /* coclass */ AcadModelSpace;
struct /* coclass */ AcadPaperSpace;
struct __declspec(uuid("9995941c-67e4-4c5b-a2c7-f6bc8a329648"))
/* dual interface */ IAcadPointCloud;
struct /* coclass */ AcadPointCloud;
struct __declspec(uuid("22c5274e-dc1a-4b3f-a1f4-943af9bb7a46"))
/* dual interface */ IAcadPointCloudEx;
struct __declspec(uuid("ffc368fe-bddf-4281-806a-aba65afad03e"))
/* dual interface */ IAcadPointCloudEx2;
struct /* coclass */ AcadPointCloudEx;
struct /* coclass */ AcadSummaryInfo;
struct /* coclass */ AcadDatabasePreferences;
struct /* coclass */ AcadDatabase;
enum AcadSecurityParamsType;
enum AcadSecurityParamsConstants;
struct __declspec(uuid("a5c61cc3-daf1-47f8-a774-42ffdd9b798b"))
/* dual interface */ IAcadSecurityParams;
struct /* coclass */ AcadSecurityParams;
struct __declspec(uuid("0cb51cb5-cc33-4ac0-9867-085eba3316a0"))
/* dual interface */ IAcadLayerStateManager;
struct /* coclass */ AcadLayerStateManager;
struct __declspec(uuid("d523cb7c-30b6-4a7a-8c2d-79b23b4878a9"))
/* dispinterface */ _DAcadApplicationEvents;
struct __declspec(uuid("1c6e41bb-3441-477c-bcc0-6e05a3d487fd"))
/* dual interface */ IAcadDocument;
struct __declspec(uuid("2761aa3f-0da6-4203-836e-fd0a0fc168c6"))
/* dual interface */ IAcadPlot;
struct __declspec(uuid("2007dd78-b05a-422e-af97-cd08d8dcd8e0"))
/* dual interface */ IAcadApplication;
struct __declspec(uuid("c8fba802-6ff6-46bb-a29b-96f46e09ea4f"))
/* dual interface */ IAcadPreferences;
struct __declspec(uuid("cfd2d9a8-bdda-455a-93ad-8d47ed6cd9cb"))
/* dual interface */ IAcadPreferencesFiles;
struct __declspec(uuid("bf71abf6-0878-493d-b7ec-f221797c41db"))
/* dual interface */ IAcadPreferencesDisplay;
struct __declspec(uuid("dbb44995-7728-499e-8273-2ab30ac17794"))
/* dual interface */ IAcadPreferencesOpenSave;
struct __declspec(uuid("bc4af42a-d51e-4936-962d-1adbddfd6090"))
/* dual interface */ IAcadPreferencesOutput;
struct __declspec(uuid("daf7bc7c-a60a-4ca7-bbd9-a6ded455682e"))
/* dual interface */ IAcadPreferencesSystem;
struct __declspec(uuid("65651c0f-4381-452b-a8d7-a01f1a8efc9d"))
/* dual interface */ IAcadPreferencesUser;
struct __declspec(uuid("1f8ebfdf-587c-473d-ae11-330cda3c669f"))
/* dual interface */ IAcadPreferencesDrafting;
struct __declspec(uuid("16dc76bd-ed63-45e5-a967-19df2f7d3020"))
/* dual interface */ IAcadPreferencesSelection;
struct __declspec(uuid("873b8ce1-8b8a-4d5a-8c07-63fd9cd6ba6c"))
/* dual interface */ IAcadPreferencesProfiles;
struct __declspec(uuid("938efd49-a1f8-47bc-b190-512513cde0e9"))
/* dual interface */ IAcadMenuGroups;
struct __declspec(uuid("04809366-ad70-4f50-b1bf-c4c0f6a7b9fb"))
/* dual interface */ IAcadMenuGroup;
struct __declspec(uuid("d550a209-e331-4ec9-9ff8-2f61b2e34894"))
/* dual interface */ IAcadPopupMenus;
struct __declspec(uuid("43dc6ffa-aeb4-48a4-b5af-9fd8a00062f1"))
/* dual interface */ IAcadPopupMenu;
struct __declspec(uuid("1b1eaf6b-11f1-41bc-9f67-b678a9b4ee02"))
/* dual interface */ IAcadPopupMenuItem;
struct __declspec(uuid("9fe35c7f-8487-45ab-bf73-f69bbf400224"))
/* dual interface */ IAcadToolbars;
struct __declspec(uuid("cc174f04-f9ea-44a1-9ea1-3a403d86727e"))
/* dual interface */ IAcadToolbar;
struct __declspec(uuid("8c8f63d0-35a7-4d29-9c4d-9886f164fd5d"))
/* dual interface */ IAcadToolbarItem;
struct __declspec(uuid("a3b67312-1dd6-40b7-b00f-9015491261ec"))
/* dual interface */ IAcadMenuBar;
struct __declspec(uuid("cf9b7f19-1488-4bfe-a94a-5c2afc337694"))
/* dual interface */ IAcadDocuments;
struct __declspec(uuid("533c7ec0-df22-4932-af1a-dc3bee5738ff"))
/* dual interface */ IAcadState;
struct __declspec(uuid("05a76357-f243-4dcb-9252-13cc350b860a"))
/* dual interface */ IAcadSelectionSets;
struct __declspec(uuid("1d771106-2777-4623-a067-a3df340f5b04"))
/* dual interface */ IAcadSelectionSet;
struct __declspec(uuid("2ce54bf2-0376-4aa5-ba88-1bff47b1c70d"))
/* dual interface */ IAcadUtility;
struct /* coclass */ AcadState;
struct /* coclass */ AcadApplication;
struct /* coclass */ AcadSelectionSet;
struct /* coclass */ AcadSelectionSets;
struct /* coclass */ AcadPlot;
struct /* coclass */ AcadPreferences;
struct /* coclass */ AcadPreferencesDrafting;
struct /* coclass */ AcadPreferencesDisplay;
struct /* coclass */ AcadPreferencesFiles;
struct /* coclass */ AcadPreferencesOpenSave;
struct /* coclass */ AcadPreferencesOutput;
struct /* coclass */ AcadPreferencesProfiles;
struct /* coclass */ AcadPreferencesSelection;
struct /* coclass */ AcadPreferencesSystem;
struct /* coclass */ AcadPreferencesUser;
struct /* coclass */ AcadMenuGroups;
struct /* coclass */ AcadMenuGroup;
struct /* coclass */ AcadMenuBar;
struct /* coclass */ AcadPopupMenus;
struct /* coclass */ AcadPopupMenu;
struct /* coclass */ AcadPopupMenuItem;
struct /* coclass */ AcadUtility;
struct __declspec(uuid("e701e4a8-5e93-49a3-8a5b-6927dd322bd6"))
/* dispinterface */ _DAcadDocumentEvents;
struct /* coclass */ AcadDocument;
struct /* coclass */ AcadDocuments;
struct /* coclass */ AcadToolbars;
struct /* coclass */ AcadToolbar;
struct /* coclass */ AcadToolbarItem;
typedef enum AcColor ACAD_COLOR;
typedef BSTR ACAD_LAYER;
typedef BSTR ACAD_LTYPE;
typedef long ACAD_NULL;
typedef double ACAD_DISTANCE;
typedef double ACAD_ANGLE;
typedef enum AcLineWeight ACAD_LWEIGHT;
typedef double ACAD_NOUNITS;
typedef VARIANT ACAD_POINT;
#if !defined(_WIN64)
typedef __w64 long LONG_PTR;
#else
typedef __int64 LONG_PTR;
#endif

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IAcadAcCmColor, __uuidof(IAcadAcCmColor));
_COM_SMARTPTR_TYPEDEF(IAcadHyperlink, __uuidof(IAcadHyperlink));
_COM_SMARTPTR_TYPEDEF(IAcadHyperlinks, __uuidof(IAcadHyperlinks));
_COM_SMARTPTR_TYPEDEF(IAcadSectionTypeSettings, __uuidof(IAcadSectionTypeSettings));
_COM_SMARTPTR_TYPEDEF(IAcadDatabasePreferences, __uuidof(IAcadDatabasePreferences));
_COM_SMARTPTR_TYPEDEF(IAcadSummaryInfo, __uuidof(IAcadSummaryInfo));
_COM_SMARTPTR_TYPEDEF(IAcadSectionTypeSettings2, __uuidof(IAcadSectionTypeSettings2));
_COM_SMARTPTR_TYPEDEF(IAcadDynamicBlockReferenceProperty, __uuidof(IAcadDynamicBlockReferenceProperty));
_COM_SMARTPTR_TYPEDEF(IAcadIdPair, __uuidof(IAcadIdPair));
_COM_SMARTPTR_TYPEDEF(IAcadShadowDisplay, __uuidof(IAcadShadowDisplay));
_COM_SMARTPTR_TYPEDEF(IAcadSubEntity, __uuidof(IAcadSubEntity));
_COM_SMARTPTR_TYPEDEF(IAcadMLeaderLeader, __uuidof(IAcadMLeaderLeader));
_COM_SMARTPTR_TYPEDEF(IAcadSubEntSolidFace, __uuidof(IAcadSubEntSolidFace));
_COM_SMARTPTR_TYPEDEF(IAcadSubEntSolidEdge, __uuidof(IAcadSubEntSolidEdge));
_COM_SMARTPTR_TYPEDEF(IAcadSubEntSolidVertex, __uuidof(IAcadSubEntSolidVertex));
_COM_SMARTPTR_TYPEDEF(IAcadSubEntSolidNode, __uuidof(IAcadSubEntSolidNode));
_COM_SMARTPTR_TYPEDEF(IAcadSubDMeshFace, __uuidof(IAcadSubDMeshFace));
_COM_SMARTPTR_TYPEDEF(IAcadSubDMeshEdge, __uuidof(IAcadSubDMeshEdge));
_COM_SMARTPTR_TYPEDEF(IAcadSubDMeshVertex, __uuidof(IAcadSubDMeshVertex));
_COM_SMARTPTR_TYPEDEF(IAcadSecurityParams, __uuidof(IAcadSecurityParams));
_COM_SMARTPTR_TYPEDEF(_DAcadApplicationEvents, __uuidof(_DAcadApplicationEvents));
_COM_SMARTPTR_TYPEDEF(IAcadUtility, __uuidof(IAcadUtility));
_COM_SMARTPTR_TYPEDEF(_DAcadDocumentEvents, __uuidof(_DAcadDocumentEvents));
_COM_SMARTPTR_TYPEDEF(IAcadObject, __uuidof(IAcadObject));
_COM_SMARTPTR_TYPEDEF(IAcadEntity, __uuidof(IAcadEntity));
_COM_SMARTPTR_TYPEDEF(IAcad3DFace, __uuidof(IAcad3DFace));
_COM_SMARTPTR_TYPEDEF(IAcadPolygonMesh, __uuidof(IAcadPolygonMesh));
_COM_SMARTPTR_TYPEDEF(IAcad3DPolyline, __uuidof(IAcad3DPolyline));
_COM_SMARTPTR_TYPEDEF(IAcadArc, __uuidof(IAcadArc));
_COM_SMARTPTR_TYPEDEF(IAcadAttribute, __uuidof(IAcadAttribute));
_COM_SMARTPTR_TYPEDEF(IAcadRegion, __uuidof(IAcadRegion));
_COM_SMARTPTR_TYPEDEF(IAcad3DSolid, __uuidof(IAcad3DSolid));
_COM_SMARTPTR_TYPEDEF(IAcadCircle, __uuidof(IAcadCircle));
_COM_SMARTPTR_TYPEDEF(IAcadDimension, __uuidof(IAcadDimension));
_COM_SMARTPTR_TYPEDEF(IAcadDimAligned, __uuidof(IAcadDimAligned));
_COM_SMARTPTR_TYPEDEF(IAcadDimAngular, __uuidof(IAcadDimAngular));
_COM_SMARTPTR_TYPEDEF(IAcadDimDiametric, __uuidof(IAcadDimDiametric));
_COM_SMARTPTR_TYPEDEF(IAcadDimRotated, __uuidof(IAcadDimRotated));
_COM_SMARTPTR_TYPEDEF(IAcadDimOrdinate, __uuidof(IAcadDimOrdinate));
_COM_SMARTPTR_TYPEDEF(IAcadDimRadial, __uuidof(IAcadDimRadial));
_COM_SMARTPTR_TYPEDEF(IAcadEllipse, __uuidof(IAcadEllipse));
_COM_SMARTPTR_TYPEDEF(IAcadLeader, __uuidof(IAcadLeader));
_COM_SMARTPTR_TYPEDEF(IAcadMText, __uuidof(IAcadMText));
_COM_SMARTPTR_TYPEDEF(IAcadPoint, __uuidof(IAcadPoint));
_COM_SMARTPTR_TYPEDEF(IAcadLWPolyline, __uuidof(IAcadLWPolyline));
_COM_SMARTPTR_TYPEDEF(IAcadPolyline, __uuidof(IAcadPolyline));
_COM_SMARTPTR_TYPEDEF(IAcadRay, __uuidof(IAcadRay));
_COM_SMARTPTR_TYPEDEF(IAcadShape, __uuidof(IAcadShape));
_COM_SMARTPTR_TYPEDEF(IAcadSolid, __uuidof(IAcadSolid));
_COM_SMARTPTR_TYPEDEF(IAcadSpline, __uuidof(IAcadSpline));
_COM_SMARTPTR_TYPEDEF(IAcadText, __uuidof(IAcadText));
_COM_SMARTPTR_TYPEDEF(IAcadTolerance, __uuidof(IAcadTolerance));
_COM_SMARTPTR_TYPEDEF(IAcadTrace, __uuidof(IAcadTrace));
_COM_SMARTPTR_TYPEDEF(IAcadXline, __uuidof(IAcadXline));
_COM_SMARTPTR_TYPEDEF(IAcadBlockReference, __uuidof(IAcadBlockReference));
_COM_SMARTPTR_TYPEDEF(IAcadHatch, __uuidof(IAcadHatch));
_COM_SMARTPTR_TYPEDEF(IAcadRasterImage, __uuidof(IAcadRasterImage));
_COM_SMARTPTR_TYPEDEF(IAcadLine, __uuidof(IAcadLine));
_COM_SMARTPTR_TYPEDEF(IAcadPlotConfiguration, __uuidof(IAcadPlotConfiguration));
_COM_SMARTPTR_TYPEDEF(IAcadMInsertBlock, __uuidof(IAcadMInsertBlock));
_COM_SMARTPTR_TYPEDEF(IAcadPolyfaceMesh, __uuidof(IAcadPolyfaceMesh));
_COM_SMARTPTR_TYPEDEF(IAcadMLine, __uuidof(IAcadMLine));
_COM_SMARTPTR_TYPEDEF(IAcadDim3PointAngular, __uuidof(IAcadDim3PointAngular));
_COM_SMARTPTR_TYPEDEF(IAcadExternalReference, __uuidof(IAcadExternalReference));
_COM_SMARTPTR_TYPEDEF(IAcadTable, __uuidof(IAcadTable));
_COM_SMARTPTR_TYPEDEF(IAcadDimArcLength, __uuidof(IAcadDimArcLength));
_COM_SMARTPTR_TYPEDEF(IAcadDimRadialLarge, __uuidof(IAcadDimRadialLarge));
_COM_SMARTPTR_TYPEDEF(IAcadSectionSettings, __uuidof(IAcadSectionSettings));
_COM_SMARTPTR_TYPEDEF(IAcadSection, __uuidof(IAcadSection));
_COM_SMARTPTR_TYPEDEF(IAcadMLeader, __uuidof(IAcadMLeader));
_COM_SMARTPTR_TYPEDEF(IAcadView, __uuidof(IAcadView));
_COM_SMARTPTR_TYPEDEF(IAcadPViewport, __uuidof(IAcadPViewport));
_COM_SMARTPTR_TYPEDEF(IAcadGroup, __uuidof(IAcadGroup));
_COM_SMARTPTR_TYPEDEF(IAcadGroups, __uuidof(IAcadGroups));
_COM_SMARTPTR_TYPEDEF(IAcadDimStyle, __uuidof(IAcadDimStyle));
_COM_SMARTPTR_TYPEDEF(IAcadDimStyles, __uuidof(IAcadDimStyles));
_COM_SMARTPTR_TYPEDEF(IAcadLayer, __uuidof(IAcadLayer));
_COM_SMARTPTR_TYPEDEF(IAcadLayers, __uuidof(IAcadLayers));
_COM_SMARTPTR_TYPEDEF(IAcadLineType, __uuidof(IAcadLineType));
_COM_SMARTPTR_TYPEDEF(IAcadLineTypes, __uuidof(IAcadLineTypes));
_COM_SMARTPTR_TYPEDEF(IAcadXRecord, __uuidof(IAcadXRecord));
_COM_SMARTPTR_TYPEDEF(IAcadDictionary, __uuidof(IAcadDictionary));
_COM_SMARTPTR_TYPEDEF(IAcadDictionaries, __uuidof(IAcadDictionaries));
_COM_SMARTPTR_TYPEDEF(IAcadRegisteredApplication, __uuidof(IAcadRegisteredApplication));
_COM_SMARTPTR_TYPEDEF(IAcadRegisteredApplications, __uuidof(IAcadRegisteredApplications));
_COM_SMARTPTR_TYPEDEF(IAcadTextStyle, __uuidof(IAcadTextStyle));
_COM_SMARTPTR_TYPEDEF(IAcadTextStyles, __uuidof(IAcadTextStyles));
_COM_SMARTPTR_TYPEDEF(IAcadUCS, __uuidof(IAcadUCS));
_COM_SMARTPTR_TYPEDEF(IAcadUCSs, __uuidof(IAcadUCSs));
_COM_SMARTPTR_TYPEDEF(IAcadViews, __uuidof(IAcadViews));
_COM_SMARTPTR_TYPEDEF(IAcadViewport, __uuidof(IAcadViewport));
_COM_SMARTPTR_TYPEDEF(IAcadViewports, __uuidof(IAcadViewports));
_COM_SMARTPTR_TYPEDEF(IAcadPlotConfigurations, __uuidof(IAcadPlotConfigurations));
_COM_SMARTPTR_TYPEDEF(IAcadSectionManager, __uuidof(IAcadSectionManager));
_COM_SMARTPTR_TYPEDEF(IAcadMaterial, __uuidof(IAcadMaterial));
_COM_SMARTPTR_TYPEDEF(IAcadMaterials, __uuidof(IAcadMaterials));
_COM_SMARTPTR_TYPEDEF(IAcadObjectEvents, __uuidof(IAcadObjectEvents));
_COM_SMARTPTR_TYPEDEF(IAcadTableStyle, __uuidof(IAcadTableStyle));
_COM_SMARTPTR_TYPEDEF(IAcadMLeaderStyle, __uuidof(IAcadMLeaderStyle));
_COM_SMARTPTR_TYPEDEF(IAcadAttributeReference, __uuidof(IAcadAttributeReference));
_COM_SMARTPTR_TYPEDEF(IAcadOle, __uuidof(IAcadOle));
_COM_SMARTPTR_TYPEDEF(IAcadHelix, __uuidof(IAcadHelix));
_COM_SMARTPTR_TYPEDEF(IAcadSurface, __uuidof(IAcadSurface));
_COM_SMARTPTR_TYPEDEF(IAcadPlaneSurface, __uuidof(IAcadPlaneSurface));
_COM_SMARTPTR_TYPEDEF(IAcadExtrudedSurface, __uuidof(IAcadExtrudedSurface));
_COM_SMARTPTR_TYPEDEF(IAcadRevolvedSurface, __uuidof(IAcadRevolvedSurface));
_COM_SMARTPTR_TYPEDEF(IAcadSweptSurface, __uuidof(IAcadSweptSurface));
_COM_SMARTPTR_TYPEDEF(IAcadLoftedSurface, __uuidof(IAcadLoftedSurface));
_COM_SMARTPTR_TYPEDEF(IAcadSection2, __uuidof(IAcadSection2));
_COM_SMARTPTR_TYPEDEF(IAcadUnderlay, __uuidof(IAcadUnderlay));
_COM_SMARTPTR_TYPEDEF(IAcadDwfUnderlay, __uuidof(IAcadDwfUnderlay));
_COM_SMARTPTR_TYPEDEF(IAcadWipeout, __uuidof(IAcadWipeout));
_COM_SMARTPTR_TYPEDEF(IAcadSubDMesh, __uuidof(IAcadSubDMesh));
_COM_SMARTPTR_TYPEDEF(IAcadNurbSurface, __uuidof(IAcadNurbSurface));
_COM_SMARTPTR_TYPEDEF(IAcadGeoPositionMarker, __uuidof(IAcadGeoPositionMarker));
_COM_SMARTPTR_TYPEDEF(IAcadGeomapImage, __uuidof(IAcadGeomapImage));
_COM_SMARTPTR_TYPEDEF(IAcadPointCloud, __uuidof(IAcadPointCloud));
_COM_SMARTPTR_TYPEDEF(IAcadPointCloudEx, __uuidof(IAcadPointCloudEx));
_COM_SMARTPTR_TYPEDEF(IAcadPointCloudEx2, __uuidof(IAcadPointCloudEx2));
_COM_SMARTPTR_TYPEDEF(IAcadDatabase, __uuidof(IAcadDatabase));
_COM_SMARTPTR_TYPEDEF(IAcadLayerStateManager, __uuidof(IAcadLayerStateManager));
_COM_SMARTPTR_TYPEDEF(IAcadBlock, __uuidof(IAcadBlock));
_COM_SMARTPTR_TYPEDEF(IAcadModelSpace, __uuidof(IAcadModelSpace));
_COM_SMARTPTR_TYPEDEF(IAcadLayout, __uuidof(IAcadLayout));
_COM_SMARTPTR_TYPEDEF(IAcadPaperSpace, __uuidof(IAcadPaperSpace));
_COM_SMARTPTR_TYPEDEF(IAcadBlocks, __uuidof(IAcadBlocks));
_COM_SMARTPTR_TYPEDEF(IAcadLayouts, __uuidof(IAcadLayouts));
_COM_SMARTPTR_TYPEDEF(IAcadSortentsTable, __uuidof(IAcadSortentsTable));
_COM_SMARTPTR_TYPEDEF(IAcadDocument, __uuidof(IAcadDocument));
_COM_SMARTPTR_TYPEDEF(IAcadPlot, __uuidof(IAcadPlot));
_COM_SMARTPTR_TYPEDEF(IAcadApplication, __uuidof(IAcadApplication));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesFiles, __uuidof(IAcadPreferencesFiles));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesDisplay, __uuidof(IAcadPreferencesDisplay));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesOpenSave, __uuidof(IAcadPreferencesOpenSave));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesOutput, __uuidof(IAcadPreferencesOutput));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesSystem, __uuidof(IAcadPreferencesSystem));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesUser, __uuidof(IAcadPreferencesUser));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesDrafting, __uuidof(IAcadPreferencesDrafting));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesSelection, __uuidof(IAcadPreferencesSelection));
_COM_SMARTPTR_TYPEDEF(IAcadPreferencesProfiles, __uuidof(IAcadPreferencesProfiles));
_COM_SMARTPTR_TYPEDEF(IAcadPreferences, __uuidof(IAcadPreferences));
_COM_SMARTPTR_TYPEDEF(IAcadDocuments, __uuidof(IAcadDocuments));
_COM_SMARTPTR_TYPEDEF(IAcadState, __uuidof(IAcadState));
_COM_SMARTPTR_TYPEDEF(IAcadSelectionSet, __uuidof(IAcadSelectionSet));
_COM_SMARTPTR_TYPEDEF(IAcadSelectionSets, __uuidof(IAcadSelectionSets));
_COM_SMARTPTR_TYPEDEF(IAcadMenuGroups, __uuidof(IAcadMenuGroups));
_COM_SMARTPTR_TYPEDEF(IAcadMenuGroup, __uuidof(IAcadMenuGroup));
_COM_SMARTPTR_TYPEDEF(IAcadPopupMenus, __uuidof(IAcadPopupMenus));
_COM_SMARTPTR_TYPEDEF(IAcadPopupMenu, __uuidof(IAcadPopupMenu));
_COM_SMARTPTR_TYPEDEF(IAcadPopupMenuItem, __uuidof(IAcadPopupMenuItem));
_COM_SMARTPTR_TYPEDEF(IAcadMenuBar, __uuidof(IAcadMenuBar));
_COM_SMARTPTR_TYPEDEF(IAcadToolbars, __uuidof(IAcadToolbars));
_COM_SMARTPTR_TYPEDEF(IAcadToolbar, __uuidof(IAcadToolbar));
_COM_SMARTPTR_TYPEDEF(IAcadToolbarItem, __uuidof(IAcadToolbarItem));

//
// Type library items
//

enum __declspec(uuid("cafcdcc3-d722-4b4c-816e-1644c8c93df5"))
AcBoolean
{
    acFalse = 0,
    acTrue = 1
};

enum __declspec(uuid("eca09adb-5ae4-42fa-ad49-86add4607836"))
AcOnOff
{
    acOff = 0,
    acOn = 1
};

enum __declspec(uuid("129d6e08-3dee-4c76-87f1-f72d090055fd"))
AcEntityName
{
    ac3dFace = 1,
    ac3dPolyline = 2,
    ac3dSolid = 3,
    acArc = 4,
    acAttribute = 5,
    acAttributeReference = 6,
    acBlockReference = 7,
    acCircle = 8,
    acDimAligned = 9,
    acDimAngular = 10,
    acDimDiametric = 12,
    acDimOrdinate = 13,
    acDimRadial = 14,
    acDimRotated = 15,
    acEllipse = 16,
    acHatch = 17,
    acLeader = 18,
    acLine = 19,
    acMtext = 21,
    acPoint = 22,
    acPolyline = 23,
    acPolylineLight = 24,
    acPolymesh = 25,
    acRaster = 26,
    acRay = 27,
    acRegion = 28,
    acShape = 29,
    acSolid = 30,
    acSpline = 31,
    acText = 32,
    acTolerance = 33,
    acTrace = 34,
    acPViewport = 35,
    acXline = 36,
    acGroup = 37,
    acMInsertBlock = 38,
    acPolyfaceMesh = 39,
    acMLine = 40,
    acDim3PointAngular = 41,
    acExternalReference = 42,
    acTable = 43,
    acDimArcLength = 44,
    acDimRadialLarge = 45,
    acDwfUnderlay = 46,
    acDgnUnderlay = 47,
    acMLeader = 48,
    acSubDMesh = 49,
    acPdfUnderlay = 50,
    acNurbSurface = 51
};

enum __declspec(uuid("2844b1bb-084b-4347-99c4-bd7779f438e5"))
AcActiveSpace
{
    acPaperSpace = 0,
    acModelSpace = 1
};

enum __declspec(uuid("b74566b2-d249-46ef-9657-c132ccd27829"))
AcKeyboardAccelerator
{
    acPreferenceClassic = 0,
    acPreferenceCustom = 1
};

enum __declspec(uuid("6b7dc6fe-8bba-432b-a5ce-b4fec112ca07"))
AcPlotOrientation
{
    acPlotOrientationPortrait = 0,
    acPlotOrientationLandscape = 1
};

enum __declspec(uuid("532c934e-45ff-424e-a6e5-8d35074c0d57"))
AcColor
{
    acByBlock = 0,
    acRed = 1,
    acYellow = 2,
    acGreen = 3,
    acCyan = 4,
    acBlue = 5,
    acMagenta = 6,
    acWhite = 7,
    acByLayer = 256
};

enum __declspec(uuid("714212ae-2c2c-487a-bc99-9b3c83eddf7b"))
AcAttachmentPoint
{
    acAttachmentPointTopLeft = 1,
    acAttachmentPointTopCenter = 2,
    acAttachmentPointTopRight = 3,
    acAttachmentPointMiddleLeft = 4,
    acAttachmentPointMiddleCenter = 5,
    acAttachmentPointMiddleRight = 6,
    acAttachmentPointBottomLeft = 7,
    acAttachmentPointBottomCenter = 8,
    acAttachmentPointBottomRight = 9
};

enum __declspec(uuid("70223bb7-5f69-4633-a327-01a371294e9b"))
AcDrawingDirection
{
    acLeftToRight = 1,
    acRightToLeft = 2,
    acTopToBottom = 3,
    acBottomToTop = 4,
    acByStyle = 5
};

enum __declspec(uuid("e77f1397-8543-4872-9349-2c63991c8abf"))
AcLeaderType
{
    acLineNoArrow = 0,
    acSplineNoArrow = 1,
    acLineWithArrow = 2,
    acSplineWithArrow = 3
};

enum __declspec(uuid("5c547a9a-16c6-4a05-b316-bae848833fda"))
AcAttributeMode
{
    acAttributeModeNormal = 0,
    acAttributeModeInvisible = 1,
    acAttributeModeConstant = 2,
    acAttributeModeVerify = 4,
    acAttributeModePreset = 8,
    acAttributeModeLockPosition = 16,
    acAttributeModeMultipleLine = 32
};

enum __declspec(uuid("7b9b30b6-5fe0-429d-b341-0a3e453c5259"))
AcHorizontalAlignment
{
    acHorizontalAlignmentLeft = 0,
    acHorizontalAlignmentCenter = 1,
    acHorizontalAlignmentRight = 2,
    acHorizontalAlignmentAligned = 3,
    acHorizontalAlignmentMiddle = 4,
    acHorizontalAlignmentFit = 5
};

enum __declspec(uuid("c600c534-836c-4860-b307-953df2950e26"))
AcVerticalAlignment
{
    acVerticalAlignmentBaseline = 0,
    acVerticalAlignmentBottom = 1,
    acVerticalAlignmentMiddle = 2,
    acVerticalAlignmentTop = 3
};

enum __declspec(uuid("caefa01e-4dd6-478f-8a48-ecf10bb80f53"))
AcTextGenerationFlag
{
    acTextFlagBackward = 2,
    acTextFlagUpsideDown = 4
};

enum __declspec(uuid("ae05b83e-6163-42e3-9b05-3de240356f19"))
AcSelect
{
    acSelectionSetWindow = 0,
    acSelectionSetCrossing = 1,
    acSelectionSetFence = 2,
    acSelectionSetPrevious = 3,
    acSelectionSetLast = 4,
    acSelectionSetAll = 5,
    acSelectionSetWindowPolygon = 6,
    acSelectionSetCrossingPolygon = 7
};

enum __declspec(uuid("63965e9e-09d7-4997-b975-646a8fed14b1"))
AcPatternType
{
    acHatchPatternTypeUserDefined = 0,
    acHatchPatternTypePreDefined = 1,
    acHatchPatternTypeCustomDefined = 2
};

enum __declspec(uuid("6d6fd715-f07a-4556-82f3-049737e6d356"))
AcLoopType
{
    acHatchLoopTypeDefault = 0,
    acHatchLoopTypeExternal = 1,
    acHatchLoopTypePolyline = 2,
    acHatchLoopTypeDerived = 4,
    acHatchLoopTypeTextbox = 8
};

enum __declspec(uuid("1d680f47-2e92-4f0c-bd83-24ec8b7512e4"))
AcHatchStyle
{
    acHatchStyleNormal = 0,
    acHatchStyleOuter = 1,
    acHatchStyleIgnore = 2
};

enum __declspec(uuid("4e67832e-d386-4c35-b041-e95c33a0a34e"))
AcPolylineType
{
    acSimplePoly = 0,
    acFitCurvePoly = 1,
    acQuadSplinePoly = 2,
    acCubicSplinePoly = 3
};

enum __declspec(uuid("fb45b7e3-0984-4dc9-9cc8-cb0885c567b7"))
Ac3DPolylineType
{
    acSimple3DPoly = 0,
    acQuadSpline3DPoly = 1,
    acCubicSpline3DPoly = 2
};

enum __declspec(uuid("bf8db750-dd8d-4587-a8b8-903f072c5b84"))
AcViewportSplitType
{
    acViewport2Horizontal = 0,
    acViewport2Vertical = 1,
    acViewport3Left = 2,
    acViewport3Right = 3,
    acViewport3Horizontal = 4,
    acViewport3Vertical = 5,
    acViewport3Above = 6,
    acViewport3Below = 7,
    acViewport4 = 8
};

enum __declspec(uuid("e891a174-a338-4ca3-93b7-d210c24001b3"))
AcRegenType
{
    acActiveViewport = 0,
    acAllViewports = 1
};

enum __declspec(uuid("9fc3e122-2200-4953-9c2f-b6f33284a01b"))
AcBooleanType
{
    acUnion = 0,
    acIntersection = 1,
    acSubtraction = 2
};

enum __declspec(uuid("e2eb21f2-4cb8-490d-806c-6228961bb905"))
AcExtendOption
{
    acExtendNone = 0,
    acExtendThisEntity = 1,
    acExtendOtherEntity = 2,
    acExtendBoth = 3
};

enum __declspec(uuid("0b868d5d-aee1-4e84-a3ca-35c40219d3db"))
AcAngleUnits
{
    acDegrees = 0,
    acDegreeMinuteSeconds = 1,
    acGrads = 2,
    acRadians = 3
};

enum __declspec(uuid("80a5b459-dbd6-44b8-84a0-6a2f4717f186"))
AcUnits
{
    acDefaultUnits = -1,
    acScientific = 1,
    acDecimal = 2,
    acEngineering = 3,
    acArchitectural = 4,
    acFractional = 5
};

enum __declspec(uuid("4c56eefd-53e8-4068-bed0-465cdd555d1c"))
AcCoordinateSystem
{
    acWorld = 0,
    acUCS = 1,
    acDisplayDCS = 2,
    acPaperSpaceDCS = 3,
    acOCS = 4
};

enum __declspec(uuid("784a81ab-6225-4f8a-abf1-670ff12fc751"))
AcMeasurementUnits
{
    acEnglish = 0,
    acMetric = 1
};

enum __declspec(uuid("775ba2e6-8e8a-4435-8076-4a3b2c21cf3c"))
AcXRefDemandLoad
{
    acDemandLoadDisabled = 0,
    acDemandLoadEnabled = 1,
    acDemandLoadEnabledWithCopy = 2
};

enum __declspec(uuid("cc616612-c08e-4198-a833-8632e362d9db"))
AcPreviewMode
{
    acPartialPreview = 0,
    acFullPreview = 1
};

enum __declspec(uuid("35cf43ee-d90e-4b3f-a825-378df8ee542a"))
AcPolymeshType
{
    acSimpleMesh = 0,
    acQuadSurfaceMesh = 5,
    acCubicSurfaceMesh = 6,
    acBezierSurfaceMesh = 8
};

enum __declspec(uuid("d0cc5502-e2b4-41da-9a08-a830e15090bd"))
AcZoomScaleType
{
    acZoomScaledAbsolute = 0,
    acZoomScaledRelative = 1,
    acZoomScaledRelativePSpace = 2
};

enum __declspec(uuid("698ced62-a187-4759-a0c3-8cb1ed18096c"))
AcDragDisplayMode
{
    acDragDoNotDisplay = 0,
    acDragDisplayOnRequest = 1,
    acDragDisplayAutomatically = 2
};

enum __declspec(uuid("4b628e69-8f76-44ce-a213-c79ee421eab7"))
AcARXDemandLoad
{
    acDemanLoadDisable = 0,
    acDemandLoadOnObjectDetect = 1,
    acDemandLoadCmdInvoke = 2
};

enum __declspec(uuid("54b571e2-863e-4a2a-95fc-0eaba41a15ea"))
AcTextFontStyle
{
    acFontRegular = 0,
    acFontItalic = 1,
    acFontBold = 2,
    acFontBoldItalic = 3
};

enum __declspec(uuid("5849689d-f2c6-4b50-b897-38933c529dc8"))
AcProxyImage
{
    acProxyNotShow = 0,
    acProxyShow = 1,
    acProxyBoundingBox = 2
};

enum __declspec(uuid("6e549b2a-8fb8-4fbc-911c-85b8e0a3aabd"))
AcKeyboardPriority
{
    acKeyboardRunningObjSnap = 0,
    acKeyboardEntry = 1,
    acKeyboardEntryExceptScripts = 2
};

enum __declspec(uuid("db4d91eb-8ba9-431f-bc1c-f2389c8bf5a2"))
AcMenuGroupType
{
    acBaseMenuGroup = 0,
    acPartialMenuGroup = 1
};

enum __declspec(uuid("4f9a7ff1-4f24-438c-bbab-4206ccbd2183"))
AcMenuFileType
{
    acMenuFileCompiled = 0,
    acMenuFileSource = 1
};

enum __declspec(uuid("9022ebb4-a2de-4c62-898b-8aa470156469"))
AcMenuItemType
{
    acMenuItem = 0,
    acMenuSeparator = 1,
    acMenuSubMenu = 2
};

enum __declspec(uuid("2a1c1e0a-8ebe-4b08-bbcc-420568210a7a"))
AcToolbarItemType
{
    acToolbarButton = 0,
    acToolbarSeparator = 1,
    acToolbarControl = 2,
    acToolbarFlyout = 3
};

enum __declspec(uuid("0fa0e84e-a39d-46b7-b439-7d3db3775422"))
AcToolbarDockStatus
{
    acToolbarDockTop = 0,
    acToolbarDockBottom = 1,
    acToolbarDockLeft = 2,
    acToolbarDockRight = 3,
    acToolbarFloating = 4
};

enum __declspec(uuid("d14e7a58-b2bb-47ca-ad84-7cfc814cb100"))
AcLineWeight
{
    acLnWt000 = 0,
    acLnWt005 = 5,
    acLnWt009 = 9,
    acLnWt013 = 13,
    acLnWt015 = 15,
    acLnWt018 = 18,
    acLnWt020 = 20,
    acLnWt025 = 25,
    acLnWt030 = 30,
    acLnWt035 = 35,
    acLnWt040 = 40,
    acLnWt050 = 50,
    acLnWt053 = 53,
    acLnWt060 = 60,
    acLnWt070 = 70,
    acLnWt080 = 80,
    acLnWt090 = 90,
    acLnWt100 = 100,
    acLnWt106 = 106,
    acLnWt120 = 120,
    acLnWt140 = 140,
    acLnWt158 = 158,
    acLnWt200 = 200,
    acLnWt211 = 211,
    acLnWtByLayer = -1,
    acLnWtByBlock = -2,
    acLnWtByLwDefault = -3
};

enum __declspec(uuid("47db0cf8-4c38-44cd-8baa-e4872b9ff926"))
AcWindowState
{
    acNorm = 1,
    acMin = 2,
    acMax = 3
};

enum __declspec(uuid("b581161c-8bb1-4a62-90d5-10dc2253bd1b"))
AcPlotPaperUnits
{
    acInches = 0,
    acMillimeters = 1,
    acPixels = 2
};

enum __declspec(uuid("3e1dfd4e-556c-4377-a3d5-f9daea98ecf3"))
AcPlotRotation
{
    ac0degrees = 0,
    ac90degrees = 1,
    ac180degrees = 2,
    ac270degrees = 3
};

enum __declspec(uuid("492df439-58a6-4061-af3b-8da68523f79f"))
AcPlotType
{
    acDisplay = 0,
    acExtents = 1,
    acLimits = 2,
    acView = 3,
    acWindow = 4,
    acLayout = 5
};

enum __declspec(uuid("d63da31c-9418-4740-b482-a75684488924"))
AcPlotScale
{
    acScaleToFit = 0,
    ac1_128in_1ft = 1,
    ac1_64in_1ft = 2,
    ac1_32in_1ft = 3,
    ac1_16in_1ft = 4,
    ac3_32in_1ft = 5,
    ac1_8in_1ft = 6,
    ac3_16in_1ft = 7,
    ac1_4in_1ft = 8,
    ac3_8in_1ft = 9,
    ac1_2in_1ft = 10,
    ac3_4in_1ft = 11,
    ac1in_1ft = 12,
    ac3in_1ft = 13,
    ac6in_1ft = 14,
    ac1ft_1ft = 15,
    ac1_1 = 16,
    ac1_2 = 17,
    ac1_4 = 18,
    ac1_5 = 19,
    ac1_8 = 20,
    ac1_10 = 21,
    ac1_16 = 22,
    ac1_20 = 23,
    ac1_30 = 24,
    ac1_40 = 25,
    ac1_50 = 26,
    ac1_100 = 27,
    ac2_1 = 28,
    ac4_1 = 29,
    ac8_1 = 30,
    ac10_1 = 31,
    ac100_1 = 32
};

enum __declspec(uuid("0c2b0a48-935b-4840-ab9d-935db1722225"))
AcAlignment
{
    acAlignmentLeft = 0,
    acAlignmentCenter = 1,
    acAlignmentRight = 2,
    acAlignmentAligned = 3,
    acAlignmentMiddle = 4,
    acAlignmentFit = 5,
    acAlignmentTopLeft = 6,
    acAlignmentTopCenter = 7,
    acAlignmentTopRight = 8,
    acAlignmentMiddleLeft = 9,
    acAlignmentMiddleCenter = 10,
    acAlignmentMiddleRight = 11,
    acAlignmentBottomLeft = 12,
    acAlignmentBottomCenter = 13,
    acAlignmentBottomRight = 14
};

enum __declspec(uuid("fa631a8d-2544-40d0-afdb-032582bd22e7"))
AcLineSpacingStyle
{
    acLineSpacingStyleAtLeast = 1,
    acLineSpacingStyleExactly = 2
};

enum __declspec(uuid("7242f0de-d2b4-40f2-8833-b717052af507"))
AcDimPrecision
{
    acDimPrecisionZero = 0,
    acDimPrecisionOne = 1,
    acDimPrecisionTwo = 2,
    acDimPrecisionThree = 3,
    acDimPrecisionFour = 4,
    acDimPrecisionFive = 5,
    acDimPrecisionSix = 6,
    acDimPrecisionSeven = 7,
    acDimPrecisionEight = 8
};

enum __declspec(uuid("901d7e9e-0772-49f1-9d58-7947c3c46f2a"))
AcDimUnits
{
    acDimScientific = 1,
    acDimDecimal = 2,
    acDimEngineering = 3,
    acDimArchitecturalStacked = 4,
    acDimFractionalStacked = 5,
    acDimArchitectural = 6,
    acDimFractional = 7,
    acDimWindowsDesktop = 8
};

enum __declspec(uuid("2edda92d-cd0e-4068-b10c-7a4bcd848c6b"))
AcDimLUnits
{
    acDimLScientific = 1,
    acDimLDecimal = 2,
    acDimLEngineering = 3,
    acDimLArchitectural = 4,
    acDimLFractional = 5,
    acDimLWindowsDesktop = 6
};

enum __declspec(uuid("cac7807b-5f8f-4eee-8b40-d68282abccf3"))
AcDimArrowheadType
{
    acArrowDefault = 0,
    acArrowClosedBlank = 1,
    acArrowClosed = 2,
    acArrowDot = 3,
    acArrowArchTick = 4,
    acArrowOblique = 5,
    acArrowOpen = 6,
    acArrowOrigin = 7,
    acArrowOrigin2 = 8,
    acArrowOpen90 = 9,
    acArrowOpen30 = 10,
    acArrowDotSmall = 11,
    acArrowDotBlank = 12,
    acArrowSmall = 13,
    acArrowBoxBlank = 14,
    acArrowBoxFilled = 15,
    acArrowDatumBlank = 16,
    acArrowDatumFilled = 17,
    acArrowIntegral = 18,
    acArrowNone = 19,
    acArrowUserDefined = 20
};

enum __declspec(uuid("59277d30-a09a-46d2-9ebf-7e1ffa447140"))
AcDimCenterType
{
    acCenterMark = 0,
    acCenterLine = 1,
    acCenterNone = 2
};

enum __declspec(uuid("acb75693-ae79-41c6-a217-74b2c540fed5"))
AcDimFit
{
    acTextAndArrows = 0,
    acArrowsOnly = 1,
    acTextOnly = 2,
    acBestFit = 3
};

enum __declspec(uuid("47f76311-0ccf-4f7e-a0ca-e8d79fe4a204"))
AcDimFractionType
{
    acHorizontal = 0,
    acDiagonal = 1,
    acNotStacked = 2
};

enum __declspec(uuid("4f539f4e-ccd8-4866-9487-85a7f9d633af"))
AcDimArcLengthSymbol
{
    acSymInFront = 0,
    acSymAbove = 1,
    acSymNone = 2
};

enum __declspec(uuid("11400e25-d9f1-4e53-8b88-0116e0ae01c8"))
AcDimHorizontalJustification
{
    acHorzCentered = 0,
    acFirstExtensionLine = 1,
    acSecondExtensionLine = 2,
    acOverFirstExtension = 3,
    acOverSecondExtension = 4
};

enum __declspec(uuid("6213c6f8-70a6-48a7-9cd8-398c76ed5fea"))
AcDimVerticalJustification
{
    acVertCentered = 0,
    acAbove = 1,
    acOutside = 2,
    acJIS = 3,
    acUnder = 4
};

enum __declspec(uuid("6dc1c98d-0b26-4fe7-bca1-2f32a0b0e49f"))
AcDimTextMovement
{
    acDimLineWithText = 0,
    acMoveTextAddLeader = 1,
    acMoveTextNoLeader = 2
};

enum __declspec(uuid("e1deaeb5-8974-41b7-8ba5-a4b253b6582f"))
AcDimToleranceMethod
{
    acTolNone = 0,
    acTolSymmetrical = 1,
    acTolDeviation = 2,
    acTolLimits = 3,
    acTolBasic = 4
};

enum __declspec(uuid("e180eba2-bf63-4d82-9b9f-24002a926a27"))
AcDimToleranceJustify
{
    acTolBottom = 0,
    acTolMiddle = 1,
    acTolTop = 2
};

enum __declspec(uuid("f2780908-1529-4c80-a13a-f0ea5532e8ca"))
AcViewportScale
{
    acVpScaleToFit = 0,
    acVpCustomScale = 1,
    acVp1_1 = 2,
    acVp1_2 = 3,
    acVp1_4 = 4,
    acVp1_5 = 5,
    acVp1_8 = 6,
    acVp1_10 = 7,
    acVp1_16 = 8,
    acVp1_20 = 9,
    acVp1_30 = 10,
    acVp1_40 = 11,
    acVp1_50 = 12,
    acVp1_100 = 13,
    acVp2_1 = 14,
    acVp4_1 = 15,
    acVp8_1 = 16,
    acVp10_1 = 17,
    acVp100_1 = 18,
    acVp1_128in_1ft = 19,
    acVp1_64in_1ft = 20,
    acVp1_32in_1ft = 21,
    acVp1_16in_1ft = 22,
    acVp3_32in_1ft = 23,
    acVp1_8in_1ft = 24,
    acVp3_16in_1ft = 25,
    acVp1_4in_1ft = 26,
    acVp3_8in_1ft = 27,
    acVp1_2in_1ft = 28,
    acVp3_4in_1ft = 29,
    acVp1in_1ft = 30,
    acVp1and1_2in_1ft = 31,
    acVp3in_1ft = 32,
    acVp6in_1ft = 33,
    acVp1ft_1ft = 34
};

enum __declspec(uuid("fab797ab-5679-4510-8fbd-2e5b524b9ce6"))
AcISOPenWidth
{
    acPenWidth013 = 13,
    acPenWidth018 = 18,
    acPenWidth025 = 25,
    acPenWidth035 = 35,
    acPenWidth050 = 50,
    acPenWidth070 = 70,
    acPenWidth100 = 100,
    acPenWidth140 = 140,
    acPenWidth200 = 200,
    acPenWidthUnk = -1
};

enum __declspec(uuid("b9f32829-bb4b-454f-b84b-6195662c86d2"))
AcSaveAsType
{
    acUnknown = -1,
    acR12_dxf = 1,
    acR13_dwg = 4,
    acR13_dxf = 5,
    acR14_dwg = 8,
    acR14_dxf = 9,
    ac2000_dwg = 12,
    ac2000_dxf = 13,
    ac2000_Template = 14,
    ac2004_dwg = 24,
    ac2004_dxf = 25,
    ac2004_Template = 26,
    ac2007_dwg = 36,
    ac2007_dxf = 37,
    ac2007_Template = 38,
    ac2010_dwg = 48,
    ac2010_dxf = 49,
    ac2010_Template = 50,
    ac2013_dwg = 60,
    ac2013_dxf = 61,
    ac2013_Template = 62,
    ac2018_dwg = 64,
    ac2018_dxf = 65,
    ac2018_Template = 66,
    acNative = 64,
    acR15_dwg = 12,
    acR15_dxf = 13,
    acR15_Template = 14,
    acR18_dwg = 24,
    acR18_dxf = 25,
    acR18_Template = 26
};

enum __declspec(uuid("4ac1571c-8569-4c3a-8b9e-4f57f4d3d7b8"))
AcPrinterSpoolAlert
{
    acPrinterAlwaysAlert = 0,
    acPrinterAlertOnce = 1,
    acPrinterNeverAlertLogOnce = 2,
    acPrinterNeverAlert = 3
};

enum __declspec(uuid("02841a49-553f-4fc9-b364-7575d50b0efb"))
AcPlotPolicyForNewDwgs
{
    acPolicyNewDefault = 0,
    acPolicyNewLegacy = 1
};

enum __declspec(uuid("51d6cc53-54a7-4a42-aa87-d5119fe87ec6"))
AcPlotPolicyForLegacyDwgs
{
    acPolicyLegacyDefault = 0,
    acPolicyLegacyQuery = 1,
    acPolicyLegacyLegacy = 2
};

enum __declspec(uuid("6653b3ab-441e-4374-8771-1715141409ed"))
AcOleQuality
{
    acOQLineArt = 0,
    acOQText = 1,
    acOQGraphics = 2,
    acOQPhoto = 3,
    acOQHighPhoto = 4
};

enum __declspec(uuid("0b575a24-0c84-4183-8604-a4fa8cc790a6"))
AcLoadPalette
{
    acPaletteByDrawing = 0,
    acPaletteBySession = 1
};

enum __declspec(uuid("c2909c9f-7a96-4902-a9a2-1234a905d68b"))
AcInsertUnits
{
    acInsertUnitsUnitless = 0,
    acInsertUnitsInches = 1,
    acInsertUnitsFeet = 2,
    acInsertUnitsMiles = 3,
    acInsertUnitsMillimeters = 4,
    acInsertUnitsCentimeters = 5,
    acInsertUnitsMeters = 6,
    acInsertUnitsKilometers = 7,
    acInsertUnitsMicroinches = 8,
    acInsertUnitsMils = 9,
    acInsertUnitsYards = 10,
    acInsertUnitsAngstroms = 11,
    acInsertUnitsNanometers = 12,
    acInsertUnitsMicrons = 13,
    acInsertUnitsDecimeters = 14,
    acInsertUnitsDecameters = 15,
    acInsertUnitsHectometers = 16,
    acInsertUnitsGigameters = 17,
    acInsertUnitsAstronomicalUnits = 18,
    acInsertUnitsLightYears = 19,
    acInsertUnitsParsecs = 20,
    acInsertUnitsUSSurveyFeet = 21,
    acInsertUnitsUSSurveyInch = 22,
    acInsertUnitsUSSurveyYard = 23,
    acInsertUnitsUSSurveyMile = 24
};

enum __declspec(uuid("b38fb35b-4ba5-4dcc-a5f8-2a1a4ff95fa8"))
AcAlignmentPointAcquisition
{
    acAlignPntAcquisitionAutomatic = 0,
    acAlignPntAcquisitionShiftToAcquire = 1
};

enum __declspec(uuid("36bb5594-3799-4fe7-be71-4bf7f547fe2d"))
AcInsertUnitsAction
{
    acInsertUnitsPrompt = 0,
    acInsertUnitsAutoAssign = 1
};

enum __declspec(uuid("74aa3982-539b-4d6e-b01e-161f822194e8"))
AcPlotPolicy
{
    acPolicyNamed = 0,
    acPolicyLegacy = 1
};

enum __declspec(uuid("90805536-77da-4c40-b4c3-195a4ae097b1"))
AcDrawingAreaShortCutMenu
{
    acNoDrawingAreaShortCutMenu = 0,
    acUseDefaultDrawingAreaShortCutMenu = 1
};

enum __declspec(uuid("573e6be8-b297-4f6e-8536-103e7d8af266"))
AcDrawingAreaSCMDefault
{
    acRepeatLastCommand = 0,
    acSCM = 1
};

enum __declspec(uuid("9300563b-c22e-470d-8bfb-b32cf5ae8bf6"))
AcDrawingAreaSCMEdit
{
    acEdRepeatLastCommand = 0,
    acEdSCM = 1
};

enum __declspec(uuid("7214b3d0-95ac-491f-9ed7-823ed8705dc6"))
AcDrawingAreaSCMCommand
{
    acEnter = 0,
    acEnableSCMOptions = 1,
    acEnableSCM = 2
};

enum __declspec(uuid("ac17de77-c4fd-42fa-a903-f9c771b5fb41"))
AcLayerStateMask
{
    acLsNone = 0,
    acLsOn = 1,
    acLsFrozen = 2,
    acLsLocked = 4,
    acLsPlot = 8,
    acLsNewViewport = 16,
    acLsColor = 32,
    acLsLineType = 64,
    acLsLineWeight = 128,
    acLsPlotStyle = 256,
    acLsAll = 65535
};

enum __declspec(uuid("8bd61f21-2444-4131-868f-27eaabc399f5"))
AcShadePlot
{
    acShadePlotAsDisplayed = 0,
    acShadePlotWireframe = 1,
    acShadePlotHidden = 2,
    acShadePlotRendered = 3
};

enum __declspec(uuid("eb692d5d-df7f-45f8-9e43-e374e2d79390"))
AcHatchObjectType
{
    acHatchObject = 0,
    acGradientObject = 1
};

enum __declspec(uuid("5bf92d4f-d9d2-4922-a5e0-98d5d5de2044"))
AcGradientPatternType
{
    acPreDefinedGradient = 0,
    acUserDefinedGradient = 1
};

enum __declspec(uuid("e8849085-fccd-4331-9474-cfd194db3adf"))
AcTableDirection
{
    acTableTopToBottom = 0,
    acTableBottomToTop = 1
};

enum __declspec(uuid("00ff2761-ebd4-4eb5-ab38-50e5513ded8b"))
AcCellAlignment
{
    acTopLeft = 1,
    acTopCenter = 2,
    acTopRight = 3,
    acMiddleLeft = 4,
    acMiddleCenter = 5,
    acMiddleRight = 6,
    acBottomLeft = 7,
    acBottomCenter = 8,
    acBottomRight = 9
};

enum __declspec(uuid("0a6c62c2-2dfb-4913-861d-c782933cd8bf"))
AcRowType
{
    acUnknownRow = 0,
    acDataRow = 1,
    acTitleRow = 2,
    acHeaderRow = 4
};

enum __declspec(uuid("a3e9c795-fd4a-446d-8bb7-1f7c8b5291d9"))
AcValueDataType
{
    acUnknownDataType = 0,
    acLong = 1,
    acDouble = 2,
    acString = 4,
    acDate = 8,
    acPoint2d = 16,
    acPoint3d = 32,
    acObjectId = 64,
    acBuffer = 128,
    acResbuf = 256,
    acGeneral = 512
};

enum __declspec(uuid("7b1ba335-ce3c-4346-aae8-68510c8a57da"))
AcValueUnitType
{
    acUnitless = 0,
    acUnitDistance = 1,
    acUnitAngle = 2,
    acUnitArea = 4,
    acUnitVolume = 8
};

enum __declspec(uuid("36b48e3d-f728-4395-9590-6050d294af65"))
AcParseOption
{
    acParseOptionNone = 0,
    acSetDefaultFormat = 1,
    acPreserveMtextFormat = 2
};

enum __declspec(uuid("5d071be0-77cc-43b5-a2ec-e768911e3b8d"))
AcFormatOption
{
    kFormatOptionNone = 0,
    acForEditing = 1,
    acForExpression = 2,
    acUseMaximumPrecision = 4,
    acIgnoreMtextFormat = 8
};

enum __declspec(uuid("c5b01a14-ad12-4335-b5ab-cffa84899c5e"))
AcGridLineType
{
    acInvalidGridLine = 0,
    acHorzTop = 1,
    acHorzInside = 2,
    acHorzBottom = 4,
    acVertLeft = 8,
    acVertInside = 16,
    acVertRight = 32
};

enum __declspec(uuid("10afae75-dcc9-4f9f-87c3-c6916b5fbfe9"))
AcCellType
{
    acUnknownCell = 0,
    acTextCell = 1,
    acBlockCell = 2
};

enum __declspec(uuid("02f05337-43c5-469e-a17a-9c7052bb2a0a"))
AcCellEdgeMask
{
    acTopMask = 1,
    acRightMask = 2,
    acBottomMask = 4,
    acLeftMask = 8
};

enum __declspec(uuid("caffa645-6efa-4776-be1c-f9058836eb35"))
AcRotationAngle
{
    acDegreesUnknown = -1,
    acDegrees000 = 0,
    acDegrees090 = 1,
    acDegrees180 = 2,
    acDegrees270 = 3
};

enum __declspec(uuid("e85f9308-a2be-45f2-95d2-239e59c70106"))
AcMergeCellStyleOption
{
    acMergeCellStyleNone = 0,
    acMergeCellStyleCopyDuplicates = 1,
    acMergeCellStyleOverwriteDuplicates = 2,
    acMergeCellStyleConvertDuplicatesToOverrides = 4,
    acMergeCellStyleIgnoreNewStyles = 8
};

enum __declspec(uuid("2a60632d-cbf5-43a6-b0ae-b549fc2f436a"))
AcSelectType
{
    acTableSelectWindow = 1,
    acTableSelectCrossing = 2
};

enum __declspec(uuid("9cebb296-bad3-4292-9cc2-9691895f288f"))
AcOleType
{
    acOTLink = 1,
    acOTEmbedded = 2,
    acOTStatic = 3
};

enum __declspec(uuid("55ce44e8-2b5c-4cf3-9563-25a2d3529976"))
AcOlePlotQuality
{
    acOPQMonochrome = 0,
    acOPQLowGraphics = 1,
    acOPQHighGraphics = 2
};

enum __declspec(uuid("2a0f50ff-0167-4df0-8cc0-1221dc93858b"))
AcTableStyleOverrides
{
    acTitleSuppressed = 1,
    acHeaderSuppressed = 2,
    acFlowDirection = 3,
    acHorzCellMargin = 4,
    acVertCellMargin = 5,
    acTitleRowColor = 6,
    acHeaderRowColor = 7,
    acDataRowColor = 8,
    acTitleRowFillNone = 9,
    acHeaderRowFillNone = 10,
    acDataRowFillNone = 11,
    acTitleRowFillColor = 12,
    acHeaderRowFillColor = 13,
    acDataRowFillColor = 14,
    acTitleRowAlignment = 15,
    acHeaderRowAlignment = 16,
    acDataRowAlignment = 17,
    acTitleRowTextStyle = 18,
    acHeaderRowTextStyle = 19,
    acDataRowTextStyle = 20,
    acTitleRowTextHeight = 21,
    acHeaderRowTextHeight = 22,
    acDataRowTextHeight = 23,
    acTitleRowDataType = 24,
    acHeaderRowDataType = 25,
    acDataRowDataType = 26,
    acTitleHorzTopColor = 40,
    acTitleHorzInsideColor = 41,
    acTitleHorzBottomColor = 42,
    acTitleVertLeftColor = 43,
    acTitleVertInsideColor = 44,
    acTitleVertRightColor = 45,
    acHeaderHorzTopColor = 46,
    acHeaderHorzInsideColor = 47,
    acHeaderHorzBottomColor = 48,
    acHeaderVertLeftColor = 49,
    acHeaderVertInsideColor = 50,
    acHeaderVertRightColor = 51,
    acDataHorzTopColor = 52,
    acDataHorzInsideColor = 53,
    acDataHorzBottomColor = 54,
    acDataVertLeftColor = 55,
    acDataVertInsideColor = 56,
    acDataVertRightColor = 57,
    acTitleHorzTopLineWeight = 70,
    acTitleHorzInsideLineWeight = 71,
    acTitleHorzBottomLineWeight = 72,
    acTitleVertLeftLineWeight = 73,
    acTitleVertInsideLineWeight = 74,
    acTitleVertRightLineWeight = 75,
    acHeaderHorzTopLineWeight = 76,
    acHeaderHorzInsideLineWeight = 77,
    acHeaderHorzBottomLineWeight = 78,
    acHeaderVertLeftLineWeight = 79,
    acHeaderVertInsideLineWeight = 80,
    acHeaderVertRightLineWeight = 81,
    acDataHorzTopLineWeight = 82,
    acDataHorzInsideLineWeight = 83,
    acDataHorzBottomLineWeight = 84,
    acDataVertLeftLineWeight = 85,
    acDataVertInsideLineWeight = 86,
    acDataVertRightLineWeight = 87,
    acTitleHorzTopVisibility = 100,
    acTitleHorzInsideVisibility = 101,
    acTitleHorzBottomVisibility = 102,
    acTitleVertLeftVisibility = 103,
    acTitleVertInsideVisibility = 104,
    acTitleVertRightVisibility = 105,
    acHeaderHorzTopVisibility = 106,
    acHeaderHorzInsideVisibility = 107,
    acHeaderHorzBottomVisibility = 108,
    acHeaderVertLeftVisibility = 109,
    acHeaderVertInsideVisibility = 110,
    acHeaderVertRightVisibility = 111,
    acDataHorzTopVisibility = 112,
    acDataHorzInsideVisibility = 113,
    acDataHorzBottomVisibility = 114,
    acDataVertLeftVisibility = 115,
    acDataVertInsideVisibility = 116,
    acDataVertRightVisibility = 117,
    acCellAlign = 130,
    acCellBackgroundFillNone = 131,
    acCellBackgroundColor = 132,
    acCellContentColor = 133,
    acCellTextStyle = 134,
    acCellTextHeight = 135,
    acCellTopGridColor = 136,
    acCellRightGridColor = 137,
    acCellBottomGridColor = 138,
    acCellLeftGridColor = 139,
    acCellTopGridLineWeight = 140,
    acCellRightGridLineWeight = 141,
    acCellBottomGridLineWeight = 142,
    acCellLeftGridLineWeight = 143,
    acCellTopVisibility = 144,
    acCellRightVisibility = 145,
    acCellBottomVisibility = 146,
    acCellLeftVisibility = 147,
    acCellDataType = 148
};

enum __declspec(uuid("9ee0e057-d88e-413c-bf7c-38a4f9bce8d0"))
AcMLineJustification
{
    acTop = 0,
    acZero = 1,
    acBottom = 2
};

enum __declspec(uuid("c213bf3e-161c-4369-8a97-246c6b9e862b"))
AcBlockScaling
{
    acAny = 0,
    acUniform = 1
};

enum __declspec(uuid("bb736bcd-01ef-4019-b28f-d52c780dff3c"))
AcDynamicBlockReferencePropertyUnitsType
{
    acNoUnits = 0,
    acAngular = 1,
    acDistance = 2,
    acArea = 3
};

enum __declspec(uuid("50ffb926-7e15-40d5-a886-46bc7f87d557"))
AcSectionState
{
    acSectionStatePlane = 1,
    acSectionStateBoundary = 2,
    acSectionStateVolume = 4
};

enum __declspec(uuid("12cbf359-2960-40ea-aee0-a315c6aa85bd"))
AcSectionState2
{
    acSectionState2Plane = 1,
    acSectionState2Slice = 2,
    acSectionState2Boundary = 4,
    acSectionState2Volume = 8
};

enum __declspec(uuid("34d8ea79-3ca7-4844-ab6b-0b5ddb922c09"))
AcSectionSubItem
{
    acSectionSubItemkNone = 0,
    acSectionSubItemSectionLine = 1,
    acSectionSubItemSectionLineTop = 2,
    acSectionSubItemSectionLineBottom = 4,
    acSectionSubItemBackLine = 8,
    acSectionSubItemBackLineTop = 16,
    acSectionSubItemBackLineBottom = 32,
    acSectionSubItemVerticalLineTop = 64,
    acSectionSubItemVerticalLineBottom = 128
};

enum __declspec(uuid("1918e1f2-e42f-4bf5-96f7-bb37e781dcbd"))
AcSectionType
{
    acSectionTypeLiveSection = 1,
    acSectionType2dSection = 2,
    acSectionType3dSection = 4
};

enum __declspec(uuid("bb35084d-1450-4eac-94d8-4bf2a6f42c30"))
AcSectionGeneration
{
    acSectionGenerationSourceAllObjects = 1,
    acSectionGenerationSourceSelectedObjects = 2,
    acSectionGenerationDestinationNewBlock = 16,
    acSectionGenerationDestinationReplaceBlock = 32,
    acSectionGenerationDestinationFile = 64
};

enum __declspec(uuid("4f721174-6c68-4bc9-865a-97e9f5c91464"))
AcHelixConstrainType
{
    acTurnHeight = 0,
    acTurns = 1,
    acHeight = 2
};

enum __declspec(uuid("60903635-e7cf-4b4a-88a1-bf446254dc05"))
AcShadowDisplayType
{
    acCastsAndReceivesShadows = 0,
    acCastsShadows = 1,
    acReceivesShadows = 2,
    acIgnoreShadows = 3
};

enum __declspec(uuid("1550ddae-99c6-4799-bdba-2702aac6f43f"))
AcLoftedSurfaceNormalType
{
    acRuled = 0,
    acSmooth = 1,
    acFirstNormal = 2,
    acLastNormal = 3,
    acEndsNormal = 4,
    acAllNormal = 5,
    acUseDraftAngles = 6
};

enum __declspec(uuid("a43c635d-1609-4588-bd5e-f68a1a956bb7"))
AcHelixTwistType
{
    acCCW = 0,
    acCW = 1
};

enum __declspec(uuid("b96a3445-0b38-4c15-84e9-577561a3e69f"))
AcUnderlayLayerOverrideType
{
    acNoOverrides = 0,
    acApplied = 1
};

enum __declspec(uuid("b148bdd1-64e7-4ad9-8681-14fd6c665d78"))
AcTableFlowDirection
{
    acTableFlowRight = 1,
    acTableFlowDownOrUp = 2,
    acTableFlowLeft = 4
};

enum __declspec(uuid("ae6b6245-e716-47f9-8192-f06174a956e7"))
AcCellMargin
{
    acCellMarginTop = 1,
    acCellMarginLeft = 2,
    acCellMarginBottom = 4,
    acCellMarginRight = 8,
    acCellMarginHorzSpacing = 16,
    acCellMarginVertSpacing = 32
};

enum __declspec(uuid("27e02945-94a5-4442-9701-bffed27ba2a3"))
AcCellContentLayout
{
    acCellContentLayoutFlow = 1,
    acCellContentLayoutStackedHorizontal = 2,
    acCellContentLayoutStackedVertical = 4
};

enum __declspec(uuid("04050a71-65fd-4ac0-8e4b-cf414caa3bb3"))
AcCellProperty
{
    acInvalidCellProperty = 0,
    acLock = 1,
    acDataType = 2,
    acDataFormat = 4,
    acRotation = 8,
    acScale = 16,
    acAlignmentProperty = 32,
    acContentColor = 64,
    acBackgroundColor = 128,
    acTextStyle = 256,
    acTextHeight = 512,
    acMarginLeft = 1024,
    acMarginTop = 2048,
    acMarginRight = 4096,
    acMarginBottom = 8192,
    acEnableBackgroundColor = 16384,
    acAutoScale = 32768,
    acMergeAll = 65536,
    acFlowDirBtoT = 131072,
    acContentLayout = 262144,
    acDataTypeAndFormat = 6,
    acContentProperties = 33662,
    acBitProperties = 245760,
    acAllCellProperties = 524287
};

enum __declspec(uuid("ac8f793e-4631-4b8c-a1db-85d4a4e7dca3"))
AcGridLineStyle
{
    acGridLineStyleSingle = 1,
    acGridLineStyleDouble = 2
};

enum __declspec(uuid("32d76ddd-1030-48ad-ab8b-06923d7af204"))
AcDataLinkUpdateDirection
{
    acUpdateDataFromSource = 1,
    acUpdateSourceFromData = 2
};

enum __declspec(uuid("611be926-2b4c-41bb-8473-7797d4a95710"))
AcDataLinkUpdateOption
{
    acUpdateOptionNone = 0,
    acUpdateOptionOverwriteContentModifiedAfterUpdate = 131072,
    acUpdateOptionOverwriteFormatModifiedAfterUpdate = 262144,
    acUpdateOptionUpdateFullSourceRange = 524288,
    acUpdateOptionIncludeXrefs = 1048576
};

enum __declspec(uuid("0085552d-6242-469d-ba97-479457694227"))
AcCellContentType
{
    acCellContentTypeUnknown = 0,
    acCellContentTypeValue = 1,
    acCellContentTypeField = 2,
    acCellContentTypeBlock = 4
};

enum __declspec(uuid("54b2fa0c-295a-4d0c-aa35-a4dc802582d1"))
AcCellState
{
    acCellStateNone = 0,
    acCellStateContentLocked = 1,
    acCellStateContentReadOnly = 2,
    acCellStateFormatLocked = 4,
    acCellStateFormatReadOnly = 8,
    acCellStateLinked = 16,
    acCellStateContentModified = 32,
    acCellStateFormatModified = 64
};

enum __declspec(uuid("892adfcd-9b1a-42c8-b9c5-0741f3e45eaf"))
AcCellOption
{
    kCellOptionNone = 0,
    kInheritCellFormat = 1
};

enum __declspec(uuid("8885a4a1-b395-475f-90f2-a114dcdd1385"))
AcTextAttachmentType
{
    acAttachmentTopOfTop = 0,
    acAttachmentMiddleOfTop = 1,
    acAttachmentBottomOfTop = 2,
    acAttachmentBottomOfTopLine = 3,
    acAttachmentMiddle = 4,
    acAttachmentMiddleOfBottom = 5,
    acAttachmentBottomOfBottom = 6,
    acAttachmentBottomLine = 7,
    acAttachmentAllLine = 8
};

enum __declspec(uuid("4f84b668-8192-4758-bbee-b00e3d72c128"))
AcMLeaderType
{
    acStraightLeader = 1,
    acSplineLeader = 2,
    acInVisibleLeader = 0
};

enum __declspec(uuid("3dee47dc-6187-419a-bbdb-150242be2e6b"))
AcMLeaderContentType
{
    acNoneContent = 0,
    acBlockContent = 1,
    acMTextContent = 2
};

enum __declspec(uuid("dfaed186-f862-4b06-b77c-7a5e7971c2e4"))
AcTextAlignmentType
{
    acLeftAlignment = 0,
    acCenterAlignment = 1,
    acRightAlignment = 2
};

enum __declspec(uuid("473b7305-150d-4b24-a855-1580e31b5dd2"))
AcTextAngleType
{
    acInsertAngle = 0,
    acHorizontalAngle = 1,
    acAlwaysRightReadingAngle = 2
};

enum __declspec(uuid("63d9e040-09d7-4474-b109-fd361df1f9a5"))
AcBlockConnectionType
{
    acConnectExtents = 0,
    acConnectBase = 1
};

enum __declspec(uuid("fe1d8595-54da-41eb-8fa0-ffaa30e26ab4"))
AcPredefBlockType
{
    acBlockImperial = 0,
    acBlockSlot = 1,
    acBlockCircle = 2,
    acBlockBox = 3,
    acBlockHexagon = 4,
    acBlockTriangle = 5,
    acBlockUserDefined = 6
};

enum __declspec(uuid("881b9e79-8d40-45f7-9426-4fb417a00199"))
AcDrawLeaderOrderType
{
    acDrawLeaderHeadFirst = 0,
    acDrawLeaderTailFirst = 1
};

enum __declspec(uuid("93186a33-7d5e-45e0-89a4-3278788891b7"))
AcDrawMLeaderOrderType
{
    acDrawContentFirst = 0,
    acDrawLeaderFirst = 1
};

enum __declspec(uuid("95493fe0-4b10-4277-aa9a-501b54a4a225"))
AcSegmentAngleType
{
    acDegreesAny = 0,
    acDegrees15 = 1,
    acDegrees30 = 2,
    acDegrees45 = 3,
    acDegrees60 = 4,
    acDegrees90 = 6,
    acDegreesHorz = 12
};

enum __declspec(uuid("5c3d8d1b-c7ab-4244-ab8b-0ccfee1e8a2c"))
AcTextAttachmentDirection
{
    acAttachmentHorizontal = 0,
    acAttachmentVertical = 1
};

enum __declspec(uuid("0e264eeb-4edd-43cd-8b2b-f13a8bc424f1"))
AcVerticalTextAttachmentType
{
    acAttachmentCenter = 0,
    acAttachmentLinedCenter = 1
};

enum __declspec(uuid("8182e5ce-ca21-41d2-83d1-a35c29b35125"))
AcMeshCreaseType
{
    acNoneCrease = 0,
    acAlwaysCrease = 1,
    acCreaseByLevel = 2
};

enum __declspec(uuid("ec89f06c-8b97-471b-ae00-a54365c1cacd"))
AcColorMethod
{
    acColorMethodByLayer = 192,
    acColorMethodByBlock = 193,
    acColorMethodByRGB = 194,
    acColorMethodByACI = 195,
    acColorMethodForeground = 197
};

struct __declspec(uuid("82174a4a-973d-4fc5-b3e7-5d009936ae57"))
IAcadAcCmColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEntityColor,put=PutEntityColor))
    long EntityColor;
    __declspec(property(get=GetColorName))
    _bstr_t ColorName;
    __declspec(property(get=GetBookName))
    _bstr_t BookName;
    __declspec(property(get=GetRed))
    long Red;
    __declspec(property(get=GetBlue))
    long Blue;
    __declspec(property(get=GetGreen))
    long Green;
    __declspec(property(get=GetColorMethod,put=PutColorMethod))
    enum AcColorMethod ColorMethod;
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    enum AcColor ColorIndex;

    //
    // Wrapper methods for error-handling
    //

    void PutEntityColor (
        long eColor );
    long GetEntityColor ( );
    _bstr_t GetColorName ( );
    _bstr_t GetBookName ( );
    HRESULT SetNames (
        _bstr_t ColorName,
        _bstr_t BookName );
    HRESULT Delete ( );
    long GetRed ( );
    long GetBlue ( );
    long GetGreen ( );
    HRESULT SetRGB (
        long Red,
        long Green,
        long Blue );
    void PutColorMethod (
        enum AcColorMethod Flags );
    enum AcColorMethod GetColorMethod ( );
    enum AcColor GetColorIndex ( );
    void PutColorIndex (
        enum AcColor color );
    HRESULT SetColorBookColor (
        _bstr_t BookName,
        _bstr_t ColorName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_EntityColor (
        /*[in]*/ long eColor ) = 0;
      virtual HRESULT __stdcall get_EntityColor (
        /*[out,retval]*/ long * eColor ) = 0;
      virtual HRESULT __stdcall get_ColorName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_BookName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_SetNames (
        /*[in]*/ BSTR ColorName,
        /*[in]*/ BSTR BookName ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Red (
        /*[out,retval]*/ long * Red ) = 0;
      virtual HRESULT __stdcall get_Blue (
        /*[out,retval]*/ long * Blue ) = 0;
      virtual HRESULT __stdcall get_Green (
        /*[out,retval]*/ long * Green ) = 0;
      virtual HRESULT __stdcall raw_SetRGB (
        /*[in]*/ long Red,
        /*[in]*/ long Green,
        /*[in]*/ long Blue ) = 0;
      virtual HRESULT __stdcall put_ColorMethod (
        /*[in]*/ enum AcColorMethod Flags ) = 0;
      virtual HRESULT __stdcall get_ColorMethod (
        /*[out,retval]*/ enum AcColorMethod * Flags ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ enum AcColor * color ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ enum AcColor color ) = 0;
      virtual HRESULT __stdcall raw_SetColorBookColor (
        /*[in]*/ BSTR BookName,
        /*[in]*/ BSTR ColorName ) = 0;
};

struct __declspec(uuid("b4db8063-df62-413b-a300-8847f8a1fb86"))
IAcadHyperlink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetURL,put=PutURL))
    _bstr_t URL;
    __declspec(property(get=GetURLDescription,put=PutURLDescription))
    _bstr_t URLDescription;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetURLNamedLocation,put=PutURLNamedLocation))
    _bstr_t URLNamedLocation;

    //
    // Wrapper methods for error-handling
    //

    void PutURL (
        _bstr_t URLPath );
    _bstr_t GetURL ( );
    void PutURLDescription (
        _bstr_t Description );
    _bstr_t GetURLDescription ( );
    IDispatchPtr GetApplication ( );
    HRESULT Delete ( );
    void PutURLNamedLocation (
        _bstr_t Location );
    _bstr_t GetURLNamedLocation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_URL (
        /*[in]*/ BSTR URLPath ) = 0;
      virtual HRESULT __stdcall get_URL (
        /*[out,retval]*/ BSTR * URLPath ) = 0;
      virtual HRESULT __stdcall put_URLDescription (
        /*[in]*/ BSTR Description ) = 0;
      virtual HRESULT __stdcall get_URLDescription (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ApplicationObject ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall put_URLNamedLocation (
        /*[in]*/ BSTR Location ) = 0;
      virtual HRESULT __stdcall get_URLNamedLocation (
        /*[out,retval]*/ BSTR * Location ) = 0;
};

struct __declspec(uuid("d803123c-9777-47a8-a7b4-60c09762ae0d"))
IAcadHyperlinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadHyperlinkPtr Item (
        long Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetApplication ( );
    IAcadHyperlinkPtr Add (
        _bstr_t Name,
        const _variant_t & Description = vtMissing,
        const _variant_t & NamedLocation = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAcadHyperlink * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ApplicationObject ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Description,
        /*[in]*/ VARIANT NamedLocation,
        /*[out,retval]*/ struct IAcadHyperlink * * pHyperlink ) = 0;
};

enum __declspec(uuid("a4d9f256-1da0-422a-9971-6fcf2a87e28a"))
AcSplineKnotParameterizationType
{
    acChord = 0,
    acSqrtChord = 1,
    acUniformParam = 2,
    acCustomParameterization = 15
};

enum __declspec(uuid("7ec6869a-5a6a-4760-80cd-78f311407efa"))
AcSplineFrameType
{
    acShow = 0,
    acHide = 1
};

enum __declspec(uuid("b8c57e2b-b451-4f86-b700-6872cbe266d3"))
AcSplineMethodType
{
    acFit = 0,
    acControlVertices = 1
};

struct __declspec(uuid("4e77067c-83ba-4446-86de-1136e07542a7"))
IAcadSectionTypeSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIntersectionFillLineweight,put=PutIntersectionFillLineweight))
    ACAD_LWEIGHT IntersectionFillLineweight;
    __declspec(property(get=GetGenerationOptions,put=PutGenerationOptions))
    enum AcSectionGeneration GenerationOptions;
    __declspec(property(get=GetSourceObjects,put=PutSourceObjects))
    _variant_t SourceObjects;
    __declspec(property(get=GetDestinationBlock,put=PutDestinationBlock))
    _variant_t DestinationBlock;
    __declspec(property(get=GetDestinationFile,put=PutDestinationFile))
    _bstr_t DestinationFile;
    __declspec(property(get=GetIntersectionFillFaceTransparency,put=PutIntersectionFillFaceTransparency))
    long IntersectionFillFaceTransparency;
    __declspec(property(get=GetBackgroundLinesVisible,put=PutBackgroundLinesVisible))
    VARIANT_BOOL BackgroundLinesVisible;
    __declspec(property(get=GetBackgroundLinesHiddenLine,put=PutBackgroundLinesHiddenLine))
    VARIANT_BOOL BackgroundLinesHiddenLine;
    __declspec(property(get=GetBackgroundLinesColor,put=PutBackgroundLinesColor))
    IAcadAcCmColorPtr BackgroundLinesColor;
    __declspec(property(get=GetBackgroundLinesLayer,put=PutBackgroundLinesLayer))
    _bstr_t BackgroundLinesLayer;
    __declspec(property(get=GetBackgroundLinesLinetype,put=PutBackgroundLinesLinetype))
    _bstr_t BackgroundLinesLinetype;
    __declspec(property(get=GetBackgroundLinesLinetypeScale,put=PutBackgroundLinesLinetypeScale))
    ACAD_NOUNITS BackgroundLinesLinetypeScale;
    __declspec(property(get=GetBackgroundLinesPlotStyleName,put=PutBackgroundLinesPlotStyleName))
    _bstr_t BackgroundLinesPlotStyleName;
    __declspec(property(get=GetBackgroundLinesLineweight,put=PutBackgroundLinesLineweight))
    ACAD_LWEIGHT BackgroundLinesLineweight;
    __declspec(property(get=GetForegroundLinesVisible,put=PutForegroundLinesVisible))
    VARIANT_BOOL ForegroundLinesVisible;
    __declspec(property(get=GetForegroundLinesHiddenLine,put=PutForegroundLinesHiddenLine))
    VARIANT_BOOL ForegroundLinesHiddenLine;
    __declspec(property(get=GetForegroundLinesColor,put=PutForegroundLinesColor))
    IAcadAcCmColorPtr ForegroundLinesColor;
    __declspec(property(get=GetForegroundLinesLayer,put=PutForegroundLinesLayer))
    _bstr_t ForegroundLinesLayer;
    __declspec(property(get=GetForegroundLinesLinetype,put=PutForegroundLinesLinetype))
    _bstr_t ForegroundLinesLinetype;
    __declspec(property(get=GetForegroundLinesLinetypeScale,put=PutForegroundLinesLinetypeScale))
    ACAD_NOUNITS ForegroundLinesLinetypeScale;
    __declspec(property(get=GetForegroundLinesPlotStyleName,put=PutForegroundLinesPlotStyleName))
    _bstr_t ForegroundLinesPlotStyleName;
    __declspec(property(get=GetForegroundLinesLineweight,put=PutForegroundLinesLineweight))
    ACAD_LWEIGHT ForegroundLinesLineweight;
    __declspec(property(get=GetForegroundLinesFaceTransparency,put=PutForegroundLinesFaceTransparency))
    long ForegroundLinesFaceTransparency;
    __declspec(property(get=GetForegroundLinesEdgeTransparency,put=PutForegroundLinesEdgeTransparency))
    long ForegroundLinesEdgeTransparency;
    __declspec(property(get=GetCurveTangencyLinesVisible,put=PutCurveTangencyLinesVisible))
    VARIANT_BOOL CurveTangencyLinesVisible;
    __declspec(property(get=GetCurveTangencyLinesColor,put=PutCurveTangencyLinesColor))
    IAcadAcCmColorPtr CurveTangencyLinesColor;
    __declspec(property(get=GetIntersectionBoundaryColor,put=PutIntersectionBoundaryColor))
    IAcadAcCmColorPtr IntersectionBoundaryColor;
    __declspec(property(get=GetIntersectionBoundaryLayer,put=PutIntersectionBoundaryLayer))
    _bstr_t IntersectionBoundaryLayer;
    __declspec(property(get=GetIntersectionBoundaryLinetype,put=PutIntersectionBoundaryLinetype))
    _bstr_t IntersectionBoundaryLinetype;
    __declspec(property(get=GetIntersectionBoundaryLinetypeScale,put=PutIntersectionBoundaryLinetypeScale))
    ACAD_NOUNITS IntersectionBoundaryLinetypeScale;
    __declspec(property(get=GetIntersectionBoundaryPlotStyleName,put=PutIntersectionBoundaryPlotStyleName))
    _bstr_t IntersectionBoundaryPlotStyleName;
    __declspec(property(get=GetIntersectionBoundaryLineweight,put=PutIntersectionBoundaryLineweight))
    ACAD_LWEIGHT IntersectionBoundaryLineweight;
    __declspec(property(get=GetIntersectionBoundaryDivisionLines,put=PutIntersectionBoundaryDivisionLines))
    VARIANT_BOOL IntersectionBoundaryDivisionLines;
    __declspec(property(get=GetCurveTangencyLinesLayer,put=PutCurveTangencyLinesLayer))
    _bstr_t CurveTangencyLinesLayer;
    __declspec(property(get=GetCurveTangencyLinesLinetype,put=PutCurveTangencyLinesLinetype))
    _bstr_t CurveTangencyLinesLinetype;
    __declspec(property(get=GetCurveTangencyLinesLinetypeScale,put=PutCurveTangencyLinesLinetypeScale))
    ACAD_NOUNITS CurveTangencyLinesLinetypeScale;
    __declspec(property(get=GetCurveTangencyLinesPlotStyleName,put=PutCurveTangencyLinesPlotStyleName))
    _bstr_t CurveTangencyLinesPlotStyleName;
    __declspec(property(get=GetCurveTangencyLinesLineweight,put=PutCurveTangencyLinesLineweight))
    ACAD_LWEIGHT CurveTangencyLinesLineweight;
    __declspec(property(get=GetIntersectionFillVisible,put=PutIntersectionFillVisible))
    VARIANT_BOOL IntersectionFillVisible;
    __declspec(property(get=GetIntersectionFillHatchPatternType,put=PutIntersectionFillHatchPatternType))
    enum AcPatternType IntersectionFillHatchPatternType;
    __declspec(property(get=GetIntersectionFillHatchPatternName,put=PutIntersectionFillHatchPatternName))
    _bstr_t IntersectionFillHatchPatternName;
    __declspec(property(get=GetIntersectionFillHatchAngle,put=PutIntersectionFillHatchAngle))
    ACAD_ANGLE IntersectionFillHatchAngle;
    __declspec(property(get=GetIntersectionFillHatchScale,put=PutIntersectionFillHatchScale))
    ACAD_NOUNITS IntersectionFillHatchScale;
    __declspec(property(get=GetIntersectionFillHatchSpacing,put=PutIntersectionFillHatchSpacing))
    double IntersectionFillHatchSpacing;
    __declspec(property(get=GetIntersectionFillColor,put=PutIntersectionFillColor))
    IAcadAcCmColorPtr IntersectionFillColor;
    __declspec(property(get=GetIntersectionFillLayer,put=PutIntersectionFillLayer))
    _bstr_t IntersectionFillLayer;
    __declspec(property(get=GetIntersectionFillLinetype,put=PutIntersectionFillLinetype))
    _bstr_t IntersectionFillLinetype;
    __declspec(property(get=GetIntersectionFillLinetypeScale,put=PutIntersectionFillLinetypeScale))
    ACAD_NOUNITS IntersectionFillLinetypeScale;
    __declspec(property(get=GetIntersectionFillPlotStyleName,put=PutIntersectionFillPlotStyleName))
    _bstr_t IntersectionFillPlotStyleName;

    //
    // Wrapper methods for error-handling
    //

    enum AcSectionGeneration GetGenerationOptions ( );
    void PutGenerationOptions (
        enum AcSectionGeneration pVal );
    _variant_t GetSourceObjects ( );
    void PutSourceObjects (
        const _variant_t & pVal );
    _variant_t GetDestinationBlock ( );
    void PutDestinationBlock (
        const _variant_t & pVal );
    _bstr_t GetDestinationFile ( );
    void PutDestinationFile (
        _bstr_t pVal );
    IAcadAcCmColorPtr GetIntersectionBoundaryColor ( );
    void PutIntersectionBoundaryColor (
        struct IAcadAcCmColor * pColor );
    _bstr_t GetIntersectionBoundaryLayer ( );
    void PutIntersectionBoundaryLayer (
        _bstr_t Layer );
    _bstr_t GetIntersectionBoundaryLinetype ( );
    void PutIntersectionBoundaryLinetype (
        _bstr_t Linetype );
    ACAD_NOUNITS GetIntersectionBoundaryLinetypeScale ( );
    void PutIntersectionBoundaryLinetypeScale (
        ACAD_NOUNITS ltScale );
    _bstr_t GetIntersectionBoundaryPlotStyleName ( );
    void PutIntersectionBoundaryPlotStyleName (
        _bstr_t plotStyle );
    ACAD_LWEIGHT GetIntersectionBoundaryLineweight ( );
    void PutIntersectionBoundaryLineweight (
        ACAD_LWEIGHT Lineweight );
    VARIANT_BOOL GetIntersectionBoundaryDivisionLines ( );
    void PutIntersectionBoundaryDivisionLines (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIntersectionFillVisible ( );
    void PutIntersectionFillVisible (
        VARIANT_BOOL pVal );
    enum AcPatternType GetIntersectionFillHatchPatternType ( );
    void PutIntersectionFillHatchPatternType (
        enum AcPatternType pVal );
    _bstr_t GetIntersectionFillHatchPatternName ( );
    void PutIntersectionFillHatchPatternName (
        _bstr_t pVal );
    ACAD_ANGLE GetIntersectionFillHatchAngle ( );
    void PutIntersectionFillHatchAngle (
        ACAD_ANGLE pVal );
    ACAD_NOUNITS GetIntersectionFillHatchScale ( );
    void PutIntersectionFillHatchScale (
        ACAD_NOUNITS pVal );
    double GetIntersectionFillHatchSpacing ( );
    void PutIntersectionFillHatchSpacing (
        double pVal );
    IAcadAcCmColorPtr GetIntersectionFillColor ( );
    void PutIntersectionFillColor (
        struct IAcadAcCmColor * pColor );
    _bstr_t GetIntersectionFillLayer ( );
    void PutIntersectionFillLayer (
        _bstr_t Layer );
    _bstr_t GetIntersectionFillLinetype ( );
    void PutIntersectionFillLinetype (
        _bstr_t Linetype );
    ACAD_NOUNITS GetIntersectionFillLinetypeScale ( );
    void PutIntersectionFillLinetypeScale (
        ACAD_NOUNITS ltScale );
    _bstr_t GetIntersectionFillPlotStyleName ( );
    void PutIntersectionFillPlotStyleName (
        _bstr_t plotStyle );
    ACAD_LWEIGHT GetIntersectionFillLineweight ( );
    void PutIntersectionFillLineweight (
        ACAD_LWEIGHT Lineweight );
    long GetIntersectionFillFaceTransparency ( );
    void PutIntersectionFillFaceTransparency (
        long pVal );
    VARIANT_BOOL GetBackgroundLinesVisible ( );
    void PutBackgroundLinesVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetBackgroundLinesHiddenLine ( );
    void PutBackgroundLinesHiddenLine (
        VARIANT_BOOL pVal );
    IAcadAcCmColorPtr GetBackgroundLinesColor ( );
    void PutBackgroundLinesColor (
        struct IAcadAcCmColor * pColor );
    _bstr_t GetBackgroundLinesLayer ( );
    void PutBackgroundLinesLayer (
        _bstr_t Layer );
    _bstr_t GetBackgroundLinesLinetype ( );
    void PutBackgroundLinesLinetype (
        _bstr_t Linetype );
    ACAD_NOUNITS GetBackgroundLinesLinetypeScale ( );
    void PutBackgroundLinesLinetypeScale (
        ACAD_NOUNITS ltScale );
    _bstr_t GetBackgroundLinesPlotStyleName ( );
    void PutBackgroundLinesPlotStyleName (
        _bstr_t plotStyle );
    ACAD_LWEIGHT GetBackgroundLinesLineweight ( );
    void PutBackgroundLinesLineweight (
        ACAD_LWEIGHT Lineweight );
    VARIANT_BOOL GetForegroundLinesVisible ( );
    void PutForegroundLinesVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetForegroundLinesHiddenLine ( );
    void PutForegroundLinesHiddenLine (
        VARIANT_BOOL pVal );
    IAcadAcCmColorPtr GetForegroundLinesColor ( );
    void PutForegroundLinesColor (
        struct IAcadAcCmColor * pColor );
    _bstr_t GetForegroundLinesLayer ( );
    void PutForegroundLinesLayer (
        _bstr_t Layer );
    _bstr_t GetForegroundLinesLinetype ( );
    void PutForegroundLinesLinetype (
        _bstr_t Linetype );
    ACAD_NOUNITS GetForegroundLinesLinetypeScale ( );
    void PutForegroundLinesLinetypeScale (
        ACAD_NOUNITS ltScale );
    _bstr_t GetForegroundLinesPlotStyleName ( );
    void PutForegroundLinesPlotStyleName (
        _bstr_t plotStyle );
    ACAD_LWEIGHT GetForegroundLinesLineweight ( );
    void PutForegroundLinesLineweight (
        ACAD_LWEIGHT Lineweight );
    long GetForegroundLinesFaceTransparency ( );
    void PutForegroundLinesFaceTransparency (
        long pVal );
    long GetForegroundLinesEdgeTransparency ( );
    void PutForegroundLinesEdgeTransparency (
        long pVal );
    VARIANT_BOOL GetCurveTangencyLinesVisible ( );
    void PutCurveTangencyLinesVisible (
        VARIANT_BOOL pVal );
    IAcadAcCmColorPtr GetCurveTangencyLinesColor ( );
    void PutCurveTangencyLinesColor (
        struct IAcadAcCmColor * pColor );
    _bstr_t GetCurveTangencyLinesLayer ( );
    void PutCurveTangencyLinesLayer (
        _bstr_t Layer );
    _bstr_t GetCurveTangencyLinesLinetype ( );
    void PutCurveTangencyLinesLinetype (
        _bstr_t Linetype );
    ACAD_NOUNITS GetCurveTangencyLinesLinetypeScale ( );
    void PutCurveTangencyLinesLinetypeScale (
        ACAD_NOUNITS ltScale );
    _bstr_t GetCurveTangencyLinesPlotStyleName ( );
    void PutCurveTangencyLinesPlotStyleName (
        _bstr_t plotStyle );
    ACAD_LWEIGHT GetCurveTangencyLinesLineweight ( );
    void PutCurveTangencyLinesLineweight (
        ACAD_LWEIGHT Lineweight );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GenerationOptions (
        /*[out,retval]*/ enum AcSectionGeneration * pVal ) = 0;
      virtual HRESULT __stdcall put_GenerationOptions (
        /*[in]*/ enum AcSectionGeneration pVal ) = 0;
      virtual HRESULT __stdcall get_SourceObjects (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SourceObjects (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_DestinationBlock (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_DestinationBlock (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_DestinationFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DestinationFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IntersectionBoundaryColor (
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall put_IntersectionBoundaryColor (
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall get_IntersectionBoundaryLayer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall put_IntersectionBoundaryLayer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_IntersectionBoundaryLinetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_IntersectionBoundaryLinetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_IntersectionBoundaryLinetypeScale (
        /*[out,retval]*/ ACAD_NOUNITS * ltScale ) = 0;
      virtual HRESULT __stdcall put_IntersectionBoundaryLinetypeScale (
        /*[in]*/ ACAD_NOUNITS ltScale ) = 0;
      virtual HRESULT __stdcall get_IntersectionBoundaryPlotStyleName (
        /*[out,retval]*/ BSTR * plotStyle ) = 0;
      virtual HRESULT __stdcall put_IntersectionBoundaryPlotStyleName (
        /*[in]*/ BSTR plotStyle ) = 0;
      virtual HRESULT __stdcall get_IntersectionBoundaryLineweight (
        /*[out,retval]*/ ACAD_LWEIGHT * Lineweight ) = 0;
      virtual HRESULT __stdcall put_IntersectionBoundaryLineweight (
        /*[in]*/ ACAD_LWEIGHT Lineweight ) = 0;
      virtual HRESULT __stdcall get_IntersectionBoundaryDivisionLines (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IntersectionBoundaryDivisionLines (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IntersectionFillVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IntersectionFillVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IntersectionFillHatchPatternType (
        /*[out,retval]*/ enum AcPatternType * pVal ) = 0;
      virtual HRESULT __stdcall put_IntersectionFillHatchPatternType (
        /*[in]*/ enum AcPatternType pVal ) = 0;
      virtual HRESULT __stdcall get_IntersectionFillHatchPatternName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IntersectionFillHatchPatternName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IntersectionFillHatchAngle (
        /*[out,retval]*/ ACAD_ANGLE * pVal ) = 0;
      virtual HRESULT __stdcall put_IntersectionFillHatchAngle (
        /*[in]*/ ACAD_ANGLE pVal ) = 0;
      virtual HRESULT __stdcall get_IntersectionFillHatchScale (
        /*[out,retval]*/ ACAD_NOUNITS * pVal ) = 0;
      virtual HRESULT __stdcall put_IntersectionFillHatchScale (
        /*[in]*/ ACAD_NOUNITS pVal ) = 0;
      virtual HRESULT __stdcall get_IntersectionFillHatchSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_IntersectionFillHatchSpacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IntersectionFillColor (
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall put_IntersectionFillColor (
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall get_IntersectionFillLayer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall put_IntersectionFillLayer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_IntersectionFillLinetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_IntersectionFillLinetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_IntersectionFillLinetypeScale (
        /*[out,retval]*/ ACAD_NOUNITS * ltScale ) = 0;
      virtual HRESULT __stdcall put_IntersectionFillLinetypeScale (
        /*[in]*/ ACAD_NOUNITS ltScale ) = 0;
      virtual HRESULT __stdcall get_IntersectionFillPlotStyleName (
        /*[out,retval]*/ BSTR * plotStyle ) = 0;
      virtual HRESULT __stdcall put_IntersectionFillPlotStyleName (
        /*[in]*/ BSTR plotStyle ) = 0;
      virtual HRESULT __stdcall get_IntersectionFillLineweight (
        /*[out,retval]*/ ACAD_LWEIGHT * Lineweight ) = 0;
      virtual HRESULT __stdcall put_IntersectionFillLineweight (
        /*[in]*/ ACAD_LWEIGHT Lineweight ) = 0;
      virtual HRESULT __stdcall get_IntersectionFillFaceTransparency (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IntersectionFillFaceTransparency (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BackgroundLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BackgroundLinesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BackgroundLinesHiddenLine (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BackgroundLinesHiddenLine (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BackgroundLinesColor (
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall put_BackgroundLinesColor (
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall get_BackgroundLinesLayer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall put_BackgroundLinesLayer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_BackgroundLinesLinetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_BackgroundLinesLinetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_BackgroundLinesLinetypeScale (
        /*[out,retval]*/ ACAD_NOUNITS * ltScale ) = 0;
      virtual HRESULT __stdcall put_BackgroundLinesLinetypeScale (
        /*[in]*/ ACAD_NOUNITS ltScale ) = 0;
      virtual HRESULT __stdcall get_BackgroundLinesPlotStyleName (
        /*[out,retval]*/ BSTR * plotStyle ) = 0;
      virtual HRESULT __stdcall put_BackgroundLinesPlotStyleName (
        /*[in]*/ BSTR plotStyle ) = 0;
      virtual HRESULT __stdcall get_BackgroundLinesLineweight (
        /*[out,retval]*/ ACAD_LWEIGHT * Lineweight ) = 0;
      virtual HRESULT __stdcall put_BackgroundLinesLineweight (
        /*[in]*/ ACAD_LWEIGHT Lineweight ) = 0;
      virtual HRESULT __stdcall get_ForegroundLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ForegroundLinesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ForegroundLinesHiddenLine (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ForegroundLinesHiddenLine (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ForegroundLinesColor (
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall put_ForegroundLinesColor (
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall get_ForegroundLinesLayer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall put_ForegroundLinesLayer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_ForegroundLinesLinetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_ForegroundLinesLinetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ForegroundLinesLinetypeScale (
        /*[out,retval]*/ ACAD_NOUNITS * ltScale ) = 0;
      virtual HRESULT __stdcall put_ForegroundLinesLinetypeScale (
        /*[in]*/ ACAD_NOUNITS ltScale ) = 0;
      virtual HRESULT __stdcall get_ForegroundLinesPlotStyleName (
        /*[out,retval]*/ BSTR * plotStyle ) = 0;
      virtual HRESULT __stdcall put_ForegroundLinesPlotStyleName (
        /*[in]*/ BSTR plotStyle ) = 0;
      virtual HRESULT __stdcall get_ForegroundLinesLineweight (
        /*[out,retval]*/ ACAD_LWEIGHT * Lineweight ) = 0;
      virtual HRESULT __stdcall put_ForegroundLinesLineweight (
        /*[in]*/ ACAD_LWEIGHT Lineweight ) = 0;
      virtual HRESULT __stdcall get_ForegroundLinesFaceTransparency (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ForegroundLinesFaceTransparency (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ForegroundLinesEdgeTransparency (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ForegroundLinesEdgeTransparency (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CurveTangencyLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CurveTangencyLinesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CurveTangencyLinesColor (
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall put_CurveTangencyLinesColor (
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall get_CurveTangencyLinesLayer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall put_CurveTangencyLinesLayer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_CurveTangencyLinesLinetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_CurveTangencyLinesLinetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_CurveTangencyLinesLinetypeScale (
        /*[out,retval]*/ ACAD_NOUNITS * ltScale ) = 0;
      virtual HRESULT __stdcall put_CurveTangencyLinesLinetypeScale (
        /*[in]*/ ACAD_NOUNITS ltScale ) = 0;
      virtual HRESULT __stdcall get_CurveTangencyLinesPlotStyleName (
        /*[out,retval]*/ BSTR * plotStyle ) = 0;
      virtual HRESULT __stdcall put_CurveTangencyLinesPlotStyleName (
        /*[in]*/ BSTR plotStyle ) = 0;
      virtual HRESULT __stdcall get_CurveTangencyLinesLineweight (
        /*[out,retval]*/ ACAD_LWEIGHT * Lineweight ) = 0;
      virtual HRESULT __stdcall put_CurveTangencyLinesLineweight (
        /*[in]*/ ACAD_LWEIGHT Lineweight ) = 0;
};

struct __declspec(uuid("5b478006-beed-4daa-ac97-3bf847c13c72"))
IAcadDatabasePreferences : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetSolidFill,put=PutSolidFill))
    VARIANT_BOOL SolidFill;
    __declspec(property(get=GetXRefEdit,put=PutXRefEdit))
    VARIANT_BOOL XRefEdit;
    __declspec(property(get=GetXRefLayerVisibility,put=PutXRefLayerVisibility))
    VARIANT_BOOL XRefLayerVisibility;
    __declspec(property(get=GetOLELaunch,put=PutOLELaunch))
    VARIANT_BOOL OLELaunch;
    __declspec(property(get=GetAllowLongSymbolNames,put=PutAllowLongSymbolNames))
    VARIANT_BOOL AllowLongSymbolNames;
    __declspec(property(get=GetObjectSortBySelection,put=PutObjectSortBySelection))
    VARIANT_BOOL ObjectSortBySelection;
    __declspec(property(get=GetObjectSortBySnap,put=PutObjectSortBySnap))
    VARIANT_BOOL ObjectSortBySnap;
    __declspec(property(get=GetObjectSortByRedraws,put=PutObjectSortByRedraws))
    VARIANT_BOOL ObjectSortByRedraws;
    __declspec(property(get=GetObjectSortByRegens,put=PutObjectSortByRegens))
    VARIANT_BOOL ObjectSortByRegens;
    __declspec(property(get=GetObjectSortByPlotting,put=PutObjectSortByPlotting))
    VARIANT_BOOL ObjectSortByPlotting;
    __declspec(property(get=GetObjectSortByPSOutput,put=PutObjectSortByPSOutput))
    VARIANT_BOOL ObjectSortByPSOutput;
    __declspec(property(get=GetContourLinesPerSurface,put=PutContourLinesPerSurface))
    long ContourLinesPerSurface;
    __declspec(property(get=GetDisplaySilhouette,put=PutDisplaySilhouette))
    VARIANT_BOOL DisplaySilhouette;
    __declspec(property(get=GetMaxActiveViewports,put=PutMaxActiveViewports))
    long MaxActiveViewports;
    __declspec(property(get=GetRenderSmoothness,put=PutRenderSmoothness))
    double RenderSmoothness;
    __declspec(property(get=GetSegmentPerPolyline,put=PutSegmentPerPolyline))
    long SegmentPerPolyline;
    __declspec(property(get=GetTextFrameDisplay,put=PutTextFrameDisplay))
    VARIANT_BOOL TextFrameDisplay;
    __declspec(property(get=GetLineweight,put=PutLineweight))
    enum AcLineWeight Lineweight;
    __declspec(property(get=GetLineWeightDisplay,put=PutLineWeightDisplay))
    VARIANT_BOOL LineWeightDisplay;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    VARIANT_BOOL GetSolidFill ( );
    void PutSolidFill (
        VARIANT_BOOL Fill );
    VARIANT_BOOL GetXRefEdit ( );
    void PutXRefEdit (
        VARIANT_BOOL Edit );
    VARIANT_BOOL GetXRefLayerVisibility ( );
    void PutXRefLayerVisibility (
        VARIANT_BOOL XRefLayerVis );
    VARIANT_BOOL GetOLELaunch ( );
    void PutOLELaunch (
        VARIANT_BOOL Launch );
    VARIANT_BOOL GetAllowLongSymbolNames ( );
    void PutAllowLongSymbolNames (
        VARIANT_BOOL LongNames );
    VARIANT_BOOL GetObjectSortBySelection ( );
    void PutObjectSortBySelection (
        VARIANT_BOOL Sort );
    VARIANT_BOOL GetObjectSortBySnap ( );
    void PutObjectSortBySnap (
        VARIANT_BOOL Sort );
    VARIANT_BOOL GetObjectSortByRedraws ( );
    void PutObjectSortByRedraws (
        VARIANT_BOOL Sort );
    VARIANT_BOOL GetObjectSortByRegens ( );
    void PutObjectSortByRegens (
        VARIANT_BOOL Sort );
    VARIANT_BOOL GetObjectSortByPlotting ( );
    void PutObjectSortByPlotting (
        VARIANT_BOOL Sort );
    VARIANT_BOOL GetObjectSortByPSOutput ( );
    void PutObjectSortByPSOutput (
        VARIANT_BOOL Sort );
    void PutContourLinesPerSurface (
        long Path );
    long GetContourLinesPerSurface ( );
    void PutDisplaySilhouette (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetDisplaySilhouette ( );
    void PutMaxActiveViewports (
        long Path );
    long GetMaxActiveViewports ( );
    void PutRenderSmoothness (
        double Path );
    double GetRenderSmoothness ( );
    void PutSegmentPerPolyline (
        long Path );
    long GetSegmentPerPolyline ( );
    void PutTextFrameDisplay (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetTextFrameDisplay ( );
    void PutLineweight (
        enum AcLineWeight Path );
    enum AcLineWeight GetLineweight ( );
    void PutLineWeightDisplay (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetLineWeightDisplay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_SolidFill (
        /*[out,retval]*/ VARIANT_BOOL * Fill ) = 0;
      virtual HRESULT __stdcall put_SolidFill (
        /*[in]*/ VARIANT_BOOL Fill ) = 0;
      virtual HRESULT __stdcall get_XRefEdit (
        /*[out,retval]*/ VARIANT_BOOL * Edit ) = 0;
      virtual HRESULT __stdcall put_XRefEdit (
        /*[in]*/ VARIANT_BOOL Edit ) = 0;
      virtual HRESULT __stdcall get_XRefLayerVisibility (
        /*[out,retval]*/ VARIANT_BOOL * XRefLayerVis ) = 0;
      virtual HRESULT __stdcall put_XRefLayerVisibility (
        /*[in]*/ VARIANT_BOOL XRefLayerVis ) = 0;
      virtual HRESULT __stdcall get_OLELaunch (
        /*[out,retval]*/ VARIANT_BOOL * Launch ) = 0;
      virtual HRESULT __stdcall put_OLELaunch (
        /*[in]*/ VARIANT_BOOL Launch ) = 0;
      virtual HRESULT __stdcall get_AllowLongSymbolNames (
        /*[out,retval]*/ VARIANT_BOOL * LongNames ) = 0;
      virtual HRESULT __stdcall put_AllowLongSymbolNames (
        /*[in]*/ VARIANT_BOOL LongNames ) = 0;
      virtual HRESULT __stdcall get_ObjectSortBySelection (
        /*[out,retval]*/ VARIANT_BOOL * Sort ) = 0;
      virtual HRESULT __stdcall put_ObjectSortBySelection (
        /*[in]*/ VARIANT_BOOL Sort ) = 0;
      virtual HRESULT __stdcall get_ObjectSortBySnap (
        /*[out,retval]*/ VARIANT_BOOL * Sort ) = 0;
      virtual HRESULT __stdcall put_ObjectSortBySnap (
        /*[in]*/ VARIANT_BOOL Sort ) = 0;
      virtual HRESULT __stdcall get_ObjectSortByRedraws (
        /*[out,retval]*/ VARIANT_BOOL * Sort ) = 0;
      virtual HRESULT __stdcall put_ObjectSortByRedraws (
        /*[in]*/ VARIANT_BOOL Sort ) = 0;
      virtual HRESULT __stdcall get_ObjectSortByRegens (
        /*[out,retval]*/ VARIANT_BOOL * Sort ) = 0;
      virtual HRESULT __stdcall put_ObjectSortByRegens (
        /*[in]*/ VARIANT_BOOL Sort ) = 0;
      virtual HRESULT __stdcall get_ObjectSortByPlotting (
        /*[out,retval]*/ VARIANT_BOOL * Sort ) = 0;
      virtual HRESULT __stdcall put_ObjectSortByPlotting (
        /*[in]*/ VARIANT_BOOL Sort ) = 0;
      virtual HRESULT __stdcall get_ObjectSortByPSOutput (
        /*[out,retval]*/ VARIANT_BOOL * Sort ) = 0;
      virtual HRESULT __stdcall put_ObjectSortByPSOutput (
        /*[in]*/ VARIANT_BOOL Sort ) = 0;
      virtual HRESULT __stdcall put_ContourLinesPerSurface (
        /*[in]*/ long Path ) = 0;
      virtual HRESULT __stdcall get_ContourLinesPerSurface (
        /*[out,retval]*/ long * Path ) = 0;
      virtual HRESULT __stdcall put_DisplaySilhouette (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_DisplaySilhouette (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_MaxActiveViewports (
        /*[in]*/ long Path ) = 0;
      virtual HRESULT __stdcall get_MaxActiveViewports (
        /*[out,retval]*/ long * Path ) = 0;
      virtual HRESULT __stdcall put_RenderSmoothness (
        /*[in]*/ double Path ) = 0;
      virtual HRESULT __stdcall get_RenderSmoothness (
        /*[out,retval]*/ double * Path ) = 0;
      virtual HRESULT __stdcall put_SegmentPerPolyline (
        /*[in]*/ long Path ) = 0;
      virtual HRESULT __stdcall get_SegmentPerPolyline (
        /*[out,retval]*/ long * Path ) = 0;
      virtual HRESULT __stdcall put_TextFrameDisplay (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_TextFrameDisplay (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_Lineweight (
        /*[in]*/ enum AcLineWeight Path ) = 0;
      virtual HRESULT __stdcall get_Lineweight (
        /*[out,retval]*/ enum AcLineWeight * Path ) = 0;
      virtual HRESULT __stdcall put_LineWeightDisplay (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_LineWeightDisplay (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
};

struct __declspec(uuid("37d2d493-cbfb-474b-b9b9-4bac8cf79678"))
IAcadSummaryInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetComments,put=PutComments))
    _bstr_t Comments;
    __declspec(property(get=GetHyperlinkBase,put=PutHyperlinkBase))
    _bstr_t HyperlinkBase;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetLastSavedBy,put=PutLastSavedBy))
    _bstr_t LastSavedBy;
    __declspec(property(get=GetRevisionNumber,put=PutRevisionNumber))
    _bstr_t RevisionNumber;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetAuthor ( );
    void PutAuthor (
        _bstr_t pAuthor );
    _bstr_t GetComments ( );
    void PutComments (
        _bstr_t pComments );
    _bstr_t GetHyperlinkBase ( );
    void PutHyperlinkBase (
        _bstr_t pHyperlinkBase );
    _bstr_t GetKeywords ( );
    void PutKeywords (
        _bstr_t pKeywords );
    _bstr_t GetLastSavedBy ( );
    void PutLastSavedBy (
        _bstr_t pLastSavedBy );
    _bstr_t GetRevisionNumber ( );
    void PutRevisionNumber (
        _bstr_t pRevisionNumber );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t pSubject );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t pTitle );
    int NumCustomInfo ( );
    HRESULT GetCustomByIndex (
        int Index,
        BSTR * pKey,
        BSTR * pValue );
    HRESULT GetCustomByKey (
        _bstr_t key,
        BSTR * pValue );
    HRESULT SetCustomByIndex (
        int Index,
        _bstr_t key,
        _bstr_t Value );
    HRESULT SetCustomByKey (
        _bstr_t key,
        _bstr_t Value );
    HRESULT AddCustomInfo (
        _bstr_t key,
        _bstr_t Value );
    HRESULT RemoveCustomByIndex (
        int Index );
    HRESULT RemoveCustomByKey (
        _bstr_t key );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * pAuthor ) = 0;
      virtual HRESULT __stdcall put_Author (
        /*[in]*/ BSTR pAuthor ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ BSTR * pComments ) = 0;
      virtual HRESULT __stdcall put_Comments (
        /*[in]*/ BSTR pComments ) = 0;
      virtual HRESULT __stdcall get_HyperlinkBase (
        /*[out,retval]*/ BSTR * pHyperlinkBase ) = 0;
      virtual HRESULT __stdcall put_HyperlinkBase (
        /*[in]*/ BSTR pHyperlinkBase ) = 0;
      virtual HRESULT __stdcall get_Keywords (
        /*[out,retval]*/ BSTR * pKeywords ) = 0;
      virtual HRESULT __stdcall put_Keywords (
        /*[in]*/ BSTR pKeywords ) = 0;
      virtual HRESULT __stdcall get_LastSavedBy (
        /*[out,retval]*/ BSTR * pLastSavedBy ) = 0;
      virtual HRESULT __stdcall put_LastSavedBy (
        /*[in]*/ BSTR pLastSavedBy ) = 0;
      virtual HRESULT __stdcall get_RevisionNumber (
        /*[out,retval]*/ BSTR * pRevisionNumber ) = 0;
      virtual HRESULT __stdcall put_RevisionNumber (
        /*[in]*/ BSTR pRevisionNumber ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * pSubject ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR pSubject ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pTitle ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR pTitle ) = 0;
      virtual HRESULT __stdcall raw_NumCustomInfo (
        /*[out,retval]*/ int * Index ) = 0;
      virtual HRESULT __stdcall raw_GetCustomByIndex (
        /*[in]*/ int Index,
        /*[out]*/ BSTR * pKey,
        /*[out]*/ BSTR * pValue ) = 0;
      virtual HRESULT __stdcall raw_GetCustomByKey (
        /*[in]*/ BSTR key,
        /*[out]*/ BSTR * pValue ) = 0;
      virtual HRESULT __stdcall raw_SetCustomByIndex (
        /*[in]*/ int Index,
        /*[in]*/ BSTR key,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_SetCustomByKey (
        /*[in]*/ BSTR key,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_AddCustomInfo (
        /*[in]*/ BSTR key,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_RemoveCustomByIndex (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveCustomByKey (
        /*[in]*/ BSTR key ) = 0;
};

enum __declspec(uuid("289cea20-a636-42be-b968-0cddc5edc869"))
AcWireframeType
{
    acIsolines = 0,
    acIsoparms = 1
};

enum __declspec(uuid("3bbe0a4c-f3df-4271-82e4-a79a1441046b"))
AcPointCloudColorType
{
    acTrueColor = 0,
    acByColor = 1
};

enum __declspec(uuid("5248b0f1-db5e-45c5-a15b-f9a1612def10"))
AcPointCloudStylizationType
{
    acScanColor = 0,
    acObjectColor = 1,
    acNormal = 2,
    acIntensity = 3
};

enum __declspec(uuid("958fc25f-d7e3-4d99-a575-2c5ea9ba7c70"))
AcPointCloudIntensityStyle
{
    acIntensityGrayscale = 0,
    acIntensityRainbow = 1,
    acIntensityRed = 2,
    acIntensityGreen = 3,
    acIntensityBlue = 4,
    acIntensityEditableFlag = 5
};

enum __declspec(uuid("bfb6b85b-21a2-48fb-8482-c567a6535a3a"))
AcPointCloudExStylizationType
{
    acRGB = 0,
    acObject = 1,
    acNormals = 2,
    acIntensities = 3,
    acElevation = 4,
    acClassification = 5
};

struct __declspec(uuid("72e04115-1905-4dfa-b65c-1e941c46a114"))
IAcadSectionTypeSettings2 : IAcadSectionTypeSettings
{
    //
    // Property data
    //

    __declspec(property(get=GetIntersectionBoundaryVisible,put=PutIntersectionBoundaryVisible))
    VARIANT_BOOL IntersectionBoundaryVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIntersectionBoundaryVisible ( );
    void PutIntersectionBoundaryVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IntersectionBoundaryVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IntersectionBoundaryVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("ba1617e9-bec7-4b20-b227-8f490b761242"))
AcadHyperlink;
    // [ default ] interface IAcadHyperlink

struct __declspec(uuid("723b19d6-1957-41ed-b6a3-5a4d2de405bb"))
IAcadDynamicBlockReferenceProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPropertyName))
    _bstr_t PropertyName;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=Getshow))
    VARIANT_BOOL show;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetAllowedValues))
    _variant_t AllowedValues;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetUnitsType))
    enum AcDynamicBlockReferencePropertyUnitsType UnitsType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPropertyName ( );
    VARIANT_BOOL GetReadOnly ( );
    VARIANT_BOOL Getshow ( );
    _bstr_t GetDescription ( );
    _variant_t GetAllowedValues ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & Value );
    enum AcDynamicBlockReferencePropertyUnitsType GetUnitsType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PropertyName (
        /*[out,retval]*/ BSTR * PropertyName ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * ReadOnly ) = 0;
      virtual HRESULT __stdcall get_show (
        /*[out,retval]*/ VARIANT_BOOL * show ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall get_AllowedValues (
        /*[out,retval]*/ VARIANT * AllowedValues ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_UnitsType (
        /*[out,retval]*/ enum AcDynamicBlockReferencePropertyUnitsType * Units ) = 0;
};

struct __declspec(uuid("7eb86ce8-dfae-4cd3-a054-d2ebf2d9821c"))
AcadDynamicBlockReferenceProperty;
    // [ default ] interface IAcadDynamicBlockReferenceProperty

struct __declspec(uuid("125bb201-d62c-4e2d-9243-339f8cd86915"))
AcadAcCmColor;
    // [ default ] interface IAcadAcCmColor

struct __declspec(uuid("5125a948-7cd1-46be-b8cc-9faf2d286e65"))
AcadObject;
    // [ default ] interface IAcadObject
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("f18bce66-ea85-4e1b-98ae-b5d57851185f"))
AcadXRecord;
    // [ default ] interface IAcadXRecord
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("9a79b8bf-a4d2-47c3-b1ee-88e02eea553a"))
AcadSortentsTable;
    // [ default ] interface IAcadSortentsTable
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("8910e3ec-d81a-465c-9c7b-ab036c51d71e"))
AcadDimStyle;
    // [ default ] interface IAcadDimStyle
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("375af0d2-075a-42e2-a0fb-3db6c8e8c11c"))
AcadLayer;
    // [ default ] interface IAcadLayer
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("3b284fb8-d186-4180-894e-f0476932c326"))
AcadLineType;
    // [ default ] interface IAcadLineType
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ebca2ef7-59d6-4e5d-b6fe-0f8ac60435f8"))
AcadMaterial;
    // [ default ] interface IAcadMaterial
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("02b67ebf-a132-4933-ac54-abdb2b29b0ef"))
AcadRegisteredApplication;
    // [ default ] interface IAcadRegisteredApplication
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("51d16155-25db-47f6-8f4c-888b0037a1af"))
AcadTextStyle;
    // [ default ] interface IAcadTextStyle
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("5b85ebf4-7548-40d3-84f5-8a63830f1689"))
AcadUCS;
    // [ default ] interface IAcadUCS
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("5ed51c8a-bdaa-4528-aeb1-1580a5feeaef"))
AcadView;
    // [ default ] interface IAcadView
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("dddb9583-d227-461b-95c4-61115281cb16"))
AcadViewport;
    // [ default ] interface IAcadViewport
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d344e9a2-c7ad-4c14-92ce-84e4750c02e1"))
AcadGroup;
    // [ default ] interface IAcadGroup
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7853f100-4610-4a0d-aecd-6c3d5741212a"))
AcadPlotConfiguration;
    // [ default ] interface IAcadPlotConfiguration
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("2e3519e8-3a7e-46bb-b420-63e621068018"))
AcadLayout;
    // [ default ] interface IAcadLayout
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("96a0858a-afbd-4922-8ff4-06bdd202e229"))
IAcadIdPair : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsCloned))
    VARIANT_BOOL IsCloned;
    __declspec(property(get=GetIsOwnerXlated))
    VARIANT_BOOL IsOwnerXlated;
    __declspec(property(get=GetIsPrimary))
    VARIANT_BOOL IsPrimary;
    __declspec(property(get=Getkey))
    LONG_PTR key;
    __declspec(property(get=GetValue))
    LONG_PTR Value;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsCloned ( );
    VARIANT_BOOL GetIsOwnerXlated ( );
    VARIANT_BOOL GetIsPrimary ( );
    LONG_PTR Getkey ( );
    LONG_PTR GetValue ( );
    IDispatchPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsCloned (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsOwnerXlated (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsPrimary (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_key (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ApplicationObject ) = 0;
};

struct __declspec(uuid("0ff3c6da-7aa8-4875-a6b4-c8cccf3ba82f"))
AcadIdPair;
    // [ default ] interface IAcadIdPair

struct __declspec(uuid("d3f1b5a8-ef2a-4a98-ba38-0c456d46df0e"))
AcadTableStyle;
    // [ default ] interface IAcadTableStyle
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ee62e6b0-39a0-426b-a711-fa3ef19a6297"))
AcadSectionSettings;
    // [ default ] interface IAcadSectionSettings
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("e90a9883-f596-4d6e-a006-f4ead1bd5d33"))
AcadSectionTypeSettings;
    // [ default ] interface IAcadSectionTypeSettings2
    // interface IAcadSectionTypeSettings
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("b1705001-3175-414d-a4db-54451008b9dc"))
AcadMLeaderStyle;
    // [ default ] interface IAcadMLeaderStyle
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("457bcf6d-bfd4-400e-932e-890c6d3dd01b"))
AcadHyperlinks;
    // [ default ] interface IAcadHyperlinks

struct __declspec(uuid("833d327e-f7d8-44ea-8be7-881c152d7ba8"))
AcadDictionary;
    // [ default ] interface IAcadDictionary
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a7b347f4-da20-4ce9-999c-b91a9aab8bb2"))
AcadLayers;
    // [ default ] interface IAcadLayers
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("9cb88c70-6f5d-4b07-97cf-6f2162004e3c"))
AcadDimStyles;
    // [ default ] interface IAcadDimStyles
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("01a30270-908f-4771-bc60-c2c7b91e0576"))
AcadDictionaries;
    // [ default ] interface IAcadDictionaries
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("15ef95bb-28b9-4a7a-b548-7f824b9500eb"))
AcadLineTypes;
    // [ default ] interface IAcadLineTypes
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("cdc8fe2e-2ee7-474d-a440-e90a9d2edf20"))
AcadMaterials;
    // [ default ] interface IAcadMaterials
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("48f3753a-ac72-4e68-91da-549dc3949afe"))
AcadTextStyles;
    // [ default ] interface IAcadTextStyles
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("f0491dd1-27c5-4a66-a9f7-1ef8340ce311"))
AcadUCSs;
    // [ default ] interface IAcadUCSs
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("c5c157d2-67ff-4133-ab97-256581df0fef"))
AcadRegisteredApplications;
    // [ default ] interface IAcadRegisteredApplications
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a4eff110-ce17-4d60-b6f6-4e339a66a526"))
AcadViews;
    // [ default ] interface IAcadViews
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("10cd632f-39b4-4a1a-994d-691ab5274420"))
AcadViewports;
    // [ default ] interface IAcadViewports
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("49dcb9b7-357d-4c54-8e50-a5eac0cb2c9a"))
AcadGroups;
    // [ default ] interface IAcadGroups
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("08b1f0c3-7649-4ea6-a026-641d1aa48db7"))
AcadBlocks;
    // [ default ] interface IAcadBlocks
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("379e15d6-92ba-4434-b643-74b5bf94436b"))
AcadLayouts;
    // [ default ] interface IAcadLayouts
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("8dd0d1db-0301-49a2-a594-1f91fd87deae"))
AcadPlotConfigurations;
    // [ default ] interface IAcadPlotConfigurations
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a9932fd5-5009-4436-9347-0928e5a6ca4b"))
AcadEntity;
    // [ default ] interface IAcadEntity
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("c476dbac-1c07-4cf1-a84b-38ad1ed8fe2e"))
IAcadShadowDisplay : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetShadowDisplay,put=PutShadowDisplay))
    enum AcShadowDisplayType ShadowDisplay;
    __declspec(property(get=GetEnableShadowDisplay))
    long EnableShadowDisplay;

    //
    // Wrapper methods for error-handling
    //

    enum AcShadowDisplayType GetShadowDisplay ( );
    void PutShadowDisplay (
        enum AcShadowDisplayType ShadowDisplay );
    long GetEnableShadowDisplay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShadowDisplay (
        /*[out,retval]*/ enum AcShadowDisplayType * ShadowDisplay ) = 0;
      virtual HRESULT __stdcall put_ShadowDisplay (
        /*[in]*/ enum AcShadowDisplayType ShadowDisplay ) = 0;
      virtual HRESULT __stdcall get_EnableShadowDisplay (
        /*[out,retval]*/ long * ShadowDisplay ) = 0;
};

struct __declspec(uuid("1dd039bf-4222-4cae-a26e-0e904ba1028d"))
AcadRasterImage;
    // [ default ] interface IAcadRasterImage
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("f9102229-7424-4cf6-8968-474e67f7ecb7"))
Acad3DFace;
    // [ default ] interface IAcad3DFace
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("301b32f7-c4bb-4fa4-8715-d766caae7dd9"))
Acad3DPolyline;
    // [ default ] interface IAcad3DPolyline
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("e1405564-accd-4198-8bf5-3f4669db8884"))
AcadRegion;
    // [ default ] interface IAcadRegion
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ecf42d7a-110e-4805-8f12-7d39d3b80103"))
Acad3DSolid;
    // [ default ] interface IAcad3DSolid
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("3fc23b9f-54c2-418e-9ee5-62c6985ab3b4"))
AcadArc;
    // [ default ] interface IAcadArc
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("c7daa988-04ea-4f19-9e71-d0733ae12be5"))
AcadAttribute;
    // [ default ] interface IAcadAttribute
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("c35e52d8-2d92-4241-b992-5de9fdd1725d"))
AcadAttributeReference;
    // [ default ] interface IAcadAttributeReference
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d16d583d-89d1-4cab-843d-404a1433e743"))
AcadBlockReference;
    // [ default ] interface IAcadBlockReference
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("0d5b7d85-38b7-449f-9cb6-48bc4e8520b0"))
AcadCircle;
    // [ default ] interface IAcadCircle
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d0e738c2-7182-4040-b935-a6afbe8dfdf8"))
AcadEllipse;
    // [ default ] interface IAcadEllipse
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("c373ea27-d0de-4b87-b239-8a835e8c8285"))
AcadHatch;
    // [ default ] interface IAcadHatch
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("f6fa0699-1fa0-494b-9786-d09de5a5161e"))
AcadLeader;
    // [ default ] interface IAcadLeader
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d4623034-9d02-475d-b849-fc2e9d94a1a1"))
IAcadSubEntity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetObjectName))
    _bstr_t ObjectName;
    __declspec(property(get=GetLayer))
    _bstr_t Layer;
    __declspec(property(get=GetLinetype))
    _bstr_t Linetype;
    __declspec(property(get=GetLinetypeScale))
    ACAD_NOUNITS LinetypeScale;
    __declspec(property(get=GetPlotStyleName))
    _bstr_t PlotStyleName;
    __declspec(property(get=GetLineweight))
    ACAD_LWEIGHT Lineweight;
    __declspec(property(get=GetHyperlinks))
    IAcadHyperlinksPtr Hyperlinks;
    __declspec(property(get=Getcolor,put=Putcolor))
    IAcadAcCmColorPtr color;

    //
    // Wrapper methods for error-handling
    //

    HRESULT OnModified ( );
    _bstr_t GetObjectName ( );
    IAcadAcCmColorPtr Getcolor ( );
    void Putcolor (
        struct IAcadAcCmColor * pColor );
    _bstr_t GetLayer ( );
    _bstr_t GetLinetype ( );
    ACAD_NOUNITS GetLinetypeScale ( );
    _bstr_t GetPlotStyleName ( );
    ACAD_LWEIGHT GetLineweight ( );
    IAcadHyperlinksPtr GetHyperlinks ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnModified ( ) = 0;
      virtual HRESULT __stdcall get_ObjectName (
        /*[out,retval]*/ BSTR * ObjectName ) = 0;
      virtual HRESULT __stdcall get_color (
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall put_color (
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_Linetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall get_LinetypeScale (
        /*[out,retval]*/ ACAD_NOUNITS * ltScale ) = 0;
      virtual HRESULT __stdcall get_PlotStyleName (
        /*[out,retval]*/ BSTR * plotStyle ) = 0;
      virtual HRESULT __stdcall get_Lineweight (
        /*[out,retval]*/ ACAD_LWEIGHT * Lineweight ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct IAcadHyperlinks * * Hyperlinks ) = 0;
};

struct __declspec(uuid("fd5750fe-c24d-4556-be06-d37f5a1f821a"))
IAcadMLeaderLeader : IAcadSubEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLeaderType,put=PutLeaderType))
    enum AcMLeaderType LeaderType;
    __declspec(property(get=GetLeaderLineColor,put=PutLeaderLineColor))
    IAcadAcCmColorPtr LeaderLineColor;
    __declspec(property(get=GetLeaderLinetype,put=PutLeaderLinetype))
    ACAD_LTYPE LeaderLinetype;
    __declspec(property(get=GetLeaderLineWeight,put=PutLeaderLineWeight))
    ACAD_LWEIGHT LeaderLineWeight;
    __declspec(property(get=GetArrowheadType,put=PutArrowheadType))
    enum AcDimArrowheadType ArrowheadType;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetArrowheadBlock,put=PutArrowheadBlock))
    _bstr_t ArrowheadBlock;

    //
    // Wrapper methods for error-handling
    //

    enum AcMLeaderType GetLeaderType ( );
    void PutLeaderType (
        enum AcMLeaderType Type );
    IAcadAcCmColorPtr GetLeaderLineColor ( );
    void PutLeaderLineColor (
        struct IAcadAcCmColor * Type );
    ACAD_LTYPE GetLeaderLinetype ( );
    void PutLeaderLinetype (
        ACAD_LTYPE Linetype );
    ACAD_LWEIGHT GetLeaderLineWeight ( );
    void PutLeaderLineWeight (
        ACAD_LWEIGHT Lineweight );
    enum AcDimArrowheadType GetArrowheadType ( );
    void PutArrowheadType (
        enum AcDimArrowheadType BlockName );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    _bstr_t GetArrowheadBlock ( );
    void PutArrowheadBlock (
        _bstr_t BlockName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LeaderType (
        /*[out,retval]*/ enum AcMLeaderType * Type ) = 0;
      virtual HRESULT __stdcall put_LeaderType (
        /*[in]*/ enum AcMLeaderType Type ) = 0;
      virtual HRESULT __stdcall get_LeaderLineColor (
        /*[out,retval]*/ struct IAcadAcCmColor * * Type ) = 0;
      virtual HRESULT __stdcall put_LeaderLineColor (
        /*[in]*/ struct IAcadAcCmColor * Type ) = 0;
      virtual HRESULT __stdcall get_LeaderLinetype (
        /*[out,retval]*/ ACAD_LTYPE * Linetype ) = 0;
      virtual HRESULT __stdcall put_LeaderLinetype (
        /*[in]*/ ACAD_LTYPE Linetype ) = 0;
      virtual HRESULT __stdcall get_LeaderLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * Lineweight ) = 0;
      virtual HRESULT __stdcall put_LeaderLineWeight (
        /*[in]*/ ACAD_LWEIGHT Lineweight ) = 0;
      virtual HRESULT __stdcall get_ArrowheadType (
        /*[out,retval]*/ enum AcDimArrowheadType * BlockName ) = 0;
      virtual HRESULT __stdcall put_ArrowheadType (
        /*[in]*/ enum AcDimArrowheadType BlockName ) = 0;
      virtual HRESULT __stdcall get_ArrowheadSize (
        /*[out,retval]*/ double * size ) = 0;
      virtual HRESULT __stdcall put_ArrowheadSize (
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall get_ArrowheadBlock (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_ArrowheadBlock (
        /*[in]*/ BSTR BlockName ) = 0;
};

struct __declspec(uuid("9ead6c8f-b595-4a4f-b315-46540d37d070"))
AcadMLeaderLeader;
    // [ default ] interface IAcadMLeaderLeader
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("0e20cfaf-c21a-4ac3-bdd0-463b307215b6"))
AcadMLeader;
    // [ default ] interface IAcadMLeader
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("1004d324-e19d-4ed5-99ac-256096ea6344"))
AcadLWPolyline;
    // [ default ] interface IAcadLWPolyline
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("23bd224b-6952-4c1f-a114-6510734d6a90"))
AcadLine;
    // [ default ] interface IAcadLine
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a02afbce-8fb5-442c-a338-47d015425331"))
AcadMText;
    // [ default ] interface IAcadMText
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("99b15887-2265-48bf-a278-dd81d93e00d1"))
AcadPoint;
    // [ default ] interface IAcadPoint
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ca657076-ec7e-46bc-a29d-a915654ce6f7"))
AcadPolyline;
    // [ default ] interface IAcadPolyline
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("24798d46-e5e6-4cef-9b5c-6f1c91b86416"))
AcadPolygonMesh;
    // [ default ] interface IAcadPolygonMesh
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("21e9cc83-64dd-4340-bd9b-9337581a190c"))
AcadRay;
    // [ default ] interface IAcadRay
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("b8e67790-850a-473f-9b1a-6e1abe686d31"))
AcadShape;
    // [ default ] interface IAcadShape
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("fa2ec09b-ac70-4514-aaae-68d63f994ffe"))
AcadSolid;
    // [ default ] interface IAcadSolid
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("502ebf0d-d4a9-41d0-acdc-8e1723f24a56"))
AcadSpline;
    // [ default ] interface IAcadSpline
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("723bcc26-00d2-4536-8ac2-c374fabb0514"))
AcadText;
    // [ default ] interface IAcadText
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("11b2a176-f9d6-421b-8374-dceddf9e1df3"))
AcadTolerance;
    // [ default ] interface IAcadTolerance
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("dc2e4629-b7d9-4169-acf7-bf249e6e4a82"))
AcadTrace;
    // [ default ] interface IAcadTrace
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("52822f4a-db41-4bad-8e24-7eb749aaa1c0"))
AcadXline;
    // [ default ] interface IAcadXline
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("cd903474-f5d9-4717-a53a-970b98811c6c"))
AcadPViewport;
    // [ default ] interface IAcadPViewport
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7e3c5fb6-6651-4c00-9a27-925914a86f99"))
AcadMInsertBlock;
    // [ default ] interface IAcadMInsertBlock
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("12a0e456-b9c9-4516-b389-5fe1269dcfc8"))
AcadPolyfaceMesh;
    // [ default ] interface IAcadPolyfaceMesh
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("e1401960-ffa0-425a-b7f9-bb10645325f0"))
AcadMLine;
    // [ default ] interface IAcadMLine
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("323bc6eb-3f64-4c02-8f8a-c6970be3143b"))
AcadExternalReference;
    // [ default ] interface IAcadExternalReference
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("f9e28a62-2115-4784-910e-999a4283f49a"))
AcadTable;
    // [ default ] interface IAcadTable
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("3bfa2118-0236-4801-b7b2-e3dad67778ba"))
AcadOle;
    // [ default ] interface IAcadOle
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("e9a86537-dd8a-46a2-b65e-02e6f364ef59"))
AcadHelix;
    // [ default ] interface IAcadHelix
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("38c88e2f-d908-47a8-abc4-378a4f4b676a"))
AcadSurface;
    // [ default ] interface IAcadSurface
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("6cf03bcd-c149-453b-b9f0-93fcec67e3be"))
AcadPlaneSurface;
    // [ default ] interface IAcadPlaneSurface
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("3fe41eb8-1cbd-4ace-a41e-eb3bf4e26b11"))
AcadExtrudedSurface;
    // [ default ] interface IAcadExtrudedSurface
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("f9d140eb-fb37-4922-8a8d-8c522b943586"))
AcadRevolvedSurface;
    // [ default ] interface IAcadRevolvedSurface
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("062a3e5b-d821-4ae0-b4b7-873ebc51e6e3"))
AcadSweptSurface;
    // [ default ] interface IAcadSweptSurface
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("f69a1c36-d019-49ea-9922-c29a79e2734b"))
AcadLoftedSurface;
    // [ default ] interface IAcadLoftedSurface
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("fca3b245-8eab-48ba-bd2a-6075ce1d65b8"))
AcadSection;
    // [ default ] interface IAcadSection2
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a02c2829-2703-44a5-9298-c1f4cd7db700"))
AcadSectionManager;
    // [ default ] interface IAcadSectionManager
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("728a5356-0d14-4db8-967b-17db000f5fd0"))
AcadDwfUnderlay;
    // [ default ] interface IAcadUnderlay
    // interface IAcadDwfUnderlay
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("97da9cd9-7890-4c56-aae8-be8cb771ff72"))
AcadDgnUnderlay;
    // [ default ] interface IAcadUnderlay
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("6b32612a-1a18-4bbf-b5ab-3ddaf8a0d5bc"))
AcadPdfUnderlay;
    // [ default ] interface IAcadUnderlay
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("6396720f-ad15-4142-a3d2-fbdeb88dde0f"))
AcadSubEntity;
    // [ default ] interface IAcadSubEntity

struct __declspec(uuid("09d386fe-c2ca-499c-b5c8-04669d31b04b"))
IAcadSubEntSolidFace : IAcadSubEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetMaterial,put=PutMaterial))
    _bstr_t Material;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetMaterial ( );
    void PutMaterial (
        _bstr_t Material );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ BSTR * Material ) = 0;
      virtual HRESULT __stdcall put_Material (
        /*[in]*/ BSTR Material ) = 0;
};

struct __declspec(uuid("a6ead076-9a07-4d60-b04b-b3f1583d5e08"))
AcadSubEntSolidFace;
    // [ default ] interface IAcadSubEntSolidFace

struct __declspec(uuid("8fa9f8d0-d221-406c-b90d-148df7e05454"))
IAcadSubEntSolidEdge : IAcadSubEntity
{};

struct __declspec(uuid("1d600df1-c0d4-44f1-914b-cdfac06ac82b"))
AcadSubEntSolidEdge;
    // [ default ] interface IAcadSubEntSolidEdge

struct __declspec(uuid("a616de10-4b03-4ba8-a213-6a485eda0f68"))
IAcadSubEntSolidVertex : IAcadSubEntity
{};

struct __declspec(uuid("b64cfc7c-4ae0-4ecd-b530-15f5ff681e99"))
AcadSubEntSolidVertex;
    // [ default ] interface IAcadSubEntSolidVertex

struct __declspec(uuid("9c40da30-7619-4c91-a65f-c714ce7c9179"))
IAcadSubEntSolidNode : IAcadSubEntity
{};

struct __declspec(uuid("496c8f4b-deb2-40e5-8225-4eed2e236cc2"))
AcadSubEntSolidNode;
    // [ default ] interface IAcadSubEntSolidNode

struct __declspec(uuid("18c48794-22fa-4c45-b57c-b16be1cda850"))
AcadWipeout;
    // [ default ] interface IAcadWipeout

struct __declspec(uuid("36fb54b5-ef94-4583-b2f4-0e612a1335d9"))
AcadSubDMesh;
    // [ default ] interface IAcadSubDMesh
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("cd70ef32-6207-4e70-bb30-b0988c7fb089"))
IAcadSubDMeshFace : IAcadSubEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCreaseType,put=PutCreaseType))
    enum AcMeshCreaseType CreaseType;
    __declspec(property(get=GetCreaseLevel,put=PutCreaseLevel))
    double CreaseLevel;
    __declspec(property(get=GetMaterial,put=PutMaterial))
    _bstr_t Material;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetMaterial ( );
    void PutMaterial (
        _bstr_t Material );
    enum AcMeshCreaseType GetCreaseType ( );
    void PutCreaseType (
        enum AcMeshCreaseType Type );
    double GetCreaseLevel ( );
    void PutCreaseLevel (
        double level );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ BSTR * Material ) = 0;
      virtual HRESULT __stdcall put_Material (
        /*[in]*/ BSTR Material ) = 0;
      virtual HRESULT __stdcall get_CreaseType (
        /*[out,retval]*/ enum AcMeshCreaseType * Type ) = 0;
      virtual HRESULT __stdcall put_CreaseType (
        /*[in]*/ enum AcMeshCreaseType Type ) = 0;
      virtual HRESULT __stdcall get_CreaseLevel (
        /*[out,retval]*/ double * level ) = 0;
      virtual HRESULT __stdcall put_CreaseLevel (
        /*[in]*/ double level ) = 0;
};

struct __declspec(uuid("34872d3b-e551-4fd7-b39f-897b2d505021"))
AcadSubDMeshFace;
    // [ default ] interface IAcadSubDMeshFace
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("b8e2ef9f-2d35-433e-a278-1dc5695c4b5d"))
IAcadSubDMeshEdge : IAcadSubEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCreaseType,put=PutCreaseType))
    enum AcMeshCreaseType CreaseType;
    __declspec(property(get=GetCreaseLevel,put=PutCreaseLevel))
    double CreaseLevel;

    //
    // Wrapper methods for error-handling
    //

    enum AcMeshCreaseType GetCreaseType ( );
    void PutCreaseType (
        enum AcMeshCreaseType Type );
    double GetCreaseLevel ( );
    void PutCreaseLevel (
        double level );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CreaseType (
        /*[out,retval]*/ enum AcMeshCreaseType * Type ) = 0;
      virtual HRESULT __stdcall put_CreaseType (
        /*[in]*/ enum AcMeshCreaseType Type ) = 0;
      virtual HRESULT __stdcall get_CreaseLevel (
        /*[out,retval]*/ double * level ) = 0;
      virtual HRESULT __stdcall put_CreaseLevel (
        /*[in]*/ double level ) = 0;
};

struct __declspec(uuid("1bb02970-8912-418a-8f32-74fa9581df07"))
AcadSubDMeshEdge;
    // [ default ] interface IAcadSubDMeshEdge
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a3fddd7e-946b-48e9-98c3-c23aa15e83fc"))
IAcadSubDMeshVertex : IAcadSubEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCreaseType,put=PutCreaseType))
    enum AcMeshCreaseType CreaseType;
    __declspec(property(get=GetCreaseLevel,put=PutCreaseLevel))
    double CreaseLevel;
    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & coord );
    enum AcMeshCreaseType GetCreaseType ( );
    void PutCreaseType (
        enum AcMeshCreaseType Type );
    double GetCreaseLevel ( );
    void PutCreaseLevel (
        double level );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Coordinates (
        /*[out,retval]*/ VARIANT * coord ) = 0;
      virtual HRESULT __stdcall put_Coordinates (
        /*[in]*/ VARIANT coord ) = 0;
      virtual HRESULT __stdcall get_CreaseType (
        /*[out,retval]*/ enum AcMeshCreaseType * Type ) = 0;
      virtual HRESULT __stdcall put_CreaseType (
        /*[in]*/ enum AcMeshCreaseType Type ) = 0;
      virtual HRESULT __stdcall get_CreaseLevel (
        /*[out,retval]*/ double * level ) = 0;
      virtual HRESULT __stdcall put_CreaseLevel (
        /*[in]*/ double level ) = 0;
};

struct __declspec(uuid("f1da93a7-c0fc-4350-9ef0-06b30cc4a8e0"))
AcadSubDMeshVertex;
    // [ default ] interface IAcadSubDMeshVertex
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("2057af3f-932e-4f07-8ccc-6e963827e846"))
AcadNurbSurface;
    // [ default ] interface IAcadNurbSurface
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7093f7cb-516b-4d7a-99d7-77d7a5782c4e"))
AcadGeoPositionMarker;
    // [ default ] interface IAcadGeoPositionMarker
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d4e9fe63-1c48-4d39-b131-f56361f58a7e"))
AcadGeomapImage;
    // [ default ] interface IAcadGeomapImage

struct __declspec(uuid("ce9595d7-1ee6-4bb6-a34f-ff9a28218c3f"))
AcadDimension;
    // [ default ] interface IAcadDimension
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("96e9c35c-0f22-4cfb-9767-deb9471784b8"))
AcadDimAligned;
    // [ default ] interface IAcadDimAligned
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("4a539245-2d16-405f-9e60-abe70345e2bd"))
AcadDimAngular;
    // [ default ] interface IAcadDimAngular
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("79e01344-0dcd-4024-b8ca-9ed310b6aafc"))
AcadDimDiametric;
    // [ default ] interface IAcadDimDiametric
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7aaa3e2e-6170-4917-a467-fbc991ec75f7"))
AcadDimOrdinate;
    // [ default ] interface IAcadDimOrdinate
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a7481c1c-93f5-4104-b384-b25d94715fdc"))
AcadDimRadial;
    // [ default ] interface IAcadDimRadial
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("9870e5f9-d0b0-49ab-92d9-bd7523c16b62"))
AcadDimRotated;
    // [ default ] interface IAcadDimRotated
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("723c51dd-9592-44c6-a109-09e81ceea83c"))
AcadDim3PointAngular;
    // [ default ] interface IAcadDim3PointAngular
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d75efd10-3a2b-4302-94b2-7e325dbb0e26"))
AcadDimArcLength;
    // [ default ] interface IAcadDimArcLength
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("6ea5fb73-a8d0-460e-8d5b-5f494e6e3220"))
AcadDimRadialLarge;
    // [ default ] interface IAcadDimRadialLarge
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d3c339b4-90b3-430e-8ffe-260fe1f83b6f"))
AcadBlock;
    // [ default ] interface IAcadBlock
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a8182e51-f166-4dd3-bc15-dfe0af6cf55b"))
AcadModelSpace;
    // [ default ] interface IAcadModelSpace
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("557aecba-fd45-400e-bd83-b8be23303ab0"))
AcadPaperSpace;
    // [ default ] interface IAcadPaperSpace
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("4c1cb0cc-e804-44f7-8eb5-61d271bdecf7"))
AcadPointCloud;
    // [ default ] interface IAcadPointCloud
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("36dd8cc6-0474-4eb5-9a04-4b0df49ac516"))
AcadPointCloudEx;
    // [ default ] interface IAcadPointCloudEx2
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("5ddc42fb-dddb-4bee-8839-9b4189877829"))
AcadSummaryInfo;
    // [ default ] interface IAcadSummaryInfo

struct __declspec(uuid("e7315013-98ca-401b-aa9b-59e4c7000eae"))
AcadDatabasePreferences;
    // [ default ] interface IAcadDatabasePreferences

struct __declspec(uuid("4aff1852-a87e-44d7-8ad6-9e26553f921d"))
AcadDatabase;
    // [ default ] interface IAcadDatabase

enum __declspec(uuid("6016645b-9c1d-46ea-bc15-3807d9561853"))
AcadSecurityParamsType
{
    ACADSECURITYPARAMS_ENCRYPT_DATA = 1,
    ACADSECURITYPARAMS_ENCRYPT_PROPS = 2,
    ACADSECURITYPARAMS_SIGN_DATA = 16,
    ACADSECURITYPARAMS_ADD_TIMESTAMP = 32
};

enum __declspec(uuid("80ad0347-fe8a-4422-b821-da7505219039"))
AcadSecurityParamsConstants
{
    ACADSECURITYPARAMS_ALGID_RC4 = 26625
};

struct __declspec(uuid("a5c61cc3-daf1-47f8-a774-42ffdd9b798b"))
IAcadSecurityParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAction,put=PutAction))
    long Action;
    __declspec(property(get=GetPassword,put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetProviderType,put=PutProviderType))
    long ProviderType;
    __declspec(property(get=GetProviderName,put=PutProviderName))
    _bstr_t ProviderName;
    __declspec(property(get=GetAlgorithm,put=PutAlgorithm))
    long Algorithm;
    __declspec(property(get=GetKeyLength,put=PutKeyLength))
    long KeyLength;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetIssuer,put=PutIssuer))
    _bstr_t Issuer;
    __declspec(property(get=GetSerialNumber,put=PutSerialNumber))
    _bstr_t SerialNumber;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetTimeServer,put=PutTimeServer))
    _bstr_t TimeServer;

    //
    // Wrapper methods for error-handling
    //

    void PutAction (
        long pOperations );
    long GetAction ( );
    void PutPassword (
        _bstr_t pSecret );
    _bstr_t GetPassword ( );
    void PutProviderType (
        long pProvType );
    long GetProviderType ( );
    void PutProviderName (
        _bstr_t pProvName );
    _bstr_t GetProviderName ( );
    void PutAlgorithm (
        long pAlgId );
    long GetAlgorithm ( );
    void PutKeyLength (
        long pKeyLen );
    long GetKeyLength ( );
    void PutSubject (
        _bstr_t pCertSubject );
    _bstr_t GetSubject ( );
    void PutIssuer (
        _bstr_t pCertIssuer );
    _bstr_t GetIssuer ( );
    void PutSerialNumber (
        _bstr_t pSerialNum );
    _bstr_t GetSerialNumber ( );
    void PutComment (
        _bstr_t pText );
    _bstr_t GetComment ( );
    void PutTimeServer (
        _bstr_t pTimeServerName );
    _bstr_t GetTimeServer ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Action (
        /*[in]*/ long pOperations ) = 0;
      virtual HRESULT __stdcall get_Action (
        /*[out,retval]*/ long * pOperations ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR pSecret ) = 0;
      virtual HRESULT __stdcall get_Password (
        /*[out,retval]*/ BSTR * pSecret ) = 0;
      virtual HRESULT __stdcall put_ProviderType (
        /*[in]*/ long pProvType ) = 0;
      virtual HRESULT __stdcall get_ProviderType (
        /*[out,retval]*/ long * pProvType ) = 0;
      virtual HRESULT __stdcall put_ProviderName (
        /*[in]*/ BSTR pProvName ) = 0;
      virtual HRESULT __stdcall get_ProviderName (
        /*[out,retval]*/ BSTR * pProvName ) = 0;
      virtual HRESULT __stdcall put_Algorithm (
        /*[in]*/ long pAlgId ) = 0;
      virtual HRESULT __stdcall get_Algorithm (
        /*[out,retval]*/ long * pAlgId ) = 0;
      virtual HRESULT __stdcall put_KeyLength (
        /*[in]*/ long pKeyLen ) = 0;
      virtual HRESULT __stdcall get_KeyLength (
        /*[out,retval]*/ long * pKeyLen ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR pCertSubject ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * pCertSubject ) = 0;
      virtual HRESULT __stdcall put_Issuer (
        /*[in]*/ BSTR pCertIssuer ) = 0;
      virtual HRESULT __stdcall get_Issuer (
        /*[out,retval]*/ BSTR * pCertIssuer ) = 0;
      virtual HRESULT __stdcall put_SerialNumber (
        /*[in]*/ BSTR pSerialNum ) = 0;
      virtual HRESULT __stdcall get_SerialNumber (
        /*[out,retval]*/ BSTR * pSerialNum ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR pText ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * pText ) = 0;
      virtual HRESULT __stdcall put_TimeServer (
        /*[in]*/ BSTR pTimeServerName ) = 0;
      virtual HRESULT __stdcall get_TimeServer (
        /*[out,retval]*/ BSTR * pTimeServerName ) = 0;
};

struct __declspec(uuid("0603026a-dd66-4758-9f2d-6be2c8b4b29a"))
AcadSecurityParams;
    // [ default ] interface IAcadSecurityParams

struct __declspec(uuid("619bee9f-50d5-4bae-9a2b-440c97f95f6e"))
AcadLayerStateManager;
    // [ default ] interface IAcadLayerStateManager

struct __declspec(uuid("d523cb7c-30b6-4a7a-8c2d-79b23b4878a9"))
_DAcadApplicationEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT SysVarChanged (
        _bstr_t SysvarName,
        const _variant_t & newVal );
    HRESULT NewDrawing ( );
    HRESULT AppActivate ( );
    HRESULT AppDeactivate ( );
    HRESULT WindowMovedOrResized (
        long HWNDFrame,
        VARIANT_BOOL bMoved );
    HRESULT BeginModal ( );
    HRESULT EndModal ( );
    HRESULT BeginQuit (
        VARIANT_BOOL * Cancel );
    HRESULT BeginFileDrop (
        _bstr_t FileName,
        VARIANT_BOOL * Cancel );
    HRESULT ARXLoaded (
        _bstr_t AppName );
    HRESULT ARXUnloaded (
        _bstr_t AppName );
    HRESULT BeginPlot (
        _bstr_t DrawingName );
    HRESULT EndPlot (
        _bstr_t DrawingName );
    HRESULT BeginSave (
        _bstr_t FileName );
    HRESULT EndSave (
        _bstr_t FileName );
    HRESULT BeginOpen (
        BSTR * FileName );
    HRESULT EndOpen (
        _bstr_t FileName );
    HRESULT BeginCommand (
        _bstr_t CommandName );
    HRESULT EndCommand (
        _bstr_t CommandName );
    HRESULT BeginLisp (
        _bstr_t FirstLine );
    HRESULT EndLisp ( );
    HRESULT LispCancelled ( );
    HRESULT WindowChanged (
        enum AcWindowState WindowState );
};

struct __declspec(uuid("2ce54bf2-0376-4aa5-ba88-1bff47b1c70d"))
IAcadUtility : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    double AngleToReal (
        _bstr_t Angle,
        enum AcAngleUnits Unit );
    _bstr_t AngleToString (
        double Angle,
        enum AcAngleUnits Unit,
        int precision );
    double DistanceToReal (
        _bstr_t Distance,
        enum AcUnits Unit );
    _bstr_t RealToString (
        double Value,
        enum AcUnits Unit,
        int precision );
    _variant_t TranslateCoordinates (
        const _variant_t & Point,
        enum AcCoordinateSystem FromCoordSystem,
        enum AcCoordinateSystem ToCoordSystem,
        int Displacement,
        const _variant_t & OCSNormal = vtMissing );
    HRESULT InitializeUserInput (
        int Bits,
        const _variant_t & KeyWordList = vtMissing );
    int GetInteger (
        const _variant_t & Prompt = vtMissing );
    double GetReal (
        const _variant_t & Prompt = vtMissing );
    _bstr_t GetInput ( );
    _bstr_t GetKeyword (
        const _variant_t & Prompt = vtMissing );
    _bstr_t GetString (
        int HasSpaces,
        const _variant_t & Prompt = vtMissing );
    double GetAngle (
        const _variant_t & Point = vtMissing,
        const _variant_t & Prompt = vtMissing );
    double AngleFromXAxis (
        const _variant_t & StartPoint,
        const _variant_t & EndPoint );
    _variant_t GetCorner (
        const _variant_t & Point,
        const _variant_t & Prompt = vtMissing );
    double GetDistance (
        const _variant_t & Point = vtMissing,
        const _variant_t & Prompt = vtMissing );
    double GetOrientation (
        const _variant_t & Point = vtMissing,
        const _variant_t & Prompt = vtMissing );
    _variant_t GetPoint (
        const _variant_t & Point = vtMissing,
        const _variant_t & Prompt = vtMissing );
    _variant_t PolarPoint (
        const _variant_t & Point,
        double Angle,
        double Distance );
    HRESULT CreateTypedArray (
        VARIANT * varArr,
        int Type,
        SAFEARRAY * inArgs );
    HRESULT GetEntity (
        IDispatch * * Object,
        VARIANT * PickedPoint,
        const _variant_t & Prompt = vtMissing );
    HRESULT Prompt (
        _bstr_t Message );
    HRESULT GetSubEntity (
        IDispatch * * Object,
        VARIANT * PickedPoint,
        VARIANT * transMatrix,
        VARIANT * ContextData,
        const _variant_t & Prompt = vtMissing );
    VARIANT_BOOL IsURL (
        _bstr_t URL );
    HRESULT GetRemoteFile (
        _bstr_t URL,
        BSTR * LocalFile,
        VARIANT_BOOL IgnoreCache );
    HRESULT PutRemoteFile (
        _bstr_t URL,
        _bstr_t LocalFile );
    VARIANT_BOOL IsRemoteFile (
        _bstr_t LocalFile,
        BSTR * URL );
    VARIANT_BOOL LaunchBrowserDialog (
        BSTR * SelectedURL,
        _bstr_t DialogTitle,
        _bstr_t OpenButtonCaption,
        _bstr_t StartPageURL,
        _bstr_t RegistryRootKey,
        VARIANT_BOOL OpenButtonAlwaysEnabled );
    HRESULT SendModelessOperationStart (
        _bstr_t Context );
    HRESULT SendModelessOperationEnded (
        _bstr_t Context );
    _bstr_t GetObjectIdString (
        IDispatch * Object,
        VARIANT_BOOL bHex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AngleToReal (
        /*[in]*/ BSTR Angle,
        /*[in]*/ enum AcAngleUnits Unit,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_AngleToString (
        /*[in]*/ double Angle,
        /*[in]*/ enum AcAngleUnits Unit,
        /*[in]*/ int precision,
        /*[out,retval]*/ BSTR * bstrValue ) = 0;
      virtual HRESULT __stdcall raw_DistanceToReal (
        /*[in]*/ BSTR Distance,
        /*[in]*/ enum AcUnits Unit,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_RealToString (
        /*[in]*/ double Value,
        /*[in]*/ enum AcUnits Unit,
        /*[in]*/ int precision,
        /*[out,retval]*/ BSTR * bstrValue ) = 0;
      virtual HRESULT __stdcall raw_TranslateCoordinates (
        /*[in]*/ VARIANT Point,
        /*[in]*/ enum AcCoordinateSystem FromCoordSystem,
        /*[in]*/ enum AcCoordinateSystem ToCoordSystem,
        /*[in]*/ int Displacement,
        /*[in]*/ VARIANT OCSNormal,
        /*[out,retval]*/ VARIANT * transPt ) = 0;
      virtual HRESULT __stdcall raw_InitializeUserInput (
        /*[in]*/ int Bits,
        /*[in]*/ VARIANT KeyWordList = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetInteger (
        /*[in]*/ VARIANT Prompt,
        /*[out,retval]*/ int * Value ) = 0;
      virtual HRESULT __stdcall raw_GetReal (
        /*[in]*/ VARIANT Prompt,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_GetInput (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_GetKeyword (
        /*[in]*/ VARIANT Prompt,
        /*[out,retval]*/ BSTR * bstrKeyword ) = 0;
      virtual HRESULT __stdcall raw_GetString (
        /*[in]*/ int HasSpaces,
        /*[in]*/ VARIANT Prompt,
        /*[out,retval]*/ BSTR * bstrValue ) = 0;
      virtual HRESULT __stdcall raw_GetAngle (
        /*[in]*/ VARIANT Point,
        /*[in]*/ VARIANT Prompt,
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall raw_AngleFromXAxis (
        /*[in]*/ VARIANT StartPoint,
        /*[in]*/ VARIANT EndPoint,
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall raw_GetCorner (
        /*[in]*/ VARIANT Point,
        /*[in]*/ VARIANT Prompt,
        /*[out,retval]*/ VARIANT * corner ) = 0;
      virtual HRESULT __stdcall raw_GetDistance (
        /*[in]*/ VARIANT Point,
        /*[in]*/ VARIANT Prompt,
        /*[out,retval]*/ double * dist ) = 0;
      virtual HRESULT __stdcall raw_GetOrientation (
        /*[in]*/ VARIANT Point,
        /*[in]*/ VARIANT Prompt,
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ VARIANT Point,
        /*[in]*/ VARIANT Prompt,
        /*[out,retval]*/ VARIANT * inputPoint ) = 0;
      virtual HRESULT __stdcall raw_PolarPoint (
        /*[in]*/ VARIANT Point,
        /*[in]*/ double Angle,
        /*[in]*/ double Distance,
        /*[out,retval]*/ VARIANT * inputPoint ) = 0;
      virtual HRESULT __stdcall raw_CreateTypedArray (
        /*[out]*/ VARIANT * varArr,
        /*[in]*/ int Type,
        /*[in]*/ SAFEARRAY * inArgs ) = 0;
      virtual HRESULT __stdcall raw_GetEntity (
        /*[out]*/ IDispatch * * Object,
        /*[out]*/ VARIANT * PickedPoint,
        /*[in]*/ VARIANT Prompt = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Prompt (
        /*[in]*/ BSTR Message ) = 0;
      virtual HRESULT __stdcall raw_GetSubEntity (
        /*[out]*/ IDispatch * * Object,
        /*[out]*/ VARIANT * PickedPoint,
        /*[out]*/ VARIANT * transMatrix,
        /*[out]*/ VARIANT * ContextData,
        /*[in]*/ VARIANT Prompt = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_IsURL (
        /*[in]*/ BSTR URL,
        /*[out,retval]*/ VARIANT_BOOL * IsValidURL ) = 0;
      virtual HRESULT __stdcall raw_GetRemoteFile (
        /*[in]*/ BSTR URL,
        /*[out]*/ BSTR * LocalFile,
        /*[in]*/ VARIANT_BOOL IgnoreCache ) = 0;
      virtual HRESULT __stdcall raw_PutRemoteFile (
        /*[in]*/ BSTR URL,
        /*[in]*/ BSTR LocalFile ) = 0;
      virtual HRESULT __stdcall raw_IsRemoteFile (
        /*[in]*/ BSTR LocalFile,
        /*[out]*/ BSTR * URL,
        /*[out,retval]*/ VARIANT_BOOL * IsDownloadedFile ) = 0;
      virtual HRESULT __stdcall raw_LaunchBrowserDialog (
        /*[out]*/ BSTR * SelectedURL,
        /*[in]*/ BSTR DialogTitle,
        /*[in]*/ BSTR OpenButtonCaption,
        /*[in]*/ BSTR StartPageURL,
        /*[in]*/ BSTR RegistryRootKey,
        /*[in]*/ VARIANT_BOOL OpenButtonAlwaysEnabled,
        /*[out,retval]*/ VARIANT_BOOL * success ) = 0;
      virtual HRESULT __stdcall raw_SendModelessOperationStart (
        BSTR Context ) = 0;
      virtual HRESULT __stdcall raw_SendModelessOperationEnded (
        BSTR Context ) = 0;
      virtual HRESULT __stdcall raw_GetObjectIdString (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ VARIANT_BOOL bHex,
        /*[out,retval]*/ BSTR * ObjectIdString ) = 0;
};

struct __declspec(uuid("0e96437e-2ff3-4269-b646-9ecec2801104"))
AcadState;
    // [ default ] interface IAcadState

struct __declspec(uuid("9aaf0eb6-42d8-46c1-a2ef-679511b37a0d"))
AcadApplication;
    // [ default ] interface IAcadApplication
    // [ default, source ] dispinterface _DAcadApplicationEvents

struct __declspec(uuid("f74a776c-fd6f-4557-ad00-e78e7ac642ab"))
AcadSelectionSet;
    // [ default ] interface IAcadSelectionSet

struct __declspec(uuid("1d6e89ca-8632-44f2-8a96-f8014e58669b"))
AcadSelectionSets;
    // [ default ] interface IAcadSelectionSets

struct __declspec(uuid("dd5c71f1-3da4-4572-9a62-0732cd9868b9"))
AcadPlot;
    // [ default ] interface IAcadPlot

struct __declspec(uuid("d927173f-16e1-4bfa-90f1-f7e3c347cc87"))
AcadPreferences;
    // [ default ] interface IAcadPreferences

struct __declspec(uuid("9ac42ff5-bdd1-4f8c-8f47-9d71847143d0"))
AcadPreferencesDrafting;
    // [ default ] interface IAcadPreferencesDrafting

struct __declspec(uuid("d3adb94c-c51c-41ed-90b1-8ed75b9906a2"))
AcadPreferencesDisplay;
    // [ default ] interface IAcadPreferencesDisplay

struct __declspec(uuid("bc0436ef-ff41-40fe-86d6-8b065b8d7959"))
AcadPreferencesFiles;
    // [ default ] interface IAcadPreferencesFiles

struct __declspec(uuid("5640bd23-2caf-4637-8394-b0b82915be01"))
AcadPreferencesOpenSave;
    // [ default ] interface IAcadPreferencesOpenSave

struct __declspec(uuid("6a15d096-4f73-4cea-b08d-200a851d4092"))
AcadPreferencesOutput;
    // [ default ] interface IAcadPreferencesOutput

struct __declspec(uuid("936c9608-9843-42f0-b791-f55ab31648b7"))
AcadPreferencesProfiles;
    // [ default ] interface IAcadPreferencesProfiles

struct __declspec(uuid("6b391a7e-3bea-4f33-977b-c091b6d91439"))
AcadPreferencesSelection;
    // [ default ] interface IAcadPreferencesSelection

struct __declspec(uuid("623c3614-7401-4a89-ab74-8922dbaa259d"))
AcadPreferencesSystem;
    // [ default ] interface IAcadPreferencesSystem

struct __declspec(uuid("8e54a093-2176-401b-9ebb-af874dd013b5"))
AcadPreferencesUser;
    // [ default ] interface IAcadPreferencesUser

struct __declspec(uuid("4db714a5-5f58-4872-bb4a-69ee0d285d66"))
AcadMenuGroups;
    // [ default ] interface IAcadMenuGroups

struct __declspec(uuid("8075e929-1ff1-4d5d-bd6b-6fe3b849f906"))
AcadMenuGroup;
    // [ default ] interface IAcadMenuGroup

struct __declspec(uuid("30872ee1-93c6-4a80-9ca1-8064bae240db"))
AcadMenuBar;
    // [ default ] interface IAcadMenuBar

struct __declspec(uuid("2dcc7dd1-dde3-4199-91ba-69c3721f6cf0"))
AcadPopupMenus;
    // [ default ] interface IAcadPopupMenus

struct __declspec(uuid("f6e25e03-b9ae-4a88-841b-edfd9c75aa5b"))
AcadPopupMenu;
    // [ default ] interface IAcadPopupMenu

struct __declspec(uuid("b52bd1ce-b63c-4b80-94c9-d2b2b779c5ce"))
AcadPopupMenuItem;
    // [ default ] interface IAcadPopupMenuItem

struct __declspec(uuid("2211978f-48ae-4293-aaea-88ce6ad00d28"))
AcadUtility;
    // [ default ] interface IAcadUtility

struct __declspec(uuid("e701e4a8-5e93-49a3-8a5b-6927dd322bd6"))
_DAcadDocumentEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeginSave (
        _bstr_t FileName );
    HRESULT EndSave (
        _bstr_t FileName );
    HRESULT BeginCommand (
        _bstr_t CommandName );
    HRESULT EndCommand (
        _bstr_t CommandName );
    HRESULT BeginLisp (
        _bstr_t FirstLine );
    HRESULT EndLisp ( );
    HRESULT LispCancelled ( );
    HRESULT SelectionChanged ( );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT BeginRightClick (
        const _variant_t & PickPoint );
    HRESULT BeginShortcutMenuDefault (
        struct IAcadPopupMenu * * ShortcutMenu );
    HRESULT BeginShortcutMenuEdit (
        struct IAcadPopupMenu * * ShortcutMenu,
        struct IAcadSelectionSet * * SelectionSet );
    HRESULT BeginShortcutMenuCommand (
        struct IAcadPopupMenu * * ShortcutMenu,
        _bstr_t Command );
    HRESULT BeginShortcutMenuGrip (
        struct IAcadPopupMenu * * ShortcutMenu );
    HRESULT BeginShortcutMenuOsnap (
        struct IAcadPopupMenu * * ShortcutMenu );
    HRESULT EndShortcutMenu (
        struct IAcadPopupMenu * * ShortcutMenu );
    HRESULT BeginDoubleClick (
        const _variant_t & PickPoint );
    HRESULT ObjectAdded (
        IDispatch * Object );
    HRESULT ObjectErased (
        LONG_PTR ObjectID );
    HRESULT ObjectModified (
        IDispatch * Object );
    HRESULT BeginPlot (
        _bstr_t DrawingName );
    HRESULT EndPlot (
        _bstr_t DrawingName );
    HRESULT WindowMovedOrResized (
        LONG_PTR HWNDFrame,
        VARIANT_BOOL bMoved );
    HRESULT LayoutSwitched (
        _bstr_t LayoutName );
    HRESULT WindowChanged (
        enum AcWindowState WindowState );
    HRESULT BeginClose ( );
    HRESULT BeginDocClose (
        VARIANT_BOOL * Cancel );
};

struct __declspec(uuid("b6eb585b-b467-4e46-a9c7-48d7d6fd26cb"))
AcadDocument;
    // [ default ] interface IAcadDocument
    // [ default, source ] dispinterface _DAcadDocumentEvents

struct __declspec(uuid("2cc4c41c-e9d1-4650-8166-b7ad86b8fabc"))
AcadDocuments;
    // [ default ] interface IAcadDocuments

struct __declspec(uuid("196dbede-b2d9-466c-86bf-ab955f3defb3"))
AcadToolbars;
    // [ default ] interface IAcadToolbars

struct __declspec(uuid("0235fb3a-89f6-403b-91f3-743a16808257"))
AcadToolbar;
    // [ default ] interface IAcadToolbar

struct __declspec(uuid("b5ab7be5-3aee-486d-8e7d-cf9abfc0c08d"))
AcadToolbarItem;
    // [ default ] interface IAcadToolbarItem

struct __declspec(uuid("aeb8d2e2-b3e1-499b-a357-7b3f51cec147"))
IAcadObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHandle))
    _bstr_t Handle;
    __declspec(property(get=GetObjectName))
    _bstr_t ObjectName;
    __declspec(property(get=GetObjectID))
    LONG_PTR ObjectID;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetDatabase))
    IAcadDatabasePtr Database;
    __declspec(property(get=GetHasExtensionDictionary))
    VARIANT_BOOL HasExtensionDictionary;
    __declspec(property(get=GetOwnerID))
    LONG_PTR OwnerID;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHandle ( );
    _bstr_t GetObjectName ( );
    HRESULT GetXData (
        _bstr_t AppName,
        VARIANT * XDataType,
        VARIANT * XDataValue );
    HRESULT SetXData (
        const _variant_t & XDataType,
        const _variant_t & XDataValue );
    HRESULT Delete ( );
    LONG_PTR GetObjectID ( );
    IDispatchPtr GetApplication ( );
    IAcadDatabasePtr GetDatabase ( );
    VARIANT_BOOL GetHasExtensionDictionary ( );
    IAcadDictionaryPtr GetExtensionDictionary ( );
    LONG_PTR GetOwnerID ( );
    IDispatchPtr GetDocument ( );
    HRESULT Erase ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ BSTR * Handle ) = 0;
      virtual HRESULT __stdcall get_ObjectName (
        /*[out,retval]*/ BSTR * ObjectName ) = 0;
      virtual HRESULT __stdcall raw_GetXData (
        /*[in]*/ BSTR AppName,
        /*[out]*/ VARIANT * XDataType,
        /*[out]*/ VARIANT * XDataValue ) = 0;
      virtual HRESULT __stdcall raw_SetXData (
        /*[in]*/ VARIANT XDataType,
        /*[in]*/ VARIANT XDataValue ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_ObjectID (
        /*[out,retval]*/ LONG_PTR * ObjectID ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ApplicationObject ) = 0;
      virtual HRESULT __stdcall get_Database (
        /*[out,retval]*/ struct IAcadDatabase * * pDatabase ) = 0;
      virtual HRESULT __stdcall get_HasExtensionDictionary (
        /*[out,retval]*/ VARIANT_BOOL * bHasDictionary ) = 0;
      virtual HRESULT __stdcall raw_GetExtensionDictionary (
        /*[out,retval]*/ struct IAcadDictionary * * pExtDictionary ) = 0;
      virtual HRESULT __stdcall get_OwnerID (
        /*[out,retval]*/ LONG_PTR * OwnerID ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * pDocument ) = 0;
      virtual HRESULT __stdcall raw_Erase ( ) = 0;
};

struct __declspec(uuid("acf0aa82-ffec-402b-9b87-1568f6c24f82"))
IAcadEntity : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=Getcolor,put=Putcolor))
    ACAD_COLOR color;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetLinetype,put=PutLinetype))
    _bstr_t Linetype;
    __declspec(property(get=GetLinetypeScale,put=PutLinetypeScale))
    ACAD_NOUNITS LinetypeScale;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetPlotStyleName,put=PutPlotStyleName))
    _bstr_t PlotStyleName;
    __declspec(property(get=GetLineweight,put=PutLineweight))
    ACAD_LWEIGHT Lineweight;
    __declspec(property(get=GetHyperlinks))
    IAcadHyperlinksPtr Hyperlinks;
    __declspec(property(get=GetTrueColor,put=PutTrueColor))
    IAcadAcCmColorPtr TrueColor;
    __declspec(property(get=GetMaterial,put=PutMaterial))
    _bstr_t Material;
    __declspec(property(get=GetEntityName))
    _bstr_t EntityName;
    __declspec(property(get=GetEntityTransparency,put=PutEntityTransparency))
    _bstr_t EntityTransparency;
    __declspec(property(get=GetEntityType))
    long EntityType;

    //
    // Wrapper methods for error-handling
    //

    IAcadAcCmColorPtr GetTrueColor ( );
    void PutTrueColor (
        struct IAcadAcCmColor * pColor );
    _bstr_t GetLayer ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLinetype ( );
    void PutLinetype (
        _bstr_t Linetype );
    ACAD_NOUNITS GetLinetypeScale ( );
    void PutLinetypeScale (
        ACAD_NOUNITS ltScale );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL bVisible );
    _variant_t ArrayPolar (
        int NumberOfObjects,
        double AngleToFill,
        const _variant_t & CenterPoint );
    _variant_t ArrayRectangular (
        int NumberOfRows,
        int NumberOfColumns,
        int NumberOfLevels,
        double DistBetweenRows,
        double DistBetweenCols,
        double DistBetweenLevels );
    HRESULT Highlight (
        VARIANT_BOOL HighlightFlag );
    IDispatchPtr Copy ( );
    HRESULT Move (
        const _variant_t & FromPoint,
        const _variant_t & ToPoint );
    HRESULT Rotate (
        const _variant_t & BasePoint,
        double RotationAngle );
    HRESULT Rotate3D (
        const _variant_t & Point1,
        const _variant_t & Point2,
        double RotationAngle );
    IDispatchPtr Mirror (
        const _variant_t & Point1,
        const _variant_t & Point2 );
    IDispatchPtr Mirror3D (
        const _variant_t & Point1,
        const _variant_t & Point2,
        const _variant_t & point3 );
    HRESULT ScaleEntity (
        const _variant_t & BasePoint,
        double ScaleFactor );
    HRESULT TransformBy (
        const _variant_t & TransformationMatrix );
    HRESULT Update ( );
    HRESULT GetBoundingBox (
        VARIANT * MinPoint,
        VARIANT * MaxPoint );
    _variant_t IntersectWith (
        IDispatch * IntersectObject,
        enum AcExtendOption option );
    _bstr_t GetPlotStyleName ( );
    void PutPlotStyleName (
        _bstr_t plotStyle );
    ACAD_LWEIGHT GetLineweight ( );
    void PutLineweight (
        ACAD_LWEIGHT Lineweight );
    _bstr_t GetEntityTransparency ( );
    void PutEntityTransparency (
        _bstr_t transparency );
    IAcadHyperlinksPtr GetHyperlinks ( );
    _bstr_t GetMaterial ( );
    void PutMaterial (
        _bstr_t Material );
    _bstr_t GetEntityName ( );
    long GetEntityType ( );
    ACAD_COLOR Getcolor ( );
    void Putcolor (
        ACAD_COLOR color );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrueColor (
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall put_TrueColor (
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Linetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_Linetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_LinetypeScale (
        /*[out,retval]*/ ACAD_NOUNITS * ltScale ) = 0;
      virtual HRESULT __stdcall put_LinetypeScale (
        /*[in]*/ ACAD_NOUNITS ltScale ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * bVisible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL bVisible ) = 0;
      virtual HRESULT __stdcall raw_ArrayPolar (
        /*[in]*/ int NumberOfObjects,
        /*[in]*/ double AngleToFill,
        /*[in]*/ VARIANT CenterPoint,
        /*[out,retval]*/ VARIANT * pArrayObjs ) = 0;
      virtual HRESULT __stdcall raw_ArrayRectangular (
        /*[in]*/ int NumberOfRows,
        /*[in]*/ int NumberOfColumns,
        /*[in]*/ int NumberOfLevels,
        /*[in]*/ double DistBetweenRows,
        /*[in]*/ double DistBetweenCols,
        /*[in]*/ double DistBetweenLevels,
        /*[out,retval]*/ VARIANT * pArrayObjs ) = 0;
      virtual HRESULT __stdcall raw_Highlight (
        /*[in]*/ VARIANT_BOOL HighlightFlag ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ IDispatch * * pCopyObj ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT FromPoint,
        /*[in]*/ VARIANT ToPoint ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ VARIANT BasePoint,
        /*[in]*/ double RotationAngle ) = 0;
      virtual HRESULT __stdcall raw_Rotate3D (
        /*[in]*/ VARIANT Point1,
        /*[in]*/ VARIANT Point2,
        /*[in]*/ double RotationAngle ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ VARIANT Point1,
        /*[in]*/ VARIANT Point2,
        /*[out,retval]*/ IDispatch * * pMirrorObj ) = 0;
      virtual HRESULT __stdcall raw_Mirror3D (
        /*[in]*/ VARIANT Point1,
        /*[in]*/ VARIANT Point2,
        /*[in]*/ VARIANT point3,
        /*[out,retval]*/ IDispatch * * pMirrorObj ) = 0;
      virtual HRESULT __stdcall raw_ScaleEntity (
        /*[in]*/ VARIANT BasePoint,
        /*[in]*/ double ScaleFactor ) = 0;
      virtual HRESULT __stdcall raw_TransformBy (
        /*[in]*/ VARIANT TransformationMatrix ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall raw_GetBoundingBox (
        /*[out]*/ VARIANT * MinPoint,
        /*[out]*/ VARIANT * MaxPoint ) = 0;
      virtual HRESULT __stdcall raw_IntersectWith (
        /*[in]*/ IDispatch * IntersectObject,
        /*[in]*/ enum AcExtendOption option,
        /*[out,retval]*/ VARIANT * intPoints ) = 0;
      virtual HRESULT __stdcall get_PlotStyleName (
        /*[out,retval]*/ BSTR * plotStyle ) = 0;
      virtual HRESULT __stdcall put_PlotStyleName (
        /*[in]*/ BSTR plotStyle ) = 0;
      virtual HRESULT __stdcall get_Lineweight (
        /*[out,retval]*/ ACAD_LWEIGHT * Lineweight ) = 0;
      virtual HRESULT __stdcall put_Lineweight (
        /*[in]*/ ACAD_LWEIGHT Lineweight ) = 0;
      virtual HRESULT __stdcall get_EntityTransparency (
        /*[out,retval]*/ BSTR * transparency ) = 0;
      virtual HRESULT __stdcall put_EntityTransparency (
        /*[in]*/ BSTR transparency ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct IAcadHyperlinks * * Hyperlinks ) = 0;
      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ BSTR * Material ) = 0;
      virtual HRESULT __stdcall put_Material (
        /*[in]*/ BSTR Material ) = 0;
      virtual HRESULT __stdcall get_EntityName (
        /*[out,retval]*/ BSTR * EntityName ) = 0;
      virtual HRESULT __stdcall get_EntityType (
        /*[out,retval]*/ long * entType ) = 0;
      virtual HRESULT __stdcall get_color (
        /*[out,retval]*/ ACAD_COLOR * color ) = 0;
      virtual HRESULT __stdcall put_color (
        /*[in]*/ ACAD_COLOR color ) = 0;
};

struct __declspec(uuid("1759387a-60a3-41e5-a8c5-90a082b32bb2"))
IAcad3DFace : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetVisibilityEdge1,put=PutVisibilityEdge1))
    VARIANT_BOOL VisibilityEdge1;
    __declspec(property(get=GetVisibilityEdge2,put=PutVisibilityEdge2))
    VARIANT_BOOL VisibilityEdge2;
    __declspec(property(get=GetVisibilityEdge3,put=PutVisibilityEdge3))
    VARIANT_BOOL VisibilityEdge3;
    __declspec(property(get=GetVisibilityEdge4,put=PutVisibilityEdge4))
    VARIANT_BOOL VisibilityEdge4;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & corners );
    VARIANT_BOOL GetVisibilityEdge1 ( );
    void PutVisibilityEdge1 (
        VARIANT_BOOL visibility );
    VARIANT_BOOL GetVisibilityEdge2 ( );
    void PutVisibilityEdge2 (
        VARIANT_BOOL visibility );
    VARIANT_BOOL GetVisibilityEdge3 ( );
    void PutVisibilityEdge3 (
        VARIANT_BOOL visibility );
    VARIANT_BOOL GetVisibilityEdge4 ( );
    void PutVisibilityEdge4 (
        VARIANT_BOOL visibility );
    VARIANT_BOOL GetInvisibleEdge (
        int Index );
    HRESULT SetInvisibleEdge (
        int Index,
        VARIANT_BOOL State );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Coordinates (
        /*[out,retval]*/ VARIANT * corners ) = 0;
      virtual HRESULT __stdcall put_Coordinates (
        /*[in]*/ VARIANT corners ) = 0;
      virtual HRESULT __stdcall get_VisibilityEdge1 (
        /*[out,retval]*/ VARIANT_BOOL * visibility ) = 0;
      virtual HRESULT __stdcall put_VisibilityEdge1 (
        /*[in]*/ VARIANT_BOOL visibility ) = 0;
      virtual HRESULT __stdcall get_VisibilityEdge2 (
        /*[out,retval]*/ VARIANT_BOOL * visibility ) = 0;
      virtual HRESULT __stdcall put_VisibilityEdge2 (
        /*[in]*/ VARIANT_BOOL visibility ) = 0;
      virtual HRESULT __stdcall get_VisibilityEdge3 (
        /*[out,retval]*/ VARIANT_BOOL * visibility ) = 0;
      virtual HRESULT __stdcall put_VisibilityEdge3 (
        /*[in]*/ VARIANT_BOOL visibility ) = 0;
      virtual HRESULT __stdcall get_VisibilityEdge4 (
        /*[out,retval]*/ VARIANT_BOOL * visibility ) = 0;
      virtual HRESULT __stdcall put_VisibilityEdge4 (
        /*[in]*/ VARIANT_BOOL visibility ) = 0;
      virtual HRESULT __stdcall raw_GetInvisibleEdge (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT_BOOL * bVisible ) = 0;
      virtual HRESULT __stdcall raw_SetInvisibleEdge (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT_BOOL State ) = 0;
      virtual HRESULT __stdcall get_Coordinate (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Coordinate (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("039b9382-f2e7-4ab6-9461-cf2e763e7a57"))
IAcadPolygonMesh : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetMClose,put=PutMClose))
    VARIANT_BOOL MClose;
    __declspec(property(get=GetNClose,put=PutNClose))
    VARIANT_BOOL NClose;
    __declspec(property(get=GetMDensity,put=PutMDensity))
    long MDensity;
    __declspec(property(get=GetNDensity,put=PutNDensity))
    long NDensity;
    __declspec(property(get=GetMVertexCount))
    long MVertexCount;
    __declspec(property(get=GetNVertexCount))
    long NVertexCount;
    __declspec(property(get=GetType,put=PutType))
    enum AcPolymeshType Type;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & Coordinates );
    VARIANT_BOOL GetMClose ( );
    void PutMClose (
        VARIANT_BOOL bClose );
    VARIANT_BOOL GetNClose ( );
    void PutNClose (
        VARIANT_BOOL bClose );
    long GetMDensity ( );
    void PutMDensity (
        long density );
    long GetNDensity ( );
    void PutNDensity (
        long density );
    long GetMVertexCount ( );
    long GetNVertexCount ( );
    enum AcPolymeshType GetType ( );
    void PutType (
        enum AcPolymeshType Type );
    HRESULT AppendVertex (
        const _variant_t & vertex );
    _variant_t Explode ( );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Coordinates (
        /*[out,retval]*/ VARIANT * Coordinates ) = 0;
      virtual HRESULT __stdcall put_Coordinates (
        /*[in]*/ VARIANT Coordinates ) = 0;
      virtual HRESULT __stdcall get_MClose (
        /*[out,retval]*/ VARIANT_BOOL * bClose ) = 0;
      virtual HRESULT __stdcall put_MClose (
        /*[in]*/ VARIANT_BOOL bClose ) = 0;
      virtual HRESULT __stdcall get_NClose (
        /*[out,retval]*/ VARIANT_BOOL * bClose ) = 0;
      virtual HRESULT __stdcall put_NClose (
        /*[in]*/ VARIANT_BOOL bClose ) = 0;
      virtual HRESULT __stdcall get_MDensity (
        /*[out,retval]*/ long * density ) = 0;
      virtual HRESULT __stdcall put_MDensity (
        /*[in]*/ long density ) = 0;
      virtual HRESULT __stdcall get_NDensity (
        /*[out,retval]*/ long * density ) = 0;
      virtual HRESULT __stdcall put_NDensity (
        /*[in]*/ long density ) = 0;
      virtual HRESULT __stdcall get_MVertexCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_NVertexCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AcPolymeshType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum AcPolymeshType Type ) = 0;
      virtual HRESULT __stdcall raw_AppendVertex (
        /*[in]*/ VARIANT vertex ) = 0;
      virtual HRESULT __stdcall raw_Explode (
        /*[out,retval]*/ VARIANT * pArrayObjs ) = 0;
      virtual HRESULT __stdcall get_Coordinate (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Coordinate (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("4fee5511-1bd7-4ec7-9027-a9113a016345"))
IAcad3DPolyline : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];
    __declspec(property(get=GetType,put=PutType))
    enum Ac3DPolylineType Type;
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & Coordinates );
    HRESULT AppendVertex (
        const _variant_t & vertex );
    _variant_t Explode ( );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );
    enum Ac3DPolylineType GetType ( );
    void PutType (
        enum Ac3DPolylineType Type );
    VARIANT_BOOL GetClosed ( );
    void PutClosed (
        VARIANT_BOOL fClose );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Coordinates (
        /*[out,retval]*/ VARIANT * Coordinates ) = 0;
      virtual HRESULT __stdcall put_Coordinates (
        /*[in]*/ VARIANT Coordinates ) = 0;
      virtual HRESULT __stdcall raw_AppendVertex (
        /*[in]*/ VARIANT vertex ) = 0;
      virtual HRESULT __stdcall raw_Explode (
        /*[out,retval]*/ VARIANT * pArrayObjs ) = 0;
      virtual HRESULT __stdcall get_Coordinate (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Coordinate (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Ac3DPolylineType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Ac3DPolylineType Type ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * fClose ) = 0;
      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL fClose ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Length ) = 0;
};

struct __declspec(uuid("64dc9029-fd27-48de-85b8-a471f654c20b"))
IAcadArc : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStartPoint))
    _variant_t StartPoint;
    __declspec(property(get=GetCenter,put=PutCenter))
    _variant_t Center;
    __declspec(property(get=GetEndPoint))
    _variant_t EndPoint;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    ACAD_ANGLE StartAngle;
    __declspec(property(get=GetEndAngle,put=PutEndAngle))
    ACAD_ANGLE EndAngle;
    __declspec(property(get=GetTotalAngle))
    ACAD_ANGLE TotalAngle;
    __declspec(property(get=GetArcLength))
    ACAD_DISTANCE ArcLength;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartPoint ( );
    _variant_t GetCenter ( );
    void PutCenter (
        const _variant_t & CenterPoint );
    _variant_t GetEndPoint ( );
    double GetRadius ( );
    void PutRadius (
        double Radius );
    ACAD_ANGLE GetStartAngle ( );
    void PutStartAngle (
        ACAD_ANGLE Angle );
    ACAD_ANGLE GetEndAngle ( );
    void PutEndAngle (
        ACAD_ANGLE Angle );
    ACAD_ANGLE GetTotalAngle ( );
    ACAD_DISTANCE GetArcLength ( );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    _variant_t Offset (
        double Distance );
    double GetArea ( );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ VARIANT * StartPoint ) = 0;
      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ VARIANT * CenterPoint ) = 0;
      virtual HRESULT __stdcall put_Center (
        /*[in]*/ VARIANT CenterPoint ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ VARIANT * EndPoint ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ ACAD_ANGLE * Angle ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ ACAD_ANGLE Angle ) = 0;
      virtual HRESULT __stdcall get_EndAngle (
        /*[out,retval]*/ ACAD_ANGLE * Angle ) = 0;
      virtual HRESULT __stdcall put_EndAngle (
        /*[in]*/ ACAD_ANGLE Angle ) = 0;
      virtual HRESULT __stdcall get_TotalAngle (
        /*[out,retval]*/ ACAD_ANGLE * TotalAngle ) = 0;
      virtual HRESULT __stdcall get_ArcLength (
        /*[out,retval]*/ ACAD_DISTANCE * ArcLength ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * Thickness ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double Thickness ) = 0;
      virtual HRESULT __stdcall raw_Offset (
        /*[in]*/ double Distance,
        /*[out,retval]*/ VARIANT * pOffsetCurves ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
};

struct __declspec(uuid("99b991ad-2222-48dd-be16-59e40d03b561"))
IAcadAttribute : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetFieldLength,put=PutFieldLength))
    long FieldLength;
    __declspec(property(get=GetTagString,put=PutTagString))
    _bstr_t TagString;
    __declspec(property(get=GetPromptString,put=PutPromptString))
    _bstr_t PromptString;
    __declspec(property(get=GetTextString,put=PutTextString))
    _bstr_t TextString;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum AcAlignment Alignment;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum AcHorizontalAlignment HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum AcVerticalAlignment VerticalAlignment;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetObliqueAngle,put=PutObliqueAngle))
    ACAD_ANGLE ObliqueAngle;
    __declspec(property(get=GetTextAlignmentPoint,put=PutTextAlignmentPoint))
    _variant_t TextAlignmentPoint;
    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetTextGenerationFlag,put=PutTextGenerationFlag))
    long TextGenerationFlag;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetMode,put=PutMode))
    long Mode;
    __declspec(property(get=GetUpsideDown,put=PutUpsideDown))
    VARIANT_BOOL UpsideDown;
    __declspec(property(get=GetBackward,put=PutBackward))
    VARIANT_BOOL Backward;
    __declspec(property(get=GetInvisible,put=PutInvisible))
    VARIANT_BOOL Invisible;
    __declspec(property(get=GetConstant,put=PutConstant))
    VARIANT_BOOL Constant;
    __declspec(property(get=GetVerify,put=PutVerify))
    VARIANT_BOOL Verify;
    __declspec(property(get=GetPreset,put=PutPreset))
    VARIANT_BOOL Preset;
    __declspec(property(get=GetLockPosition,put=PutLockPosition))
    VARIANT_BOOL LockPosition;
    __declspec(property(get=GetMTextAttribute,put=PutMTextAttribute))
    VARIANT_BOOL MTextAttribute;
    __declspec(property(get=GetMTextAttributeContent,put=PutMTextAttributeContent))
    _bstr_t MTextAttributeContent;
    __declspec(property(get=GetMTextDrawingDirection,put=PutMTextDrawingDirection))
    enum AcDrawingDirection MTextDrawingDirection;

    //
    // Wrapper methods for error-handling
    //

    long GetFieldLength ( );
    void PutFieldLength (
        long fieldLen );
    _bstr_t GetTagString ( );
    void PutTagString (
        _bstr_t Tag );
    _bstr_t GetPromptString ( );
    void PutPromptString (
        _bstr_t bstrPrompt );
    _bstr_t GetTextString ( );
    void PutTextString (
        _bstr_t bstrText );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t Name );
    enum AcAlignment GetAlignment ( );
    void PutAlignment (
        enum AcAlignment align );
    enum AcHorizontalAlignment GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum AcHorizontalAlignment horizAlign );
    enum AcVerticalAlignment GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum AcVerticalAlignment vertiAlign );
    double GetHeight ( );
    void PutHeight (
        double Height );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS scalFactor );
    ACAD_ANGLE GetObliqueAngle ( );
    void PutObliqueAngle (
        ACAD_ANGLE obliAngle );
    _variant_t GetTextAlignmentPoint ( );
    void PutTextAlignmentPoint (
        const _variant_t & alignPoint );
    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    long GetTextGenerationFlag ( );
    void PutTextGenerationFlag (
        long textGenFlag );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    long GetMode ( );
    void PutMode (
        long Mode );
    VARIANT_BOOL GetUpsideDown ( );
    void PutUpsideDown (
        VARIANT_BOOL bUpsideDown );
    VARIANT_BOOL GetBackward ( );
    void PutBackward (
        VARIANT_BOOL bBackward );
    VARIANT_BOOL GetInvisible ( );
    void PutInvisible (
        VARIANT_BOOL bInvisible );
    VARIANT_BOOL GetConstant ( );
    void PutConstant (
        VARIANT_BOOL bConstant );
    VARIANT_BOOL GetVerify ( );
    void PutVerify (
        VARIANT_BOOL bVerify );
    VARIANT_BOOL GetPreset ( );
    void PutPreset (
        VARIANT_BOOL bPreset );
    VARIANT_BOOL GetLockPosition ( );
    void PutLockPosition (
        VARIANT_BOOL bLockPosition );
    VARIANT_BOOL GetMTextAttribute ( );
    void PutMTextAttribute (
        VARIANT_BOOL bMTextAttribute );
    _bstr_t GetMTextAttributeContent ( );
    void PutMTextAttributeContent (
        _bstr_t content );
    HRESULT UpdateMTextAttribute ( );
    double GetMTextBoundaryWidth ( );
    void PutMTextBoundaryWidth (
        double boundaryWidth );
    enum AcDrawingDirection GetMTextDrawingDirection ( );
    void PutMTextDrawingDirection (
        enum AcDrawingDirection drawDir );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FieldLength (
        /*[out,retval]*/ long * fieldLen ) = 0;
      virtual HRESULT __stdcall put_FieldLength (
        /*[in]*/ long fieldLen ) = 0;
      virtual HRESULT __stdcall get_TagString (
        /*[out,retval]*/ BSTR * Tag ) = 0;
      virtual HRESULT __stdcall put_TagString (
        /*[in]*/ BSTR Tag ) = 0;
      virtual HRESULT __stdcall get_PromptString (
        /*[out,retval]*/ BSTR * bstrPrompt ) = 0;
      virtual HRESULT __stdcall put_PromptString (
        /*[in]*/ BSTR bstrPrompt ) = 0;
      virtual HRESULT __stdcall get_TextString (
        /*[out,retval]*/ BSTR * bstrText ) = 0;
      virtual HRESULT __stdcall put_TextString (
        /*[in]*/ BSTR bstrText ) = 0;
      virtual HRESULT __stdcall get_StyleName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_StyleName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum AcAlignment * align ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum AcAlignment align ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ enum AcHorizontalAlignment * horizAlign ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ enum AcHorizontalAlignment horizAlign ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ enum AcVerticalAlignment * vertiAlign ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ enum AcVerticalAlignment vertiAlign ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ ACAD_ANGLE * rotAngle ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ ACAD_ANGLE rotAngle ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * scalFactor ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ ACAD_NOUNITS scalFactor ) = 0;
      virtual HRESULT __stdcall get_ObliqueAngle (
        /*[out,retval]*/ ACAD_ANGLE * obliAngle ) = 0;
      virtual HRESULT __stdcall put_ObliqueAngle (
        /*[in]*/ ACAD_ANGLE obliAngle ) = 0;
      virtual HRESULT __stdcall get_TextAlignmentPoint (
        /*[out,retval]*/ VARIANT * alignPoint ) = 0;
      virtual HRESULT __stdcall put_TextAlignmentPoint (
        /*[in]*/ VARIANT alignPoint ) = 0;
      virtual HRESULT __stdcall get_InsertionPoint (
        /*[out,retval]*/ VARIANT * insPoint ) = 0;
      virtual HRESULT __stdcall put_InsertionPoint (
        /*[in]*/ VARIANT insPoint ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_TextGenerationFlag (
        /*[out,retval]*/ long * textGenFlag ) = 0;
      virtual HRESULT __stdcall put_TextGenerationFlag (
        /*[in]*/ long textGenFlag ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * Thickness ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double Thickness ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ long * Mode ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ long Mode ) = 0;
      virtual HRESULT __stdcall get_UpsideDown (
        /*[out,retval]*/ VARIANT_BOOL * bUpsideDown ) = 0;
      virtual HRESULT __stdcall put_UpsideDown (
        /*[in]*/ VARIANT_BOOL bUpsideDown ) = 0;
      virtual HRESULT __stdcall get_Backward (
        /*[out,retval]*/ VARIANT_BOOL * bBackward ) = 0;
      virtual HRESULT __stdcall put_Backward (
        /*[in]*/ VARIANT_BOOL bBackward ) = 0;
      virtual HRESULT __stdcall get_Invisible (
        /*[out,retval]*/ VARIANT_BOOL * bInvisible ) = 0;
      virtual HRESULT __stdcall put_Invisible (
        /*[in]*/ VARIANT_BOOL bInvisible ) = 0;
      virtual HRESULT __stdcall get_Constant (
        /*[out,retval]*/ VARIANT_BOOL * bConstant ) = 0;
      virtual HRESULT __stdcall put_Constant (
        /*[in]*/ VARIANT_BOOL bConstant ) = 0;
      virtual HRESULT __stdcall get_Verify (
        /*[out,retval]*/ VARIANT_BOOL * bVerify ) = 0;
      virtual HRESULT __stdcall put_Verify (
        /*[in]*/ VARIANT_BOOL bVerify ) = 0;
      virtual HRESULT __stdcall get_Preset (
        /*[out,retval]*/ VARIANT_BOOL * bPreset ) = 0;
      virtual HRESULT __stdcall put_Preset (
        /*[in]*/ VARIANT_BOOL bPreset ) = 0;
      virtual HRESULT __stdcall get_LockPosition (
        /*[out,retval]*/ VARIANT_BOOL * bLockPosition ) = 0;
      virtual HRESULT __stdcall put_LockPosition (
        /*[in]*/ VARIANT_BOOL bLockPosition ) = 0;
      virtual HRESULT __stdcall get_MTextAttribute (
        /*[out,retval]*/ VARIANT_BOOL * bMTextAttribute ) = 0;
      virtual HRESULT __stdcall put_MTextAttribute (
        /*[in]*/ VARIANT_BOOL bMTextAttribute ) = 0;
      virtual HRESULT __stdcall get_MTextAttributeContent (
        /*[out,retval]*/ BSTR * content ) = 0;
      virtual HRESULT __stdcall put_MTextAttributeContent (
        /*[in]*/ BSTR content ) = 0;
      virtual HRESULT __stdcall raw_UpdateMTextAttribute ( ) = 0;
      virtual HRESULT __stdcall get_MTextBoundaryWidth (
        /*[out,retval]*/ double * boundaryWidth ) = 0;
      virtual HRESULT __stdcall put_MTextBoundaryWidth (
        double boundaryWidth ) = 0;
      virtual HRESULT __stdcall get_MTextDrawingDirection (
        /*[out,retval]*/ enum AcDrawingDirection * drawDir ) = 0;
      virtual HRESULT __stdcall put_MTextDrawingDirection (
        /*[in]*/ enum AcDrawingDirection drawDir ) = 0;
};

struct __declspec(uuid("60f904e0-3634-4cc3-b4cd-b15940063bf1"))
IAcadRegion : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetCentroid))
    _variant_t Centroid;
    __declspec(property(get=GetMomentOfInertia))
    _variant_t MomentOfInertia;
    __declspec(property(get=GetNormal))
    _variant_t Normal;
    __declspec(property(get=GetPerimeter))
    double Perimeter;
    __declspec(property(get=GetPrincipalDirections))
    _variant_t PrincipalDirections;
    __declspec(property(get=GetPrincipalMoments))
    _variant_t PrincipalMoments;
    __declspec(property(get=GetProductOfInertia))
    double ProductOfInertia;
    __declspec(property(get=GetRadiiOfGyration))
    _variant_t RadiiOfGyration;

    //
    // Wrapper methods for error-handling
    //

    double GetArea ( );
    _variant_t GetCentroid ( );
    _variant_t GetMomentOfInertia ( );
    _variant_t GetNormal ( );
    double GetPerimeter ( );
    _variant_t GetPrincipalDirections ( );
    _variant_t GetPrincipalMoments ( );
    double GetProductOfInertia ( );
    _variant_t GetRadiiOfGyration ( );
    HRESULT Boolean (
        enum AcBooleanType Operation,
        struct IAcadRegion * Object );
    _variant_t Explode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall get_Centroid (
        /*[out,retval]*/ VARIANT * Centroid ) = 0;
      virtual HRESULT __stdcall get_MomentOfInertia (
        /*[out,retval]*/ VARIANT * momentInertia ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall get_Perimeter (
        /*[out,retval]*/ double * Perimeter ) = 0;
      virtual HRESULT __stdcall get_PrincipalDirections (
        /*[out,retval]*/ VARIANT * prinDir ) = 0;
      virtual HRESULT __stdcall get_PrincipalMoments (
        /*[out,retval]*/ VARIANT * prinMoments ) = 0;
      virtual HRESULT __stdcall get_ProductOfInertia (
        /*[out,retval]*/ double * prodInertia ) = 0;
      virtual HRESULT __stdcall get_RadiiOfGyration (
        /*[out,retval]*/ VARIANT * radiiGyration ) = 0;
      virtual HRESULT __stdcall raw_Boolean (
        /*[in]*/ enum AcBooleanType Operation,
        /*[in]*/ struct IAcadRegion * Object ) = 0;
      virtual HRESULT __stdcall raw_Explode (
        /*[out,retval]*/ VARIANT * pArrayObjs ) = 0;
};

struct __declspec(uuid("9af5dc27-d177-4810-b524-a63c9f5993c2"))
IAcad3DSolid : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCentroid))
    _variant_t Centroid;
    __declspec(property(get=GetMomentOfInertia))
    _variant_t MomentOfInertia;
    __declspec(property(get=GetPrincipalDirections))
    _variant_t PrincipalDirections;
    __declspec(property(get=GetPrincipalMoments))
    _variant_t PrincipalMoments;
    __declspec(property(get=GetProductOfInertia))
    _variant_t ProductOfInertia;
    __declspec(property(get=GetRadiiOfGyration))
    _variant_t RadiiOfGyration;
    __declspec(property(get=GetVolume))
    double Volume;
    __declspec(property(get=GetSolidType))
    _bstr_t SolidType;
    __declspec(property(get=GetPosition,put=PutPosition))
    _variant_t Position;
    __declspec(property(get=GetHistory,put=PutHistory))
    VARIANT_BOOL History;
    __declspec(property(get=GetShowHistory,put=PutShowHistory))
    VARIANT_BOOL ShowHistory;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCentroid ( );
    _variant_t GetMomentOfInertia ( );
    _variant_t GetPrincipalDirections ( );
    _variant_t GetPrincipalMoments ( );
    _variant_t GetProductOfInertia ( );
    _variant_t GetRadiiOfGyration ( );
    double GetVolume ( );
    HRESULT Boolean (
        enum AcBooleanType Operation,
        struct IAcad3DSolid * SolidObject );
    IAcad3DSolidPtr CheckInterference (
        struct IAcad3DSolid * Object,
        VARIANT_BOOL CreateInterferenceSolid,
        VARIANT_BOOL * SolidsInterfere );
    IAcadRegionPtr SectionSolid (
        const _variant_t & Point1,
        const _variant_t & Point2,
        const _variant_t & point3 );
    IAcad3DSolidPtr SliceSolid (
        const _variant_t & Point1,
        const _variant_t & Point2,
        const _variant_t & point3,
        VARIANT_BOOL Negative );
    _bstr_t GetSolidType ( );
    _variant_t GetPosition ( );
    void PutPosition (
        const _variant_t & Position );
    VARIANT_BOOL GetHistory ( );
    void PutHistory (
        VARIANT_BOOL bHistory );
    VARIANT_BOOL GetShowHistory ( );
    void PutShowHistory (
        VARIANT_BOOL Position );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Centroid (
        /*[out,retval]*/ VARIANT * Centroid ) = 0;
      virtual HRESULT __stdcall get_MomentOfInertia (
        /*[out,retval]*/ VARIANT * momentInertia ) = 0;
      virtual HRESULT __stdcall get_PrincipalDirections (
        /*[out,retval]*/ VARIANT * prinDir ) = 0;
      virtual HRESULT __stdcall get_PrincipalMoments (
        /*[out,retval]*/ VARIANT * prinMoments ) = 0;
      virtual HRESULT __stdcall get_ProductOfInertia (
        /*[out,retval]*/ VARIANT * prodInertia ) = 0;
      virtual HRESULT __stdcall get_RadiiOfGyration (
        /*[out,retval]*/ VARIANT * radiiGyration ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ double * Volume ) = 0;
      virtual HRESULT __stdcall raw_Boolean (
        /*[in]*/ enum AcBooleanType Operation,
        /*[in]*/ struct IAcad3DSolid * SolidObject ) = 0;
      virtual HRESULT __stdcall raw_CheckInterference (
        /*[in]*/ struct IAcad3DSolid * Object,
        /*[in]*/ VARIANT_BOOL CreateInterferenceSolid,
        /*[out]*/ VARIANT_BOOL * SolidsInterfere,
        /*[out,retval]*/ struct IAcad3DSolid * * pIntSolid ) = 0;
      virtual HRESULT __stdcall raw_SectionSolid (
        /*[in]*/ VARIANT Point1,
        /*[in]*/ VARIANT Point2,
        /*[in]*/ VARIANT point3,
        /*[out,retval]*/ struct IAcadRegion * * pRegion ) = 0;
      virtual HRESULT __stdcall raw_SliceSolid (
        /*[in]*/ VARIANT Point1,
        /*[in]*/ VARIANT Point2,
        /*[in]*/ VARIANT point3,
        /*[in]*/ VARIANT_BOOL Negative,
        /*[out,retval]*/ struct IAcad3DSolid * * pNegSideSolid ) = 0;
      virtual HRESULT __stdcall get_SolidType (
        /*[out,retval]*/ BSTR * SolidType ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ VARIANT * Position ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ VARIANT Position ) = 0;
      virtual HRESULT __stdcall get_History (
        /*[out,retval]*/ VARIANT_BOOL * bHistory ) = 0;
      virtual HRESULT __stdcall put_History (
        /*[in]*/ VARIANT_BOOL bHistory ) = 0;
      virtual HRESULT __stdcall get_ShowHistory (
        /*[out,retval]*/ VARIANT_BOOL * Position ) = 0;
      virtual HRESULT __stdcall put_ShowHistory (
        /*[in]*/ VARIANT_BOOL Position ) = 0;
};

struct __declspec(uuid("4a749d26-4d00-4ea1-a121-a457c30e6f57"))
IAcadCircle : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter,put=PutCenter))
    _variant_t Center;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetDiameter,put=PutDiameter))
    double Diameter;
    __declspec(property(get=GetCircumference,put=PutCircumference))
    double Circumference;
    __declspec(property(get=GetArea,put=PutArea))
    double Area;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCenter ( );
    void PutCenter (
        const _variant_t & CenterPoint );
    double GetRadius ( );
    void PutRadius (
        double Radius );
    double GetDiameter ( );
    void PutDiameter (
        double Diameter );
    double GetCircumference ( );
    void PutCircumference (
        double Circumference );
    double GetArea ( );
    void PutArea (
        double Area );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    _variant_t Offset (
        double Distance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ VARIANT * CenterPoint ) = 0;
      virtual HRESULT __stdcall put_Center (
        /*[in]*/ VARIANT CenterPoint ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ double * Diameter ) = 0;
      virtual HRESULT __stdcall put_Diameter (
        /*[in]*/ double Diameter ) = 0;
      virtual HRESULT __stdcall get_Circumference (
        /*[out,retval]*/ double * Circumference ) = 0;
      virtual HRESULT __stdcall put_Circumference (
        /*[in]*/ double Circumference ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall put_Area (
        /*[in]*/ double Area ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * Thickness ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double Thickness ) = 0;
      virtual HRESULT __stdcall raw_Offset (
        /*[in]*/ double Distance,
        /*[out,retval]*/ VARIANT * pOffsetCurves ) = 0;
};

struct __declspec(uuid("397baf06-05cd-44dd-a56a-11784c4fb7b5"))
IAcadDimension : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTextRotation,put=PutTextRotation))
    ACAD_ANGLE TextRotation;
    __declspec(property(get=GetTextOverride,put=PutTextOverride))
    _bstr_t TextOverride;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetDecimalSeparator,put=PutDecimalSeparator))
    _bstr_t DecimalSeparator;
    __declspec(property(get=GetTextGap,put=PutTextGap))
    double TextGap;
    __declspec(property(get=GetTextPrefix,put=PutTextPrefix))
    _bstr_t TextPrefix;
    __declspec(property(get=GetTextSuffix,put=PutTextSuffix))
    _bstr_t TextSuffix;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetVerticalTextPosition,put=PutVerticalTextPosition))
    enum AcDimVerticalJustification VerticalTextPosition;
    __declspec(property(get=GetTolerancePrecision,put=PutTolerancePrecision))
    enum AcDimPrecision TolerancePrecision;
    __declspec(property(get=GetToleranceHeightScale,put=PutToleranceHeightScale))
    ACAD_NOUNITS ToleranceHeightScale;
    __declspec(property(get=GetToleranceLowerLimit,put=PutToleranceLowerLimit))
    double ToleranceLowerLimit;
    __declspec(property(get=GetTextMovement,put=PutTextMovement))
    enum AcDimTextMovement TextMovement;
    __declspec(property(get=GetToleranceDisplay,put=PutToleranceDisplay))
    enum AcDimToleranceMethod ToleranceDisplay;
    __declspec(property(get=GetToleranceJustification,put=PutToleranceJustification))
    enum AcDimToleranceJustify ToleranceJustification;
    __declspec(property(get=GetToleranceUpperLimit,put=PutToleranceUpperLimit))
    double ToleranceUpperLimit;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;
    __declspec(property(get=GetSuppressLeadingZeros,put=PutSuppressLeadingZeros))
    VARIANT_BOOL SuppressLeadingZeros;
    __declspec(property(get=GetSuppressTrailingZeros,put=PutSuppressTrailingZeros))
    VARIANT_BOOL SuppressTrailingZeros;
    __declspec(property(get=GetToleranceSuppressLeadingZeros,put=PutToleranceSuppressLeadingZeros))
    VARIANT_BOOL ToleranceSuppressLeadingZeros;
    __declspec(property(get=GetToleranceSuppressTrailingZeros,put=PutToleranceSuppressTrailingZeros))
    VARIANT_BOOL ToleranceSuppressTrailingZeros;
    __declspec(property(get=GetTextFill,put=PutTextFill))
    VARIANT_BOOL TextFill;
    __declspec(property(get=GetTextFillColor,put=PutTextFillColor))
    ACAD_COLOR TextFillColor;
    __declspec(property(get=GetDimTxtDirection,put=PutDimTxtDirection))
    VARIANT_BOOL DimTxtDirection;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetTextPosition,put=PutTextPosition))
    _variant_t TextPosition;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    _variant_t GetTextPosition ( );
    void PutTextPosition (
        const _variant_t & textPos );
    ACAD_ANGLE GetTextRotation ( );
    void PutTextRotation (
        ACAD_ANGLE rotAngle );
    _bstr_t GetTextOverride ( );
    void PutTextOverride (
        _bstr_t bstrText );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t bstrName );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR color );
    _bstr_t GetDecimalSeparator ( );
    void PutDecimalSeparator (
        _bstr_t character );
    double GetTextGap ( );
    void PutTextGap (
        double Offset );
    _bstr_t GetTextPrefix ( );
    void PutTextPrefix (
        _bstr_t prefix );
    _bstr_t GetTextSuffix ( );
    void PutTextSuffix (
        _bstr_t suffix );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS factor );
    enum AcDimVerticalJustification GetVerticalTextPosition ( );
    void PutVerticalTextPosition (
        enum AcDimVerticalJustification Type );
    enum AcDimPrecision GetTolerancePrecision ( );
    void PutTolerancePrecision (
        enum AcDimPrecision precision );
    ACAD_NOUNITS GetToleranceHeightScale ( );
    void PutToleranceHeightScale (
        ACAD_NOUNITS scale );
    double GetToleranceLowerLimit ( );
    void PutToleranceLowerLimit (
        double lower );
    enum AcDimTextMovement GetTextMovement ( );
    void PutTextMovement (
        enum AcDimTextMovement Move );
    enum AcDimToleranceMethod GetToleranceDisplay ( );
    void PutToleranceDisplay (
        enum AcDimToleranceMethod method );
    enum AcDimToleranceJustify GetToleranceJustification ( );
    void PutToleranceJustification (
        enum AcDimToleranceJustify method );
    double GetToleranceUpperLimit ( );
    void PutToleranceUpperLimit (
        double upper );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t style );
    double GetTextHeight ( );
    void PutTextHeight (
        double Height );
    VARIANT_BOOL GetSuppressLeadingZeros ( );
    void PutSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressTrailingZeros ( );
    void PutSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressLeadingZeros ( );
    void PutToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressTrailingZeros ( );
    void PutToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetTextFill ( );
    void PutTextFill (
        VARIANT_BOOL bVal );
    ACAD_COLOR GetTextFillColor ( );
    void PutTextFillColor (
        ACAD_COLOR color );
    VARIANT_BOOL GetDimTxtDirection ( );
    void PutDimTxtDirection (
        VARIANT_BOOL bVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ ACAD_ANGLE * rotAngle ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ ACAD_ANGLE rotAngle ) = 0;
      virtual HRESULT __stdcall get_TextPosition (
        /*[out,retval]*/ VARIANT * textPos ) = 0;
      virtual HRESULT __stdcall put_TextPosition (
        /*[in]*/ VARIANT textPos ) = 0;
      virtual HRESULT __stdcall get_TextRotation (
        /*[out,retval]*/ ACAD_ANGLE * rotAngle ) = 0;
      virtual HRESULT __stdcall put_TextRotation (
        /*[in]*/ ACAD_ANGLE rotAngle ) = 0;
      virtual HRESULT __stdcall get_TextOverride (
        /*[out,retval]*/ BSTR * bstrText ) = 0;
      virtual HRESULT __stdcall put_TextOverride (
        /*[in]*/ BSTR bstrText ) = 0;
      virtual HRESULT __stdcall get_StyleName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_StyleName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * color ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR color ) = 0;
      virtual HRESULT __stdcall get_DecimalSeparator (
        /*[out,retval]*/ BSTR * character ) = 0;
      virtual HRESULT __stdcall put_DecimalSeparator (
        /*[in]*/ BSTR character ) = 0;
      virtual HRESULT __stdcall get_TextGap (
        /*[out,retval]*/ double * Offset ) = 0;
      virtual HRESULT __stdcall put_TextGap (
        /*[in]*/ double Offset ) = 0;
      virtual HRESULT __stdcall get_TextPrefix (
        /*[out,retval]*/ BSTR * prefix ) = 0;
      virtual HRESULT __stdcall put_TextPrefix (
        /*[in]*/ BSTR prefix ) = 0;
      virtual HRESULT __stdcall get_TextSuffix (
        /*[out,retval]*/ BSTR * suffix ) = 0;
      virtual HRESULT __stdcall put_TextSuffix (
        /*[in]*/ BSTR suffix ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * factor ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ ACAD_NOUNITS factor ) = 0;
      virtual HRESULT __stdcall get_VerticalTextPosition (
        /*[out,retval]*/ enum AcDimVerticalJustification * Type ) = 0;
      virtual HRESULT __stdcall put_VerticalTextPosition (
        /*[in]*/ enum AcDimVerticalJustification Type ) = 0;
      virtual HRESULT __stdcall get_TolerancePrecision (
        /*[out,retval]*/ enum AcDimPrecision * precision ) = 0;
      virtual HRESULT __stdcall put_TolerancePrecision (
        /*[in]*/ enum AcDimPrecision precision ) = 0;
      virtual HRESULT __stdcall get_ToleranceHeightScale (
        /*[out,retval]*/ ACAD_NOUNITS * scale ) = 0;
      virtual HRESULT __stdcall put_ToleranceHeightScale (
        /*[in]*/ ACAD_NOUNITS scale ) = 0;
      virtual HRESULT __stdcall get_ToleranceLowerLimit (
        /*[out,retval]*/ double * lower ) = 0;
      virtual HRESULT __stdcall put_ToleranceLowerLimit (
        /*[in]*/ double lower ) = 0;
      virtual HRESULT __stdcall get_TextMovement (
        /*[out,retval]*/ enum AcDimTextMovement * Move ) = 0;
      virtual HRESULT __stdcall put_TextMovement (
        /*[in]*/ enum AcDimTextMovement Move ) = 0;
      virtual HRESULT __stdcall get_ToleranceDisplay (
        /*[out,retval]*/ enum AcDimToleranceMethod * method ) = 0;
      virtual HRESULT __stdcall put_ToleranceDisplay (
        /*[in]*/ enum AcDimToleranceMethod method ) = 0;
      virtual HRESULT __stdcall get_ToleranceJustification (
        /*[out,retval]*/ enum AcDimToleranceJustify * method ) = 0;
      virtual HRESULT __stdcall put_ToleranceJustification (
        /*[in]*/ enum AcDimToleranceJustify method ) = 0;
      virtual HRESULT __stdcall get_ToleranceUpperLimit (
        /*[out,retval]*/ double * upper ) = 0;
      virtual HRESULT __stdcall put_ToleranceUpperLimit (
        /*[in]*/ double upper ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * style ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR style ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_SuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_TextFill (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_TextFill (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_TextFillColor (
        /*[out,retval]*/ ACAD_COLOR * color ) = 0;
      virtual HRESULT __stdcall put_TextFillColor (
        /*[in]*/ ACAD_COLOR color ) = 0;
      virtual HRESULT __stdcall get_DimTxtDirection (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_DimTxtDirection (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
};

struct __declspec(uuid("52729d26-9908-469d-a87c-b331059b94ea"))
IAcadDimAligned : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetExtLine1Point,put=PutExtLine1Point))
    _variant_t ExtLine1Point;
    __declspec(property(get=GetExtLine2Point,put=PutExtLine2Point))
    _variant_t ExtLine2Point;
    __declspec(property(get=GetAltUnits,put=PutAltUnits))
    VARIANT_BOOL AltUnits;
    __declspec(property(get=GetAltUnitsPrecision,put=PutAltUnitsPrecision))
    enum AcDimPrecision AltUnitsPrecision;
    __declspec(property(get=GetAltUnitsScale,put=PutAltUnitsScale))
    ACAD_NOUNITS AltUnitsScale;
    __declspec(property(get=GetAltRoundDistance,put=PutAltRoundDistance))
    double AltRoundDistance;
    __declspec(property(get=GetAltTolerancePrecision,put=PutAltTolerancePrecision))
    enum AcDimPrecision AltTolerancePrecision;
    __declspec(property(get=GetAltUnitsFormat,put=PutAltUnitsFormat))
    enum AcDimUnits AltUnitsFormat;
    __declspec(property(get=GetAltTextPrefix,put=PutAltTextPrefix))
    _bstr_t AltTextPrefix;
    __declspec(property(get=GetAltTextSuffix,put=PutAltTextSuffix))
    _bstr_t AltTextSuffix;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetExtensionLineColor,put=PutExtensionLineColor))
    ACAD_COLOR ExtensionLineColor;
    __declspec(property(get=GetPrimaryUnitsPrecision,put=PutPrimaryUnitsPrecision))
    enum AcDimPrecision PrimaryUnitsPrecision;
    __declspec(property(get=GetDimensionLineExtend,put=PutDimensionLineExtend))
    double DimensionLineExtend;
    __declspec(property(get=GetExtensionLineExtend,put=PutExtensionLineExtend))
    double ExtensionLineExtend;
    __declspec(property(get=GetFit,put=PutFit))
    enum AcDimFit Fit;
    __declspec(property(get=GetFractionFormat,put=PutFractionFormat))
    enum AcDimFractionType FractionFormat;
    __declspec(property(get=GetHorizontalTextPosition,put=PutHorizontalTextPosition))
    enum AcDimHorizontalJustification HorizontalTextPosition;
    __declspec(property(get=GetLinearScaleFactor,put=PutLinearScaleFactor))
    ACAD_NOUNITS LinearScaleFactor;
    __declspec(property(get=GetUnitsFormat,put=PutUnitsFormat))
    enum AcDimLUnits UnitsFormat;
    __declspec(property(get=GetExtensionLineWeight,put=PutExtensionLineWeight))
    ACAD_LWEIGHT ExtensionLineWeight;
    __declspec(property(get=GetRoundDistance,put=PutRoundDistance))
    double RoundDistance;
    __declspec(property(get=GetDimLine1Suppress,put=PutDimLine1Suppress))
    VARIANT_BOOL DimLine1Suppress;
    __declspec(property(get=GetDimLine2Suppress,put=PutDimLine2Suppress))
    VARIANT_BOOL DimLine2Suppress;
    __declspec(property(get=GetExtLine1Suppress,put=PutExtLine1Suppress))
    VARIANT_BOOL ExtLine1Suppress;
    __declspec(property(get=GetExtLine2Suppress,put=PutExtLine2Suppress))
    VARIANT_BOOL ExtLine2Suppress;
    __declspec(property(get=GetDimLineInside,put=PutDimLineInside))
    VARIANT_BOOL DimLineInside;
    __declspec(property(get=GetTextInsideAlign,put=PutTextInsideAlign))
    VARIANT_BOOL TextInsideAlign;
    __declspec(property(get=GetTextInside,put=PutTextInside))
    VARIANT_BOOL TextInside;
    __declspec(property(get=GetForceLineInside,put=PutForceLineInside))
    VARIANT_BOOL ForceLineInside;
    __declspec(property(get=GetTextOutsideAlign,put=PutTextOutsideAlign))
    VARIANT_BOOL TextOutsideAlign;
    __declspec(property(get=GetSubUnitsSuffix,put=PutSubUnitsSuffix))
    _bstr_t SubUnitsSuffix;
    __declspec(property(get=GetExtensionLineOffset,put=PutExtensionLineOffset))
    double ExtensionLineOffset;
    __declspec(property(get=GetSubUnitsFactor,put=PutSubUnitsFactor))
    double SubUnitsFactor;
    __declspec(property(get=GetAltSubUnitsSuffix,put=PutAltSubUnitsSuffix))
    _bstr_t AltSubUnitsSuffix;
    __declspec(property(get=GetAltSubUnitsFactor,put=PutAltSubUnitsFactor))
    double AltSubUnitsFactor;
    __declspec(property(get=GetAltSuppressLeadingZeros,put=PutAltSuppressLeadingZeros))
    VARIANT_BOOL AltSuppressLeadingZeros;
    __declspec(property(get=GetAltSuppressTrailingZeros,put=PutAltSuppressTrailingZeros))
    VARIANT_BOOL AltSuppressTrailingZeros;
    __declspec(property(get=GetAltSuppressZeroFeet,put=PutAltSuppressZeroFeet))
    VARIANT_BOOL AltSuppressZeroFeet;
    __declspec(property(get=GetAltSuppressZeroInches,put=PutAltSuppressZeroInches))
    VARIANT_BOOL AltSuppressZeroInches;
    __declspec(property(get=GetAltToleranceSuppressLeadingZeros,put=PutAltToleranceSuppressLeadingZeros))
    VARIANT_BOOL AltToleranceSuppressLeadingZeros;
    __declspec(property(get=GetAltToleranceSuppressTrailingZeros,put=PutAltToleranceSuppressTrailingZeros))
    VARIANT_BOOL AltToleranceSuppressTrailingZeros;
    __declspec(property(get=GetAltToleranceSuppressZeroFeet,put=PutAltToleranceSuppressZeroFeet))
    VARIANT_BOOL AltToleranceSuppressZeroFeet;
    __declspec(property(get=GetAltToleranceSuppressZeroInches,put=PutAltToleranceSuppressZeroInches))
    VARIANT_BOOL AltToleranceSuppressZeroInches;
    __declspec(property(get=GetSuppressZeroFeet,put=PutSuppressZeroFeet))
    VARIANT_BOOL SuppressZeroFeet;
    __declspec(property(get=GetSuppressZeroInches,put=PutSuppressZeroInches))
    VARIANT_BOOL SuppressZeroInches;
    __declspec(property(get=GetToleranceSuppressZeroFeet,put=PutToleranceSuppressZeroFeet))
    VARIANT_BOOL ToleranceSuppressZeroFeet;
    __declspec(property(get=GetToleranceSuppressZeroInches,put=PutToleranceSuppressZeroInches))
    VARIANT_BOOL ToleranceSuppressZeroInches;
    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetArrowhead1Type,put=PutArrowhead1Type))
    enum AcDimArrowheadType Arrowhead1Type;
    __declspec(property(get=GetArrowhead2Type,put=PutArrowhead2Type))
    enum AcDimArrowheadType Arrowhead2Type;
    __declspec(property(get=GetMeasurement))
    double Measurement;
    __declspec(property(get=GetArrowhead1Block,put=PutArrowhead1Block))
    _bstr_t Arrowhead1Block;
    __declspec(property(get=GetArrowhead2Block,put=PutArrowhead2Block))
    _bstr_t Arrowhead2Block;
    __declspec(property(get=GetDimensionLinetype,put=PutDimensionLinetype))
    _bstr_t DimensionLinetype;
    __declspec(property(get=GetExtLine1Linetype,put=PutExtLine1Linetype))
    _bstr_t ExtLine1Linetype;
    __declspec(property(get=GetExtLine2Linetype,put=PutExtLine2Linetype))
    _bstr_t ExtLine2Linetype;
    __declspec(property(get=GetExtLineFixedLenSuppress,put=PutExtLineFixedLenSuppress))
    VARIANT_BOOL ExtLineFixedLenSuppress;
    __declspec(property(get=GetExtLineFixedLen,put=PutExtLineFixedLen))
    double ExtLineFixedLen;
    __declspec(property(get=GetDimConstrForm,put=PutDimConstrForm))
    VARIANT_BOOL DimConstrForm;
    __declspec(property(get=GetDimConstrReference,put=PutDimConstrReference))
    VARIANT_BOOL DimConstrReference;
    __declspec(property(get=GetDimConstrName,put=PutDimConstrName))
    _bstr_t DimConstrName;
    __declspec(property(get=GetDimConstrExpression,put=PutDimConstrExpression))
    _bstr_t DimConstrExpression;
    __declspec(property(get=GetDimConstrValue,put=PutDimConstrValue))
    _bstr_t DimConstrValue;
    __declspec(property(get=GetDimConstrDesc,put=PutDimConstrDesc))
    _bstr_t DimConstrDesc;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetExtLine1Point ( );
    void PutExtLine1Point (
        const _variant_t & xLine1Point );
    _variant_t GetExtLine2Point ( );
    void PutExtLine2Point (
        const _variant_t & xLine2Point );
    VARIANT_BOOL GetAltUnits ( );
    void PutAltUnits (
        VARIANT_BOOL bAlternate );
    enum AcDimPrecision GetAltUnitsPrecision ( );
    void PutAltUnitsPrecision (
        enum AcDimPrecision precision );
    ACAD_NOUNITS GetAltUnitsScale ( );
    void PutAltUnitsScale (
        ACAD_NOUNITS scale );
    double GetAltRoundDistance ( );
    void PutAltRoundDistance (
        double Distance );
    enum AcDimPrecision GetAltTolerancePrecision ( );
    void PutAltTolerancePrecision (
        enum AcDimPrecision Distance );
    enum AcDimUnits GetAltUnitsFormat ( );
    void PutAltUnitsFormat (
        enum AcDimUnits Units );
    _bstr_t GetAltTextPrefix ( );
    void PutAltTextPrefix (
        _bstr_t prefix );
    _bstr_t GetAltTextSuffix ( );
    void PutAltTextSuffix (
        _bstr_t suffix );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR color );
    ACAD_COLOR GetExtensionLineColor ( );
    void PutExtensionLineColor (
        ACAD_COLOR color );
    enum AcDimPrecision GetPrimaryUnitsPrecision ( );
    void PutPrimaryUnitsPrecision (
        enum AcDimPrecision Prec );
    double GetDimensionLineExtend ( );
    void PutDimensionLineExtend (
        double extend );
    double GetExtensionLineExtend ( );
    void PutExtensionLineExtend (
        double extend );
    enum AcDimFit GetFit ( );
    void PutFit (
        enum AcDimFit fittype );
    enum AcDimFractionType GetFractionFormat ( );
    void PutFractionFormat (
        enum AcDimFractionType Type );
    enum AcDimHorizontalJustification GetHorizontalTextPosition ( );
    void PutHorizontalTextPosition (
        enum AcDimHorizontalJustification Type );
    ACAD_NOUNITS GetLinearScaleFactor ( );
    void PutLinearScaleFactor (
        ACAD_NOUNITS Type );
    enum AcDimLUnits GetUnitsFormat ( );
    void PutUnitsFormat (
        enum AcDimLUnits format );
    ACAD_LWEIGHT GetExtensionLineWeight ( );
    void PutExtensionLineWeight (
        ACAD_LWEIGHT lweight );
    double GetRoundDistance ( );
    void PutRoundDistance (
        double Distance );
    VARIANT_BOOL GetDimLine1Suppress ( );
    void PutDimLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLine2Suppress ( );
    void PutDimLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine1Suppress ( );
    void PutExtLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine2Suppress ( );
    void PutExtLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLineInside ( );
    void PutDimLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInsideAlign ( );
    void PutTextInsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInside ( );
    void PutTextInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetForceLineInside ( );
    void PutForceLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextOutsideAlign ( );
    void PutTextOutsideAlign (
        VARIANT_BOOL bInside );
    double GetExtensionLineOffset ( );
    void PutExtensionLineOffset (
        double Offset );
    VARIANT_BOOL GetAltSuppressLeadingZeros ( );
    void PutAltSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressTrailingZeros ( );
    void PutAltSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroFeet ( );
    void PutAltSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroInches ( );
    void PutAltSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressLeadingZeros ( );
    void PutAltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressTrailingZeros ( );
    void PutAltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroFeet ( );
    void PutAltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroInches ( );
    void PutAltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroFeet ( );
    void PutSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroInches ( );
    void PutSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroFeet ( );
    void PutToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroInches ( );
    void PutToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowhead1Type ( );
    void PutArrowhead1Type (
        enum AcDimArrowheadType Type );
    enum AcDimArrowheadType GetArrowhead2Type ( );
    void PutArrowhead2Type (
        enum AcDimArrowheadType Type );
    double GetMeasurement ( );
    _bstr_t GetArrowhead1Block ( );
    void PutArrowhead1Block (
        _bstr_t BlockName );
    _bstr_t GetArrowhead2Block ( );
    void PutArrowhead2Block (
        _bstr_t BlockName );
    _bstr_t GetDimensionLinetype ( );
    void PutDimensionLinetype (
        _bstr_t Linetype );
    _bstr_t GetExtLine1Linetype ( );
    void PutExtLine1Linetype (
        _bstr_t Linetype );
    _bstr_t GetExtLine2Linetype ( );
    void PutExtLine2Linetype (
        _bstr_t Linetype );
    VARIANT_BOOL GetExtLineFixedLenSuppress ( );
    void PutExtLineFixedLenSuppress (
        VARIANT_BOOL bFixedLen );
    double GetExtLineFixedLen ( );
    void PutExtLineFixedLen (
        double FixedLen );
    VARIANT_BOOL GetDimConstrForm ( );
    void PutDimConstrForm (
        VARIANT_BOOL bIsDynamic );
    VARIANT_BOOL GetDimConstrReference ( );
    void PutDimConstrReference (
        VARIANT_BOOL bIsReference );
    _bstr_t GetDimConstrName ( );
    void PutDimConstrName (
        _bstr_t bstrName );
    _bstr_t GetDimConstrExpression ( );
    void PutDimConstrExpression (
        _bstr_t bstrExpression );
    _bstr_t GetDimConstrValue ( );
    void PutDimConstrValue (
        _bstr_t Value );
    _bstr_t GetDimConstrDesc ( );
    void PutDimConstrDesc (
        _bstr_t bstrDescription );
    _bstr_t GetSubUnitsSuffix ( );
    void PutSubUnitsSuffix (
        _bstr_t suffix );
    double GetSubUnitsFactor ( );
    void PutSubUnitsFactor (
        double factor );
    _bstr_t GetAltSubUnitsSuffix ( );
    void PutAltSubUnitsSuffix (
        _bstr_t suffix );
    double GetAltSubUnitsFactor ( );
    void PutAltSubUnitsFactor (
        double factor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtLine1Point (
        /*[out,retval]*/ VARIANT * xLine1Point ) = 0;
      virtual HRESULT __stdcall put_ExtLine1Point (
        /*[in]*/ VARIANT xLine1Point ) = 0;
      virtual HRESULT __stdcall get_ExtLine2Point (
        /*[out,retval]*/ VARIANT * xLine2Point ) = 0;
      virtual HRESULT __stdcall put_ExtLine2Point (
        /*[in]*/ VARIANT xLine2Point ) = 0;
      virtual HRESULT __stdcall get_AltUnits (
        /*[out,retval]*/ VARIANT_BOOL * bAlternate ) = 0;
      virtual HRESULT __stdcall put_AltUnits (
        /*[in]*/ VARIANT_BOOL bAlternate ) = 0;
      virtual HRESULT __stdcall get_AltUnitsPrecision (
        /*[out,retval]*/ enum AcDimPrecision * precision ) = 0;
      virtual HRESULT __stdcall put_AltUnitsPrecision (
        /*[in]*/ enum AcDimPrecision precision ) = 0;
      virtual HRESULT __stdcall get_AltUnitsScale (
        /*[out,retval]*/ ACAD_NOUNITS * scale ) = 0;
      virtual HRESULT __stdcall put_AltUnitsScale (
        /*[in]*/ ACAD_NOUNITS scale ) = 0;
      virtual HRESULT __stdcall get_AltRoundDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_AltRoundDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_AltTolerancePrecision (
        /*[out,retval]*/ enum AcDimPrecision * Distance ) = 0;
      virtual HRESULT __stdcall put_AltTolerancePrecision (
        /*[in]*/ enum AcDimPrecision Distance ) = 0;
      virtual HRESULT __stdcall get_AltUnitsFormat (
        /*[out,retval]*/ enum AcDimUnits * Units ) = 0;
      virtual HRESULT __stdcall put_AltUnitsFormat (
        /*[in]*/ enum AcDimUnits Units ) = 0;
      virtual HRESULT __stdcall get_AltTextPrefix (
        /*[out,retval]*/ BSTR * prefix ) = 0;
      virtual HRESULT __stdcall put_AltTextPrefix (
        /*[in]*/ BSTR prefix ) = 0;
      virtual HRESULT __stdcall get_AltTextSuffix (
        /*[out,retval]*/ BSTR * suffix ) = 0;
      virtual HRESULT __stdcall put_AltTextSuffix (
        /*[in]*/ BSTR suffix ) = 0;
      virtual HRESULT __stdcall get_DimensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * color ) = 0;
      virtual HRESULT __stdcall put_DimensionLineColor (
        /*[in]*/ ACAD_COLOR color ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * color ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineColor (
        /*[in]*/ ACAD_COLOR color ) = 0;
      virtual HRESULT __stdcall get_PrimaryUnitsPrecision (
        /*[out,retval]*/ enum AcDimPrecision * Prec ) = 0;
      virtual HRESULT __stdcall put_PrimaryUnitsPrecision (
        /*[in]*/ enum AcDimPrecision Prec ) = 0;
      virtual HRESULT __stdcall get_DimensionLineExtend (
        /*[out,retval]*/ double * extend ) = 0;
      virtual HRESULT __stdcall put_DimensionLineExtend (
        /*[in]*/ double extend ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineExtend (
        /*[out,retval]*/ double * extend ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineExtend (
        /*[in]*/ double extend ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ enum AcDimFit * fittype ) = 0;
      virtual HRESULT __stdcall put_Fit (
        /*[in]*/ enum AcDimFit fittype ) = 0;
      virtual HRESULT __stdcall get_FractionFormat (
        /*[out,retval]*/ enum AcDimFractionType * Type ) = 0;
      virtual HRESULT __stdcall put_FractionFormat (
        /*[in]*/ enum AcDimFractionType Type ) = 0;
      virtual HRESULT __stdcall get_HorizontalTextPosition (
        /*[out,retval]*/ enum AcDimHorizontalJustification * Type ) = 0;
      virtual HRESULT __stdcall put_HorizontalTextPosition (
        /*[in]*/ enum AcDimHorizontalJustification Type ) = 0;
      virtual HRESULT __stdcall get_LinearScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * Type ) = 0;
      virtual HRESULT __stdcall put_LinearScaleFactor (
        /*[in]*/ ACAD_NOUNITS Type ) = 0;
      virtual HRESULT __stdcall get_UnitsFormat (
        /*[out,retval]*/ enum AcDimLUnits * format ) = 0;
      virtual HRESULT __stdcall put_UnitsFormat (
        /*[in]*/ enum AcDimLUnits format ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * lweight ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT lweight ) = 0;
      virtual HRESULT __stdcall get_RoundDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_RoundDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_DimLine1Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_DimLine1Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_DimLine2Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_DimLine2Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_ExtLine1Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_ExtLine1Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_ExtLine2Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_ExtLine2Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_DimLineInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_DimLineInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextInsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_ForceLineInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_ForceLineInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextOutsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextOutsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineOffset (
        /*[out,retval]*/ double * Offset ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineOffset (
        /*[in]*/ double Offset ) = 0;
      virtual HRESULT __stdcall get_AltSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_DimensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * weight ) = 0;
      virtual HRESULT __stdcall put_DimensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT weight ) = 0;
      virtual HRESULT __stdcall get_ArrowheadSize (
        /*[out,retval]*/ double * size ) = 0;
      virtual HRESULT __stdcall put_ArrowheadSize (
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall get_Arrowhead1Type (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_Arrowhead1Type (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_Arrowhead2Type (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_Arrowhead2Type (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_Measurement (
        /*[out,retval]*/ double * bVal ) = 0;
      virtual HRESULT __stdcall get_Arrowhead1Block (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_Arrowhead1Block (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_Arrowhead2Block (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_Arrowhead2Block (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_DimensionLinetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_DimensionLinetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLine1Linetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_ExtLine1Linetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLine2Linetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_ExtLine2Linetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLineFixedLenSuppress (
        /*[out,retval]*/ VARIANT_BOOL * bFixedLen ) = 0;
      virtual HRESULT __stdcall put_ExtLineFixedLenSuppress (
        /*[in]*/ VARIANT_BOOL bFixedLen ) = 0;
      virtual HRESULT __stdcall get_ExtLineFixedLen (
        /*[out,retval]*/ double * FixedLen ) = 0;
      virtual HRESULT __stdcall put_ExtLineFixedLen (
        /*[in]*/ double FixedLen ) = 0;
      virtual HRESULT __stdcall get_DimConstrForm (
        /*[out,retval]*/ VARIANT_BOOL * bIsDynamic ) = 0;
      virtual HRESULT __stdcall put_DimConstrForm (
        /*[in]*/ VARIANT_BOOL bIsDynamic ) = 0;
      virtual HRESULT __stdcall get_DimConstrReference (
        /*[out,retval]*/ VARIANT_BOOL * bIsReference ) = 0;
      virtual HRESULT __stdcall put_DimConstrReference (
        /*[in]*/ VARIANT_BOOL bIsReference ) = 0;
      virtual HRESULT __stdcall get_DimConstrName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_DimConstrName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_DimConstrExpression (
        /*[out,retval]*/ BSTR * bstrExpression ) = 0;
      virtual HRESULT __stdcall put_DimConstrExpression (
        /*[in]*/ BSTR bstrExpression ) = 0;
      virtual HRESULT __stdcall get_DimConstrValue (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_DimConstrValue (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_DimConstrDesc (
        /*[out,retval]*/ BSTR * bstrDescription ) = 0;
      virtual HRESULT __stdcall put_DimConstrDesc (
        /*[in]*/ BSTR bstrDescription ) = 0;
      virtual HRESULT __stdcall get_SubUnitsSuffix (
        /*[out,retval]*/ BSTR * suffix ) = 0;
      virtual HRESULT __stdcall put_SubUnitsSuffix (
        /*[in]*/ BSTR suffix ) = 0;
      virtual HRESULT __stdcall get_SubUnitsFactor (
        /*[out,retval]*/ double * factor ) = 0;
      virtual HRESULT __stdcall put_SubUnitsFactor (
        /*[in]*/ double factor ) = 0;
      virtual HRESULT __stdcall get_AltSubUnitsSuffix (
        /*[out,retval]*/ BSTR * suffix ) = 0;
      virtual HRESULT __stdcall put_AltSubUnitsSuffix (
        /*[in]*/ BSTR suffix ) = 0;
      virtual HRESULT __stdcall get_AltSubUnitsFactor (
        /*[out,retval]*/ double * factor ) = 0;
      virtual HRESULT __stdcall put_AltSubUnitsFactor (
        /*[in]*/ double factor ) = 0;
};

struct __declspec(uuid("eb3c91ca-7d5a-42cd-92dc-6a78c50b2edb"))
IAcadDimAngular : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetArrowhead1Type,put=PutArrowhead1Type))
    enum AcDimArrowheadType Arrowhead1Type;
    __declspec(property(get=GetArrowhead2Type,put=PutArrowhead2Type))
    enum AcDimArrowheadType Arrowhead2Type;
    __declspec(property(get=GetMeasurement))
    ACAD_ANGLE Measurement;
    __declspec(property(get=GetArrowhead1Block,put=PutArrowhead1Block))
    _bstr_t Arrowhead1Block;
    __declspec(property(get=GetArrowhead2Block,put=PutArrowhead2Block))
    _bstr_t Arrowhead2Block;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetExtensionLineColor,put=PutExtensionLineColor))
    ACAD_COLOR ExtensionLineColor;
    __declspec(property(get=GetExtensionLineExtend,put=PutExtensionLineExtend))
    double ExtensionLineExtend;
    __declspec(property(get=GetFit,put=PutFit))
    enum AcDimFit Fit;
    __declspec(property(get=GetHorizontalTextPosition,put=PutHorizontalTextPosition))
    enum AcDimHorizontalJustification HorizontalTextPosition;
    __declspec(property(get=GetDimensionLinetype,put=PutDimensionLinetype))
    _bstr_t DimensionLinetype;
    __declspec(property(get=GetExtLine1Linetype,put=PutExtLine1Linetype))
    _bstr_t ExtLine1Linetype;
    __declspec(property(get=GetExtensionLineWeight,put=PutExtensionLineWeight))
    ACAD_LWEIGHT ExtensionLineWeight;
    __declspec(property(get=GetExtLine2Linetype,put=PutExtLine2Linetype))
    _bstr_t ExtLine2Linetype;
    __declspec(property(get=GetDimLine1Suppress,put=PutDimLine1Suppress))
    VARIANT_BOOL DimLine1Suppress;
    __declspec(property(get=GetDimLine2Suppress,put=PutDimLine2Suppress))
    VARIANT_BOOL DimLine2Suppress;
    __declspec(property(get=GetExtLine1Suppress,put=PutExtLine1Suppress))
    VARIANT_BOOL ExtLine1Suppress;
    __declspec(property(get=GetExtLine2Suppress,put=PutExtLine2Suppress))
    VARIANT_BOOL ExtLine2Suppress;
    __declspec(property(get=GetDimLineInside,put=PutDimLineInside))
    VARIANT_BOOL DimLineInside;
    __declspec(property(get=GetTextInsideAlign,put=PutTextInsideAlign))
    VARIANT_BOOL TextInsideAlign;
    __declspec(property(get=GetTextInside,put=PutTextInside))
    VARIANT_BOOL TextInside;
    __declspec(property(get=GetForceLineInside,put=PutForceLineInside))
    VARIANT_BOOL ForceLineInside;
    __declspec(property(get=GetTextOutsideAlign,put=PutTextOutsideAlign))
    VARIANT_BOOL TextOutsideAlign;
    __declspec(property(get=GetExtLineFixedLenSuppress,put=PutExtLineFixedLenSuppress))
    VARIANT_BOOL ExtLineFixedLenSuppress;
    __declspec(property(get=GetExtensionLineOffset,put=PutExtensionLineOffset))
    double ExtensionLineOffset;
    __declspec(property(get=GetTextPrecision,put=PutTextPrecision))
    enum AcDimPrecision TextPrecision;
    __declspec(property(get=GetExtLine1StartPoint,put=PutExtLine1StartPoint))
    _variant_t ExtLine1StartPoint;
    __declspec(property(get=GetExtLine1EndPoint,put=PutExtLine1EndPoint))
    _variant_t ExtLine1EndPoint;
    __declspec(property(get=GetExtLine2StartPoint,put=PutExtLine2StartPoint))
    _variant_t ExtLine2StartPoint;
    __declspec(property(get=GetExtLine2EndPoint,put=PutExtLine2EndPoint))
    _variant_t ExtLine2EndPoint;
    __declspec(property(get=GetAngleFormat,put=PutAngleFormat))
    enum AcAngleUnits AngleFormat;
    __declspec(property(get=GetExtLineFixedLen,put=PutExtLineFixedLen))
    double ExtLineFixedLen;
    __declspec(property(get=GetDimConstrForm,put=PutDimConstrForm))
    VARIANT_BOOL DimConstrForm;
    __declspec(property(get=GetDimConstrReference,put=PutDimConstrReference))
    VARIANT_BOOL DimConstrReference;
    __declspec(property(get=GetDimConstrName,put=PutDimConstrName))
    _bstr_t DimConstrName;
    __declspec(property(get=GetDimConstrExpression,put=PutDimConstrExpression))
    _bstr_t DimConstrExpression;
    __declspec(property(get=GetDimConstrValue,put=PutDimConstrValue))
    _bstr_t DimConstrValue;
    __declspec(property(get=GetDimConstrDesc,put=PutDimConstrDesc))
    _bstr_t DimConstrDesc;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetExtLine1StartPoint ( );
    void PutExtLine1StartPoint (
        const _variant_t & xLine1Point );
    _variant_t GetExtLine1EndPoint ( );
    void PutExtLine1EndPoint (
        const _variant_t & xLine1Point );
    _variant_t GetExtLine2StartPoint ( );
    void PutExtLine2StartPoint (
        const _variant_t & xLine2Point );
    _variant_t GetExtLine2EndPoint ( );
    void PutExtLine2EndPoint (
        const _variant_t & xLine2Point );
    enum AcAngleUnits GetAngleFormat ( );
    void PutAngleFormat (
        enum AcAngleUnits format );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );
    ACAD_COLOR GetExtensionLineColor ( );
    void PutExtensionLineColor (
        ACAD_COLOR Type );
    double GetExtensionLineExtend ( );
    void PutExtensionLineExtend (
        double extend );
    enum AcDimFit GetFit ( );
    void PutFit (
        enum AcDimFit fittype );
    enum AcDimHorizontalJustification GetHorizontalTextPosition ( );
    void PutHorizontalTextPosition (
        enum AcDimHorizontalJustification Type );
    ACAD_LWEIGHT GetExtensionLineWeight ( );
    void PutExtensionLineWeight (
        ACAD_LWEIGHT lweight );
    VARIANT_BOOL GetDimLine1Suppress ( );
    void PutDimLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLine2Suppress ( );
    void PutDimLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine1Suppress ( );
    void PutExtLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine2Suppress ( );
    void PutExtLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLineInside ( );
    void PutDimLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInsideAlign ( );
    void PutTextInsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInside ( );
    void PutTextInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetForceLineInside ( );
    void PutForceLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextOutsideAlign ( );
    void PutTextOutsideAlign (
        VARIANT_BOOL bInside );
    enum AcDimPrecision GetTextPrecision ( );
    void PutTextPrecision (
        enum AcDimPrecision precision );
    double GetExtensionLineOffset ( );
    void PutExtensionLineOffset (
        double Offset );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowhead1Type ( );
    void PutArrowhead1Type (
        enum AcDimArrowheadType Type );
    enum AcDimArrowheadType GetArrowhead2Type ( );
    void PutArrowhead2Type (
        enum AcDimArrowheadType Type );
    ACAD_ANGLE GetMeasurement ( );
    _bstr_t GetArrowhead1Block ( );
    void PutArrowhead1Block (
        _bstr_t BlockName );
    _bstr_t GetArrowhead2Block ( );
    void PutArrowhead2Block (
        _bstr_t BlockName );
    _bstr_t GetDimensionLinetype ( );
    void PutDimensionLinetype (
        _bstr_t Linetype );
    _bstr_t GetExtLine1Linetype ( );
    void PutExtLine1Linetype (
        _bstr_t Linetype );
    _bstr_t GetExtLine2Linetype ( );
    void PutExtLine2Linetype (
        _bstr_t Linetype );
    VARIANT_BOOL GetExtLineFixedLenSuppress ( );
    void PutExtLineFixedLenSuppress (
        VARIANT_BOOL bFixedLen );
    double GetExtLineFixedLen ( );
    void PutExtLineFixedLen (
        double FixedLen );
    VARIANT_BOOL GetDimConstrForm ( );
    void PutDimConstrForm (
        VARIANT_BOOL bIsDynamic );
    VARIANT_BOOL GetDimConstrReference ( );
    void PutDimConstrReference (
        VARIANT_BOOL bIsReference );
    _bstr_t GetDimConstrName ( );
    void PutDimConstrName (
        _bstr_t bstrName );
    _bstr_t GetDimConstrExpression ( );
    void PutDimConstrExpression (
        _bstr_t bstrExpression );
    _bstr_t GetDimConstrValue ( );
    void PutDimConstrValue (
        _bstr_t Value );
    _bstr_t GetDimConstrDesc ( );
    void PutDimConstrDesc (
        _bstr_t bstrDescription );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtLine1StartPoint (
        /*[out,retval]*/ VARIANT * xLine1Point ) = 0;
      virtual HRESULT __stdcall put_ExtLine1StartPoint (
        /*[in]*/ VARIANT xLine1Point ) = 0;
      virtual HRESULT __stdcall get_ExtLine1EndPoint (
        /*[out,retval]*/ VARIANT * xLine1Point ) = 0;
      virtual HRESULT __stdcall put_ExtLine1EndPoint (
        /*[in]*/ VARIANT xLine1Point ) = 0;
      virtual HRESULT __stdcall get_ExtLine2StartPoint (
        /*[out,retval]*/ VARIANT * xLine2Point ) = 0;
      virtual HRESULT __stdcall put_ExtLine2StartPoint (
        /*[in]*/ VARIANT xLine2Point ) = 0;
      virtual HRESULT __stdcall get_ExtLine2EndPoint (
        /*[out,retval]*/ VARIANT * xLine2Point ) = 0;
      virtual HRESULT __stdcall put_ExtLine2EndPoint (
        /*[in]*/ VARIANT xLine2Point ) = 0;
      virtual HRESULT __stdcall get_AngleFormat (
        /*[out,retval]*/ enum AcAngleUnits * format ) = 0;
      virtual HRESULT __stdcall put_AngleFormat (
        /*[in]*/ enum AcAngleUnits format ) = 0;
      virtual HRESULT __stdcall get_DimensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * Type ) = 0;
      virtual HRESULT __stdcall put_DimensionLineColor (
        /*[in]*/ ACAD_COLOR Type ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * Type ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineColor (
        /*[in]*/ ACAD_COLOR Type ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineExtend (
        /*[out,retval]*/ double * extend ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineExtend (
        /*[in]*/ double extend ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ enum AcDimFit * fittype ) = 0;
      virtual HRESULT __stdcall put_Fit (
        /*[in]*/ enum AcDimFit fittype ) = 0;
      virtual HRESULT __stdcall get_HorizontalTextPosition (
        /*[out,retval]*/ enum AcDimHorizontalJustification * Type ) = 0;
      virtual HRESULT __stdcall put_HorizontalTextPosition (
        /*[in]*/ enum AcDimHorizontalJustification Type ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * lweight ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT lweight ) = 0;
      virtual HRESULT __stdcall get_DimLine1Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_DimLine1Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_DimLine2Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_DimLine2Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_ExtLine1Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_ExtLine1Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_ExtLine2Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_ExtLine2Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_DimLineInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_DimLineInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextInsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_ForceLineInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_ForceLineInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextOutsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextOutsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextPrecision (
        /*[out,retval]*/ enum AcDimPrecision * precision ) = 0;
      virtual HRESULT __stdcall put_TextPrecision (
        /*[in]*/ enum AcDimPrecision precision ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineOffset (
        /*[out,retval]*/ double * Offset ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineOffset (
        /*[in]*/ double Offset ) = 0;
      virtual HRESULT __stdcall get_DimensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * weight ) = 0;
      virtual HRESULT __stdcall put_DimensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT weight ) = 0;
      virtual HRESULT __stdcall get_ArrowheadSize (
        /*[out,retval]*/ double * size ) = 0;
      virtual HRESULT __stdcall put_ArrowheadSize (
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall get_Arrowhead1Type (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_Arrowhead1Type (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_Arrowhead2Type (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_Arrowhead2Type (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_Measurement (
        /*[out,retval]*/ ACAD_ANGLE * bVal ) = 0;
      virtual HRESULT __stdcall get_Arrowhead1Block (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_Arrowhead1Block (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_Arrowhead2Block (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_Arrowhead2Block (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_DimensionLinetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_DimensionLinetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLine1Linetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_ExtLine1Linetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLine2Linetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_ExtLine2Linetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLineFixedLenSuppress (
        /*[out,retval]*/ VARIANT_BOOL * bFixedLen ) = 0;
      virtual HRESULT __stdcall put_ExtLineFixedLenSuppress (
        /*[in]*/ VARIANT_BOOL bFixedLen ) = 0;
      virtual HRESULT __stdcall get_ExtLineFixedLen (
        /*[out,retval]*/ double * FixedLen ) = 0;
      virtual HRESULT __stdcall put_ExtLineFixedLen (
        /*[in]*/ double FixedLen ) = 0;
      virtual HRESULT __stdcall get_DimConstrForm (
        /*[out,retval]*/ VARIANT_BOOL * bIsDynamic ) = 0;
      virtual HRESULT __stdcall put_DimConstrForm (
        /*[in]*/ VARIANT_BOOL bIsDynamic ) = 0;
      virtual HRESULT __stdcall get_DimConstrReference (
        /*[out,retval]*/ VARIANT_BOOL * bIsReference ) = 0;
      virtual HRESULT __stdcall put_DimConstrReference (
        /*[in]*/ VARIANT_BOOL bIsReference ) = 0;
      virtual HRESULT __stdcall get_DimConstrName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_DimConstrName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_DimConstrExpression (
        /*[out,retval]*/ BSTR * bstrExpression ) = 0;
      virtual HRESULT __stdcall put_DimConstrExpression (
        /*[in]*/ BSTR bstrExpression ) = 0;
      virtual HRESULT __stdcall get_DimConstrValue (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_DimConstrValue (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_DimConstrDesc (
        /*[out,retval]*/ BSTR * bstrDescription ) = 0;
      virtual HRESULT __stdcall put_DimConstrDesc (
        /*[in]*/ BSTR bstrDescription ) = 0;
};

struct __declspec(uuid("896feaf5-0ad9-4414-aac8-0a1ae672ac83"))
IAcadDimDiametric : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetAltUnits,put=PutAltUnits))
    VARIANT_BOOL AltUnits;
    __declspec(property(get=GetAltUnitsPrecision,put=PutAltUnitsPrecision))
    enum AcDimPrecision AltUnitsPrecision;
    __declspec(property(get=GetAltUnitsScale,put=PutAltUnitsScale))
    ACAD_NOUNITS AltUnitsScale;
    __declspec(property(get=GetAltRoundDistance,put=PutAltRoundDistance))
    double AltRoundDistance;
    __declspec(property(get=GetAltTolerancePrecision,put=PutAltTolerancePrecision))
    enum AcDimPrecision AltTolerancePrecision;
    __declspec(property(get=GetDimConstrForm,put=PutDimConstrForm))
    VARIANT_BOOL DimConstrForm;
    __declspec(property(get=GetAltUnitsFormat,put=PutAltUnitsFormat))
    enum AcDimUnits AltUnitsFormat;
    __declspec(property(get=GetDimConstrReference,put=PutDimConstrReference))
    VARIANT_BOOL DimConstrReference;
    __declspec(property(get=GetAltTextPrefix,put=PutAltTextPrefix))
    _bstr_t AltTextPrefix;
    __declspec(property(get=GetAltTextSuffix,put=PutAltTextSuffix))
    _bstr_t AltTextSuffix;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetDimConstrName,put=PutDimConstrName))
    _bstr_t DimConstrName;
    __declspec(property(get=GetPrimaryUnitsPrecision,put=PutPrimaryUnitsPrecision))
    enum AcDimPrecision PrimaryUnitsPrecision;
    __declspec(property(get=GetDimConstrExpression,put=PutDimConstrExpression))
    _bstr_t DimConstrExpression;
    __declspec(property(get=GetDimConstrValue,put=PutDimConstrValue))
    _bstr_t DimConstrValue;
    __declspec(property(get=GetFit,put=PutFit))
    enum AcDimFit Fit;
    __declspec(property(get=GetFractionFormat,put=PutFractionFormat))
    enum AcDimFractionType FractionFormat;
    __declspec(property(get=GetDimConstrDesc,put=PutDimConstrDesc))
    _bstr_t DimConstrDesc;
    __declspec(property(get=GetLinearScaleFactor,put=PutLinearScaleFactor))
    ACAD_NOUNITS LinearScaleFactor;
    __declspec(property(get=GetUnitsFormat,put=PutUnitsFormat))
    enum AcDimLUnits UnitsFormat;
    __declspec(property(get=GetRoundDistance,put=PutRoundDistance))
    double RoundDistance;
    __declspec(property(get=GetDimLine1Suppress,put=PutDimLine1Suppress))
    VARIANT_BOOL DimLine1Suppress;
    __declspec(property(get=GetDimLine2Suppress,put=PutDimLine2Suppress))
    VARIANT_BOOL DimLine2Suppress;
    __declspec(property(get=GetTextInsideAlign,put=PutTextInsideAlign))
    VARIANT_BOOL TextInsideAlign;
    __declspec(property(get=GetTextInside,put=PutTextInside))
    VARIANT_BOOL TextInside;
    __declspec(property(get=GetForceLineInside,put=PutForceLineInside))
    VARIANT_BOOL ForceLineInside;
    __declspec(property(get=GetTextOutsideAlign,put=PutTextOutsideAlign))
    VARIANT_BOOL TextOutsideAlign;
    __declspec(property(put=PutLeaderLength))
    double LeaderLength;
    __declspec(property(get=GetCenterType,put=PutCenterType))
    enum AcDimCenterType CenterType;
    __declspec(property(get=GetCenterMarkSize,put=PutCenterMarkSize))
    double CenterMarkSize;
    __declspec(property(get=GetAltSuppressLeadingZeros,put=PutAltSuppressLeadingZeros))
    VARIANT_BOOL AltSuppressLeadingZeros;
    __declspec(property(get=GetAltSuppressTrailingZeros,put=PutAltSuppressTrailingZeros))
    VARIANT_BOOL AltSuppressTrailingZeros;
    __declspec(property(get=GetAltSuppressZeroFeet,put=PutAltSuppressZeroFeet))
    VARIANT_BOOL AltSuppressZeroFeet;
    __declspec(property(get=GetAltSuppressZeroInches,put=PutAltSuppressZeroInches))
    VARIANT_BOOL AltSuppressZeroInches;
    __declspec(property(get=GetAltToleranceSuppressLeadingZeros,put=PutAltToleranceSuppressLeadingZeros))
    VARIANT_BOOL AltToleranceSuppressLeadingZeros;
    __declspec(property(get=GetAltToleranceSuppressTrailingZeros,put=PutAltToleranceSuppressTrailingZeros))
    VARIANT_BOOL AltToleranceSuppressTrailingZeros;
    __declspec(property(get=GetAltToleranceSuppressZeroFeet,put=PutAltToleranceSuppressZeroFeet))
    VARIANT_BOOL AltToleranceSuppressZeroFeet;
    __declspec(property(get=GetAltToleranceSuppressZeroInches,put=PutAltToleranceSuppressZeroInches))
    VARIANT_BOOL AltToleranceSuppressZeroInches;
    __declspec(property(get=GetSuppressZeroFeet,put=PutSuppressZeroFeet))
    VARIANT_BOOL SuppressZeroFeet;
    __declspec(property(get=GetSuppressZeroInches,put=PutSuppressZeroInches))
    VARIANT_BOOL SuppressZeroInches;
    __declspec(property(get=GetToleranceSuppressZeroFeet,put=PutToleranceSuppressZeroFeet))
    VARIANT_BOOL ToleranceSuppressZeroFeet;
    __declspec(property(get=GetToleranceSuppressZeroInches,put=PutToleranceSuppressZeroInches))
    VARIANT_BOOL ToleranceSuppressZeroInches;
    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetArrowhead1Type,put=PutArrowhead1Type))
    enum AcDimArrowheadType Arrowhead1Type;
    __declspec(property(get=GetArrowhead2Type,put=PutArrowhead2Type))
    enum AcDimArrowheadType Arrowhead2Type;
    __declspec(property(get=GetMeasurement))
    double Measurement;
    __declspec(property(get=GetArrowhead1Block,put=PutArrowhead1Block))
    _bstr_t Arrowhead1Block;
    __declspec(property(get=GetArrowhead2Block,put=PutArrowhead2Block))
    _bstr_t Arrowhead2Block;
    __declspec(property(get=GetDimensionLinetype,put=PutDimensionLinetype))
    _bstr_t DimensionLinetype;

    //
    // Wrapper methods for error-handling
    //

    void PutLeaderLength (
        double _arg1 );
    VARIANT_BOOL GetAltUnits ( );
    void PutAltUnits (
        VARIANT_BOOL bAlternate );
    enum AcDimPrecision GetAltUnitsPrecision ( );
    void PutAltUnitsPrecision (
        enum AcDimPrecision precision );
    ACAD_NOUNITS GetAltUnitsScale ( );
    void PutAltUnitsScale (
        ACAD_NOUNITS scale );
    double GetAltRoundDistance ( );
    void PutAltRoundDistance (
        double Distance );
    enum AcDimPrecision GetAltTolerancePrecision ( );
    void PutAltTolerancePrecision (
        enum AcDimPrecision Distance );
    enum AcDimUnits GetAltUnitsFormat ( );
    void PutAltUnitsFormat (
        enum AcDimUnits Units );
    _bstr_t GetAltTextPrefix ( );
    void PutAltTextPrefix (
        _bstr_t prefix );
    _bstr_t GetAltTextSuffix ( );
    void PutAltTextSuffix (
        _bstr_t prefix );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );
    enum AcDimPrecision GetPrimaryUnitsPrecision ( );
    void PutPrimaryUnitsPrecision (
        enum AcDimPrecision Prec );
    enum AcDimFractionType GetFractionFormat ( );
    void PutFractionFormat (
        enum AcDimFractionType Type );
    enum AcDimFit GetFit ( );
    void PutFit (
        enum AcDimFit fittype );
    ACAD_NOUNITS GetLinearScaleFactor ( );
    void PutLinearScaleFactor (
        ACAD_NOUNITS Type );
    enum AcDimLUnits GetUnitsFormat ( );
    void PutUnitsFormat (
        enum AcDimLUnits format );
    double GetRoundDistance ( );
    void PutRoundDistance (
        double Distance );
    VARIANT_BOOL GetDimLine1Suppress ( );
    void PutDimLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLine2Suppress ( );
    void PutDimLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetTextInsideAlign ( );
    void PutTextInsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInside ( );
    void PutTextInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetForceLineInside ( );
    void PutForceLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextOutsideAlign ( );
    void PutTextOutsideAlign (
        VARIANT_BOOL bInside );
    enum AcDimCenterType GetCenterType ( );
    void PutCenterType (
        enum AcDimCenterType Type );
    double GetCenterMarkSize ( );
    void PutCenterMarkSize (
        double Type );
    VARIANT_BOOL GetAltSuppressLeadingZeros ( );
    void PutAltSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressTrailingZeros ( );
    void PutAltSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroFeet ( );
    void PutAltSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroInches ( );
    void PutAltSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressLeadingZeros ( );
    void PutAltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressTrailingZeros ( );
    void PutAltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroFeet ( );
    void PutAltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroInches ( );
    void PutAltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroFeet ( );
    void PutSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroInches ( );
    void PutSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroFeet ( );
    void PutToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroInches ( );
    void PutToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowhead1Type ( );
    void PutArrowhead1Type (
        enum AcDimArrowheadType Type );
    enum AcDimArrowheadType GetArrowhead2Type ( );
    void PutArrowhead2Type (
        enum AcDimArrowheadType Type );
    double GetMeasurement ( );
    _bstr_t GetArrowhead1Block ( );
    void PutArrowhead1Block (
        _bstr_t BlockName );
    _bstr_t GetArrowhead2Block ( );
    void PutArrowhead2Block (
        _bstr_t BlockName );
    _bstr_t GetDimensionLinetype ( );
    void PutDimensionLinetype (
        _bstr_t Linetype );
    VARIANT_BOOL GetDimConstrForm ( );
    void PutDimConstrForm (
        VARIANT_BOOL bIsDynamic );
    VARIANT_BOOL GetDimConstrReference ( );
    void PutDimConstrReference (
        VARIANT_BOOL bIsReference );
    _bstr_t GetDimConstrName ( );
    void PutDimConstrName (
        _bstr_t bstrName );
    _bstr_t GetDimConstrExpression ( );
    void PutDimConstrExpression (
        _bstr_t bstrExpression );
    _bstr_t GetDimConstrValue ( );
    void PutDimConstrValue (
        _bstr_t Value );
    _bstr_t GetDimConstrDesc ( );
    void PutDimConstrDesc (
        _bstr_t bstrDescription );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_LeaderLength (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall get_AltUnits (
        /*[out,retval]*/ VARIANT_BOOL * bAlternate ) = 0;
      virtual HRESULT __stdcall put_AltUnits (
        /*[in]*/ VARIANT_BOOL bAlternate ) = 0;
      virtual HRESULT __stdcall get_AltUnitsPrecision (
        /*[out,retval]*/ enum AcDimPrecision * precision ) = 0;
      virtual HRESULT __stdcall put_AltUnitsPrecision (
        /*[in]*/ enum AcDimPrecision precision ) = 0;
      virtual HRESULT __stdcall get_AltUnitsScale (
        /*[out,retval]*/ ACAD_NOUNITS * scale ) = 0;
      virtual HRESULT __stdcall put_AltUnitsScale (
        /*[in]*/ ACAD_NOUNITS scale ) = 0;
      virtual HRESULT __stdcall get_AltRoundDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_AltRoundDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_AltTolerancePrecision (
        /*[out,retval]*/ enum AcDimPrecision * Distance ) = 0;
      virtual HRESULT __stdcall put_AltTolerancePrecision (
        /*[in]*/ enum AcDimPrecision Distance ) = 0;
      virtual HRESULT __stdcall get_AltUnitsFormat (
        /*[out,retval]*/ enum AcDimUnits * Units ) = 0;
      virtual HRESULT __stdcall put_AltUnitsFormat (
        /*[in]*/ enum AcDimUnits Units ) = 0;
      virtual HRESULT __stdcall get_AltTextPrefix (
        /*[out,retval]*/ BSTR * prefix ) = 0;
      virtual HRESULT __stdcall put_AltTextPrefix (
        /*[in]*/ BSTR prefix ) = 0;
      virtual HRESULT __stdcall get_AltTextSuffix (
        /*[out,retval]*/ BSTR * prefix ) = 0;
      virtual HRESULT __stdcall put_AltTextSuffix (
        /*[in]*/ BSTR prefix ) = 0;
      virtual HRESULT __stdcall get_DimensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * Type ) = 0;
      virtual HRESULT __stdcall put_DimensionLineColor (
        /*[in]*/ ACAD_COLOR Type ) = 0;
      virtual HRESULT __stdcall get_PrimaryUnitsPrecision (
        /*[out,retval]*/ enum AcDimPrecision * Prec ) = 0;
      virtual HRESULT __stdcall put_PrimaryUnitsPrecision (
        /*[in]*/ enum AcDimPrecision Prec ) = 0;
      virtual HRESULT __stdcall get_FractionFormat (
        /*[out,retval]*/ enum AcDimFractionType * Type ) = 0;
      virtual HRESULT __stdcall put_FractionFormat (
        /*[in]*/ enum AcDimFractionType Type ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ enum AcDimFit * fittype ) = 0;
      virtual HRESULT __stdcall put_Fit (
        /*[in]*/ enum AcDimFit fittype ) = 0;
      virtual HRESULT __stdcall get_LinearScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * Type ) = 0;
      virtual HRESULT __stdcall put_LinearScaleFactor (
        /*[in]*/ ACAD_NOUNITS Type ) = 0;
      virtual HRESULT __stdcall get_UnitsFormat (
        /*[out,retval]*/ enum AcDimLUnits * format ) = 0;
      virtual HRESULT __stdcall put_UnitsFormat (
        /*[in]*/ enum AcDimLUnits format ) = 0;
      virtual HRESULT __stdcall get_RoundDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_RoundDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_DimLine1Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_DimLine1Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_DimLine2Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_DimLine2Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_TextInsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_ForceLineInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_ForceLineInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextOutsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextOutsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_CenterType (
        /*[out,retval]*/ enum AcDimCenterType * Type ) = 0;
      virtual HRESULT __stdcall put_CenterType (
        /*[in]*/ enum AcDimCenterType Type ) = 0;
      virtual HRESULT __stdcall get_CenterMarkSize (
        /*[out,retval]*/ double * Type ) = 0;
      virtual HRESULT __stdcall put_CenterMarkSize (
        /*[in]*/ double Type ) = 0;
      virtual HRESULT __stdcall get_AltSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_DimensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * weight ) = 0;
      virtual HRESULT __stdcall put_DimensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT weight ) = 0;
      virtual HRESULT __stdcall get_ArrowheadSize (
        /*[out,retval]*/ double * size ) = 0;
      virtual HRESULT __stdcall put_ArrowheadSize (
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall get_Arrowhead1Type (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_Arrowhead1Type (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_Arrowhead2Type (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_Arrowhead2Type (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_Measurement (
        /*[out,retval]*/ double * bVal ) = 0;
      virtual HRESULT __stdcall get_Arrowhead1Block (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_Arrowhead1Block (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_Arrowhead2Block (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_Arrowhead2Block (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_DimensionLinetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_DimensionLinetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_DimConstrForm (
        /*[out,retval]*/ VARIANT_BOOL * bIsDynamic ) = 0;
      virtual HRESULT __stdcall put_DimConstrForm (
        /*[in]*/ VARIANT_BOOL bIsDynamic ) = 0;
      virtual HRESULT __stdcall get_DimConstrReference (
        /*[out,retval]*/ VARIANT_BOOL * bIsReference ) = 0;
      virtual HRESULT __stdcall put_DimConstrReference (
        /*[in]*/ VARIANT_BOOL bIsReference ) = 0;
      virtual HRESULT __stdcall get_DimConstrName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_DimConstrName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_DimConstrExpression (
        /*[out,retval]*/ BSTR * bstrExpression ) = 0;
      virtual HRESULT __stdcall put_DimConstrExpression (
        /*[in]*/ BSTR bstrExpression ) = 0;
      virtual HRESULT __stdcall get_DimConstrValue (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_DimConstrValue (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_DimConstrDesc (
        /*[out,retval]*/ BSTR * bstrDescription ) = 0;
      virtual HRESULT __stdcall put_DimConstrDesc (
        /*[in]*/ BSTR bstrDescription ) = 0;
};

struct __declspec(uuid("3e6efac3-4495-43de-a25f-0259ffab4015"))
IAcadDimRotated : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetAltUnits,put=PutAltUnits))
    VARIANT_BOOL AltUnits;
    __declspec(property(get=GetAltUnitsPrecision,put=PutAltUnitsPrecision))
    enum AcDimPrecision AltUnitsPrecision;
    __declspec(property(get=GetAltUnitsScale,put=PutAltUnitsScale))
    ACAD_NOUNITS AltUnitsScale;
    __declspec(property(get=GetAltRoundDistance,put=PutAltRoundDistance))
    double AltRoundDistance;
    __declspec(property(get=GetAltTolerancePrecision,put=PutAltTolerancePrecision))
    enum AcDimPrecision AltTolerancePrecision;
    __declspec(property(get=GetAltUnitsFormat,put=PutAltUnitsFormat))
    enum AcDimUnits AltUnitsFormat;
    __declspec(property(get=GetAltTextPrefix,put=PutAltTextPrefix))
    _bstr_t AltTextPrefix;
    __declspec(property(get=GetAltTextSuffix,put=PutAltTextSuffix))
    _bstr_t AltTextSuffix;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetExtensionLineColor,put=PutExtensionLineColor))
    ACAD_COLOR ExtensionLineColor;
    __declspec(property(get=GetPrimaryUnitsPrecision,put=PutPrimaryUnitsPrecision))
    enum AcDimPrecision PrimaryUnitsPrecision;
    __declspec(property(get=GetDimensionLineExtend,put=PutDimensionLineExtend))
    double DimensionLineExtend;
    __declspec(property(get=GetExtensionLineExtend,put=PutExtensionLineExtend))
    double ExtensionLineExtend;
    __declspec(property(get=GetFit,put=PutFit))
    enum AcDimFit Fit;
    __declspec(property(get=GetFractionFormat,put=PutFractionFormat))
    enum AcDimFractionType FractionFormat;
    __declspec(property(get=GetHorizontalTextPosition,put=PutHorizontalTextPosition))
    enum AcDimHorizontalJustification HorizontalTextPosition;
    __declspec(property(get=GetLinearScaleFactor,put=PutLinearScaleFactor))
    ACAD_NOUNITS LinearScaleFactor;
    __declspec(property(get=GetUnitsFormat,put=PutUnitsFormat))
    enum AcDimLUnits UnitsFormat;
    __declspec(property(get=GetExtensionLineWeight,put=PutExtensionLineWeight))
    ACAD_LWEIGHT ExtensionLineWeight;
    __declspec(property(get=GetRoundDistance,put=PutRoundDistance))
    double RoundDistance;
    __declspec(property(get=GetDimLine1Suppress,put=PutDimLine1Suppress))
    VARIANT_BOOL DimLine1Suppress;
    __declspec(property(get=GetDimLine2Suppress,put=PutDimLine2Suppress))
    VARIANT_BOOL DimLine2Suppress;
    __declspec(property(get=GetExtLine1Suppress,put=PutExtLine1Suppress))
    VARIANT_BOOL ExtLine1Suppress;
    __declspec(property(get=GetExtLine2Suppress,put=PutExtLine2Suppress))
    VARIANT_BOOL ExtLine2Suppress;
    __declspec(property(get=GetDimLineInside,put=PutDimLineInside))
    VARIANT_BOOL DimLineInside;
    __declspec(property(get=GetTextInsideAlign,put=PutTextInsideAlign))
    VARIANT_BOOL TextInsideAlign;
    __declspec(property(get=GetTextInside,put=PutTextInside))
    VARIANT_BOOL TextInside;
    __declspec(property(get=GetForceLineInside,put=PutForceLineInside))
    VARIANT_BOOL ForceLineInside;
    __declspec(property(get=GetTextOutsideAlign,put=PutTextOutsideAlign))
    VARIANT_BOOL TextOutsideAlign;
    __declspec(property(get=GetSubUnitsSuffix,put=PutSubUnitsSuffix))
    _bstr_t SubUnitsSuffix;
    __declspec(property(get=GetExtensionLineOffset,put=PutExtensionLineOffset))
    double ExtensionLineOffset;
    __declspec(property(get=GetSubUnitsFactor,put=PutSubUnitsFactor))
    double SubUnitsFactor;
    __declspec(property(get=GetAltSubUnitsSuffix,put=PutAltSubUnitsSuffix))
    _bstr_t AltSubUnitsSuffix;
    __declspec(property(get=GetAltSubUnitsFactor,put=PutAltSubUnitsFactor))
    double AltSubUnitsFactor;
    __declspec(property(get=GetAltSuppressLeadingZeros,put=PutAltSuppressLeadingZeros))
    VARIANT_BOOL AltSuppressLeadingZeros;
    __declspec(property(get=GetAltSuppressTrailingZeros,put=PutAltSuppressTrailingZeros))
    VARIANT_BOOL AltSuppressTrailingZeros;
    __declspec(property(get=GetAltSuppressZeroFeet,put=PutAltSuppressZeroFeet))
    VARIANT_BOOL AltSuppressZeroFeet;
    __declspec(property(get=GetAltSuppressZeroInches,put=PutAltSuppressZeroInches))
    VARIANT_BOOL AltSuppressZeroInches;
    __declspec(property(get=GetAltToleranceSuppressLeadingZeros,put=PutAltToleranceSuppressLeadingZeros))
    VARIANT_BOOL AltToleranceSuppressLeadingZeros;
    __declspec(property(get=GetAltToleranceSuppressTrailingZeros,put=PutAltToleranceSuppressTrailingZeros))
    VARIANT_BOOL AltToleranceSuppressTrailingZeros;
    __declspec(property(get=GetAltToleranceSuppressZeroFeet,put=PutAltToleranceSuppressZeroFeet))
    VARIANT_BOOL AltToleranceSuppressZeroFeet;
    __declspec(property(get=GetAltToleranceSuppressZeroInches,put=PutAltToleranceSuppressZeroInches))
    VARIANT_BOOL AltToleranceSuppressZeroInches;
    __declspec(property(get=GetSuppressZeroFeet,put=PutSuppressZeroFeet))
    VARIANT_BOOL SuppressZeroFeet;
    __declspec(property(get=GetSuppressZeroInches,put=PutSuppressZeroInches))
    VARIANT_BOOL SuppressZeroInches;
    __declspec(property(get=GetToleranceSuppressZeroFeet,put=PutToleranceSuppressZeroFeet))
    VARIANT_BOOL ToleranceSuppressZeroFeet;
    __declspec(property(get=GetToleranceSuppressZeroInches,put=PutToleranceSuppressZeroInches))
    VARIANT_BOOL ToleranceSuppressZeroInches;
    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetArrowhead1Type,put=PutArrowhead1Type))
    enum AcDimArrowheadType Arrowhead1Type;
    __declspec(property(get=GetArrowhead2Type,put=PutArrowhead2Type))
    enum AcDimArrowheadType Arrowhead2Type;
    __declspec(property(get=GetMeasurement))
    double Measurement;
    __declspec(property(get=GetArrowhead1Block,put=PutArrowhead1Block))
    _bstr_t Arrowhead1Block;
    __declspec(property(get=GetArrowhead2Block,put=PutArrowhead2Block))
    _bstr_t Arrowhead2Block;
    __declspec(property(get=GetDimensionLinetype,put=PutDimensionLinetype))
    _bstr_t DimensionLinetype;
    __declspec(property(get=GetExtLine1Linetype,put=PutExtLine1Linetype))
    _bstr_t ExtLine1Linetype;
    __declspec(property(get=GetExtLine2Linetype,put=PutExtLine2Linetype))
    _bstr_t ExtLine2Linetype;
    __declspec(property(get=GetExtLineFixedLenSuppress,put=PutExtLineFixedLenSuppress))
    VARIANT_BOOL ExtLineFixedLenSuppress;
    __declspec(property(get=GetExtLineFixedLen,put=PutExtLineFixedLen))
    double ExtLineFixedLen;
    __declspec(property(get=GetDimConstrForm,put=PutDimConstrForm))
    VARIANT_BOOL DimConstrForm;
    __declspec(property(get=GetDimConstrReference,put=PutDimConstrReference))
    VARIANT_BOOL DimConstrReference;
    __declspec(property(get=GetDimConstrName,put=PutDimConstrName))
    _bstr_t DimConstrName;
    __declspec(property(get=GetDimConstrExpression,put=PutDimConstrExpression))
    _bstr_t DimConstrExpression;
    __declspec(property(get=GetDimConstrValue,put=PutDimConstrValue))
    _bstr_t DimConstrValue;
    __declspec(property(get=GetDimConstrDesc,put=PutDimConstrDesc))
    _bstr_t DimConstrDesc;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAltUnits ( );
    void PutAltUnits (
        VARIANT_BOOL bAlternate );
    enum AcDimPrecision GetAltUnitsPrecision ( );
    void PutAltUnitsPrecision (
        enum AcDimPrecision precision );
    ACAD_NOUNITS GetAltUnitsScale ( );
    void PutAltUnitsScale (
        ACAD_NOUNITS scale );
    double GetAltRoundDistance ( );
    void PutAltRoundDistance (
        double Distance );
    enum AcDimPrecision GetAltTolerancePrecision ( );
    void PutAltTolerancePrecision (
        enum AcDimPrecision Distance );
    enum AcDimUnits GetAltUnitsFormat ( );
    void PutAltUnitsFormat (
        enum AcDimUnits Units );
    _bstr_t GetAltTextPrefix ( );
    void PutAltTextPrefix (
        _bstr_t prefix );
    _bstr_t GetAltTextSuffix ( );
    void PutAltTextSuffix (
        _bstr_t prefix );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );
    ACAD_COLOR GetExtensionLineColor ( );
    void PutExtensionLineColor (
        ACAD_COLOR Type );
    enum AcDimPrecision GetPrimaryUnitsPrecision ( );
    void PutPrimaryUnitsPrecision (
        enum AcDimPrecision Prec );
    double GetDimensionLineExtend ( );
    void PutDimensionLineExtend (
        double extend );
    double GetExtensionLineExtend ( );
    void PutExtensionLineExtend (
        double extend );
    enum AcDimFit GetFit ( );
    void PutFit (
        enum AcDimFit fittype );
    enum AcDimFractionType GetFractionFormat ( );
    void PutFractionFormat (
        enum AcDimFractionType Type );
    enum AcDimHorizontalJustification GetHorizontalTextPosition ( );
    void PutHorizontalTextPosition (
        enum AcDimHorizontalJustification Type );
    ACAD_NOUNITS GetLinearScaleFactor ( );
    void PutLinearScaleFactor (
        ACAD_NOUNITS Type );
    enum AcDimLUnits GetUnitsFormat ( );
    void PutUnitsFormat (
        enum AcDimLUnits format );
    ACAD_LWEIGHT GetExtensionLineWeight ( );
    void PutExtensionLineWeight (
        ACAD_LWEIGHT lweight );
    double GetRoundDistance ( );
    void PutRoundDistance (
        double Distance );
    VARIANT_BOOL GetDimLine1Suppress ( );
    void PutDimLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLine2Suppress ( );
    void PutDimLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine1Suppress ( );
    void PutExtLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine2Suppress ( );
    void PutExtLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLineInside ( );
    void PutDimLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInsideAlign ( );
    void PutTextInsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInside ( );
    void PutTextInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetForceLineInside ( );
    void PutForceLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextOutsideAlign ( );
    void PutTextOutsideAlign (
        VARIANT_BOOL bInside );
    double GetExtensionLineOffset ( );
    void PutExtensionLineOffset (
        double Offset );
    VARIANT_BOOL GetAltSuppressLeadingZeros ( );
    void PutAltSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressTrailingZeros ( );
    void PutAltSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroFeet ( );
    void PutAltSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroInches ( );
    void PutAltSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressLeadingZeros ( );
    void PutAltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressTrailingZeros ( );
    void PutAltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroFeet ( );
    void PutAltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroInches ( );
    void PutAltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroFeet ( );
    void PutSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroInches ( );
    void PutSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroFeet ( );
    void PutToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroInches ( );
    void PutToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowhead1Type ( );
    void PutArrowhead1Type (
        enum AcDimArrowheadType Type );
    enum AcDimArrowheadType GetArrowhead2Type ( );
    void PutArrowhead2Type (
        enum AcDimArrowheadType Type );
    double GetMeasurement ( );
    _bstr_t GetArrowhead1Block ( );
    void PutArrowhead1Block (
        _bstr_t BlockName );
    _bstr_t GetArrowhead2Block ( );
    void PutArrowhead2Block (
        _bstr_t BlockName );
    _bstr_t GetDimensionLinetype ( );
    void PutDimensionLinetype (
        _bstr_t Linetype );
    _bstr_t GetExtLine1Linetype ( );
    void PutExtLine1Linetype (
        _bstr_t Linetype );
    _bstr_t GetExtLine2Linetype ( );
    void PutExtLine2Linetype (
        _bstr_t Linetype );
    VARIANT_BOOL GetExtLineFixedLenSuppress ( );
    void PutExtLineFixedLenSuppress (
        VARIANT_BOOL bFixedLen );
    double GetExtLineFixedLen ( );
    void PutExtLineFixedLen (
        double FixedLen );
    VARIANT_BOOL GetDimConstrForm ( );
    void PutDimConstrForm (
        VARIANT_BOOL bIsDynamic );
    VARIANT_BOOL GetDimConstrReference ( );
    void PutDimConstrReference (
        VARIANT_BOOL bIsReference );
    _bstr_t GetDimConstrName ( );
    void PutDimConstrName (
        _bstr_t bstrName );
    _bstr_t GetDimConstrExpression ( );
    void PutDimConstrExpression (
        _bstr_t bstrExpression );
    _bstr_t GetDimConstrValue ( );
    void PutDimConstrValue (
        _bstr_t Value );
    _bstr_t GetDimConstrDesc ( );
    void PutDimConstrDesc (
        _bstr_t bstrDescription );
    _bstr_t GetSubUnitsSuffix ( );
    void PutSubUnitsSuffix (
        _bstr_t suffix );
    double GetSubUnitsFactor ( );
    void PutSubUnitsFactor (
        double factor );
    _bstr_t GetAltSubUnitsSuffix ( );
    void PutAltSubUnitsSuffix (
        _bstr_t suffix );
    double GetAltSubUnitsFactor ( );
    void PutAltSubUnitsFactor (
        double factor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AltUnits (
        /*[out,retval]*/ VARIANT_BOOL * bAlternate ) = 0;
      virtual HRESULT __stdcall put_AltUnits (
        /*[in]*/ VARIANT_BOOL bAlternate ) = 0;
      virtual HRESULT __stdcall get_AltUnitsPrecision (
        /*[out,retval]*/ enum AcDimPrecision * precision ) = 0;
      virtual HRESULT __stdcall put_AltUnitsPrecision (
        /*[in]*/ enum AcDimPrecision precision ) = 0;
      virtual HRESULT __stdcall get_AltUnitsScale (
        /*[out,retval]*/ ACAD_NOUNITS * scale ) = 0;
      virtual HRESULT __stdcall put_AltUnitsScale (
        /*[in]*/ ACAD_NOUNITS scale ) = 0;
      virtual HRESULT __stdcall get_AltRoundDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_AltRoundDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_AltTolerancePrecision (
        /*[out,retval]*/ enum AcDimPrecision * Distance ) = 0;
      virtual HRESULT __stdcall put_AltTolerancePrecision (
        /*[in]*/ enum AcDimPrecision Distance ) = 0;
      virtual HRESULT __stdcall get_AltUnitsFormat (
        /*[out,retval]*/ enum AcDimUnits * Units ) = 0;
      virtual HRESULT __stdcall put_AltUnitsFormat (
        /*[in]*/ enum AcDimUnits Units ) = 0;
      virtual HRESULT __stdcall get_AltTextPrefix (
        /*[out,retval]*/ BSTR * prefix ) = 0;
      virtual HRESULT __stdcall put_AltTextPrefix (
        /*[in]*/ BSTR prefix ) = 0;
      virtual HRESULT __stdcall get_AltTextSuffix (
        /*[out,retval]*/ BSTR * prefix ) = 0;
      virtual HRESULT __stdcall put_AltTextSuffix (
        /*[in]*/ BSTR prefix ) = 0;
      virtual HRESULT __stdcall get_DimensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * Type ) = 0;
      virtual HRESULT __stdcall put_DimensionLineColor (
        /*[in]*/ ACAD_COLOR Type ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * Type ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineColor (
        /*[in]*/ ACAD_COLOR Type ) = 0;
      virtual HRESULT __stdcall get_PrimaryUnitsPrecision (
        /*[out,retval]*/ enum AcDimPrecision * Prec ) = 0;
      virtual HRESULT __stdcall put_PrimaryUnitsPrecision (
        /*[in]*/ enum AcDimPrecision Prec ) = 0;
      virtual HRESULT __stdcall get_DimensionLineExtend (
        /*[out,retval]*/ double * extend ) = 0;
      virtual HRESULT __stdcall put_DimensionLineExtend (
        /*[in]*/ double extend ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineExtend (
        /*[out,retval]*/ double * extend ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineExtend (
        /*[in]*/ double extend ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ enum AcDimFit * fittype ) = 0;
      virtual HRESULT __stdcall put_Fit (
        /*[in]*/ enum AcDimFit fittype ) = 0;
      virtual HRESULT __stdcall get_FractionFormat (
        /*[out,retval]*/ enum AcDimFractionType * Type ) = 0;
      virtual HRESULT __stdcall put_FractionFormat (
        /*[in]*/ enum AcDimFractionType Type ) = 0;
      virtual HRESULT __stdcall get_HorizontalTextPosition (
        /*[out,retval]*/ enum AcDimHorizontalJustification * Type ) = 0;
      virtual HRESULT __stdcall put_HorizontalTextPosition (
        /*[in]*/ enum AcDimHorizontalJustification Type ) = 0;
      virtual HRESULT __stdcall get_LinearScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * Type ) = 0;
      virtual HRESULT __stdcall put_LinearScaleFactor (
        /*[in]*/ ACAD_NOUNITS Type ) = 0;
      virtual HRESULT __stdcall get_UnitsFormat (
        /*[out,retval]*/ enum AcDimLUnits * format ) = 0;
      virtual HRESULT __stdcall put_UnitsFormat (
        /*[in]*/ enum AcDimLUnits format ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * lweight ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT lweight ) = 0;
      virtual HRESULT __stdcall get_RoundDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_RoundDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_DimLine1Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_DimLine1Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_DimLine2Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_DimLine2Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_ExtLine1Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_ExtLine1Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_ExtLine2Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_ExtLine2Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_DimLineInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_DimLineInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextInsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_ForceLineInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_ForceLineInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextOutsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextOutsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineOffset (
        /*[out,retval]*/ double * Offset ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineOffset (
        /*[in]*/ double Offset ) = 0;
      virtual HRESULT __stdcall get_AltSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_DimensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * weight ) = 0;
      virtual HRESULT __stdcall put_DimensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT weight ) = 0;
      virtual HRESULT __stdcall get_ArrowheadSize (
        /*[out,retval]*/ double * size ) = 0;
      virtual HRESULT __stdcall put_ArrowheadSize (
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall get_Arrowhead1Type (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_Arrowhead1Type (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_Arrowhead2Type (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_Arrowhead2Type (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_Measurement (
        /*[out,retval]*/ double * bVal ) = 0;
      virtual HRESULT __stdcall get_Arrowhead1Block (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_Arrowhead1Block (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_Arrowhead2Block (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_Arrowhead2Block (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_DimensionLinetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_DimensionLinetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLine1Linetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_ExtLine1Linetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLine2Linetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_ExtLine2Linetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLineFixedLenSuppress (
        /*[out,retval]*/ VARIANT_BOOL * bFixedLen ) = 0;
      virtual HRESULT __stdcall put_ExtLineFixedLenSuppress (
        /*[in]*/ VARIANT_BOOL bFixedLen ) = 0;
      virtual HRESULT __stdcall get_ExtLineFixedLen (
        /*[out,retval]*/ double * FixedLen ) = 0;
      virtual HRESULT __stdcall put_ExtLineFixedLen (
        /*[in]*/ double FixedLen ) = 0;
      virtual HRESULT __stdcall get_DimConstrForm (
        /*[out,retval]*/ VARIANT_BOOL * bIsDynamic ) = 0;
      virtual HRESULT __stdcall put_DimConstrForm (
        /*[in]*/ VARIANT_BOOL bIsDynamic ) = 0;
      virtual HRESULT __stdcall get_DimConstrReference (
        /*[out,retval]*/ VARIANT_BOOL * bIsReference ) = 0;
      virtual HRESULT __stdcall put_DimConstrReference (
        /*[in]*/ VARIANT_BOOL bIsReference ) = 0;
      virtual HRESULT __stdcall get_DimConstrName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_DimConstrName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_DimConstrExpression (
        /*[out,retval]*/ BSTR * bstrExpression ) = 0;
      virtual HRESULT __stdcall put_DimConstrExpression (
        /*[in]*/ BSTR bstrExpression ) = 0;
      virtual HRESULT __stdcall get_DimConstrValue (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_DimConstrValue (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_DimConstrDesc (
        /*[out,retval]*/ BSTR * bstrDescription ) = 0;
      virtual HRESULT __stdcall put_DimConstrDesc (
        /*[in]*/ BSTR bstrDescription ) = 0;
      virtual HRESULT __stdcall get_SubUnitsSuffix (
        /*[out,retval]*/ BSTR * suffix ) = 0;
      virtual HRESULT __stdcall put_SubUnitsSuffix (
        /*[in]*/ BSTR suffix ) = 0;
      virtual HRESULT __stdcall get_SubUnitsFactor (
        /*[out,retval]*/ double * factor ) = 0;
      virtual HRESULT __stdcall put_SubUnitsFactor (
        /*[in]*/ double factor ) = 0;
      virtual HRESULT __stdcall get_AltSubUnitsSuffix (
        /*[out,retval]*/ BSTR * suffix ) = 0;
      virtual HRESULT __stdcall put_AltSubUnitsSuffix (
        /*[in]*/ BSTR suffix ) = 0;
      virtual HRESULT __stdcall get_AltSubUnitsFactor (
        /*[out,retval]*/ double * factor ) = 0;
      virtual HRESULT __stdcall put_AltSubUnitsFactor (
        /*[in]*/ double factor ) = 0;
};

struct __declspec(uuid("671d6427-d2e8-4637-98cc-e5e2b60409e5"))
IAcadDimOrdinate : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetAltUnits,put=PutAltUnits))
    VARIANT_BOOL AltUnits;
    __declspec(property(get=GetAltUnitsPrecision,put=PutAltUnitsPrecision))
    enum AcDimPrecision AltUnitsPrecision;
    __declspec(property(get=GetAltUnitsScale,put=PutAltUnitsScale))
    ACAD_NOUNITS AltUnitsScale;
    __declspec(property(get=GetAltRoundDistance,put=PutAltRoundDistance))
    double AltRoundDistance;
    __declspec(property(get=GetAltTolerancePrecision,put=PutAltTolerancePrecision))
    enum AcDimPrecision AltTolerancePrecision;
    __declspec(property(get=GetMeasurement))
    double Measurement;
    __declspec(property(get=GetAltUnitsFormat,put=PutAltUnitsFormat))
    enum AcDimUnits AltUnitsFormat;
    __declspec(property(get=GetAltTextPrefix,put=PutAltTextPrefix))
    _bstr_t AltTextPrefix;
    __declspec(property(get=GetAltTextSuffix,put=PutAltTextSuffix))
    _bstr_t AltTextSuffix;
    __declspec(property(get=GetExtensionLineColor,put=PutExtensionLineColor))
    ACAD_COLOR ExtensionLineColor;
    __declspec(property(get=GetPrimaryUnitsPrecision,put=PutPrimaryUnitsPrecision))
    enum AcDimPrecision PrimaryUnitsPrecision;
    __declspec(property(get=GetSubUnitsSuffix,put=PutSubUnitsSuffix))
    _bstr_t SubUnitsSuffix;
    __declspec(property(get=GetSubUnitsFactor,put=PutSubUnitsFactor))
    double SubUnitsFactor;
    __declspec(property(get=GetAltSubUnitsSuffix,put=PutAltSubUnitsSuffix))
    _bstr_t AltSubUnitsSuffix;
    __declspec(property(get=GetFractionFormat,put=PutFractionFormat))
    enum AcDimFractionType FractionFormat;
    __declspec(property(get=GetAltSubUnitsFactor,put=PutAltSubUnitsFactor))
    double AltSubUnitsFactor;
    __declspec(property(get=GetLinearScaleFactor,put=PutLinearScaleFactor))
    ACAD_NOUNITS LinearScaleFactor;
    __declspec(property(get=GetUnitsFormat,put=PutUnitsFormat))
    enum AcDimLUnits UnitsFormat;
    __declspec(property(get=GetExtensionLineWeight,put=PutExtensionLineWeight))
    ACAD_LWEIGHT ExtensionLineWeight;
    __declspec(property(get=GetRoundDistance,put=PutRoundDistance))
    double RoundDistance;
    __declspec(property(get=GetExtLineFixedLenSuppress,put=PutExtLineFixedLenSuppress))
    VARIANT_BOOL ExtLineFixedLenSuppress;
    __declspec(property(get=GetExtLineFixedLen,put=PutExtLineFixedLen))
    double ExtLineFixedLen;
    __declspec(property(get=GetExtensionLineOffset,put=PutExtensionLineOffset))
    double ExtensionLineOffset;
    __declspec(property(get=GetAltSuppressLeadingZeros,put=PutAltSuppressLeadingZeros))
    VARIANT_BOOL AltSuppressLeadingZeros;
    __declspec(property(get=GetAltSuppressTrailingZeros,put=PutAltSuppressTrailingZeros))
    VARIANT_BOOL AltSuppressTrailingZeros;
    __declspec(property(get=GetAltSuppressZeroFeet,put=PutAltSuppressZeroFeet))
    VARIANT_BOOL AltSuppressZeroFeet;
    __declspec(property(get=GetAltSuppressZeroInches,put=PutAltSuppressZeroInches))
    VARIANT_BOOL AltSuppressZeroInches;
    __declspec(property(get=GetAltToleranceSuppressLeadingZeros,put=PutAltToleranceSuppressLeadingZeros))
    VARIANT_BOOL AltToleranceSuppressLeadingZeros;
    __declspec(property(get=GetAltToleranceSuppressTrailingZeros,put=PutAltToleranceSuppressTrailingZeros))
    VARIANT_BOOL AltToleranceSuppressTrailingZeros;
    __declspec(property(get=GetAltToleranceSuppressZeroFeet,put=PutAltToleranceSuppressZeroFeet))
    VARIANT_BOOL AltToleranceSuppressZeroFeet;
    __declspec(property(get=GetAltToleranceSuppressZeroInches,put=PutAltToleranceSuppressZeroInches))
    VARIANT_BOOL AltToleranceSuppressZeroInches;
    __declspec(property(get=GetSuppressZeroFeet,put=PutSuppressZeroFeet))
    VARIANT_BOOL SuppressZeroFeet;
    __declspec(property(get=GetSuppressZeroInches,put=PutSuppressZeroInches))
    VARIANT_BOOL SuppressZeroInches;
    __declspec(property(get=GetToleranceSuppressZeroFeet,put=PutToleranceSuppressZeroFeet))
    VARIANT_BOOL ToleranceSuppressZeroFeet;
    __declspec(property(get=GetToleranceSuppressZeroInches,put=PutToleranceSuppressZeroInches))
    VARIANT_BOOL ToleranceSuppressZeroInches;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAltUnits ( );
    void PutAltUnits (
        VARIANT_BOOL bAlternate );
    enum AcDimPrecision GetAltUnitsPrecision ( );
    void PutAltUnitsPrecision (
        enum AcDimPrecision precision );
    ACAD_NOUNITS GetAltUnitsScale ( );
    void PutAltUnitsScale (
        ACAD_NOUNITS scale );
    double GetAltRoundDistance ( );
    void PutAltRoundDistance (
        double Distance );
    enum AcDimPrecision GetAltTolerancePrecision ( );
    void PutAltTolerancePrecision (
        enum AcDimPrecision Distance );
    enum AcDimUnits GetAltUnitsFormat ( );
    void PutAltUnitsFormat (
        enum AcDimUnits Units );
    _bstr_t GetAltTextPrefix ( );
    void PutAltTextPrefix (
        _bstr_t prefix );
    _bstr_t GetAltTextSuffix ( );
    void PutAltTextSuffix (
        _bstr_t prefix );
    ACAD_COLOR GetExtensionLineColor ( );
    void PutExtensionLineColor (
        ACAD_COLOR Type );
    enum AcDimPrecision GetPrimaryUnitsPrecision ( );
    void PutPrimaryUnitsPrecision (
        enum AcDimPrecision Prec );
    enum AcDimFractionType GetFractionFormat ( );
    void PutFractionFormat (
        enum AcDimFractionType Type );
    ACAD_NOUNITS GetLinearScaleFactor ( );
    void PutLinearScaleFactor (
        ACAD_NOUNITS Type );
    enum AcDimLUnits GetUnitsFormat ( );
    void PutUnitsFormat (
        enum AcDimLUnits format );
    ACAD_LWEIGHT GetExtensionLineWeight ( );
    void PutExtensionLineWeight (
        ACAD_LWEIGHT lweight );
    double GetRoundDistance ( );
    void PutRoundDistance (
        double Distance );
    double GetExtensionLineOffset ( );
    void PutExtensionLineOffset (
        double Offset );
    VARIANT_BOOL GetAltSuppressLeadingZeros ( );
    void PutAltSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressTrailingZeros ( );
    void PutAltSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroFeet ( );
    void PutAltSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroInches ( );
    void PutAltSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressLeadingZeros ( );
    void PutAltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressTrailingZeros ( );
    void PutAltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroFeet ( );
    void PutAltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroInches ( );
    void PutAltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroFeet ( );
    void PutSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroInches ( );
    void PutSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroFeet ( );
    void PutToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroInches ( );
    void PutToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    double GetMeasurement ( );
    VARIANT_BOOL GetExtLineFixedLenSuppress ( );
    void PutExtLineFixedLenSuppress (
        VARIANT_BOOL bFixedLen );
    double GetExtLineFixedLen ( );
    void PutExtLineFixedLen (
        double FixedLen );
    _bstr_t GetSubUnitsSuffix ( );
    void PutSubUnitsSuffix (
        _bstr_t suffix );
    double GetSubUnitsFactor ( );
    void PutSubUnitsFactor (
        double factor );
    _bstr_t GetAltSubUnitsSuffix ( );
    void PutAltSubUnitsSuffix (
        _bstr_t suffix );
    double GetAltSubUnitsFactor ( );
    void PutAltSubUnitsFactor (
        double factor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AltUnits (
        /*[out,retval]*/ VARIANT_BOOL * bAlternate ) = 0;
      virtual HRESULT __stdcall put_AltUnits (
        /*[in]*/ VARIANT_BOOL bAlternate ) = 0;
      virtual HRESULT __stdcall get_AltUnitsPrecision (
        /*[out,retval]*/ enum AcDimPrecision * precision ) = 0;
      virtual HRESULT __stdcall put_AltUnitsPrecision (
        /*[in]*/ enum AcDimPrecision precision ) = 0;
      virtual HRESULT __stdcall get_AltUnitsScale (
        /*[out,retval]*/ ACAD_NOUNITS * scale ) = 0;
      virtual HRESULT __stdcall put_AltUnitsScale (
        /*[in]*/ ACAD_NOUNITS scale ) = 0;
      virtual HRESULT __stdcall get_AltRoundDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_AltRoundDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_AltTolerancePrecision (
        /*[out,retval]*/ enum AcDimPrecision * Distance ) = 0;
      virtual HRESULT __stdcall put_AltTolerancePrecision (
        /*[in]*/ enum AcDimPrecision Distance ) = 0;
      virtual HRESULT __stdcall get_AltUnitsFormat (
        /*[out,retval]*/ enum AcDimUnits * Units ) = 0;
      virtual HRESULT __stdcall put_AltUnitsFormat (
        /*[in]*/ enum AcDimUnits Units ) = 0;
      virtual HRESULT __stdcall get_AltTextPrefix (
        /*[out,retval]*/ BSTR * prefix ) = 0;
      virtual HRESULT __stdcall put_AltTextPrefix (
        /*[in]*/ BSTR prefix ) = 0;
      virtual HRESULT __stdcall get_AltTextSuffix (
        /*[out,retval]*/ BSTR * prefix ) = 0;
      virtual HRESULT __stdcall put_AltTextSuffix (
        /*[in]*/ BSTR prefix ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * Type ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineColor (
        /*[in]*/ ACAD_COLOR Type ) = 0;
      virtual HRESULT __stdcall get_PrimaryUnitsPrecision (
        /*[out,retval]*/ enum AcDimPrecision * Prec ) = 0;
      virtual HRESULT __stdcall put_PrimaryUnitsPrecision (
        /*[in]*/ enum AcDimPrecision Prec ) = 0;
      virtual HRESULT __stdcall get_FractionFormat (
        /*[out,retval]*/ enum AcDimFractionType * Type ) = 0;
      virtual HRESULT __stdcall put_FractionFormat (
        /*[in]*/ enum AcDimFractionType Type ) = 0;
      virtual HRESULT __stdcall get_LinearScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * Type ) = 0;
      virtual HRESULT __stdcall put_LinearScaleFactor (
        /*[in]*/ ACAD_NOUNITS Type ) = 0;
      virtual HRESULT __stdcall get_UnitsFormat (
        /*[out,retval]*/ enum AcDimLUnits * format ) = 0;
      virtual HRESULT __stdcall put_UnitsFormat (
        /*[in]*/ enum AcDimLUnits format ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * lweight ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT lweight ) = 0;
      virtual HRESULT __stdcall get_RoundDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_RoundDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineOffset (
        /*[out,retval]*/ double * Offset ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineOffset (
        /*[in]*/ double Offset ) = 0;
      virtual HRESULT __stdcall get_AltSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ArrowheadSize (
        /*[out,retval]*/ double * size ) = 0;
      virtual HRESULT __stdcall put_ArrowheadSize (
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall get_Measurement (
        /*[out,retval]*/ double * bVal ) = 0;
      virtual HRESULT __stdcall get_ExtLineFixedLenSuppress (
        /*[out,retval]*/ VARIANT_BOOL * bFixedLen ) = 0;
      virtual HRESULT __stdcall put_ExtLineFixedLenSuppress (
        /*[in]*/ VARIANT_BOOL bFixedLen ) = 0;
      virtual HRESULT __stdcall get_ExtLineFixedLen (
        /*[out,retval]*/ double * FixedLen ) = 0;
      virtual HRESULT __stdcall put_ExtLineFixedLen (
        /*[in]*/ double FixedLen ) = 0;
      virtual HRESULT __stdcall get_SubUnitsSuffix (
        /*[out,retval]*/ BSTR * suffix ) = 0;
      virtual HRESULT __stdcall put_SubUnitsSuffix (
        /*[in]*/ BSTR suffix ) = 0;
      virtual HRESULT __stdcall get_SubUnitsFactor (
        /*[out,retval]*/ double * factor ) = 0;
      virtual HRESULT __stdcall put_SubUnitsFactor (
        /*[in]*/ double factor ) = 0;
      virtual HRESULT __stdcall get_AltSubUnitsSuffix (
        /*[out,retval]*/ BSTR * suffix ) = 0;
      virtual HRESULT __stdcall put_AltSubUnitsSuffix (
        /*[in]*/ BSTR suffix ) = 0;
      virtual HRESULT __stdcall get_AltSubUnitsFactor (
        /*[out,retval]*/ double * factor ) = 0;
      virtual HRESULT __stdcall put_AltSubUnitsFactor (
        /*[in]*/ double factor ) = 0;
};

struct __declspec(uuid("18da8524-1491-4cc7-afc7-26d1deccd6bf"))
IAcadDimRadial : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetAltUnits,put=PutAltUnits))
    VARIANT_BOOL AltUnits;
    __declspec(property(get=GetAltUnitsPrecision,put=PutAltUnitsPrecision))
    enum AcDimPrecision AltUnitsPrecision;
    __declspec(property(get=GetAltUnitsScale,put=PutAltUnitsScale))
    ACAD_NOUNITS AltUnitsScale;
    __declspec(property(get=GetAltRoundDistance,put=PutAltRoundDistance))
    double AltRoundDistance;
    __declspec(property(get=GetAltTolerancePrecision,put=PutAltTolerancePrecision))
    enum AcDimPrecision AltTolerancePrecision;
    __declspec(property(get=GetDimConstrForm,put=PutDimConstrForm))
    VARIANT_BOOL DimConstrForm;
    __declspec(property(get=GetAltUnitsFormat,put=PutAltUnitsFormat))
    enum AcDimUnits AltUnitsFormat;
    __declspec(property(get=GetDimConstrReference,put=PutDimConstrReference))
    VARIANT_BOOL DimConstrReference;
    __declspec(property(get=GetAltTextPrefix,put=PutAltTextPrefix))
    _bstr_t AltTextPrefix;
    __declspec(property(get=GetAltTextSuffix,put=PutAltTextSuffix))
    _bstr_t AltTextSuffix;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetDimConstrName,put=PutDimConstrName))
    _bstr_t DimConstrName;
    __declspec(property(get=GetPrimaryUnitsPrecision,put=PutPrimaryUnitsPrecision))
    enum AcDimPrecision PrimaryUnitsPrecision;
    __declspec(property(get=GetDimConstrExpression,put=PutDimConstrExpression))
    _bstr_t DimConstrExpression;
    __declspec(property(get=GetDimConstrValue,put=PutDimConstrValue))
    _bstr_t DimConstrValue;
    __declspec(property(get=GetFit,put=PutFit))
    enum AcDimFit Fit;
    __declspec(property(get=GetFractionFormat,put=PutFractionFormat))
    enum AcDimFractionType FractionFormat;
    __declspec(property(get=GetDimConstrDesc,put=PutDimConstrDesc))
    _bstr_t DimConstrDesc;
    __declspec(property(get=GetLinearScaleFactor,put=PutLinearScaleFactor))
    ACAD_NOUNITS LinearScaleFactor;
    __declspec(property(get=GetUnitsFormat,put=PutUnitsFormat))
    enum AcDimLUnits UnitsFormat;
    __declspec(property(get=GetRoundDistance,put=PutRoundDistance))
    double RoundDistance;
    __declspec(property(get=GetDimLineSuppress,put=PutDimLineSuppress))
    VARIANT_BOOL DimLineSuppress;
    __declspec(property(get=GetTextInsideAlign,put=PutTextInsideAlign))
    VARIANT_BOOL TextInsideAlign;
    __declspec(property(get=GetTextInside,put=PutTextInside))
    VARIANT_BOOL TextInside;
    __declspec(property(get=GetForceLineInside,put=PutForceLineInside))
    VARIANT_BOOL ForceLineInside;
    __declspec(property(get=GetTextOutsideAlign,put=PutTextOutsideAlign))
    VARIANT_BOOL TextOutsideAlign;
    __declspec(property(put=PutLeaderLength))
    double LeaderLength;
    __declspec(property(get=GetCenterType,put=PutCenterType))
    enum AcDimCenterType CenterType;
    __declspec(property(get=GetCenterMarkSize,put=PutCenterMarkSize))
    double CenterMarkSize;
    __declspec(property(get=GetAltSuppressLeadingZeros,put=PutAltSuppressLeadingZeros))
    VARIANT_BOOL AltSuppressLeadingZeros;
    __declspec(property(get=GetAltSuppressTrailingZeros,put=PutAltSuppressTrailingZeros))
    VARIANT_BOOL AltSuppressTrailingZeros;
    __declspec(property(get=GetAltSuppressZeroFeet,put=PutAltSuppressZeroFeet))
    VARIANT_BOOL AltSuppressZeroFeet;
    __declspec(property(get=GetAltSuppressZeroInches,put=PutAltSuppressZeroInches))
    VARIANT_BOOL AltSuppressZeroInches;
    __declspec(property(get=GetAltToleranceSuppressLeadingZeros,put=PutAltToleranceSuppressLeadingZeros))
    VARIANT_BOOL AltToleranceSuppressLeadingZeros;
    __declspec(property(get=GetAltToleranceSuppressTrailingZeros,put=PutAltToleranceSuppressTrailingZeros))
    VARIANT_BOOL AltToleranceSuppressTrailingZeros;
    __declspec(property(get=GetAltToleranceSuppressZeroFeet,put=PutAltToleranceSuppressZeroFeet))
    VARIANT_BOOL AltToleranceSuppressZeroFeet;
    __declspec(property(get=GetAltToleranceSuppressZeroInches,put=PutAltToleranceSuppressZeroInches))
    VARIANT_BOOL AltToleranceSuppressZeroInches;
    __declspec(property(get=GetSuppressZeroFeet,put=PutSuppressZeroFeet))
    VARIANT_BOOL SuppressZeroFeet;
    __declspec(property(get=GetSuppressZeroInches,put=PutSuppressZeroInches))
    VARIANT_BOOL SuppressZeroInches;
    __declspec(property(get=GetToleranceSuppressZeroFeet,put=PutToleranceSuppressZeroFeet))
    VARIANT_BOOL ToleranceSuppressZeroFeet;
    __declspec(property(get=GetToleranceSuppressZeroInches,put=PutToleranceSuppressZeroInches))
    VARIANT_BOOL ToleranceSuppressZeroInches;
    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetArrowheadType,put=PutArrowheadType))
    enum AcDimArrowheadType ArrowheadType;
    __declspec(property(get=GetMeasurement))
    double Measurement;
    __declspec(property(get=GetArrowheadBlock,put=PutArrowheadBlock))
    _bstr_t ArrowheadBlock;
    __declspec(property(get=GetDimensionLinetype,put=PutDimensionLinetype))
    _bstr_t DimensionLinetype;

    //
    // Wrapper methods for error-handling
    //

    void PutLeaderLength (
        double _arg1 );
    VARIANT_BOOL GetAltUnits ( );
    void PutAltUnits (
        VARIANT_BOOL bAlternate );
    enum AcDimPrecision GetAltUnitsPrecision ( );
    void PutAltUnitsPrecision (
        enum AcDimPrecision precision );
    ACAD_NOUNITS GetAltUnitsScale ( );
    void PutAltUnitsScale (
        ACAD_NOUNITS scale );
    double GetAltRoundDistance ( );
    void PutAltRoundDistance (
        double Distance );
    enum AcDimPrecision GetAltTolerancePrecision ( );
    void PutAltTolerancePrecision (
        enum AcDimPrecision Distance );
    enum AcDimUnits GetAltUnitsFormat ( );
    void PutAltUnitsFormat (
        enum AcDimUnits Units );
    _bstr_t GetAltTextPrefix ( );
    void PutAltTextPrefix (
        _bstr_t prefix );
    _bstr_t GetAltTextSuffix ( );
    void PutAltTextSuffix (
        _bstr_t prefix );
    enum AcDimCenterType GetCenterType ( );
    void PutCenterType (
        enum AcDimCenterType Type );
    double GetCenterMarkSize ( );
    void PutCenterMarkSize (
        double Type );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );
    enum AcDimPrecision GetPrimaryUnitsPrecision ( );
    void PutPrimaryUnitsPrecision (
        enum AcDimPrecision Prec );
    enum AcDimFractionType GetFractionFormat ( );
    void PutFractionFormat (
        enum AcDimFractionType Type );
    enum AcDimFit GetFit ( );
    void PutFit (
        enum AcDimFit fittype );
    ACAD_NOUNITS GetLinearScaleFactor ( );
    void PutLinearScaleFactor (
        ACAD_NOUNITS Type );
    enum AcDimLUnits GetUnitsFormat ( );
    void PutUnitsFormat (
        enum AcDimLUnits format );
    double GetRoundDistance ( );
    void PutRoundDistance (
        double Distance );
    VARIANT_BOOL GetDimLineSuppress ( );
    void PutDimLineSuppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetTextInsideAlign ( );
    void PutTextInsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInside ( );
    void PutTextInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetForceLineInside ( );
    void PutForceLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextOutsideAlign ( );
    void PutTextOutsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetAltSuppressLeadingZeros ( );
    void PutAltSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressTrailingZeros ( );
    void PutAltSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroFeet ( );
    void PutAltSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroInches ( );
    void PutAltSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressLeadingZeros ( );
    void PutAltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressTrailingZeros ( );
    void PutAltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroFeet ( );
    void PutAltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroInches ( );
    void PutAltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroFeet ( );
    void PutSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroInches ( );
    void PutSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroFeet ( );
    void PutToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroInches ( );
    void PutToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowheadType ( );
    void PutArrowheadType (
        enum AcDimArrowheadType Type );
    double GetMeasurement ( );
    _bstr_t GetArrowheadBlock ( );
    void PutArrowheadBlock (
        _bstr_t BlockName );
    _bstr_t GetDimensionLinetype ( );
    void PutDimensionLinetype (
        _bstr_t Linetype );
    VARIANT_BOOL GetDimConstrForm ( );
    void PutDimConstrForm (
        VARIANT_BOOL bIsDynamic );
    VARIANT_BOOL GetDimConstrReference ( );
    void PutDimConstrReference (
        VARIANT_BOOL bIsReference );
    _bstr_t GetDimConstrName ( );
    void PutDimConstrName (
        _bstr_t bstrName );
    _bstr_t GetDimConstrExpression ( );
    void PutDimConstrExpression (
        _bstr_t bstrExpression );
    _bstr_t GetDimConstrValue ( );
    void PutDimConstrValue (
        _bstr_t Value );
    _bstr_t GetDimConstrDesc ( );
    void PutDimConstrDesc (
        _bstr_t bstrDescription );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_LeaderLength (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall get_AltUnits (
        /*[out,retval]*/ VARIANT_BOOL * bAlternate ) = 0;
      virtual HRESULT __stdcall put_AltUnits (
        /*[in]*/ VARIANT_BOOL bAlternate ) = 0;
      virtual HRESULT __stdcall get_AltUnitsPrecision (
        /*[out,retval]*/ enum AcDimPrecision * precision ) = 0;
      virtual HRESULT __stdcall put_AltUnitsPrecision (
        /*[in]*/ enum AcDimPrecision precision ) = 0;
      virtual HRESULT __stdcall get_AltUnitsScale (
        /*[out,retval]*/ ACAD_NOUNITS * scale ) = 0;
      virtual HRESULT __stdcall put_AltUnitsScale (
        /*[in]*/ ACAD_NOUNITS scale ) = 0;
      virtual HRESULT __stdcall get_AltRoundDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_AltRoundDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_AltTolerancePrecision (
        /*[out,retval]*/ enum AcDimPrecision * Distance ) = 0;
      virtual HRESULT __stdcall put_AltTolerancePrecision (
        /*[in]*/ enum AcDimPrecision Distance ) = 0;
      virtual HRESULT __stdcall get_AltUnitsFormat (
        /*[out,retval]*/ enum AcDimUnits * Units ) = 0;
      virtual HRESULT __stdcall put_AltUnitsFormat (
        /*[in]*/ enum AcDimUnits Units ) = 0;
      virtual HRESULT __stdcall get_AltTextPrefix (
        /*[out,retval]*/ BSTR * prefix ) = 0;
      virtual HRESULT __stdcall put_AltTextPrefix (
        /*[in]*/ BSTR prefix ) = 0;
      virtual HRESULT __stdcall get_AltTextSuffix (
        /*[out,retval]*/ BSTR * prefix ) = 0;
      virtual HRESULT __stdcall put_AltTextSuffix (
        /*[in]*/ BSTR prefix ) = 0;
      virtual HRESULT __stdcall get_CenterType (
        /*[out,retval]*/ enum AcDimCenterType * Type ) = 0;
      virtual HRESULT __stdcall put_CenterType (
        /*[in]*/ enum AcDimCenterType Type ) = 0;
      virtual HRESULT __stdcall get_CenterMarkSize (
        /*[out,retval]*/ double * Type ) = 0;
      virtual HRESULT __stdcall put_CenterMarkSize (
        /*[in]*/ double Type ) = 0;
      virtual HRESULT __stdcall get_DimensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * Type ) = 0;
      virtual HRESULT __stdcall put_DimensionLineColor (
        /*[in]*/ ACAD_COLOR Type ) = 0;
      virtual HRESULT __stdcall get_PrimaryUnitsPrecision (
        /*[out,retval]*/ enum AcDimPrecision * Prec ) = 0;
      virtual HRESULT __stdcall put_PrimaryUnitsPrecision (
        /*[in]*/ enum AcDimPrecision Prec ) = 0;
      virtual HRESULT __stdcall get_FractionFormat (
        /*[out,retval]*/ enum AcDimFractionType * Type ) = 0;
      virtual HRESULT __stdcall put_FractionFormat (
        /*[in]*/ enum AcDimFractionType Type ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ enum AcDimFit * fittype ) = 0;
      virtual HRESULT __stdcall put_Fit (
        /*[in]*/ enum AcDimFit fittype ) = 0;
      virtual HRESULT __stdcall get_LinearScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * Type ) = 0;
      virtual HRESULT __stdcall put_LinearScaleFactor (
        /*[in]*/ ACAD_NOUNITS Type ) = 0;
      virtual HRESULT __stdcall get_UnitsFormat (
        /*[out,retval]*/ enum AcDimLUnits * format ) = 0;
      virtual HRESULT __stdcall put_UnitsFormat (
        /*[in]*/ enum AcDimLUnits format ) = 0;
      virtual HRESULT __stdcall get_RoundDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_RoundDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_DimLineSuppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_DimLineSuppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_TextInsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_ForceLineInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_ForceLineInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextOutsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextOutsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_AltSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_DimensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * weight ) = 0;
      virtual HRESULT __stdcall put_DimensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT weight ) = 0;
      virtual HRESULT __stdcall get_ArrowheadSize (
        /*[out,retval]*/ double * size ) = 0;
      virtual HRESULT __stdcall put_ArrowheadSize (
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall get_ArrowheadType (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_ArrowheadType (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_Measurement (
        /*[out,retval]*/ double * bVal ) = 0;
      virtual HRESULT __stdcall get_ArrowheadBlock (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_ArrowheadBlock (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_DimensionLinetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_DimensionLinetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_DimConstrForm (
        /*[out,retval]*/ VARIANT_BOOL * bIsDynamic ) = 0;
      virtual HRESULT __stdcall put_DimConstrForm (
        /*[in]*/ VARIANT_BOOL bIsDynamic ) = 0;
      virtual HRESULT __stdcall get_DimConstrReference (
        /*[out,retval]*/ VARIANT_BOOL * bIsReference ) = 0;
      virtual HRESULT __stdcall put_DimConstrReference (
        /*[in]*/ VARIANT_BOOL bIsReference ) = 0;
      virtual HRESULT __stdcall get_DimConstrName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_DimConstrName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_DimConstrExpression (
        /*[out,retval]*/ BSTR * bstrExpression ) = 0;
      virtual HRESULT __stdcall put_DimConstrExpression (
        /*[in]*/ BSTR bstrExpression ) = 0;
      virtual HRESULT __stdcall get_DimConstrValue (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_DimConstrValue (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_DimConstrDesc (
        /*[out,retval]*/ BSTR * bstrDescription ) = 0;
      virtual HRESULT __stdcall put_DimConstrDesc (
        /*[in]*/ BSTR bstrDescription ) = 0;
};

struct __declspec(uuid("a35236d3-c2f2-482d-b272-cce9f236fad2"))
IAcadEllipse : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStartPoint))
    _variant_t StartPoint;
    __declspec(property(get=GetCenter,put=PutCenter))
    _variant_t Center;
    __declspec(property(get=GetEndPoint))
    _variant_t EndPoint;
    __declspec(property(get=GetMajorRadius,put=PutMajorRadius))
    double MajorRadius;
    __declspec(property(get=GetMinorRadius,put=PutMinorRadius))
    double MinorRadius;
    __declspec(property(get=GetRadiusRatio,put=PutRadiusRatio))
    double RadiusRatio;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    ACAD_ANGLE StartAngle;
    __declspec(property(get=GetEndAngle,put=PutEndAngle))
    ACAD_ANGLE EndAngle;
    __declspec(property(get=GetStartParameter,put=PutStartParameter))
    double StartParameter;
    __declspec(property(get=GetEndParameter,put=PutEndParameter))
    double EndParameter;
    __declspec(property(get=GetMajorAxis,put=PutMajorAxis))
    _variant_t MajorAxis;
    __declspec(property(get=GetMinorAxis))
    _variant_t MinorAxis;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetArea))
    double Area;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartPoint ( );
    _variant_t GetCenter ( );
    void PutCenter (
        const _variant_t & Center );
    _variant_t GetEndPoint ( );
    double GetMajorRadius ( );
    void PutMajorRadius (
        double MajorRadius );
    double GetMinorRadius ( );
    void PutMinorRadius (
        double MinorRadius );
    double GetRadiusRatio ( );
    void PutRadiusRatio (
        double RadiusRatio );
    ACAD_ANGLE GetStartAngle ( );
    void PutStartAngle (
        ACAD_ANGLE StartAngle );
    ACAD_ANGLE GetEndAngle ( );
    void PutEndAngle (
        ACAD_ANGLE EndAngle );
    double GetStartParameter ( );
    void PutStartParameter (
        double StartParameter );
    double GetEndParameter ( );
    void PutEndParameter (
        double EndParameter );
    _variant_t GetMajorAxis ( );
    void PutMajorAxis (
        const _variant_t & MajorAxis );
    _variant_t GetMinorAxis ( );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetArea ( );
    _variant_t Offset (
        double Distance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ VARIANT * StartPoint ) = 0;
      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ VARIANT * Center ) = 0;
      virtual HRESULT __stdcall put_Center (
        /*[in]*/ VARIANT Center ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ VARIANT * EndPoint ) = 0;
      virtual HRESULT __stdcall get_MajorRadius (
        /*[out,retval]*/ double * MajorRadius ) = 0;
      virtual HRESULT __stdcall put_MajorRadius (
        /*[in]*/ double MajorRadius ) = 0;
      virtual HRESULT __stdcall get_MinorRadius (
        /*[out,retval]*/ double * MinorRadius ) = 0;
      virtual HRESULT __stdcall put_MinorRadius (
        /*[in]*/ double MinorRadius ) = 0;
      virtual HRESULT __stdcall get_RadiusRatio (
        /*[out,retval]*/ double * RadiusRatio ) = 0;
      virtual HRESULT __stdcall put_RadiusRatio (
        /*[in]*/ double RadiusRatio ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ ACAD_ANGLE * StartAngle ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ ACAD_ANGLE StartAngle ) = 0;
      virtual HRESULT __stdcall get_EndAngle (
        /*[out,retval]*/ ACAD_ANGLE * EndAngle ) = 0;
      virtual HRESULT __stdcall put_EndAngle (
        /*[in]*/ ACAD_ANGLE EndAngle ) = 0;
      virtual HRESULT __stdcall get_StartParameter (
        /*[out,retval]*/ double * StartParameter ) = 0;
      virtual HRESULT __stdcall put_StartParameter (
        /*[in]*/ double StartParameter ) = 0;
      virtual HRESULT __stdcall get_EndParameter (
        /*[out,retval]*/ double * EndParameter ) = 0;
      virtual HRESULT __stdcall put_EndParameter (
        /*[in]*/ double EndParameter ) = 0;
      virtual HRESULT __stdcall get_MajorAxis (
        /*[out,retval]*/ VARIANT * MajorAxis ) = 0;
      virtual HRESULT __stdcall put_MajorAxis (
        /*[in]*/ VARIANT MajorAxis ) = 0;
      virtual HRESULT __stdcall get_MinorAxis (
        /*[out,retval]*/ VARIANT * MinorAxis ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall raw_Offset (
        /*[in]*/ double Distance,
        /*[out,retval]*/ VARIANT * pOffsetCurves ) = 0;
};

struct __declspec(uuid("aa112a3d-c9da-4851-8199-a465584d9d98"))
IAcadLeader : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetNormal))
    _variant_t Normal;
    __declspec(property(get=GetType,put=PutType))
    enum AcLeaderType Type;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];
    __declspec(property(get=GetAnnotation,put=PutAnnotation))
    IAcadEntityPtr Annotation;
    __declspec(property(get=GetArrowheadType,put=PutArrowheadType))
    enum AcDimArrowheadType ArrowheadType;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetArrowheadBlock,put=PutArrowheadBlock))
    _bstr_t ArrowheadBlock;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetTextGap,put=PutTextGap))
    double TextGap;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetVerticalTextPosition,put=PutVerticalTextPosition))
    enum AcDimVerticalJustification VerticalTextPosition;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & Coordinates );
    _variant_t GetNormal ( );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t bstrName );
    enum AcLeaderType GetType ( );
    void PutType (
        enum AcLeaderType Type );
    HRESULT Evaluate ( );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );
    IAcadEntityPtr GetAnnotation ( );
    void PutAnnotation (
        struct IAcadEntity * pVal );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowheadType ( );
    void PutArrowheadType (
        enum AcDimArrowheadType Type );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS factor );
    enum AcDimVerticalJustification GetVerticalTextPosition ( );
    void PutVerticalTextPosition (
        enum AcDimVerticalJustification Type );
    double GetTextGap ( );
    void PutTextGap (
        double Offset );
    _bstr_t GetArrowheadBlock ( );
    void PutArrowheadBlock (
        _bstr_t BlockName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Coordinates (
        /*[out,retval]*/ VARIANT * Coordinates ) = 0;
      virtual HRESULT __stdcall put_Coordinates (
        /*[in]*/ VARIANT Coordinates ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall get_StyleName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_StyleName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AcLeaderType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum AcLeaderType Type ) = 0;
      virtual HRESULT __stdcall raw_Evaluate ( ) = 0;
      virtual HRESULT __stdcall get_Coordinate (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Coordinate (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Annotation (
        /*[out,retval]*/ struct IAcadEntity * * pVal ) = 0;
      virtual HRESULT __stdcall put_Annotation (
        /*[in]*/ struct IAcadEntity * pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowheadSize (
        /*[out,retval]*/ double * size ) = 0;
      virtual HRESULT __stdcall put_ArrowheadSize (
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall get_ArrowheadType (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_ArrowheadType (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_DimensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * Type ) = 0;
      virtual HRESULT __stdcall put_DimensionLineColor (
        /*[in]*/ ACAD_COLOR Type ) = 0;
      virtual HRESULT __stdcall get_DimensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * weight ) = 0;
      virtual HRESULT __stdcall put_DimensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT weight ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * factor ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ ACAD_NOUNITS factor ) = 0;
      virtual HRESULT __stdcall get_VerticalTextPosition (
        /*[out,retval]*/ enum AcDimVerticalJustification * Type ) = 0;
      virtual HRESULT __stdcall put_VerticalTextPosition (
        /*[in]*/ enum AcDimVerticalJustification Type ) = 0;
      virtual HRESULT __stdcall get_TextGap (
        /*[out,retval]*/ double * Offset ) = 0;
      virtual HRESULT __stdcall put_TextGap (
        /*[in]*/ double Offset ) = 0;
      virtual HRESULT __stdcall get_ArrowheadBlock (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_ArrowheadBlock (
        /*[in]*/ BSTR BlockName ) = 0;
};

struct __declspec(uuid("95a24d69-4531-4083-925e-69865fbb9a03"))
IAcadMText : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTextString,put=PutTextString))
    _bstr_t TextString;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetAttachmentPoint,put=PutAttachmentPoint))
    enum AcAttachmentPoint AttachmentPoint;
    __declspec(property(get=GetDrawingDirection,put=PutDrawingDirection))
    enum AcDrawingDirection DrawingDirection;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetLineSpacingFactor,put=PutLineSpacingFactor))
    double LineSpacingFactor;
    __declspec(property(get=GetLineSpacingStyle,put=PutLineSpacingStyle))
    enum AcLineSpacingStyle LineSpacingStyle;
    __declspec(property(get=GetLineSpacingDistance,put=PutLineSpacingDistance))
    double LineSpacingDistance;
    __declspec(property(get=GetBackgroundFill,put=PutBackgroundFill))
    VARIANT_BOOL BackgroundFill;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTextString ( );
    void PutTextString (
        _bstr_t bstrText );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t bstrName );
    enum AcAttachmentPoint GetAttachmentPoint ( );
    void PutAttachmentPoint (
        enum AcAttachmentPoint attPoint );
    enum AcDrawingDirection GetDrawingDirection ( );
    void PutDrawingDirection (
        enum AcDrawingDirection drawDir );
    double GetWidth ( );
    void PutWidth (
        double Width );
    double GetHeight ( );
    void PutHeight (
        double Height );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetLineSpacingFactor ( );
    void PutLineSpacingFactor (
        double factor );
    enum AcLineSpacingStyle GetLineSpacingStyle ( );
    void PutLineSpacingStyle (
        enum AcLineSpacingStyle style );
    double GetLineSpacingDistance ( );
    void PutLineSpacingDistance (
        double Value );
    VARIANT_BOOL GetBackgroundFill ( );
    void PutBackgroundFill (
        VARIANT_BOOL bUseBackgroundFill );
    _bstr_t FieldCode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextString (
        /*[out,retval]*/ BSTR * bstrText ) = 0;
      virtual HRESULT __stdcall put_TextString (
        /*[in]*/ BSTR bstrText ) = 0;
      virtual HRESULT __stdcall get_StyleName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_StyleName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_AttachmentPoint (
        /*[out,retval]*/ enum AcAttachmentPoint * attPoint ) = 0;
      virtual HRESULT __stdcall put_AttachmentPoint (
        /*[in]*/ enum AcAttachmentPoint attPoint ) = 0;
      virtual HRESULT __stdcall get_DrawingDirection (
        /*[out,retval]*/ enum AcDrawingDirection * drawDir ) = 0;
      virtual HRESULT __stdcall put_DrawingDirection (
        /*[in]*/ enum AcDrawingDirection drawDir ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ ACAD_ANGLE * rotAngle ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ ACAD_ANGLE rotAngle ) = 0;
      virtual HRESULT __stdcall get_InsertionPoint (
        /*[out,retval]*/ VARIANT * insPoint ) = 0;
      virtual HRESULT __stdcall put_InsertionPoint (
        /*[in]*/ VARIANT insPoint ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_LineSpacingFactor (
        /*[out,retval]*/ double * factor ) = 0;
      virtual HRESULT __stdcall put_LineSpacingFactor (
        /*[in]*/ double factor ) = 0;
      virtual HRESULT __stdcall get_LineSpacingStyle (
        /*[out,retval]*/ enum AcLineSpacingStyle * style ) = 0;
      virtual HRESULT __stdcall put_LineSpacingStyle (
        /*[in]*/ enum AcLineSpacingStyle style ) = 0;
      virtual HRESULT __stdcall get_LineSpacingDistance (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_LineSpacingDistance (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_BackgroundFill (
        /*[out,retval]*/ VARIANT_BOOL * bUseBackgroundFill ) = 0;
      virtual HRESULT __stdcall put_BackgroundFill (
        /*[in]*/ VARIANT_BOOL bUseBackgroundFill ) = 0;
      virtual HRESULT __stdcall raw_FieldCode (
        /*[out,retval]*/ BSTR * bstrText ) = 0;
};

struct __declspec(uuid("52485ac7-5e0d-4da4-b642-0796831aa592"))
IAcadPoint : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & Coordinates );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Coordinates (
        /*[out,retval]*/ VARIANT * Coordinates ) = 0;
      virtual HRESULT __stdcall put_Coordinates (
        /*[in]*/ VARIANT Coordinates ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * Thickness ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double Thickness ) = 0;
};

struct __declspec(uuid("0f3fb243-2494-4bac-bfc9-304466f12711"))
IAcadLWPolyline : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetConstantWidth,put=PutConstantWidth))
    double ConstantWidth;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetLinetypeGeneration,put=PutLinetypeGeneration))
    VARIANT_BOOL LinetypeGeneration;
    __declspec(property(get=GetLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & Coordinates );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    HRESULT AddVertex (
        int Index,
        const _variant_t & vertex );
    _variant_t Explode ( );
    double GetBulge (
        int Index );
    HRESULT SetBulge (
        int Index,
        double bulge );
    HRESULT GetWidth (
        int Index,
        double * StartWidth,
        double * EndWidth );
    HRESULT SetWidth (
        int Index,
        double StartWidth,
        double EndWidth );
    double GetConstantWidth ( );
    void PutConstantWidth (
        double Width );
    _variant_t Offset (
        double Distance );
    double GetElevation ( );
    void PutElevation (
        double Elevation );
    double GetArea ( );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );
    VARIANT_BOOL GetClosed ( );
    void PutClosed (
        VARIANT_BOOL fClose );
    VARIANT_BOOL GetLinetypeGeneration ( );
    void PutLinetypeGeneration (
        VARIANT_BOOL bLinetypeGen );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Coordinates (
        /*[out,retval]*/ VARIANT * Coordinates ) = 0;
      virtual HRESULT __stdcall put_Coordinates (
        /*[in]*/ VARIANT Coordinates ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * Thickness ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double Thickness ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT vertex ) = 0;
      virtual HRESULT __stdcall raw_Explode (
        /*[out,retval]*/ VARIANT * pArrayObjs ) = 0;
      virtual HRESULT __stdcall raw_GetBulge (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * bulge ) = 0;
      virtual HRESULT __stdcall raw_SetBulge (
        /*[in]*/ int Index,
        /*[in]*/ double bulge ) = 0;
      virtual HRESULT __stdcall raw_GetWidth (
        /*[in]*/ int Index,
        /*[out]*/ double * StartWidth,
        /*[out]*/ double * EndWidth ) = 0;
      virtual HRESULT __stdcall raw_SetWidth (
        /*[in]*/ int Index,
        /*[in]*/ double StartWidth,
        /*[in]*/ double EndWidth ) = 0;
      virtual HRESULT __stdcall get_ConstantWidth (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_ConstantWidth (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall raw_Offset (
        /*[in]*/ double Distance,
        /*[out,retval]*/ VARIANT * pOffsetCurves ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * Elevation ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double Elevation ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall get_Coordinate (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Coordinate (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * fClose ) = 0;
      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL fClose ) = 0;
      virtual HRESULT __stdcall get_LinetypeGeneration (
        /*[out,retval]*/ VARIANT_BOOL * bLinetypeGen ) = 0;
      virtual HRESULT __stdcall put_LinetypeGeneration (
        /*[in]*/ VARIANT_BOOL bLinetypeGen ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Length ) = 0;
};

struct __declspec(uuid("bbc9e18d-538f-43ad-a963-a29e87993cbb"))
IAcadPolyline : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetConstantWidth,put=PutConstantWidth))
    double ConstantWidth;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetType,put=PutType))
    enum AcPolylineType Type;
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetLinetypeGeneration,put=PutLinetypeGeneration))
    VARIANT_BOOL LinetypeGeneration;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];
    __declspec(property(get=GetLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & Coordinates );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    HRESULT AppendVertex (
        const _variant_t & vertex );
    _variant_t Explode ( );
    double GetBulge (
        int Index );
    HRESULT SetBulge (
        int Index,
        double bulge );
    HRESULT GetWidth (
        int Index,
        double * StartWidth,
        double * EndWidth );
    HRESULT SetWidth (
        int Index,
        double StartWidth,
        double EndWidth );
    double GetConstantWidth ( );
    void PutConstantWidth (
        double Width );
    _variant_t Offset (
        double Distance );
    double GetElevation ( );
    void PutElevation (
        double Elevation );
    enum AcPolylineType GetType ( );
    void PutType (
        enum AcPolylineType Type );
    VARIANT_BOOL GetClosed ( );
    void PutClosed (
        VARIANT_BOOL fClose );
    VARIANT_BOOL GetLinetypeGeneration ( );
    void PutLinetypeGeneration (
        VARIANT_BOOL bLinetypeGen );
    double GetArea ( );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Coordinates (
        /*[out,retval]*/ VARIANT * Coordinates ) = 0;
      virtual HRESULT __stdcall put_Coordinates (
        /*[in]*/ VARIANT Coordinates ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * Thickness ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double Thickness ) = 0;
      virtual HRESULT __stdcall raw_AppendVertex (
        /*[in]*/ VARIANT vertex ) = 0;
      virtual HRESULT __stdcall raw_Explode (
        /*[out,retval]*/ VARIANT * pArrayObjs ) = 0;
      virtual HRESULT __stdcall raw_GetBulge (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * bulge ) = 0;
      virtual HRESULT __stdcall raw_SetBulge (
        /*[in]*/ int Index,
        /*[in]*/ double bulge ) = 0;
      virtual HRESULT __stdcall raw_GetWidth (
        /*[in]*/ int Index,
        /*[out]*/ double * StartWidth,
        double * EndWidth ) = 0;
      virtual HRESULT __stdcall raw_SetWidth (
        /*[in]*/ int Index,
        /*[in]*/ double StartWidth,
        double EndWidth ) = 0;
      virtual HRESULT __stdcall get_ConstantWidth (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_ConstantWidth (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall raw_Offset (
        /*[in]*/ double Distance,
        /*[out,retval]*/ VARIANT * pOffsetCurves ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * Elevation ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double Elevation ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AcPolylineType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum AcPolylineType Type ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * fClose ) = 0;
      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL fClose ) = 0;
      virtual HRESULT __stdcall get_LinetypeGeneration (
        /*[out,retval]*/ VARIANT_BOOL * bLinetypeGen ) = 0;
      virtual HRESULT __stdcall put_LinetypeGeneration (
        /*[in]*/ VARIANT_BOOL bLinetypeGen ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall get_Coordinate (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Coordinate (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Length ) = 0;
};

struct __declspec(uuid("81989cda-342d-4634-b229-8ace12c27cc3"))
IAcadRay : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetBasePoint,put=PutBasePoint))
    _variant_t BasePoint;
    __declspec(property(get=GetSecondPoint,put=PutSecondPoint))
    _variant_t SecondPoint;
    __declspec(property(get=GetDirectionVector,put=PutDirectionVector))
    _variant_t DirectionVector;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetBasePoint ( );
    void PutBasePoint (
        const _variant_t & BasePoint );
    _variant_t GetSecondPoint ( );
    void PutSecondPoint (
        const _variant_t & SecondPoint );
    _variant_t GetDirectionVector ( );
    void PutDirectionVector (
        const _variant_t & dirVector );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BasePoint (
        /*[out,retval]*/ VARIANT * BasePoint ) = 0;
      virtual HRESULT __stdcall put_BasePoint (
        /*[in]*/ VARIANT BasePoint ) = 0;
      virtual HRESULT __stdcall get_SecondPoint (
        /*[out,retval]*/ VARIANT * SecondPoint ) = 0;
      virtual HRESULT __stdcall put_SecondPoint (
        /*[in]*/ VARIANT SecondPoint ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ VARIANT * dirVector ) = 0;
      virtual HRESULT __stdcall put_DirectionVector (
        /*[in]*/ VARIANT dirVector ) = 0;
};

struct __declspec(uuid("504f080d-45d3-4bfc-bd95-681b1194ec1d"))
IAcadShape : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetObliqueAngle,put=PutObliqueAngle))
    ACAD_ANGLE ObliqueAngle;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    double GetHeight ( );
    void PutHeight (
        double Height );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS scalFactor );
    ACAD_ANGLE GetObliqueAngle ( );
    void PutObliqueAngle (
        ACAD_ANGLE obliAngle );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InsertionPoint (
        /*[out,retval]*/ VARIANT * insPoint ) = 0;
      virtual HRESULT __stdcall put_InsertionPoint (
        /*[in]*/ VARIANT insPoint ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ ACAD_ANGLE * rotAngle ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ ACAD_ANGLE rotAngle ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * scalFactor ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ ACAD_NOUNITS scalFactor ) = 0;
      virtual HRESULT __stdcall get_ObliqueAngle (
        /*[out,retval]*/ ACAD_ANGLE * obliAngle ) = 0;
      virtual HRESULT __stdcall put_ObliqueAngle (
        /*[in]*/ ACAD_ANGLE obliAngle ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * Thickness ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double Thickness ) = 0;
};

struct __declspec(uuid("a2f91ead-d307-4465-b70e-ecf9fb7103e3"))
IAcadSolid : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & corners );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Coordinates (
        /*[out,retval]*/ VARIANT * corners ) = 0;
      virtual HRESULT __stdcall put_Coordinates (
        /*[in]*/ VARIANT corners ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * Thickness ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double Thickness ) = 0;
      virtual HRESULT __stdcall get_Coordinate (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Coordinate (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("75a55bac-3e9c-47d0-89f6-76fa61bc5366"))
IAcadSpline : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetClosed2,put=PutClosed2))
    VARIANT_BOOL Closed2;
    __declspec(property(get=GetNumberOfControlPoints))
    long NumberOfControlPoints;
    __declspec(property(get=GetControlPoints,put=PutControlPoints))
    _variant_t ControlPoints;
    __declspec(property(get=GetNumberOfFitPoints))
    long NumberOfFitPoints;
    __declspec(property(get=GetFitPoints,put=PutFitPoints))
    _variant_t FitPoints;
    __declspec(property(get=GetDegree))
    long Degree;
    __declspec(property(get=GetClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetIsPlanar))
    VARIANT_BOOL IsPlanar;
    __declspec(property(get=GetIsRational))
    VARIANT_BOOL IsRational;
    __declspec(property(get=GetIsPeriodic))
    VARIANT_BOOL IsPeriodic;
    __declspec(property(get=GetStartTangent,put=PutStartTangent))
    _variant_t StartTangent;
    __declspec(property(get=GetEndTangent,put=PutEndTangent))
    _variant_t EndTangent;
    __declspec(property(get=GetFitTolerance,put=PutFitTolerance))
    double FitTolerance;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetKnots,put=PutKnots))
    _variant_t Knots;
    __declspec(property(get=GetWeights,put=PutWeights))
    _variant_t Weights;
    __declspec(property(get=GetKnotParameterization,put=PutKnotParameterization))
    enum AcSplineKnotParameterizationType KnotParameterization;
    __declspec(property(get=GetSplineFrame,put=PutSplineFrame))
    enum AcSplineFrameType SplineFrame;
    __declspec(property(get=GetSplineMethod,put=PutSplineMethod))
    enum AcSplineMethodType SplineMethod;
    __declspec(property(get=GetDegree2,put=PutDegree2))
    long Degree2;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfControlPoints ( );
    _variant_t GetControlPoints ( );
    void PutControlPoints (
        const _variant_t & controlPoint );
    long GetNumberOfFitPoints ( );
    _variant_t GetFitPoints ( );
    void PutFitPoints (
        const _variant_t & fitPoint );
    long GetDegree ( );
    VARIANT_BOOL GetClosed ( );
    VARIANT_BOOL GetIsPlanar ( );
    VARIANT_BOOL GetIsRational ( );
    VARIANT_BOOL GetIsPeriodic ( );
    _variant_t GetStartTangent ( );
    void PutStartTangent (
        const _variant_t & StartTangent );
    _variant_t GetEndTangent ( );
    void PutEndTangent (
        const _variant_t & EndTangent );
    double GetFitTolerance ( );
    void PutFitTolerance (
        double fitTol );
    double GetArea ( );
    HRESULT SetControlPoint (
        int Index,
        const _variant_t & controlPoint );
    _variant_t GetControlPoint (
        int Index );
    HRESULT SetFitPoint (
        int Index,
        const _variant_t & fitPoint );
    _variant_t GetFitPoint (
        int Index );
    HRESULT SetWeight (
        int Index,
        double weight );
    double GetWeight (
        int Index );
    HRESULT AddFitPoint (
        int Index,
        const _variant_t & fitPoint );
    HRESULT DeleteFitPoint (
        int Index );
    HRESULT ElevateOrder (
        int Order );
    _variant_t Offset (
        double Distance );
    HRESULT PurgeFitData ( );
    HRESULT Reverse ( );
    _variant_t GetKnots ( );
    void PutKnots (
        const _variant_t & KnotValues );
    _variant_t GetWeights ( );
    void PutWeights (
        const _variant_t & WeightValues );
    enum AcSplineKnotParameterizationType GetKnotParameterization ( );
    void PutKnotParameterization (
        enum AcSplineKnotParameterizationType knotParamVal );
    enum AcSplineFrameType GetSplineFrame ( );
    void PutSplineFrame (
        enum AcSplineFrameType show );
    enum AcSplineMethodType GetSplineMethod ( );
    void PutSplineMethod (
        enum AcSplineMethodType method );
    void PutDegree2 (
        long Degree );
    long GetDegree2 ( );
    void PutClosed2 (
        VARIANT_BOOL fClose );
    VARIANT_BOOL GetClosed2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfControlPoints (
        /*[out,retval]*/ long * numCtrlPoints ) = 0;
      virtual HRESULT __stdcall get_ControlPoints (
        /*[out,retval]*/ VARIANT * controlPoint ) = 0;
      virtual HRESULT __stdcall put_ControlPoints (
        /*[in]*/ VARIANT controlPoint ) = 0;
      virtual HRESULT __stdcall get_NumberOfFitPoints (
        /*[out,retval]*/ long * numFitPoints ) = 0;
      virtual HRESULT __stdcall get_FitPoints (
        /*[out,retval]*/ VARIANT * fitPoint ) = 0;
      virtual HRESULT __stdcall put_FitPoints (
        /*[in]*/ VARIANT fitPoint ) = 0;
      virtual HRESULT __stdcall get_Degree (
        /*[out,retval]*/ long * Degree ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * fClose ) = 0;
      virtual HRESULT __stdcall get_IsPlanar (
        /*[out,retval]*/ VARIANT_BOOL * fPlanar ) = 0;
      virtual HRESULT __stdcall get_IsRational (
        /*[out,retval]*/ VARIANT_BOOL * fRational ) = 0;
      virtual HRESULT __stdcall get_IsPeriodic (
        /*[out,retval]*/ VARIANT_BOOL * fPeriodic ) = 0;
      virtual HRESULT __stdcall get_StartTangent (
        /*[out,retval]*/ VARIANT * StartTangent ) = 0;
      virtual HRESULT __stdcall put_StartTangent (
        /*[in]*/ VARIANT StartTangent ) = 0;
      virtual HRESULT __stdcall get_EndTangent (
        /*[out,retval]*/ VARIANT * EndTangent ) = 0;
      virtual HRESULT __stdcall put_EndTangent (
        /*[in]*/ VARIANT EndTangent ) = 0;
      virtual HRESULT __stdcall get_FitTolerance (
        /*[out,retval]*/ double * fitTol ) = 0;
      virtual HRESULT __stdcall put_FitTolerance (
        /*[in]*/ double fitTol ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall raw_SetControlPoint (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT controlPoint ) = 0;
      virtual HRESULT __stdcall raw_GetControlPoint (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * controlPoint ) = 0;
      virtual HRESULT __stdcall raw_SetFitPoint (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT fitPoint ) = 0;
      virtual HRESULT __stdcall raw_GetFitPoint (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * fitPoint ) = 0;
      virtual HRESULT __stdcall raw_SetWeight (
        /*[in]*/ int Index,
        /*[in]*/ double weight ) = 0;
      virtual HRESULT __stdcall raw_GetWeight (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * weight ) = 0;
      virtual HRESULT __stdcall raw_AddFitPoint (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT fitPoint ) = 0;
      virtual HRESULT __stdcall raw_DeleteFitPoint (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_ElevateOrder (
        /*[in]*/ int Order ) = 0;
      virtual HRESULT __stdcall raw_Offset (
        /*[in]*/ double Distance,
        /*[out,retval]*/ VARIANT * pOffsetCurves ) = 0;
      virtual HRESULT __stdcall raw_PurgeFitData ( ) = 0;
      virtual HRESULT __stdcall raw_Reverse ( ) = 0;
      virtual HRESULT __stdcall get_Knots (
        /*[out,retval]*/ VARIANT * KnotValues ) = 0;
      virtual HRESULT __stdcall put_Knots (
        /*[in]*/ VARIANT KnotValues ) = 0;
      virtual HRESULT __stdcall get_Weights (
        /*[out,retval]*/ VARIANT * WeightValues ) = 0;
      virtual HRESULT __stdcall put_Weights (
        /*[in]*/ VARIANT WeightValues ) = 0;
      virtual HRESULT __stdcall get_KnotParameterization (
        /*[out,retval]*/ enum AcSplineKnotParameterizationType * knotParamVal ) = 0;
      virtual HRESULT __stdcall put_KnotParameterization (
        /*[in]*/ enum AcSplineKnotParameterizationType knotParamVal ) = 0;
      virtual HRESULT __stdcall get_SplineFrame (
        /*[out,retval]*/ enum AcSplineFrameType * show ) = 0;
      virtual HRESULT __stdcall put_SplineFrame (
        /*[in]*/ enum AcSplineFrameType show ) = 0;
      virtual HRESULT __stdcall get_SplineMethod (
        /*[out,retval]*/ enum AcSplineMethodType * method ) = 0;
      virtual HRESULT __stdcall put_SplineMethod (
        /*[in]*/ enum AcSplineMethodType method ) = 0;
      virtual HRESULT __stdcall put_Degree2 (
        /*[in]*/ long Degree ) = 0;
      virtual HRESULT __stdcall get_Degree2 (
        /*[out,retval]*/ long * Degree ) = 0;
      virtual HRESULT __stdcall put_Closed2 (
        /*[in]*/ VARIANT_BOOL fClose ) = 0;
      virtual HRESULT __stdcall get_Closed2 (
        /*[out,retval]*/ VARIANT_BOOL * fClose ) = 0;
};

struct __declspec(uuid("ca2dd247-d133-4646-ba49-ee3dd475a3bc"))
IAcadText : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTextString,put=PutTextString))
    _bstr_t TextString;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum AcAlignment Alignment;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum AcHorizontalAlignment HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum AcVerticalAlignment VerticalAlignment;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetObliqueAngle,put=PutObliqueAngle))
    ACAD_ANGLE ObliqueAngle;
    __declspec(property(get=GetTextAlignmentPoint,put=PutTextAlignmentPoint))
    _variant_t TextAlignmentPoint;
    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetTextGenerationFlag,put=PutTextGenerationFlag))
    long TextGenerationFlag;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetUpsideDown,put=PutUpsideDown))
    VARIANT_BOOL UpsideDown;
    __declspec(property(get=GetBackward,put=PutBackward))
    VARIANT_BOOL Backward;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTextString ( );
    void PutTextString (
        _bstr_t bstrText );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t bstrName );
    enum AcAlignment GetAlignment ( );
    void PutAlignment (
        enum AcAlignment align );
    enum AcHorizontalAlignment GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum AcHorizontalAlignment horizAlign );
    enum AcVerticalAlignment GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum AcVerticalAlignment vertiAlign );
    double GetHeight ( );
    void PutHeight (
        double Height );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS scalFactor );
    ACAD_ANGLE GetObliqueAngle ( );
    void PutObliqueAngle (
        ACAD_ANGLE obliAngle );
    _variant_t GetTextAlignmentPoint ( );
    void PutTextAlignmentPoint (
        const _variant_t & alignPoint );
    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    long GetTextGenerationFlag ( );
    void PutTextGenerationFlag (
        long textGenFlag );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    VARIANT_BOOL GetUpsideDown ( );
    void PutUpsideDown (
        VARIANT_BOOL UpsideDown );
    VARIANT_BOOL GetBackward ( );
    void PutBackward (
        VARIANT_BOOL Backward );
    _bstr_t FieldCode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextString (
        /*[out,retval]*/ BSTR * bstrText ) = 0;
      virtual HRESULT __stdcall put_TextString (
        /*[in]*/ BSTR bstrText ) = 0;
      virtual HRESULT __stdcall get_StyleName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_StyleName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum AcAlignment * align ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum AcAlignment align ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ enum AcHorizontalAlignment * horizAlign ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ enum AcHorizontalAlignment horizAlign ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ enum AcVerticalAlignment * vertiAlign ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ enum AcVerticalAlignment vertiAlign ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ ACAD_ANGLE * rotAngle ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ ACAD_ANGLE rotAngle ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * scalFactor ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ ACAD_NOUNITS scalFactor ) = 0;
      virtual HRESULT __stdcall get_ObliqueAngle (
        /*[out,retval]*/ ACAD_ANGLE * obliAngle ) = 0;
      virtual HRESULT __stdcall put_ObliqueAngle (
        /*[in]*/ ACAD_ANGLE obliAngle ) = 0;
      virtual HRESULT __stdcall get_TextAlignmentPoint (
        /*[out,retval]*/ VARIANT * alignPoint ) = 0;
      virtual HRESULT __stdcall put_TextAlignmentPoint (
        /*[in]*/ VARIANT alignPoint ) = 0;
      virtual HRESULT __stdcall get_InsertionPoint (
        /*[out,retval]*/ VARIANT * insPoint ) = 0;
      virtual HRESULT __stdcall put_InsertionPoint (
        /*[in]*/ VARIANT insPoint ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_TextGenerationFlag (
        /*[out,retval]*/ long * textGenFlag ) = 0;
      virtual HRESULT __stdcall put_TextGenerationFlag (
        /*[in]*/ long textGenFlag ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * Thickness ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double Thickness ) = 0;
      virtual HRESULT __stdcall get_UpsideDown (
        /*[out,retval]*/ VARIANT_BOOL * UpsideDown ) = 0;
      virtual HRESULT __stdcall put_UpsideDown (
        /*[in]*/ VARIANT_BOOL UpsideDown ) = 0;
      virtual HRESULT __stdcall get_Backward (
        /*[out,retval]*/ VARIANT_BOOL * Backward ) = 0;
      virtual HRESULT __stdcall put_Backward (
        /*[in]*/ VARIANT_BOOL Backward ) = 0;
      virtual HRESULT __stdcall raw_FieldCode (
        /*[out,retval]*/ BSTR * bstrText ) = 0;
};

struct __declspec(uuid("6779b954-8464-496a-8458-53405f035358"))
IAcadTolerance : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTextString,put=PutTextString))
    _bstr_t TextString;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetDirectionVector,put=PutDirectionVector))
    _variant_t DirectionVector;
    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetDirectionVector ( );
    void PutDirectionVector (
        const _variant_t & dirVector );
    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t bstrName );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR color );
    _bstr_t GetTextString ( );
    void PutTextString (
        _bstr_t bstrText );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t style );
    double GetTextHeight ( );
    void PutTextHeight (
        double Height );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS factor );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ VARIANT * dirVector ) = 0;
      virtual HRESULT __stdcall put_DirectionVector (
        /*[in]*/ VARIANT dirVector ) = 0;
      virtual HRESULT __stdcall get_InsertionPoint (
        /*[out,retval]*/ VARIANT * insPoint ) = 0;
      virtual HRESULT __stdcall put_InsertionPoint (
        /*[in]*/ VARIANT insPoint ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_StyleName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_StyleName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * color ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR color ) = 0;
      virtual HRESULT __stdcall get_TextString (
        /*[out,retval]*/ BSTR * bstrText ) = 0;
      virtual HRESULT __stdcall put_TextString (
        /*[in]*/ BSTR bstrText ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * style ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR style ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * factor ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ ACAD_NOUNITS factor ) = 0;
      virtual HRESULT __stdcall get_DimensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * Type ) = 0;
      virtual HRESULT __stdcall put_DimensionLineColor (
        /*[in]*/ ACAD_COLOR Type ) = 0;
};

struct __declspec(uuid("d295da05-d626-4b03-8ff3-836da9b97de4"))
IAcadTrace : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & corners );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Coordinates (
        /*[out,retval]*/ VARIANT * corners ) = 0;
      virtual HRESULT __stdcall put_Coordinates (
        /*[in]*/ VARIANT corners ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * Thickness ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double Thickness ) = 0;
      virtual HRESULT __stdcall get_Coordinate (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Coordinate (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("d70f5268-be6d-4ba6-a289-13fba96c3084"))
IAcadXline : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetBasePoint,put=PutBasePoint))
    _variant_t BasePoint;
    __declspec(property(get=GetSecondPoint,put=PutSecondPoint))
    _variant_t SecondPoint;
    __declspec(property(get=GetDirectionVector,put=PutDirectionVector))
    _variant_t DirectionVector;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetBasePoint ( );
    void PutBasePoint (
        const _variant_t & BasePoint );
    _variant_t GetSecondPoint ( );
    void PutSecondPoint (
        const _variant_t & SecondPoint );
    _variant_t GetDirectionVector ( );
    void PutDirectionVector (
        const _variant_t & dirVector );
    _variant_t Offset (
        double Distance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BasePoint (
        /*[out,retval]*/ VARIANT * BasePoint ) = 0;
      virtual HRESULT __stdcall put_BasePoint (
        /*[in]*/ VARIANT BasePoint ) = 0;
      virtual HRESULT __stdcall get_SecondPoint (
        /*[out,retval]*/ VARIANT * SecondPoint ) = 0;
      virtual HRESULT __stdcall put_SecondPoint (
        /*[in]*/ VARIANT SecondPoint ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ VARIANT * dirVector ) = 0;
      virtual HRESULT __stdcall put_DirectionVector (
        /*[in]*/ VARIANT dirVector ) = 0;
      virtual HRESULT __stdcall raw_Offset (
        /*[in]*/ double Distance,
        /*[out,retval]*/ VARIANT * pOffsetCurves ) = 0;
};

struct __declspec(uuid("1d43bc6f-2a8e-4ab4-a171-e05ec82795af"))
IAcadBlockReference : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetEffectiveName))
    _bstr_t EffectiveName;
    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetXScaleFactor,put=PutXScaleFactor))
    ACAD_NOUNITS XScaleFactor;
    __declspec(property(get=GetYScaleFactor,put=PutYScaleFactor))
    ACAD_NOUNITS YScaleFactor;
    __declspec(property(get=GetZScaleFactor,put=PutZScaleFactor))
    ACAD_NOUNITS ZScaleFactor;
    __declspec(property(get=GetIsDynamicBlock))
    VARIANT_BOOL IsDynamicBlock;
    __declspec(property(get=GetXEffectiveScaleFactor,put=PutXEffectiveScaleFactor))
    ACAD_NOUNITS XEffectiveScaleFactor;
    __declspec(property(get=GetYEffectiveScaleFactor,put=PutYEffectiveScaleFactor))
    ACAD_NOUNITS YEffectiveScaleFactor;
    __declspec(property(get=GetHasAttributes))
    VARIANT_BOOL HasAttributes;
    __declspec(property(get=GetZEffectiveScaleFactor,put=PutZEffectiveScaleFactor))
    ACAD_NOUNITS ZEffectiveScaleFactor;
    __declspec(property(get=GetInsUnits))
    _bstr_t InsUnits;
    __declspec(property(get=GetInsUnitsFactor))
    double InsUnitsFactor;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    ACAD_NOUNITS GetXScaleFactor ( );
    void PutXScaleFactor (
        ACAD_NOUNITS ScaleFactor );
    ACAD_NOUNITS GetYScaleFactor ( );
    void PutYScaleFactor (
        ACAD_NOUNITS ScaleFactor );
    ACAD_NOUNITS GetZScaleFactor ( );
    void PutZScaleFactor (
        ACAD_NOUNITS ScaleFactor );
    _variant_t Explode ( );
    _variant_t GetAttributes ( );
    _variant_t GetConstantAttributes ( );
    VARIANT_BOOL GetHasAttributes ( );
    _bstr_t GetEffectiveName ( );
    VARIANT_BOOL GetIsDynamicBlock ( );
    _variant_t GetDynamicBlockProperties ( );
    HRESULT ResetBlock ( );
    HRESULT ConvertToAnonymousBlock ( );
    HRESULT ConvertToStaticBlock (
        _bstr_t newBlockName );
    ACAD_NOUNITS GetXEffectiveScaleFactor ( );
    void PutXEffectiveScaleFactor (
        ACAD_NOUNITS ScaleFactor );
    ACAD_NOUNITS GetYEffectiveScaleFactor ( );
    void PutYEffectiveScaleFactor (
        ACAD_NOUNITS ScaleFactor );
    ACAD_NOUNITS GetZEffectiveScaleFactor ( );
    void PutZEffectiveScaleFactor (
        ACAD_NOUNITS ScaleFactor );
    _bstr_t GetInsUnits ( );
    double GetInsUnitsFactor ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InsertionPoint (
        /*[out,retval]*/ VARIANT * insPoint ) = 0;
      virtual HRESULT __stdcall put_InsertionPoint (
        /*[in]*/ VARIANT insPoint ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ ACAD_ANGLE * rotAngle ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ ACAD_ANGLE rotAngle ) = 0;
      virtual HRESULT __stdcall get_XScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * ScaleFactor ) = 0;
      virtual HRESULT __stdcall put_XScaleFactor (
        /*[in]*/ ACAD_NOUNITS ScaleFactor ) = 0;
      virtual HRESULT __stdcall get_YScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * ScaleFactor ) = 0;
      virtual HRESULT __stdcall put_YScaleFactor (
        /*[in]*/ ACAD_NOUNITS ScaleFactor ) = 0;
      virtual HRESULT __stdcall get_ZScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * ScaleFactor ) = 0;
      virtual HRESULT __stdcall put_ZScaleFactor (
        /*[in]*/ ACAD_NOUNITS ScaleFactor ) = 0;
      virtual HRESULT __stdcall raw_Explode (
        /*[out,retval]*/ VARIANT * pArrayObjs ) = 0;
      virtual HRESULT __stdcall raw_GetAttributes (
        /*[out,retval]*/ VARIANT * pAttrObjs ) = 0;
      virtual HRESULT __stdcall raw_GetConstantAttributes (
        /*[out,retval]*/ VARIANT * pAttrObjs ) = 0;
      virtual HRESULT __stdcall get_HasAttributes (
        /*[out,retval]*/ VARIANT_BOOL * bHas ) = 0;
      virtual HRESULT __stdcall get_EffectiveName (
        /*[out,retval]*/ BSTR * EffectiveName ) = 0;
      virtual HRESULT __stdcall get_IsDynamicBlock (
        /*[out,retval]*/ VARIANT_BOOL * pDynamicBlock ) = 0;
      virtual HRESULT __stdcall raw_GetDynamicBlockProperties (
        /*[out,retval]*/ VARIANT * dynamicPropertyArray ) = 0;
      virtual HRESULT __stdcall raw_ResetBlock ( ) = 0;
      virtual HRESULT __stdcall raw_ConvertToAnonymousBlock ( ) = 0;
      virtual HRESULT __stdcall raw_ConvertToStaticBlock (
        /*[in]*/ BSTR newBlockName ) = 0;
      virtual HRESULT __stdcall get_XEffectiveScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * ScaleFactor ) = 0;
      virtual HRESULT __stdcall put_XEffectiveScaleFactor (
        /*[in]*/ ACAD_NOUNITS ScaleFactor ) = 0;
      virtual HRESULT __stdcall get_YEffectiveScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * ScaleFactor ) = 0;
      virtual HRESULT __stdcall put_YEffectiveScaleFactor (
        /*[in]*/ ACAD_NOUNITS ScaleFactor ) = 0;
      virtual HRESULT __stdcall get_ZEffectiveScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * ScaleFactor ) = 0;
      virtual HRESULT __stdcall put_ZEffectiveScaleFactor (
        /*[in]*/ ACAD_NOUNITS ScaleFactor ) = 0;
      virtual HRESULT __stdcall get_InsUnits (
        /*[out,retval]*/ BSTR * Units ) = 0;
      virtual HRESULT __stdcall get_InsUnitsFactor (
        /*[out,retval]*/ double * factor ) = 0;
};

struct __declspec(uuid("53eb1a05-9449-466f-8e62-a34006ba9d3c"))
IAcadHatch : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetNumberOfLoops))
    long NumberOfLoops;
    __declspec(property(get=GetPatternType))
    enum AcPatternType PatternType;
    __declspec(property(get=GetPatternName))
    _bstr_t PatternName;
    __declspec(property(get=GetPatternAngle,put=PutPatternAngle))
    ACAD_ANGLE PatternAngle;
    __declspec(property(get=GetPatternScale,put=PutPatternScale))
    ACAD_NOUNITS PatternScale;
    __declspec(property(get=GetPatternSpace,put=PutPatternSpace))
    double PatternSpace;
    __declspec(property(get=GetISOPenWidth,put=PutISOPenWidth))
    enum AcISOPenWidth ISOPenWidth;
    __declspec(property(get=GetPatternDouble,put=PutPatternDouble))
    VARIANT_BOOL PatternDouble;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetAssociativeHatch,put=PutAssociativeHatch))
    VARIANT_BOOL AssociativeHatch;
    __declspec(property(get=GetHatchStyle,put=PutHatchStyle))
    enum AcHatchStyle HatchStyle;
    __declspec(property(get=GetGradientColor1,put=PutGradientColor1))
    IAcadAcCmColorPtr GradientColor1;
    __declspec(property(get=GetGradientColor2,put=PutGradientColor2))
    IAcadAcCmColorPtr GradientColor2;
    __declspec(property(get=GetGradientAngle,put=PutGradientAngle))
    ACAD_ANGLE GradientAngle;
    __declspec(property(get=GetGradientCentered,put=PutGradientCentered))
    VARIANT_BOOL GradientCentered;
    __declspec(property(get=GetGradientName,put=PutGradientName))
    _bstr_t GradientName;
    __declspec(property(get=GetHatchObjectType,put=PutHatchObjectType))
    enum AcHatchObjectType HatchObjectType;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    _variant_t Origin;
    __declspec(property(get=GetBackgroundColor,put=PutBackgroundColor))
    IAcadAcCmColorPtr BackgroundColor;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    long GetNumberOfLoops ( );
    enum AcPatternType GetPatternType ( );
    _bstr_t GetPatternName ( );
    ACAD_ANGLE GetPatternAngle ( );
    void PutPatternAngle (
        ACAD_ANGLE PatternAngle );
    ACAD_NOUNITS GetPatternScale ( );
    void PutPatternScale (
        ACAD_NOUNITS PatternScale );
    double GetPatternSpace ( );
    void PutPatternSpace (
        double PatternSpace );
    enum AcISOPenWidth GetISOPenWidth ( );
    void PutISOPenWidth (
        enum AcISOPenWidth penWidth );
    VARIANT_BOOL GetPatternDouble ( );
    void PutPatternDouble (
        VARIANT_BOOL bDouble );
    double GetElevation ( );
    void PutElevation (
        double Elevation );
    VARIANT_BOOL GetAssociativeHatch ( );
    void PutAssociativeHatch (
        VARIANT_BOOL fAssoc );
    enum AcHatchStyle GetHatchStyle ( );
    void PutHatchStyle (
        enum AcHatchStyle HatchStyle );
    HRESULT SetPattern (
        int PatternType,
        _bstr_t PatternName );
    HRESULT AppendOuterLoop (
        const _variant_t & ObjectArray );
    HRESULT AppendInnerLoop (
        const _variant_t & ObjectArray );
    HRESULT InsertLoopAt (
        int Index,
        enum AcLoopType LoopType,
        const _variant_t & ObjectArray );
    HRESULT GetLoopAt (
        int Index,
        VARIANT * ObjectArray );
    HRESULT Evaluate ( );
    IAcadAcCmColorPtr GetGradientColor1 ( );
    void PutGradientColor1 (
        struct IAcadAcCmColor * pColor );
    IAcadAcCmColorPtr GetGradientColor2 ( );
    void PutGradientColor2 (
        struct IAcadAcCmColor * pColor );
    ACAD_ANGLE GetGradientAngle ( );
    void PutGradientAngle (
        ACAD_ANGLE GradientAngle );
    VARIANT_BOOL GetGradientCentered ( );
    void PutGradientCentered (
        VARIANT_BOOL fCentered );
    _bstr_t GetGradientName ( );
    void PutGradientName (
        _bstr_t bstrName );
    enum AcHatchObjectType GetHatchObjectType ( );
    void PutHatchObjectType (
        enum AcHatchObjectType hatchType );
    double GetArea ( );
    _variant_t GetOrigin ( );
    void PutOrigin (
        const _variant_t & Origin );
    IAcadAcCmColorPtr GetBackgroundColor ( );
    void PutBackgroundColor (
        struct IAcadAcCmColor * pColor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_NumberOfLoops (
        /*[out,retval]*/ long * numLoops ) = 0;
      virtual HRESULT __stdcall get_PatternType (
        /*[out,retval]*/ enum AcPatternType * PatternType ) = 0;
      virtual HRESULT __stdcall get_PatternName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall get_PatternAngle (
        /*[out,retval]*/ ACAD_ANGLE * PatternAngle ) = 0;
      virtual HRESULT __stdcall put_PatternAngle (
        /*[in]*/ ACAD_ANGLE PatternAngle ) = 0;
      virtual HRESULT __stdcall get_PatternScale (
        /*[out,retval]*/ ACAD_NOUNITS * PatternScale ) = 0;
      virtual HRESULT __stdcall put_PatternScale (
        /*[in]*/ ACAD_NOUNITS PatternScale ) = 0;
      virtual HRESULT __stdcall get_PatternSpace (
        /*[out,retval]*/ double * PatternSpace ) = 0;
      virtual HRESULT __stdcall put_PatternSpace (
        /*[in]*/ double PatternSpace ) = 0;
      virtual HRESULT __stdcall get_ISOPenWidth (
        /*[out,retval]*/ enum AcISOPenWidth * penWidth ) = 0;
      virtual HRESULT __stdcall put_ISOPenWidth (
        /*[in]*/ enum AcISOPenWidth penWidth ) = 0;
      virtual HRESULT __stdcall get_PatternDouble (
        /*[out,retval]*/ VARIANT_BOOL * bDouble ) = 0;
      virtual HRESULT __stdcall put_PatternDouble (
        /*[in]*/ VARIANT_BOOL bDouble ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * Elevation ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double Elevation ) = 0;
      virtual HRESULT __stdcall get_AssociativeHatch (
        /*[out,retval]*/ VARIANT_BOOL * fAssoc ) = 0;
      virtual HRESULT __stdcall put_AssociativeHatch (
        /*[in]*/ VARIANT_BOOL fAssoc ) = 0;
      virtual HRESULT __stdcall get_HatchStyle (
        /*[out,retval]*/ enum AcHatchStyle * HatchStyle ) = 0;
      virtual HRESULT __stdcall put_HatchStyle (
        /*[in]*/ enum AcHatchStyle HatchStyle ) = 0;
      virtual HRESULT __stdcall raw_SetPattern (
        /*[in]*/ int PatternType,
        /*[in]*/ BSTR PatternName ) = 0;
      virtual HRESULT __stdcall raw_AppendOuterLoop (
        /*[in]*/ VARIANT ObjectArray ) = 0;
      virtual HRESULT __stdcall raw_AppendInnerLoop (
        /*[in]*/ VARIANT ObjectArray ) = 0;
      virtual HRESULT __stdcall raw_InsertLoopAt (
        /*[in]*/ int Index,
        /*[in]*/ enum AcLoopType LoopType,
        /*[in]*/ VARIANT ObjectArray ) = 0;
      virtual HRESULT __stdcall raw_GetLoopAt (
        /*[in]*/ int Index,
        /*[out]*/ VARIANT * ObjectArray ) = 0;
      virtual HRESULT __stdcall raw_Evaluate ( ) = 0;
      virtual HRESULT __stdcall get_GradientColor1 (
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall put_GradientColor1 (
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall get_GradientColor2 (
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall put_GradientColor2 (
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall get_GradientAngle (
        /*[out,retval]*/ ACAD_ANGLE * GradientAngle ) = 0;
      virtual HRESULT __stdcall put_GradientAngle (
        /*[in]*/ ACAD_ANGLE GradientAngle ) = 0;
      virtual HRESULT __stdcall get_GradientCentered (
        /*[out,retval]*/ VARIANT_BOOL * fCentered ) = 0;
      virtual HRESULT __stdcall put_GradientCentered (
        /*[in]*/ VARIANT_BOOL fCentered ) = 0;
      virtual HRESULT __stdcall get_GradientName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_GradientName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_HatchObjectType (
        /*[out,retval]*/ enum AcHatchObjectType * hatchType ) = 0;
      virtual HRESULT __stdcall put_HatchObjectType (
        /*[in]*/ enum AcHatchObjectType hatchType ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ VARIANT * Origin ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ VARIANT Origin ) = 0;
      virtual HRESULT __stdcall get_BackgroundColor (
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall put_BackgroundColor (
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
};

struct __declspec(uuid("98faf084-febc-425b-b3bc-5d5ec5fee54e"))
IAcadRasterImage : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetBrightness,put=PutBrightness))
    long Brightness;
    __declspec(property(get=GetContrast,put=PutContrast))
    long Contrast;
    __declspec(property(get=GetFade,put=PutFade))
    long Fade;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    _variant_t Origin;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetImageWidth,put=PutImageWidth))
    double ImageWidth;
    __declspec(property(get=GetImageHeight,put=PutImageHeight))
    double ImageHeight;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetImageFile,put=PutImageFile))
    _bstr_t ImageFile;
    __declspec(property(get=GetImageVisibility,put=PutImageVisibility))
    VARIANT_BOOL ImageVisibility;
    __declspec(property(get=GetClippingEnabled,put=PutClippingEnabled))
    VARIANT_BOOL ClippingEnabled;
    __declspec(property(get=Gettransparency,put=Puttransparency))
    VARIANT_BOOL transparency;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetShowRotation,put=PutShowRotation))
    VARIANT_BOOL ShowRotation;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;

    //
    // Wrapper methods for error-handling
    //

    long GetBrightness ( );
    void PutBrightness (
        long Brightness );
    long GetContrast ( );
    void PutContrast (
        long Contrast );
    long GetFade ( );
    void PutFade (
        long Fade );
    _variant_t GetOrigin ( );
    void PutOrigin (
        const _variant_t & Origin );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    double GetImageWidth ( );
    void PutImageWidth (
        double Width );
    double GetImageHeight ( );
    void PutImageHeight (
        double Height );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    void PutImageFile (
        _bstr_t imageFileName );
    _bstr_t GetImageFile ( );
    VARIANT_BOOL GetImageVisibility ( );
    void PutImageVisibility (
        VARIANT_BOOL fVisible );
    VARIANT_BOOL GetClippingEnabled ( );
    void PutClippingEnabled (
        VARIANT_BOOL kClip );
    VARIANT_BOOL Gettransparency ( );
    void Puttransparency (
        VARIANT_BOOL bTransp );
    HRESULT ClipBoundary (
        const _variant_t & boundry );
    double GetHeight ( );
    double GetWidth ( );
    VARIANT_BOOL GetShowRotation ( );
    void PutShowRotation (
        VARIANT_BOOL bShow );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS ScaleFactor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brightness (
        /*[out,retval]*/ long * Brightness ) = 0;
      virtual HRESULT __stdcall put_Brightness (
        /*[in]*/ long Brightness ) = 0;
      virtual HRESULT __stdcall get_Contrast (
        /*[out,retval]*/ long * Contrast ) = 0;
      virtual HRESULT __stdcall put_Contrast (
        /*[in]*/ long Contrast ) = 0;
      virtual HRESULT __stdcall get_Fade (
        /*[out,retval]*/ long * Fade ) = 0;
      virtual HRESULT __stdcall put_Fade (
        /*[in]*/ long Fade ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ VARIANT * Origin ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ VARIANT Origin ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ ACAD_ANGLE * rotAngle ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ ACAD_ANGLE rotAngle ) = 0;
      virtual HRESULT __stdcall get_ImageWidth (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_ImageWidth (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall get_ImageHeight (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_ImageHeight (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall put_ImageFile (
        /*[in]*/ BSTR imageFileName ) = 0;
      virtual HRESULT __stdcall get_ImageFile (
        /*[out,retval]*/ BSTR * imageFileName ) = 0;
      virtual HRESULT __stdcall get_ImageVisibility (
        /*[out,retval]*/ VARIANT_BOOL * fVisible ) = 0;
      virtual HRESULT __stdcall put_ImageVisibility (
        /*[in]*/ VARIANT_BOOL fVisible ) = 0;
      virtual HRESULT __stdcall get_ClippingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * kClip ) = 0;
      virtual HRESULT __stdcall put_ClippingEnabled (
        /*[in]*/ VARIANT_BOOL kClip ) = 0;
      virtual HRESULT __stdcall get_transparency (
        /*[out,retval]*/ VARIANT_BOOL * bTransp ) = 0;
      virtual HRESULT __stdcall put_transparency (
        /*[in]*/ VARIANT_BOOL bTransp ) = 0;
      virtual HRESULT __stdcall raw_ClipBoundary (
        /*[in]*/ VARIANT boundry ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pixelHeight ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pixelWidth ) = 0;
      virtual HRESULT __stdcall get_ShowRotation (
        /*[out,retval]*/ VARIANT_BOOL * bShow ) = 0;
      virtual HRESULT __stdcall put_ShowRotation (
        /*[in]*/ VARIANT_BOOL bShow ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * ScaleFactor ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ ACAD_NOUNITS ScaleFactor ) = 0;
};

struct __declspec(uuid("a02d3284-e931-40ff-a953-0fa655b07980"))
IAcadLine : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStartPoint,put=PutStartPoint))
    _variant_t StartPoint;
    __declspec(property(get=GetEndPoint,put=PutEndPoint))
    _variant_t EndPoint;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetDelta))
    _variant_t Delta;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetAngle))
    ACAD_ANGLE Angle;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartPoint ( );
    void PutStartPoint (
        const _variant_t & StartPoint );
    _variant_t GetEndPoint ( );
    void PutEndPoint (
        const _variant_t & EndPoint );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    _variant_t Offset (
        double Distance );
    _variant_t GetDelta ( );
    double GetLength ( );
    ACAD_ANGLE GetAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ VARIANT * StartPoint ) = 0;
      virtual HRESULT __stdcall put_StartPoint (
        /*[in]*/ VARIANT StartPoint ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ VARIANT * EndPoint ) = 0;
      virtual HRESULT __stdcall put_EndPoint (
        /*[in]*/ VARIANT EndPoint ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * Thickness ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double Thickness ) = 0;
      virtual HRESULT __stdcall raw_Offset (
        /*[in]*/ double Distance,
        /*[out,retval]*/ VARIANT * pOffsetCurves ) = 0;
      virtual HRESULT __stdcall get_Delta (
        /*[out,retval]*/ VARIANT * Delta ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Length ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ ACAD_ANGLE * Angle ) = 0;
};

struct __declspec(uuid("0c6a8b60-415e-4625-81a9-ef84216fd3b4"))
IAcadPlotConfiguration : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPlotWithPlotStyles,put=PutPlotWithPlotStyles))
    VARIANT_BOOL PlotWithPlotStyles;
    __declspec(property(get=GetConfigName,put=PutConfigName))
    _bstr_t ConfigName;
    __declspec(property(get=GetModelType))
    VARIANT_BOOL ModelType;
    __declspec(property(get=GetCanonicalMediaName,put=PutCanonicalMediaName))
    _bstr_t CanonicalMediaName;
    __declspec(property(get=GetPaperUnits,put=PutPaperUnits))
    enum AcPlotPaperUnits PaperUnits;
    __declspec(property(get=GetPlotViewportBorders,put=PutPlotViewportBorders))
    VARIANT_BOOL PlotViewportBorders;
    __declspec(property(get=GetShowPlotStyles,put=PutShowPlotStyles))
    VARIANT_BOOL ShowPlotStyles;
    __declspec(property(get=GetPlotRotation,put=PutPlotRotation))
    enum AcPlotRotation PlotRotation;
    __declspec(property(get=GetCenterPlot,put=PutCenterPlot))
    VARIANT_BOOL CenterPlot;
    __declspec(property(get=GetPlotHidden,put=PutPlotHidden))
    VARIANT_BOOL PlotHidden;
    __declspec(property(get=GetPlotType,put=PutPlotType))
    enum AcPlotType PlotType;
    __declspec(property(get=GetViewToPlot,put=PutViewToPlot))
    _bstr_t ViewToPlot;
    __declspec(property(get=GetUseStandardScale,put=PutUseStandardScale))
    VARIANT_BOOL UseStandardScale;
    __declspec(property(get=GetStandardScale,put=PutStandardScale))
    enum AcPlotScale StandardScale;
    __declspec(property(get=GetScaleLineweights,put=PutScaleLineweights))
    VARIANT_BOOL ScaleLineweights;
    __declspec(property(get=GetPlotWithLineweights,put=PutPlotWithLineweights))
    VARIANT_BOOL PlotWithLineweights;
    __declspec(property(get=GetPlotViewportsFirst,put=PutPlotViewportsFirst))
    VARIANT_BOOL PlotViewportsFirst;
    __declspec(property(get=GetStyleSheet,put=PutStyleSheet))
    _bstr_t StyleSheet;
    __declspec(property(get=GetPlotOrigin,put=PutPlotOrigin))
    _variant_t PlotOrigin;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pName );
    _bstr_t GetConfigName ( );
    void PutConfigName (
        _bstr_t pName );
    _bstr_t GetCanonicalMediaName ( );
    void PutCanonicalMediaName (
        _bstr_t pName );
    enum AcPlotPaperUnits GetPaperUnits ( );
    void PutPaperUnits (
        enum AcPlotPaperUnits pPaperUnits );
    VARIANT_BOOL GetPlotViewportBorders ( );
    void PutPlotViewportBorders (
        VARIANT_BOOL pViewportBorders );
    VARIANT_BOOL GetShowPlotStyles ( );
    void PutShowPlotStyles (
        VARIANT_BOOL pStyles );
    enum AcPlotRotation GetPlotRotation ( );
    void PutPlotRotation (
        enum AcPlotRotation pRotation );
    VARIANT_BOOL GetCenterPlot ( );
    void PutCenterPlot (
        VARIANT_BOOL pCentered );
    VARIANT_BOOL GetPlotHidden ( );
    void PutPlotHidden (
        VARIANT_BOOL pHidden );
    enum AcPlotType GetPlotType ( );
    void PutPlotType (
        enum AcPlotType pType );
    _bstr_t GetViewToPlot ( );
    void PutViewToPlot (
        _bstr_t pName );
    VARIANT_BOOL GetUseStandardScale ( );
    void PutUseStandardScale (
        VARIANT_BOOL pUseStdScale );
    enum AcPlotScale GetStandardScale ( );
    void PutStandardScale (
        enum AcPlotScale pStdScale );
    HRESULT GetCustomScale (
        double * Numerator,
        double * Denominator );
    HRESULT SetCustomScale (
        double Numerator,
        double Denominator );
    VARIANT_BOOL GetScaleLineweights ( );
    void PutScaleLineweights (
        VARIANT_BOOL pScale );
    VARIANT_BOOL GetPlotWithLineweights ( );
    void PutPlotWithLineweights (
        VARIANT_BOOL pPlot );
    VARIANT_BOOL GetPlotViewportsFirst ( );
    void PutPlotViewportsFirst (
        VARIANT_BOOL pViewportsFirst );
    _bstr_t GetStyleSheet ( );
    void PutStyleSheet (
        _bstr_t pName );
    HRESULT GetPaperMargins (
        VARIANT * LowerLeft,
        VARIANT * UpperRight );
    HRESULT GetPaperSize (
        double * Width,
        double * Height );
    _variant_t GetPlotOrigin ( );
    void PutPlotOrigin (
        const _variant_t & pOrigin );
    HRESULT GetWindowToPlot (
        VARIANT * LowerLeft,
        VARIANT * UpperRight );
    HRESULT SetWindowToPlot (
        const _variant_t & LowerLeft,
        const _variant_t & UpperRight );
    VARIANT_BOOL GetPlotWithPlotStyles ( );
    void PutPlotWithPlotStyles (
        VARIANT_BOOL pStyles );
    VARIANT_BOOL GetModelType ( );
    HRESULT CopyFrom (
        struct IAcadPlotConfiguration * pPlotConfig );
    _variant_t GetCanonicalMediaNames ( );
    _variant_t GetPlotDeviceNames ( );
    _variant_t GetPlotStyleTableNames ( );
    HRESULT RefreshPlotDeviceInfo ( );
    _bstr_t GetLocaleMediaName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pName ) = 0;
      virtual HRESULT __stdcall get_ConfigName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall put_ConfigName (
        /*[in]*/ BSTR pName ) = 0;
      virtual HRESULT __stdcall get_CanonicalMediaName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall put_CanonicalMediaName (
        /*[in]*/ BSTR pName ) = 0;
      virtual HRESULT __stdcall get_PaperUnits (
        /*[out,retval]*/ enum AcPlotPaperUnits * pPaperUnits ) = 0;
      virtual HRESULT __stdcall put_PaperUnits (
        /*[in]*/ enum AcPlotPaperUnits pPaperUnits ) = 0;
      virtual HRESULT __stdcall get_PlotViewportBorders (
        /*[out,retval]*/ VARIANT_BOOL * pViewportBorders ) = 0;
      virtual HRESULT __stdcall put_PlotViewportBorders (
        /*[in]*/ VARIANT_BOOL pViewportBorders ) = 0;
      virtual HRESULT __stdcall get_ShowPlotStyles (
        /*[out,retval]*/ VARIANT_BOOL * pStyles ) = 0;
      virtual HRESULT __stdcall put_ShowPlotStyles (
        /*[in]*/ VARIANT_BOOL pStyles ) = 0;
      virtual HRESULT __stdcall get_PlotRotation (
        /*[out,retval]*/ enum AcPlotRotation * pRotation ) = 0;
      virtual HRESULT __stdcall put_PlotRotation (
        /*[in]*/ enum AcPlotRotation pRotation ) = 0;
      virtual HRESULT __stdcall get_CenterPlot (
        /*[out,retval]*/ VARIANT_BOOL * pCentered ) = 0;
      virtual HRESULT __stdcall put_CenterPlot (
        /*[in]*/ VARIANT_BOOL pCentered ) = 0;
      virtual HRESULT __stdcall get_PlotHidden (
        /*[out,retval]*/ VARIANT_BOOL * pHidden ) = 0;
      virtual HRESULT __stdcall put_PlotHidden (
        /*[in]*/ VARIANT_BOOL pHidden ) = 0;
      virtual HRESULT __stdcall get_PlotType (
        /*[out,retval]*/ enum AcPlotType * pType ) = 0;
      virtual HRESULT __stdcall put_PlotType (
        /*[in]*/ enum AcPlotType pType ) = 0;
      virtual HRESULT __stdcall get_ViewToPlot (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall put_ViewToPlot (
        /*[in]*/ BSTR pName ) = 0;
      virtual HRESULT __stdcall get_UseStandardScale (
        /*[out,retval]*/ VARIANT_BOOL * pUseStdScale ) = 0;
      virtual HRESULT __stdcall put_UseStandardScale (
        /*[in]*/ VARIANT_BOOL pUseStdScale ) = 0;
      virtual HRESULT __stdcall get_StandardScale (
        /*[out,retval]*/ enum AcPlotScale * pStdScale ) = 0;
      virtual HRESULT __stdcall put_StandardScale (
        /*[in]*/ enum AcPlotScale pStdScale ) = 0;
      virtual HRESULT __stdcall raw_GetCustomScale (
        /*[out]*/ double * Numerator,
        /*[out]*/ double * Denominator ) = 0;
      virtual HRESULT __stdcall raw_SetCustomScale (
        /*[in]*/ double Numerator,
        /*[in]*/ double Denominator ) = 0;
      virtual HRESULT __stdcall get_ScaleLineweights (
        /*[out,retval]*/ VARIANT_BOOL * pScale ) = 0;
      virtual HRESULT __stdcall put_ScaleLineweights (
        /*[in]*/ VARIANT_BOOL pScale ) = 0;
      virtual HRESULT __stdcall get_PlotWithLineweights (
        /*[out,retval]*/ VARIANT_BOOL * pPlot ) = 0;
      virtual HRESULT __stdcall put_PlotWithLineweights (
        /*[in]*/ VARIANT_BOOL pPlot ) = 0;
      virtual HRESULT __stdcall get_PlotViewportsFirst (
        /*[out,retval]*/ VARIANT_BOOL * pViewportsFirst ) = 0;
      virtual HRESULT __stdcall put_PlotViewportsFirst (
        /*[in]*/ VARIANT_BOOL pViewportsFirst ) = 0;
      virtual HRESULT __stdcall get_StyleSheet (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall put_StyleSheet (
        /*[in]*/ BSTR pName ) = 0;
      virtual HRESULT __stdcall raw_GetPaperMargins (
        /*[out]*/ VARIANT * LowerLeft,
        /*[out]*/ VARIANT * UpperRight ) = 0;
      virtual HRESULT __stdcall raw_GetPaperSize (
        /*[out]*/ double * Width,
        /*[out]*/ double * Height ) = 0;
      virtual HRESULT __stdcall get_PlotOrigin (
        /*[out,retval]*/ VARIANT * pOrigin ) = 0;
      virtual HRESULT __stdcall put_PlotOrigin (
        /*[in]*/ VARIANT pOrigin ) = 0;
      virtual HRESULT __stdcall raw_GetWindowToPlot (
        /*[out]*/ VARIANT * LowerLeft,
        /*[out]*/ VARIANT * UpperRight ) = 0;
      virtual HRESULT __stdcall raw_SetWindowToPlot (
        /*[in]*/ VARIANT LowerLeft,
        /*[in]*/ VARIANT UpperRight ) = 0;
      virtual HRESULT __stdcall get_PlotWithPlotStyles (
        /*[out,retval]*/ VARIANT_BOOL * pStyles ) = 0;
      virtual HRESULT __stdcall put_PlotWithPlotStyles (
        /*[in]*/ VARIANT_BOOL pStyles ) = 0;
      virtual HRESULT __stdcall get_ModelType (
        /*[out,retval]*/ VARIANT_BOOL * pType ) = 0;
      virtual HRESULT __stdcall raw_CopyFrom (
        /*[in]*/ struct IAcadPlotConfiguration * pPlotConfig ) = 0;
      virtual HRESULT __stdcall raw_GetCanonicalMediaNames (
        /*[out,retval]*/ VARIANT * pNames ) = 0;
      virtual HRESULT __stdcall raw_GetPlotDeviceNames (
        /*[out,retval]*/ VARIANT * pNames ) = 0;
      virtual HRESULT __stdcall raw_GetPlotStyleTableNames (
        /*[out,retval]*/ VARIANT * pNames ) = 0;
      virtual HRESULT __stdcall raw_RefreshPlotDeviceInfo ( ) = 0;
      virtual HRESULT __stdcall raw_GetLocaleMediaName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * pLocalName ) = 0;
};

struct __declspec(uuid("1ff467d1-2ef7-4426-a0db-f96572c26b13"))
IAcadMInsertBlock : IAcadBlockReference
{
    //
    // Property data
    //

    __declspec(property(get=GetColumns,put=PutColumns))
    long Columns;
    __declspec(property(get=GetColumnSpacing,put=PutColumnSpacing))
    double ColumnSpacing;
    __declspec(property(get=GetRows,put=PutRows))
    long Rows;
    __declspec(property(get=GetRowSpacing,put=PutRowSpacing))
    double RowSpacing;

    //
    // Wrapper methods for error-handling
    //

    void PutColumns (
        long NumColumns );
    long GetColumns ( );
    void PutColumnSpacing (
        double Spacing );
    double GetColumnSpacing ( );
    void PutRows (
        long NumRows );
    long GetRows ( );
    void PutRowSpacing (
        double Spacing );
    double GetRowSpacing ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Columns (
        /*[in]*/ long NumColumns ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ long * NumColumns ) = 0;
      virtual HRESULT __stdcall put_ColumnSpacing (
        /*[in]*/ double Spacing ) = 0;
      virtual HRESULT __stdcall get_ColumnSpacing (
        /*[out,retval]*/ double * Spacing ) = 0;
      virtual HRESULT __stdcall put_Rows (
        /*[in]*/ long NumRows ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ long * NumRows ) = 0;
      virtual HRESULT __stdcall put_RowSpacing (
        /*[in]*/ double Spacing ) = 0;
      virtual HRESULT __stdcall get_RowSpacing (
        /*[out,retval]*/ double * Spacing ) = 0;
};

struct __declspec(uuid("4647dce6-d132-4edd-9447-11b523af4c9e"))
IAcadPolyfaceMesh : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];
    __declspec(property(get=GetNumberOfVertices))
    long NumberOfVertices;
    __declspec(property(get=GetNumberOfFaces))
    long NumberOfFaces;
    __declspec(property(put=PutFaces))
    _variant_t Faces;

    //
    // Wrapper methods for error-handling
    //

    void PutCoordinates (
        const _variant_t & Vertices );
    _variant_t GetCoordinates ( );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );
    long GetNumberOfVertices ( );
    long GetNumberOfFaces ( );
    void PutFaces (
        const _variant_t & _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Coordinates (
        /*[in]*/ VARIANT Vertices ) = 0;
      virtual HRESULT __stdcall get_Coordinates (
        /*[out,retval]*/ VARIANT * Vertices ) = 0;
      virtual HRESULT __stdcall get_Coordinate (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Coordinate (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfVertices (
        /*[out,retval]*/ long * NumVertices ) = 0;
      virtual HRESULT __stdcall get_NumberOfFaces (
        /*[out,retval]*/ long * NumFaces ) = 0;
      virtual HRESULT __stdcall put_Faces (
        /*[in]*/ VARIANT _arg1 ) = 0;
};

struct __declspec(uuid("5f26c199-3259-4a39-8fd9-60285db2f765"))
IAcadMLine : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetJustification,put=PutJustification))
    enum AcMLineJustification Justification;
    __declspec(property(get=GetMLineScale,put=PutMLineScale))
    double MLineScale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetStyleName ( );
    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & Vertices );
    enum AcMLineJustification GetJustification ( );
    void PutJustification (
        enum AcMLineJustification Justification );
    double GetMLineScale ( );
    void PutMLineScale (
        double scale );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StyleName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Coordinates (
        /*[out,retval]*/ VARIANT * Vertices ) = 0;
      virtual HRESULT __stdcall put_Coordinates (
        /*[in]*/ VARIANT Vertices ) = 0;
      virtual HRESULT __stdcall get_Justification (
        /*[out,retval]*/ enum AcMLineJustification * Justification ) = 0;
      virtual HRESULT __stdcall put_Justification (
        /*[in]*/ enum AcMLineJustification Justification ) = 0;
      virtual HRESULT __stdcall get_MLineScale (
        /*[out,retval]*/ double * scale ) = 0;
      virtual HRESULT __stdcall put_MLineScale (
        /*[in]*/ double scale ) = 0;
};

struct __declspec(uuid("0ae304c8-61ef-4d52-be60-7a87dedc2c4e"))
IAcadDim3PointAngular : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetArrowhead1Type,put=PutArrowhead1Type))
    enum AcDimArrowheadType Arrowhead1Type;
    __declspec(property(get=GetArrowhead2Type,put=PutArrowhead2Type))
    enum AcDimArrowheadType Arrowhead2Type;
    __declspec(property(get=GetMeasurement))
    ACAD_ANGLE Measurement;
    __declspec(property(get=GetArrowhead1Block,put=PutArrowhead1Block))
    _bstr_t Arrowhead1Block;
    __declspec(property(get=GetArrowhead2Block,put=PutArrowhead2Block))
    _bstr_t Arrowhead2Block;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetExtensionLineColor,put=PutExtensionLineColor))
    ACAD_COLOR ExtensionLineColor;
    __declspec(property(get=GetExtensionLineExtend,put=PutExtensionLineExtend))
    double ExtensionLineExtend;
    __declspec(property(get=GetFit,put=PutFit))
    enum AcDimFit Fit;
    __declspec(property(get=GetHorizontalTextPosition,put=PutHorizontalTextPosition))
    enum AcDimHorizontalJustification HorizontalTextPosition;
    __declspec(property(get=GetDimensionLinetype,put=PutDimensionLinetype))
    _bstr_t DimensionLinetype;
    __declspec(property(get=GetExtLine1Linetype,put=PutExtLine1Linetype))
    _bstr_t ExtLine1Linetype;
    __declspec(property(get=GetExtensionLineWeight,put=PutExtensionLineWeight))
    ACAD_LWEIGHT ExtensionLineWeight;
    __declspec(property(get=GetExtLine2Linetype,put=PutExtLine2Linetype))
    _bstr_t ExtLine2Linetype;
    __declspec(property(get=GetDimLine1Suppress,put=PutDimLine1Suppress))
    VARIANT_BOOL DimLine1Suppress;
    __declspec(property(get=GetDimLine2Suppress,put=PutDimLine2Suppress))
    VARIANT_BOOL DimLine2Suppress;
    __declspec(property(get=GetExtLine1Suppress,put=PutExtLine1Suppress))
    VARIANT_BOOL ExtLine1Suppress;
    __declspec(property(get=GetExtLine2Suppress,put=PutExtLine2Suppress))
    VARIANT_BOOL ExtLine2Suppress;
    __declspec(property(get=GetDimLineInside,put=PutDimLineInside))
    VARIANT_BOOL DimLineInside;
    __declspec(property(get=GetTextInsideAlign,put=PutTextInsideAlign))
    VARIANT_BOOL TextInsideAlign;
    __declspec(property(get=GetTextInside,put=PutTextInside))
    VARIANT_BOOL TextInside;
    __declspec(property(get=GetForceLineInside,put=PutForceLineInside))
    VARIANT_BOOL ForceLineInside;
    __declspec(property(get=GetTextOutsideAlign,put=PutTextOutsideAlign))
    VARIANT_BOOL TextOutsideAlign;
    __declspec(property(get=GetExtLineFixedLenSuppress,put=PutExtLineFixedLenSuppress))
    VARIANT_BOOL ExtLineFixedLenSuppress;
    __declspec(property(get=GetExtensionLineOffset,put=PutExtensionLineOffset))
    double ExtensionLineOffset;
    __declspec(property(get=GetTextPrecision,put=PutTextPrecision))
    enum AcDimPrecision TextPrecision;
    __declspec(property(get=GetExtLineFixedLen,put=PutExtLineFixedLen))
    double ExtLineFixedLen;
    __declspec(property(get=GetExtLine1EndPoint,put=PutExtLine1EndPoint))
    _variant_t ExtLine1EndPoint;
    __declspec(property(get=GetDimConstrForm,put=PutDimConstrForm))
    VARIANT_BOOL DimConstrForm;
    __declspec(property(get=GetExtLine2EndPoint,put=PutExtLine2EndPoint))
    _variant_t ExtLine2EndPoint;
    __declspec(property(get=GetAngleFormat,put=PutAngleFormat))
    enum AcAngleUnits AngleFormat;
    __declspec(property(get=GetDimConstrReference,put=PutDimConstrReference))
    VARIANT_BOOL DimConstrReference;
    __declspec(property(get=GetDimConstrName,put=PutDimConstrName))
    _bstr_t DimConstrName;
    __declspec(property(get=GetDimConstrExpression,put=PutDimConstrExpression))
    _bstr_t DimConstrExpression;
    __declspec(property(get=GetAngleVertex,put=PutAngleVertex))
    _variant_t AngleVertex;
    __declspec(property(get=GetDimConstrValue,put=PutDimConstrValue))
    _bstr_t DimConstrValue;
    __declspec(property(get=GetDimConstrDesc,put=PutDimConstrDesc))
    _bstr_t DimConstrDesc;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetExtLine1EndPoint ( );
    void PutExtLine1EndPoint (
        const _variant_t & xLine1Point );
    _variant_t GetExtLine2EndPoint ( );
    void PutExtLine2EndPoint (
        const _variant_t & xLine2Point );
    _variant_t GetAngleVertex ( );
    void PutAngleVertex (
        const _variant_t & AngleVertex );
    enum AcDimPrecision GetTextPrecision ( );
    void PutTextPrecision (
        enum AcDimPrecision AngleVertex );
    enum AcAngleUnits GetAngleFormat ( );
    void PutAngleFormat (
        enum AcAngleUnits format );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );
    ACAD_COLOR GetExtensionLineColor ( );
    void PutExtensionLineColor (
        ACAD_COLOR Type );
    double GetExtensionLineExtend ( );
    void PutExtensionLineExtend (
        double extend );
    enum AcDimFit GetFit ( );
    void PutFit (
        enum AcDimFit fittype );
    enum AcDimHorizontalJustification GetHorizontalTextPosition ( );
    void PutHorizontalTextPosition (
        enum AcDimHorizontalJustification Type );
    ACAD_LWEIGHT GetExtensionLineWeight ( );
    void PutExtensionLineWeight (
        ACAD_LWEIGHT lweight );
    VARIANT_BOOL GetDimLine1Suppress ( );
    void PutDimLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLine2Suppress ( );
    void PutDimLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine1Suppress ( );
    void PutExtLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine2Suppress ( );
    void PutExtLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLineInside ( );
    void PutDimLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInsideAlign ( );
    void PutTextInsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInside ( );
    void PutTextInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetForceLineInside ( );
    void PutForceLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextOutsideAlign ( );
    void PutTextOutsideAlign (
        VARIANT_BOOL bInside );
    double GetExtensionLineOffset ( );
    void PutExtensionLineOffset (
        double Offset );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowhead1Type ( );
    void PutArrowhead1Type (
        enum AcDimArrowheadType Type );
    enum AcDimArrowheadType GetArrowhead2Type ( );
    void PutArrowhead2Type (
        enum AcDimArrowheadType Type );
    ACAD_ANGLE GetMeasurement ( );
    _bstr_t GetArrowhead1Block ( );
    void PutArrowhead1Block (
        _bstr_t BlockName );
    _bstr_t GetArrowhead2Block ( );
    void PutArrowhead2Block (
        _bstr_t BlockName );
    _bstr_t GetDimensionLinetype ( );
    void PutDimensionLinetype (
        _bstr_t Linetype );
    _bstr_t GetExtLine1Linetype ( );
    void PutExtLine1Linetype (
        _bstr_t Linetype );
    _bstr_t GetExtLine2Linetype ( );
    void PutExtLine2Linetype (
        _bstr_t Linetype );
    VARIANT_BOOL GetExtLineFixedLenSuppress ( );
    void PutExtLineFixedLenSuppress (
        VARIANT_BOOL bFixedLen );
    double GetExtLineFixedLen ( );
    void PutExtLineFixedLen (
        double FixedLen );
    VARIANT_BOOL GetDimConstrForm ( );
    void PutDimConstrForm (
        VARIANT_BOOL bIsDynamic );
    VARIANT_BOOL GetDimConstrReference ( );
    void PutDimConstrReference (
        VARIANT_BOOL bIsReference );
    _bstr_t GetDimConstrName ( );
    void PutDimConstrName (
        _bstr_t bstrName );
    _bstr_t GetDimConstrExpression ( );
    void PutDimConstrExpression (
        _bstr_t bstrExpression );
    _bstr_t GetDimConstrValue ( );
    void PutDimConstrValue (
        _bstr_t Value );
    _bstr_t GetDimConstrDesc ( );
    void PutDimConstrDesc (
        _bstr_t bstrDescription );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtLine1EndPoint (
        /*[out,retval]*/ VARIANT * xLine1Point ) = 0;
      virtual HRESULT __stdcall put_ExtLine1EndPoint (
        /*[in]*/ VARIANT xLine1Point ) = 0;
      virtual HRESULT __stdcall get_ExtLine2EndPoint (
        /*[out,retval]*/ VARIANT * xLine2Point ) = 0;
      virtual HRESULT __stdcall put_ExtLine2EndPoint (
        /*[in]*/ VARIANT xLine2Point ) = 0;
      virtual HRESULT __stdcall get_AngleVertex (
        /*[out,retval]*/ VARIANT * AngleVertex ) = 0;
      virtual HRESULT __stdcall put_AngleVertex (
        /*[in]*/ VARIANT AngleVertex ) = 0;
      virtual HRESULT __stdcall get_TextPrecision (
        /*[out,retval]*/ enum AcDimPrecision * AngleVertex ) = 0;
      virtual HRESULT __stdcall put_TextPrecision (
        /*[in]*/ enum AcDimPrecision AngleVertex ) = 0;
      virtual HRESULT __stdcall get_AngleFormat (
        /*[out,retval]*/ enum AcAngleUnits * format ) = 0;
      virtual HRESULT __stdcall put_AngleFormat (
        /*[in]*/ enum AcAngleUnits format ) = 0;
      virtual HRESULT __stdcall get_DimensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * Type ) = 0;
      virtual HRESULT __stdcall put_DimensionLineColor (
        /*[in]*/ ACAD_COLOR Type ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * Type ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineColor (
        /*[in]*/ ACAD_COLOR Type ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineExtend (
        /*[out,retval]*/ double * extend ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineExtend (
        /*[in]*/ double extend ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ enum AcDimFit * fittype ) = 0;
      virtual HRESULT __stdcall put_Fit (
        /*[in]*/ enum AcDimFit fittype ) = 0;
      virtual HRESULT __stdcall get_HorizontalTextPosition (
        /*[out,retval]*/ enum AcDimHorizontalJustification * Type ) = 0;
      virtual HRESULT __stdcall put_HorizontalTextPosition (
        /*[in]*/ enum AcDimHorizontalJustification Type ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * lweight ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT lweight ) = 0;
      virtual HRESULT __stdcall get_DimLine1Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_DimLine1Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_DimLine2Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_DimLine2Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_ExtLine1Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_ExtLine1Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_ExtLine2Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_ExtLine2Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_DimLineInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_DimLineInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextInsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_ForceLineInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_ForceLineInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextOutsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextOutsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineOffset (
        /*[out,retval]*/ double * Offset ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineOffset (
        /*[in]*/ double Offset ) = 0;
      virtual HRESULT __stdcall get_DimensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * weight ) = 0;
      virtual HRESULT __stdcall put_DimensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT weight ) = 0;
      virtual HRESULT __stdcall get_ArrowheadSize (
        /*[out,retval]*/ double * size ) = 0;
      virtual HRESULT __stdcall put_ArrowheadSize (
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall get_Arrowhead1Type (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_Arrowhead1Type (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_Arrowhead2Type (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_Arrowhead2Type (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_Measurement (
        /*[out,retval]*/ ACAD_ANGLE * bVal ) = 0;
      virtual HRESULT __stdcall get_Arrowhead1Block (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_Arrowhead1Block (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_Arrowhead2Block (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_Arrowhead2Block (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_DimensionLinetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_DimensionLinetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLine1Linetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_ExtLine1Linetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLine2Linetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_ExtLine2Linetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLineFixedLenSuppress (
        /*[out,retval]*/ VARIANT_BOOL * bFixedLen ) = 0;
      virtual HRESULT __stdcall put_ExtLineFixedLenSuppress (
        /*[in]*/ VARIANT_BOOL bFixedLen ) = 0;
      virtual HRESULT __stdcall get_ExtLineFixedLen (
        /*[out,retval]*/ double * FixedLen ) = 0;
      virtual HRESULT __stdcall put_ExtLineFixedLen (
        /*[in]*/ double FixedLen ) = 0;
      virtual HRESULT __stdcall get_DimConstrForm (
        /*[out,retval]*/ VARIANT_BOOL * bIsDynamic ) = 0;
      virtual HRESULT __stdcall put_DimConstrForm (
        /*[in]*/ VARIANT_BOOL bIsDynamic ) = 0;
      virtual HRESULT __stdcall get_DimConstrReference (
        /*[out,retval]*/ VARIANT_BOOL * bIsReference ) = 0;
      virtual HRESULT __stdcall put_DimConstrReference (
        /*[in]*/ VARIANT_BOOL bIsReference ) = 0;
      virtual HRESULT __stdcall get_DimConstrName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_DimConstrName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_DimConstrExpression (
        /*[out,retval]*/ BSTR * bstrExpression ) = 0;
      virtual HRESULT __stdcall put_DimConstrExpression (
        /*[in]*/ BSTR bstrExpression ) = 0;
      virtual HRESULT __stdcall get_DimConstrValue (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_DimConstrValue (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_DimConstrDesc (
        /*[out,retval]*/ BSTR * bstrDescription ) = 0;
      virtual HRESULT __stdcall put_DimConstrDesc (
        /*[in]*/ BSTR bstrDescription ) = 0;
};

struct __declspec(uuid("a3aa22e3-7b15-4bda-83fa-80336989010d"))
IAcadExternalReference : IAcadBlockReference
{
    //
    // Property data
    //

    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t bstrName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ BSTR bstrName ) = 0;
};

struct __declspec(uuid("84fed720-777d-479e-9b15-13cd56f96173"))
IAcadTable : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetRows,put=PutRows))
    int Rows;
    __declspec(property(get=GetColumns,put=PutColumns))
    int Columns;
    __declspec(property(get=GetFlowDirection,put=PutFlowDirection))
    enum AcTableDirection FlowDirection;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetVertCellMargin,put=PutVertCellMargin))
    double VertCellMargin;
    __declspec(property(get=GetHorzCellMargin,put=PutHorzCellMargin))
    double HorzCellMargin;
    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetBreaksEnabled,put=PutBreaksEnabled))
    VARIANT_BOOL BreaksEnabled;
    __declspec(property(get=GetRepeatTopLabels,put=PutRepeatTopLabels))
    VARIANT_BOOL RepeatTopLabels;
    __declspec(property(put=PutColumnWidth))
    double ColumnWidth;
    __declspec(property(get=GetTableStyleOverrides))
    _variant_t TableStyleOverrides;
    __declspec(property(get=GetRepeatBottomLabels,put=PutRepeatBottomLabels))
    VARIANT_BOOL RepeatBottomLabels;
    __declspec(property(put=PutRowHeight))
    double RowHeight;
    __declspec(property(get=GetTableBreakFlowDirection,put=PutTableBreakFlowDirection))
    enum AcTableFlowDirection TableBreakFlowDirection;
    __declspec(property(get=GetAllowManualPositions,put=PutAllowManualPositions))
    VARIANT_BOOL AllowManualPositions;
    __declspec(property(get=GetAllowManualHeights,put=PutAllowManualHeights))
    VARIANT_BOOL AllowManualHeights;
    __declspec(property(get=GetTableBreakHeight,put=PutTableBreakHeight))
    double TableBreakHeight;
    __declspec(property(put=PutEnableBreak))
    VARIANT_BOOL EnableBreak;
    __declspec(property(get=GetBreakSpacing,put=PutBreakSpacing))
    double BreakSpacing;
    __declspec(property(get=GetHasSubSelection))
    VARIANT_BOOL HasSubSelection;
    __declspec(property(get=GetRegenerateTableSuppressed,put=PutRegenerateTableSuppressed))
    VARIANT_BOOL RegenerateTableSuppressed;
    __declspec(property(get=GetMinimumTableWidth))
    double MinimumTableWidth;
    __declspec(property(get=GetMinimumTableHeight))
    double MinimumTableHeight;
    __declspec(property(get=GetDirection,put=PutDirection))
    _variant_t Direction;
    __declspec(property(get=GetHeaderSuppressed,put=PutHeaderSuppressed))
    VARIANT_BOOL HeaderSuppressed;
    __declspec(property(get=GetTitleSuppressed,put=PutTitleSuppressed))
    VARIANT_BOOL TitleSuppressed;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t bstrName );
    int GetRows ( );
    void PutRows (
        int pRows );
    int GetColumns ( );
    void PutColumns (
        int pColumns );
    enum AcTableDirection GetFlowDirection ( );
    void PutFlowDirection (
        enum AcTableDirection pFlow );
    double GetWidth ( );
    void PutWidth (
        double pWidth );
    double GetHeight ( );
    void PutHeight (
        double pHeight );
    double GetVertCellMargin ( );
    void PutVertCellMargin (
        double pGap );
    double GetHorzCellMargin ( );
    void PutHorzCellMargin (
        double pGap );
    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    double GetColumnWidth (
        int col );
    HRESULT SetColumnWidth (
        int col,
        double Width );
    void PutColumnWidth (
        double _arg1 );
    double GetRowHeight (
        int row );
    HRESULT SetRowHeight (
        int row,
        double Height );
    void PutRowHeight (
        double _arg1 );
    double GetMinimumColumnWidth (
        int col );
    double GetMinimumRowHeight (
        int row );
    double GetMinimumTableWidth ( );
    double GetMinimumTableHeight ( );
    _variant_t GetDirection ( );
    void PutDirection (
        const _variant_t & DirectionVector );
    VARIANT_BOOL GetTitleSuppressed ( );
    void PutTitleSuppressed (
        VARIANT_BOOL bValue );
    VARIANT_BOOL GetHeaderSuppressed ( );
    void PutHeaderSuppressed (
        VARIANT_BOOL bValue );
    enum AcCellAlignment GetAlignment (
        enum AcRowType rowType );
    HRESULT SetAlignment (
        int rowTypes,
        enum AcCellAlignment cellAlignment );
    VARIANT_BOOL GetBackgroundColorNone (
        enum AcRowType rowType );
    HRESULT SetBackgroundColorNone (
        int rowTypes,
        VARIANT_BOOL * bValue );
    IAcadAcCmColorPtr GetBackgroundColor (
        enum AcRowType rowType );
    HRESULT SetBackgroundColor (
        int rowTypes,
        struct IAcadAcCmColor * pColor );
    IAcadAcCmColorPtr GetContentColor (
        enum AcRowType rowType );
    HRESULT SetContentColor (
        int rowTypes,
        struct IAcadAcCmColor * pColor );
    _bstr_t GetTextStyle (
        enum AcRowType rowType );
    HRESULT SetTextStyle (
        int rowTypes,
        _bstr_t bstrName );
    double GetTextHeight (
        enum AcRowType rowType );
    HRESULT SetTextHeight (
        int rowTypes,
        double TextHeight );
    ACAD_LWEIGHT GetGridLineWeight (
        enum AcGridLineType gridLineType,
        enum AcRowType rowType );
    HRESULT SetGridLineWeight (
        int gridLineTypes,
        int rowTypes,
        ACAD_LWEIGHT Lineweight );
    IAcadAcCmColorPtr GetGridColor (
        enum AcGridLineType gridLineType,
        enum AcRowType rowType );
    HRESULT SetGridColor (
        int gridLineTypes,
        int rowTypes,
        struct IAcadAcCmColor * pColor );
    VARIANT_BOOL GetGridVisibility (
        enum AcGridLineType gridLineType,
        enum AcRowType rowType );
    HRESULT SetGridVisibility (
        int gridLineTypes,
        int rowTypes,
        VARIANT_BOOL bValue );
    _variant_t GetTableStyleOverrides ( );
    HRESULT ClearTableStyleOverrides (
        int flag );
    enum AcCellType GetCellType (
        int row,
        int col );
    HRESULT SetCellType (
        int row,
        int col,
        enum AcCellType CellType );
    _variant_t GetCellExtents (
        int row,
        int col,
        VARIANT_BOOL bOuterCell );
    _variant_t GetAttachmentPoint (
        int row,
        int col );
    enum AcCellAlignment GetCellAlignment (
        int row,
        int col );
    HRESULT SetCellAlignment (
        int row,
        int col,
        enum AcCellAlignment cellAlignment );
    VARIANT_BOOL GetCellBackgroundColorNone (
        int row,
        int col );
    HRESULT SetCellBackgroundColorNone (
        int row,
        int col,
        VARIANT_BOOL * bValue );
    IAcadAcCmColorPtr GetCellBackgroundColor (
        int row,
        int col );
    HRESULT SetCellBackgroundColor (
        int row,
        int col,
        struct IAcadAcCmColor * pColor );
    IAcadAcCmColorPtr GetCellContentColor (
        int row,
        int col );
    HRESULT SetCellContentColor (
        int row,
        int col,
        struct IAcadAcCmColor * pColor );
    _variant_t GetCellStyleOverrides (
        int row,
        int col );
    HRESULT DeleteCellContent (
        int row,
        int col );
    enum AcRowType GetRowType (
        int row );
    _bstr_t GetText (
        int row,
        int col );
    HRESULT SetText (
        int row,
        int col,
        _bstr_t pStr );
    _bstr_t GetCellTextStyle (
        int row,
        int col );
    HRESULT SetCellTextStyle (
        int row,
        int col,
        _bstr_t bstrName );
    double GetCellTextHeight (
        int row,
        int col );
    HRESULT SetCellTextHeight (
        int row,
        int col,
        double TextHeight );
    enum AcRotationAngle GetTextRotation (
        int row,
        int col );
    HRESULT SetTextRotation (
        int row,
        int col,
        enum AcRotationAngle TextRotation );
    VARIANT_BOOL GetAutoScale (
        int row,
        int col );
    HRESULT SetAutoScale (
        int row,
        int col,
        VARIANT_BOOL * bValue );
    LONG_PTR GetBlockTableRecordId (
        int row,
        int col );
    HRESULT SetBlockTableRecordId (
        int row,
        int col,
        LONG_PTR blkId,
        VARIANT_BOOL bAutoFit );
    double GetBlockScale (
        int row,
        int col );
    HRESULT SetBlockScale (
        int row,
        int col,
        double blkScale );
    double GetBlockRotation (
        int row,
        int col );
    HRESULT SetBlockRotation (
        int row,
        int col,
        double blkRotation );
    _bstr_t GetBlockAttributeValue (
        int row,
        int col,
        LONG_PTR attdefId );
    HRESULT SetBlockAttributeValue (
        int row,
        int col,
        LONG_PTR attdefId,
        _bstr_t bstrValue );
    ACAD_LWEIGHT GetCellGridLineWeight (
        int row,
        int col,
        enum AcCellEdgeMask edge );
    HRESULT SetCellGridLineWeight (
        int row,
        int col,
        int edges,
        ACAD_LWEIGHT Lineweight );
    IAcadAcCmColorPtr GetCellGridColor (
        int row,
        int col,
        enum AcCellEdgeMask edge );
    HRESULT SetCellGridColor (
        int row,
        int col,
        int edges,
        struct IAcadAcCmColor * pColor );
    VARIANT_BOOL GetCellGridVisibility (
        int row,
        int col,
        enum AcCellEdgeMask edge );
    HRESULT SetCellGridVisibility (
        int row,
        int col,
        int edges,
        VARIANT_BOOL bValue );
    HRESULT InsertColumns (
        int col,
        double Width,
        int cols );
    HRESULT DeleteColumns (
        int col,
        int cols );
    HRESULT InsertRows (
        int row,
        double Height,
        int Rows );
    HRESULT DeleteRows (
        int row,
        int Rows );
    HRESULT MergeCells (
        int minRow,
        int maxRow,
        int minCol,
        int maxCol );
    HRESULT UnmergeCells (
        int minRow,
        int maxRow,
        int minCol,
        int maxCol );
    VARIANT_BOOL IsMergedCell (
        int row,
        int col,
        int * minRow,
        int * maxRow,
        int * minCol,
        int * maxCol );
    LONG_PTR GetFieldId (
        int row,
        int col );
    HRESULT SetFieldId (
        int row,
        int col,
        LONG_PTR fieldId );
    HRESULT GenerateLayout ( );
    HRESULT RecomputeTableBlock (
        VARIANT_BOOL bForceUpdate );
    VARIANT_BOOL HitTest (
        const _variant_t & wpt,
        const _variant_t & wviewVec,
        int * resultRowIndex,
        int * resultColumnIndex );
    HRESULT Select (
        const _variant_t & wpt,
        const _variant_t & wvwVec,
        const _variant_t & wvwxVec,
        double wxaper,
        double wyaper,
        VARIANT_BOOL allowOutside,
        int * resultRowIndex,
        int * resultColumnIndex );
    HRESULT SelectSubRegion (
        const _variant_t & wpt1,
        const _variant_t & wpt2,
        const _variant_t & wvwVec,
        const _variant_t & wvwxVec,
        enum AcSelectType seltype,
        VARIANT_BOOL bIncludeCurrentSelection,
        int * rowMin,
        int * rowMax,
        int * colMin,
        int * colMax );
    HRESULT ReselectSubRegion ( );
    HRESULT GetSubSelection (
        int * rowMin,
        int * rowMax,
        int * colMin,
        int * colMax );
    HRESULT SetSubSelection (
        int rowMin,
        int rowMax,
        int colMin,
        int colMax );
    HRESULT ClearSubSelection ( );
    VARIANT_BOOL GetHasSubSelection ( );
    VARIANT_BOOL GetRegenerateTableSuppressed ( );
    void PutRegenerateTableSuppressed (
        VARIANT_BOOL bValue );
    HRESULT GetDataType (
        enum AcRowType rowType,
        enum AcValueDataType * pDataType,
        enum AcValueUnitType * pUnitType );
    HRESULT SetDataType (
        int rowTypes,
        enum AcValueDataType dataType,
        enum AcValueUnitType unitType );
    _bstr_t GetFormat (
        enum AcRowType rowType );
    HRESULT SetFormat (
        int rowTypes,
        _bstr_t pFormat );
    HRESULT FormatValue (
        int row,
        int col,
        enum AcFormatOption nOption,
        BSTR * pVal );
    HRESULT GetCellDataType (
        int row,
        int col,
        enum AcValueDataType * pDataType,
        enum AcValueUnitType * pUnitType );
    HRESULT SetCellDataType (
        int row,
        int col,
        enum AcValueDataType dataType,
        enum AcValueUnitType unitType );
    _bstr_t GetCellFormat (
        int row,
        int col );
    HRESULT SetCellFormat (
        int row,
        int col,
        _bstr_t pFormat );
    _variant_t GetCellValue (
        int row,
        int col );
    HRESULT SetCellValue (
        int row,
        int col,
        const _variant_t & val );
    HRESULT SetCellValueFromText (
        int row,
        int col,
        _bstr_t val,
        enum AcParseOption nOption );
    HRESULT ResetCellValue (
        int row,
        int col );
    VARIANT_BOOL IsEmpty (
        int nRow,
        int nCol );
    int CreateContent (
        int nRow,
        int nCol,
        int nIndex );
    HRESULT MoveContent (
        int nRow,
        int nCol,
        int nFromIndex,
        int nToIndex );
    HRESULT DeleteContent (
        int nRow,
        int nCol );
    _variant_t GetValue (
        int nRow,
        int nCol,
        int nContent );
    HRESULT SetValue (
        int nRow,
        int nCol,
        int nContent,
        const _variant_t & acValue );
    HRESULT SetValueFromText (
        int nRow,
        int nCol,
        int nContent,
        _bstr_t szText,
        enum AcParseOption nOption );
    _bstr_t GetDataFormat (
        int nRow,
        int nCol,
        int nContent );
    HRESULT SetDataFormat (
        int nRow,
        int nCol,
        int nContent,
        _bstr_t szFormat );
    _bstr_t GetTextString (
        int nRow,
        int nCol,
        int nContent );
    HRESULT SetTextString (
        int nRow,
        int nCol,
        int nContent,
        _bstr_t Text );
    LONG_PTR GetFieldId2 (
        int nRow,
        int nCol,
        int nContent );
    HRESULT SetFieldId2 (
        int nRow,
        int nCol,
        int nContent,
        LONG_PTR acDbObjectId,
        enum AcCellOption nflag );
    LONG_PTR GetBlockTableRecordId2 (
        int nRow,
        int nCol,
        int nContent );
    HRESULT SetBlockTableRecordId2 (
        int nRow,
        int nCol,
        int nContent,
        LONG_PTR blkId,
        VARIANT_BOOL autoFit );
    _bstr_t GetBlockAttributeValue2 (
        int nRow,
        int nCol,
        int nContent,
        LONG_PTR blkId );
    HRESULT SetBlockAttributeValue2 (
        int nRow,
        int nCol,
        int nContent,
        LONG_PTR blkId,
        _bstr_t Value );
    HRESULT GetCustomData (
        int nRow,
        int nCol,
        _bstr_t szKey,
        VARIANT * pData );
    HRESULT SetCustomData (
        int nRow,
        int nCol,
        _bstr_t szKey,
        const _variant_t & data );
    _bstr_t GetCellStyle (
        int nRow,
        int nCol );
    HRESULT SetCellStyle (
        int nRow,
        int nCol,
        _bstr_t szCellStyle );
    IAcadAcCmColorPtr GetContentColor2 (
        int nRow,
        int nCol,
        int nContent );
    HRESULT SetContentColor2 (
        int nRow,
        int nCol,
        int nContent,
        struct IAcadAcCmColor * pColor );
    HRESULT GetDataType2 (
        int nRow,
        int nCol,
        int nContent,
        enum AcValueDataType * pDataType,
        enum AcValueUnitType * pUnitType );
    HRESULT SetDataType2 (
        int nRow,
        int nCol,
        int nContent,
        enum AcValueDataType dataType,
        enum AcValueUnitType unitType );
    _bstr_t GetTextStyle2 (
        int nRow,
        int nCol,
        int nContent );
    HRESULT SetTextStyle2 (
        int nRow,
        int nCol,
        int nContent,
        _bstr_t bstrStyleName );
    double GetTextHeight2 (
        int nRow,
        int nCol,
        int nContent );
    HRESULT SetTextHeight2 (
        int nRow,
        int nCol,
        int nContent,
        double Height );
    double GetRotation (
        int nRow,
        int nCol,
        int nContent );
    HRESULT SetRotation (
        int nRow,
        int nCol,
        int nContent,
        double Value );
    VARIANT_BOOL GetAutoScale2 (
        int nRow,
        int nCol,
        int nContent );
    HRESULT SetAutoScale2 (
        int nRow,
        int nCol,
        int nContent,
        VARIANT_BOOL bAutoFit );
    double GetScale (
        int nRow,
        int nCol,
        int nContent );
    HRESULT SetScale (
        int nRow,
        int nCol,
        int nContent,
        double scale );
    HRESULT RemoveAllOverrides (
        int nRow,
        int nCol );
    ACAD_LWEIGHT GetGridLineWeight2 (
        int nRow,
        int nCol,
        enum AcGridLineType nGridLineType );
    HRESULT SetGridLineWeight2 (
        int nRow,
        int nCol,
        enum AcGridLineType nGridLineType,
        ACAD_LWEIGHT Lineweight );
    LONG_PTR GetGridLinetype (
        int nRow,
        int nCol,
        enum AcGridLineType nGridLineType );
    HRESULT SetGridLinetype (
        int nRow,
        int nCol,
        enum AcGridLineType nGridLineType,
        LONG_PTR idLinetype );
    IAcadAcCmColorPtr GetGridColor2 (
        int nRow,
        int nCol,
        enum AcGridLineType nGridLineType );
    HRESULT SetGridColor2 (
        int nRow,
        int nCol,
        enum AcGridLineType nGridLineType,
        struct IAcadAcCmColor * pColor );
    VARIANT_BOOL GetGridVisibility2 (
        int nRow,
        int nCol,
        enum AcGridLineType nGridLineType );
    HRESULT SetGridVisibility2 (
        int nRow,
        int nCol,
        enum AcGridLineType nGridLineType,
        VARIANT_BOOL bVisible );
    double GetGridDoubleLineSpacing (
        int nRow,
        int nCol,
        enum AcGridLineType nGridLineType );
    HRESULT SetGridDoubleLineSpacing (
        int nRow,
        int nCol,
        enum AcGridLineType nGridLineType,
        double fSpacing );
    void PutEnableBreak (
        VARIANT_BOOL _arg1 );
    double GetBreakHeight (
        int nIndex );
    HRESULT SetBreakHeight (
        int nIndex,
        double Height );
    enum AcCellContentType GetContentType (
        int nRow,
        int nCol );
    double GetMargin (
        int nRow,
        int nCol,
        enum AcCellMargin nMargin );
    HRESULT SetMargin (
        int nRow,
        int nCol,
        enum AcCellMargin nMargins,
        double fMargin );
    enum AcCellContentLayout GetContentLayout (
        int row,
        int col );
    HRESULT SetContentLayout (
        int row,
        int col,
        enum AcCellContentLayout nLayout );
    enum AcCellProperty GetOverride (
        int nRow,
        int nCol,
        int nContent );
    HRESULT SetOverride (
        int nRow,
        int nCol,
        int nContent,
        enum AcCellProperty nProp );
    enum AcGridLineStyle GetGridLineStyle (
        int nRow,
        int nCol,
        enum AcGridLineType nGridLineType );
    HRESULT SetGridLineStyle (
        int nRow,
        int nCol,
        enum AcGridLineType nGridLineTypes,
        enum AcGridLineStyle nLineStyle );
    HRESULT InsertRowsAndInherit (
        int nIndex,
        int nInheritFrom,
        int nNumRows );
    HRESULT InsertColumnsAndInherit (
        int col,
        int nInheritFrom,
        int nNumCols );
    VARIANT_BOOL GetHasFormula (
        int nRow,
        int nCol,
        int nContent );
    _bstr_t GetFormula (
        int nRow,
        int nCol,
        int nContent );
    HRESULT SetFormula (
        int nRow,
        int nCol,
        int nContent,
        _bstr_t pszFormula );
    VARIANT_BOOL IsContentEditable (
        int nRow,
        int nCol );
    VARIANT_BOOL IsFormatEditable (
        int nRow,
        int nCol );
    enum AcCellState GetCellState (
        int nRow,
        int nCol );
    HRESULT SetCellState (
        int nRow,
        int nCol,
        enum AcCellState nLock );
    HRESULT EnableMergeAll (
        int nRow,
        int nCol,
        VARIANT_BOOL bEnable );
    VARIANT_BOOL IsMergeAllEnabled (
        int nRow,
        int nCol );
    VARIANT_BOOL GetBreaksEnabled ( );
    void PutBreaksEnabled (
        VARIANT_BOOL bEnabled );
    VARIANT_BOOL GetRepeatTopLabels ( );
    void PutRepeatTopLabels (
        VARIANT_BOOL bEnabled );
    VARIANT_BOOL GetRepeatBottomLabels ( );
    void PutRepeatBottomLabels (
        VARIANT_BOOL bEnabled );
    enum AcTableFlowDirection GetTableBreakFlowDirection ( );
    void PutTableBreakFlowDirection (
        enum AcTableFlowDirection pDir );
    VARIANT_BOOL GetAllowManualPositions ( );
    void PutAllowManualPositions (
        VARIANT_BOOL bEnabled );
    VARIANT_BOOL GetAllowManualHeights ( );
    void PutAllowManualHeights (
        VARIANT_BOOL bEnabled );
    double GetTableBreakHeight ( );
    void PutTableBreakHeight (
        double pHeight );
    double GetBreakSpacing ( );
    void PutBreakSpacing (
        double pSpacing );
    _bstr_t GetColumnName (
        int nIndex );
    HRESULT SetColumnName (
        int nIndex,
        _bstr_t Name );
    HRESULT SetToolTip (
        int nRow,
        int nCol,
        _bstr_t tip );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StyleName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_StyleName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ int * pRows ) = 0;
      virtual HRESULT __stdcall put_Rows (
        /*[in]*/ int pRows ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ int * pColumns ) = 0;
      virtual HRESULT __stdcall put_Columns (
        /*[in]*/ int pColumns ) = 0;
      virtual HRESULT __stdcall get_FlowDirection (
        /*[out,retval]*/ enum AcTableDirection * pFlow ) = 0;
      virtual HRESULT __stdcall put_FlowDirection (
        /*[in]*/ enum AcTableDirection pFlow ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pWidth ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pWidth ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pHeight ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pHeight ) = 0;
      virtual HRESULT __stdcall get_VertCellMargin (
        /*[out,retval]*/ double * pGap ) = 0;
      virtual HRESULT __stdcall put_VertCellMargin (
        /*[in]*/ double pGap ) = 0;
      virtual HRESULT __stdcall get_HorzCellMargin (
        /*[out,retval]*/ double * pGap ) = 0;
      virtual HRESULT __stdcall put_HorzCellMargin (
        /*[in]*/ double pGap ) = 0;
      virtual HRESULT __stdcall get_InsertionPoint (
        /*[out,retval]*/ VARIANT * insPoint ) = 0;
      virtual HRESULT __stdcall put_InsertionPoint (
        /*[in]*/ VARIANT insPoint ) = 0;
      virtual HRESULT __stdcall raw_GetColumnWidth (
        /*[in]*/ int col,
        /*[out,retval]*/ double * pWidth ) = 0;
      virtual HRESULT __stdcall raw_SetColumnWidth (
        /*[in]*/ int col,
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall put_ColumnWidth (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall raw_GetRowHeight (
        /*[in]*/ int row,
        /*[out,retval]*/ double * pHeight ) = 0;
      virtual HRESULT __stdcall raw_SetRowHeight (
        /*[in]*/ int row,
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall put_RowHeight (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall raw_GetMinimumColumnWidth (
        /*[in]*/ int col,
        /*[out,retval]*/ double * pWidth ) = 0;
      virtual HRESULT __stdcall raw_GetMinimumRowHeight (
        /*[in]*/ int row,
        /*[out,retval]*/ double * pHeight ) = 0;
      virtual HRESULT __stdcall get_MinimumTableWidth (
        /*[out,retval]*/ double * pWidth ) = 0;
      virtual HRESULT __stdcall get_MinimumTableHeight (
        /*[out,retval]*/ double * pHeight ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT * DirectionVector ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT DirectionVector ) = 0;
      virtual HRESULT __stdcall get_TitleSuppressed (
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall put_TitleSuppressed (
        /*[in]*/ VARIANT_BOOL bValue ) = 0;
      virtual HRESULT __stdcall get_HeaderSuppressed (
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall put_HeaderSuppressed (
        /*[in]*/ VARIANT_BOOL bValue ) = 0;
      virtual HRESULT __stdcall raw_GetAlignment (
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ enum AcCellAlignment * pCellAlignment ) = 0;
      virtual HRESULT __stdcall raw_SetAlignment (
        /*[in]*/ int rowTypes,
        /*[in]*/ enum AcCellAlignment cellAlignment ) = 0;
      virtual HRESULT __stdcall raw_GetBackgroundColorNone (
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_SetBackgroundColorNone (
        /*[in]*/ int rowTypes,
        /*[in]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_GetBackgroundColor (
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall raw_SetBackgroundColor (
        /*[in]*/ int rowTypes,
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall raw_GetContentColor (
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall raw_SetContentColor (
        /*[in]*/ int rowTypes,
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall raw_GetTextStyle (
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall raw_SetTextStyle (
        /*[in]*/ int rowTypes,
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall raw_GetTextHeight (
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ double * pTextHeight ) = 0;
      virtual HRESULT __stdcall raw_SetTextHeight (
        /*[in]*/ int rowTypes,
        /*[in]*/ double TextHeight ) = 0;
      virtual HRESULT __stdcall raw_GetGridLineWeight (
        /*[in]*/ enum AcGridLineType gridLineType,
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ ACAD_LWEIGHT * Lineweight ) = 0;
      virtual HRESULT __stdcall raw_SetGridLineWeight (
        /*[in]*/ int gridLineTypes,
        /*[in]*/ int rowTypes,
        /*[in]*/ ACAD_LWEIGHT Lineweight ) = 0;
      virtual HRESULT __stdcall raw_GetGridColor (
        /*[in]*/ enum AcGridLineType gridLineType,
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall raw_SetGridColor (
        /*[in]*/ int gridLineTypes,
        /*[in]*/ int rowTypes,
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall raw_GetGridVisibility (
        /*[in]*/ enum AcGridLineType gridLineType,
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_SetGridVisibility (
        /*[in]*/ int gridLineTypes,
        /*[in]*/ int rowTypes,
        /*[in]*/ VARIANT_BOOL bValue ) = 0;
      virtual HRESULT __stdcall get_TableStyleOverrides (
        /*[out,retval]*/ VARIANT * pIntArray ) = 0;
      virtual HRESULT __stdcall raw_ClearTableStyleOverrides (
        /*[in]*/ int flag ) = 0;
      virtual HRESULT __stdcall raw_GetCellType (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ enum AcCellType * pCellType ) = 0;
      virtual HRESULT __stdcall raw_SetCellType (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ enum AcCellType CellType ) = 0;
      virtual HRESULT __stdcall raw_GetCellExtents (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ VARIANT_BOOL bOuterCell,
        /*[out,retval]*/ VARIANT * pPts ) = 0;
      virtual HRESULT __stdcall raw_GetAttachmentPoint (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ VARIANT * pAttachmentPoint ) = 0;
      virtual HRESULT __stdcall raw_GetCellAlignment (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ enum AcCellAlignment * pCellAlignment ) = 0;
      virtual HRESULT __stdcall raw_SetCellAlignment (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ enum AcCellAlignment cellAlignment ) = 0;
      virtual HRESULT __stdcall raw_GetCellBackgroundColorNone (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_SetCellBackgroundColorNone (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_GetCellBackgroundColor (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall raw_SetCellBackgroundColor (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall raw_GetCellContentColor (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall raw_SetCellContentColor (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall raw_GetCellStyleOverrides (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ VARIANT * pIntArray ) = 0;
      virtual HRESULT __stdcall raw_DeleteCellContent (
        /*[in]*/ int row,
        /*[in]*/ int col ) = 0;
      virtual HRESULT __stdcall raw_GetRowType (
        /*[in]*/ int row,
        /*[out,retval]*/ enum AcRowType * pRowType ) = 0;
      virtual HRESULT __stdcall raw_GetText (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ BSTR * pStr ) = 0;
      virtual HRESULT __stdcall raw_SetText (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ BSTR pStr ) = 0;
      virtual HRESULT __stdcall raw_GetCellTextStyle (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall raw_SetCellTextStyle (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall raw_GetCellTextHeight (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ double * pTextHeight ) = 0;
      virtual HRESULT __stdcall raw_SetCellTextHeight (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ double TextHeight ) = 0;
      virtual HRESULT __stdcall raw_GetTextRotation (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ enum AcRotationAngle * TextRotation ) = 0;
      virtual HRESULT __stdcall raw_SetTextRotation (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ enum AcRotationAngle TextRotation ) = 0;
      virtual HRESULT __stdcall raw_GetAutoScale (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_SetAutoScale (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_GetBlockTableRecordId (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ LONG_PTR * blkId ) = 0;
      virtual HRESULT __stdcall raw_SetBlockTableRecordId (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ LONG_PTR blkId,
        /*[in]*/ VARIANT_BOOL bAutoFit ) = 0;
      virtual HRESULT __stdcall raw_GetBlockScale (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ double * blkScale ) = 0;
      virtual HRESULT __stdcall raw_SetBlockScale (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ double blkScale ) = 0;
      virtual HRESULT __stdcall raw_GetBlockRotation (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ double * blkRotation ) = 0;
      virtual HRESULT __stdcall raw_SetBlockRotation (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ double blkRotation ) = 0;
      virtual HRESULT __stdcall raw_GetBlockAttributeValue (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ LONG_PTR attdefId,
        /*[out,retval]*/ BSTR * bstrValue ) = 0;
      virtual HRESULT __stdcall raw_SetBlockAttributeValue (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ LONG_PTR attdefId,
        /*[in]*/ BSTR bstrValue ) = 0;
      virtual HRESULT __stdcall raw_GetCellGridLineWeight (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ enum AcCellEdgeMask edge,
        /*[out,retval]*/ ACAD_LWEIGHT * plineweight ) = 0;
      virtual HRESULT __stdcall raw_SetCellGridLineWeight (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ int edges,
        /*[in]*/ ACAD_LWEIGHT Lineweight ) = 0;
      virtual HRESULT __stdcall raw_GetCellGridColor (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ enum AcCellEdgeMask edge,
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall raw_SetCellGridColor (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ int edges,
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall raw_GetCellGridVisibility (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ enum AcCellEdgeMask edge,
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_SetCellGridVisibility (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ int edges,
        /*[in]*/ VARIANT_BOOL bValue ) = 0;
      virtual HRESULT __stdcall raw_InsertColumns (
        /*[in]*/ int col,
        /*[in]*/ double Width,
        /*[in]*/ int cols ) = 0;
      virtual HRESULT __stdcall raw_DeleteColumns (
        /*[in]*/ int col,
        /*[in]*/ int cols ) = 0;
      virtual HRESULT __stdcall raw_InsertRows (
        /*[in]*/ int row,
        /*[in]*/ double Height,
        /*[in]*/ int Rows ) = 0;
      virtual HRESULT __stdcall raw_DeleteRows (
        /*[in]*/ int row,
        /*[in]*/ int Rows ) = 0;
      virtual HRESULT __stdcall raw_MergeCells (
        /*[in]*/ int minRow,
        /*[in]*/ int maxRow,
        /*[in]*/ int minCol,
        /*[in]*/ int maxCol ) = 0;
      virtual HRESULT __stdcall raw_UnmergeCells (
        /*[in]*/ int minRow,
        /*[in]*/ int maxRow,
        /*[in]*/ int minCol,
        /*[in]*/ int maxCol ) = 0;
      virtual HRESULT __stdcall raw_IsMergedCell (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out]*/ int * minRow,
        /*[out]*/ int * maxRow,
        /*[out]*/ int * minCol,
        /*[out]*/ int * maxCol,
        /*[out,retval]*/ VARIANT_BOOL * pbValue ) = 0;
      virtual HRESULT __stdcall raw_GetFieldId (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ LONG_PTR * fieldId ) = 0;
      virtual HRESULT __stdcall raw_SetFieldId (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ LONG_PTR fieldId ) = 0;
      virtual HRESULT __stdcall raw_GenerateLayout ( ) = 0;
      virtual HRESULT __stdcall raw_RecomputeTableBlock (
        /*[in]*/ VARIANT_BOOL bForceUpdate ) = 0;
      virtual HRESULT __stdcall raw_HitTest (
        /*[in]*/ VARIANT wpt,
        /*[in]*/ VARIANT wviewVec,
        /*[out]*/ int * resultRowIndex,
        /*[out]*/ int * resultColumnIndex,
        /*[out,retval]*/ VARIANT_BOOL * bReturn ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT wpt,
        /*[in]*/ VARIANT wvwVec,
        /*[in]*/ VARIANT wvwxVec,
        /*[in]*/ double wxaper,
        /*[in]*/ double wyaper,
        /*[in]*/ VARIANT_BOOL allowOutside,
        /*[out]*/ int * resultRowIndex,
        /*[out]*/ int * resultColumnIndex ) = 0;
      virtual HRESULT __stdcall raw_SelectSubRegion (
        /*[in]*/ VARIANT wpt1,
        /*[in]*/ VARIANT wpt2,
        /*[in]*/ VARIANT wvwVec,
        /*[in]*/ VARIANT wvwxVec,
        /*[in]*/ enum AcSelectType seltype,
        /*[in]*/ VARIANT_BOOL bIncludeCurrentSelection,
        /*[out]*/ int * rowMin,
        /*[out]*/ int * rowMax,
        /*[out]*/ int * colMin,
        /*[out]*/ int * colMax ) = 0;
      virtual HRESULT __stdcall raw_ReselectSubRegion ( ) = 0;
      virtual HRESULT __stdcall raw_GetSubSelection (
        /*[out]*/ int * rowMin,
        /*[out]*/ int * rowMax,
        /*[out]*/ int * colMin,
        /*[out]*/ int * colMax ) = 0;
      virtual HRESULT __stdcall raw_SetSubSelection (
        /*[in]*/ int rowMin,
        /*[in]*/ int rowMax,
        /*[in]*/ int colMin,
        /*[in]*/ int colMax ) = 0;
      virtual HRESULT __stdcall raw_ClearSubSelection ( ) = 0;
      virtual HRESULT __stdcall get_HasSubSelection (
        /*[out,retval]*/ VARIANT_BOOL * pbValue ) = 0;
      virtual HRESULT __stdcall get_RegenerateTableSuppressed (
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall put_RegenerateTableSuppressed (
        /*[in]*/ VARIANT_BOOL bValue ) = 0;
      virtual HRESULT __stdcall raw_GetDataType (
        /*[in]*/ enum AcRowType rowType,
        /*[out]*/ enum AcValueDataType * pDataType,
        /*[out]*/ enum AcValueUnitType * pUnitType ) = 0;
      virtual HRESULT __stdcall raw_SetDataType (
        /*[in]*/ int rowTypes,
        /*[in]*/ enum AcValueDataType dataType,
        /*[in]*/ enum AcValueUnitType unitType ) = 0;
      virtual HRESULT __stdcall raw_GetFormat (
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ BSTR * pFormat ) = 0;
      virtual HRESULT __stdcall raw_SetFormat (
        /*[in]*/ int rowTypes,
        BSTR pFormat ) = 0;
      virtual HRESULT __stdcall raw_FormatValue (
        /*[in]*/ int row,
        /*[in]*/ int col,
        enum AcFormatOption nOption,
        BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCellDataType (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out]*/ enum AcValueDataType * pDataType,
        /*[out]*/ enum AcValueUnitType * pUnitType ) = 0;
      virtual HRESULT __stdcall raw_SetCellDataType (
        /*[in]*/ int row,
        /*[in]*/ int col,
        enum AcValueDataType dataType,
        enum AcValueUnitType unitType ) = 0;
      virtual HRESULT __stdcall raw_GetCellFormat (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ BSTR * pFormat ) = 0;
      virtual HRESULT __stdcall raw_SetCellFormat (
        /*[in]*/ int row,
        /*[in]*/ int col,
        BSTR pFormat ) = 0;
      virtual HRESULT __stdcall raw_GetCellValue (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetCellValue (
        /*[in]*/ int row,
        /*[in]*/ int col,
        VARIANT val ) = 0;
      virtual HRESULT __stdcall raw_SetCellValueFromText (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ BSTR val,
        /*[in]*/ enum AcParseOption nOption ) = 0;
      virtual HRESULT __stdcall raw_ResetCellValue (
        /*[in]*/ int row,
        /*[in]*/ int col ) = 0;
      virtual HRESULT __stdcall raw_IsEmpty (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_CreateContent (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nIndex,
        /*[out,retval]*/ int * pInt ) = 0;
      virtual HRESULT __stdcall raw_MoveContent (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nFromIndex,
        /*[in]*/ int nToIndex ) = 0;
      virtual HRESULT __stdcall raw_DeleteContent (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol ) = 0;
      virtual HRESULT __stdcall raw_GetValue (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out,retval]*/ VARIANT * pAcValue ) = 0;
      virtual HRESULT __stdcall raw_SetValue (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ VARIANT acValue ) = 0;
      virtual HRESULT __stdcall raw_SetValueFromText (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ BSTR szText,
        /*[in]*/ enum AcParseOption nOption ) = 0;
      virtual HRESULT __stdcall raw_GetDataFormat (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out,retval]*/ BSTR * pValue ) = 0;
      virtual HRESULT __stdcall raw_SetDataFormat (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ BSTR szFormat ) = 0;
      virtual HRESULT __stdcall raw_GetTextString (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out,retval]*/ BSTR * pTextString ) = 0;
      virtual HRESULT __stdcall raw_SetTextString (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_GetFieldId2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out,retval]*/ LONG_PTR * pAcDbObjectId ) = 0;
      virtual HRESULT __stdcall raw_SetFieldId2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ LONG_PTR acDbObjectId,
        /*[in]*/ enum AcCellOption nflag ) = 0;
      virtual HRESULT __stdcall raw_GetBlockTableRecordId2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out,retval]*/ LONG_PTR * pAcDbObjectId ) = 0;
      virtual HRESULT __stdcall raw_SetBlockTableRecordId2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ LONG_PTR blkId,
        /*[in]*/ VARIANT_BOOL autoFit ) = 0;
      virtual HRESULT __stdcall raw_GetBlockAttributeValue2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ LONG_PTR blkId,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_SetBlockAttributeValue2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ LONG_PTR blkId,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetCustomData (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ BSTR szKey,
        /*[out]*/ VARIANT * pData ) = 0;
      virtual HRESULT __stdcall raw_SetCustomData (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ BSTR szKey,
        /*[in]*/ VARIANT data ) = 0;
      virtual HRESULT __stdcall raw_GetCellStyle (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[out,retval]*/ BSTR * pCellStyle ) = 0;
      virtual HRESULT __stdcall raw_SetCellStyle (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ BSTR szCellStyle ) = 0;
      virtual HRESULT __stdcall raw_GetContentColor2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall raw_SetContentColor2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall raw_GetDataType2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out]*/ enum AcValueDataType * pDataType,
        /*[out]*/ enum AcValueUnitType * pUnitType ) = 0;
      virtual HRESULT __stdcall raw_SetDataType2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ enum AcValueDataType dataType,
        /*[in]*/ enum AcValueUnitType unitType ) = 0;
      virtual HRESULT __stdcall raw_GetTextStyle2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out,retval]*/ BSTR * pbstrStyleName ) = 0;
      virtual HRESULT __stdcall raw_SetTextStyle2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ BSTR bstrStyleName ) = 0;
      virtual HRESULT __stdcall raw_GetTextHeight2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out,retval]*/ double * pHeight ) = 0;
      virtual HRESULT __stdcall raw_SetTextHeight2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall raw_GetRotation (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out,retval]*/ double * pValue ) = 0;
      virtual HRESULT __stdcall raw_SetRotation (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetAutoScale2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out,retval]*/ VARIANT_BOOL * bAutoScale ) = 0;
      virtual HRESULT __stdcall raw_SetAutoScale2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ VARIANT_BOOL bAutoFit ) = 0;
      virtual HRESULT __stdcall raw_GetScale (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out,retval]*/ double * pScale ) = 0;
      virtual HRESULT __stdcall raw_SetScale (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ double scale ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllOverrides (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol ) = 0;
      virtual HRESULT __stdcall raw_GetGridLineWeight2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcGridLineType nGridLineType,
        /*[out,retval]*/ ACAD_LWEIGHT * plineweight ) = 0;
      virtual HRESULT __stdcall raw_SetGridLineWeight2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcGridLineType nGridLineType,
        /*[in]*/ ACAD_LWEIGHT Lineweight ) = 0;
      virtual HRESULT __stdcall raw_GetGridLinetype (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcGridLineType nGridLineType,
        /*[out,retval]*/ LONG_PTR * pacDbObjId ) = 0;
      virtual HRESULT __stdcall raw_SetGridLinetype (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcGridLineType nGridLineType,
        /*[in]*/ LONG_PTR idLinetype ) = 0;
      virtual HRESULT __stdcall raw_GetGridColor2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcGridLineType nGridLineType,
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall raw_SetGridColor2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcGridLineType nGridLineType,
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall raw_GetGridVisibility2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcGridLineType nGridLineType,
        /*[out,retval]*/ VARIANT_BOOL * bVisible ) = 0;
      virtual HRESULT __stdcall raw_SetGridVisibility2 (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcGridLineType nGridLineType,
        /*[in]*/ VARIANT_BOOL bVisible ) = 0;
      virtual HRESULT __stdcall raw_GetGridDoubleLineSpacing (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcGridLineType nGridLineType,
        /*[out,retval]*/ double * pValue ) = 0;
      virtual HRESULT __stdcall raw_SetGridDoubleLineSpacing (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcGridLineType nGridLineType,
        /*[in]*/ double fSpacing ) = 0;
      virtual HRESULT __stdcall put_EnableBreak (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall raw_GetBreakHeight (
        /*[in]*/ int nIndex,
        /*[out,retval]*/ double * pHeight ) = 0;
      virtual HRESULT __stdcall raw_SetBreakHeight (
        /*[in]*/ int nIndex,
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall raw_GetContentType (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[out,retval]*/ enum AcCellContentType * pType ) = 0;
      virtual HRESULT __stdcall raw_GetMargin (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcCellMargin nMargin,
        /*[out,retval]*/ double * pValue ) = 0;
      virtual HRESULT __stdcall raw_SetMargin (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcCellMargin nMargins,
        /*[in]*/ double fMargin ) = 0;
      virtual HRESULT __stdcall raw_GetContentLayout (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[out,retval]*/ enum AcCellContentLayout * pLayout ) = 0;
      virtual HRESULT __stdcall raw_SetContentLayout (
        /*[in]*/ int row,
        /*[in]*/ int col,
        /*[in]*/ enum AcCellContentLayout nLayout ) = 0;
      virtual HRESULT __stdcall raw_GetOverride (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out,retval]*/ enum AcCellProperty * pValue ) = 0;
      virtual HRESULT __stdcall raw_SetOverride (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ enum AcCellProperty nProp ) = 0;
      virtual HRESULT __stdcall raw_GetGridLineStyle (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcGridLineType nGridLineType,
        /*[out,retval]*/ enum AcGridLineStyle * pStyle ) = 0;
      virtual HRESULT __stdcall raw_SetGridLineStyle (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcGridLineType nGridLineTypes,
        /*[in]*/ enum AcGridLineStyle nLineStyle ) = 0;
      virtual HRESULT __stdcall raw_InsertRowsAndInherit (
        /*[in]*/ int nIndex,
        /*[in]*/ int nInheritFrom,
        /*[in]*/ int nNumRows ) = 0;
      virtual HRESULT __stdcall raw_InsertColumnsAndInherit (
        /*[in]*/ int col,
        /*[in]*/ int nInheritFrom,
        /*[in]*/ int nNumCols ) = 0;
      virtual HRESULT __stdcall raw_GetHasFormula (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_GetFormula (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[out,retval]*/ BSTR * pszFormula ) = 0;
      virtual HRESULT __stdcall raw_SetFormula (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ int nContent,
        /*[in]*/ BSTR pszFormula ) = 0;
      virtual HRESULT __stdcall raw_IsContentEditable (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_IsFormatEditable (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_GetCellState (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[out,retval]*/ enum AcCellState * pCellState ) = 0;
      virtual HRESULT __stdcall raw_SetCellState (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ enum AcCellState nLock ) = 0;
      virtual HRESULT __stdcall raw_EnableMergeAll (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ VARIANT_BOOL bEnable ) = 0;
      virtual HRESULT __stdcall raw_IsMergeAllEnabled (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall get_BreaksEnabled (
        /*[out,retval]*/ VARIANT_BOOL * bEnabled ) = 0;
      virtual HRESULT __stdcall put_BreaksEnabled (
        /*[in]*/ VARIANT_BOOL bEnabled ) = 0;
      virtual HRESULT __stdcall get_RepeatTopLabels (
        /*[out,retval]*/ VARIANT_BOOL * bEnabled ) = 0;
      virtual HRESULT __stdcall put_RepeatTopLabels (
        /*[in]*/ VARIANT_BOOL bEnabled ) = 0;
      virtual HRESULT __stdcall get_RepeatBottomLabels (
        /*[out,retval]*/ VARIANT_BOOL * bEnabled ) = 0;
      virtual HRESULT __stdcall put_RepeatBottomLabels (
        /*[in]*/ VARIANT_BOOL bEnabled ) = 0;
      virtual HRESULT __stdcall get_TableBreakFlowDirection (
        /*[out,retval]*/ enum AcTableFlowDirection * pDir ) = 0;
      virtual HRESULT __stdcall put_TableBreakFlowDirection (
        /*[in]*/ enum AcTableFlowDirection pDir ) = 0;
      virtual HRESULT __stdcall get_AllowManualPositions (
        /*[out,retval]*/ VARIANT_BOOL * bEnabled ) = 0;
      virtual HRESULT __stdcall put_AllowManualPositions (
        /*[in]*/ VARIANT_BOOL bEnabled ) = 0;
      virtual HRESULT __stdcall get_AllowManualHeights (
        /*[out,retval]*/ VARIANT_BOOL * bEnabled ) = 0;
      virtual HRESULT __stdcall put_AllowManualHeights (
        /*[in]*/ VARIANT_BOOL bEnabled ) = 0;
      virtual HRESULT __stdcall get_TableBreakHeight (
        /*[out,retval]*/ double * pHeight ) = 0;
      virtual HRESULT __stdcall put_TableBreakHeight (
        /*[in]*/ double pHeight ) = 0;
      virtual HRESULT __stdcall get_BreakSpacing (
        /*[out,retval]*/ double * pSpacing ) = 0;
      virtual HRESULT __stdcall put_BreakSpacing (
        /*[in]*/ double pSpacing ) = 0;
      virtual HRESULT __stdcall raw_GetColumnName (
        /*[in]*/ int nIndex,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_SetColumnName (
        /*[in]*/ int nIndex,
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_SetToolTip (
        /*[in]*/ int nRow,
        /*[in]*/ int nCol,
        /*[in]*/ BSTR tip ) = 0;
};

struct __declspec(uuid("84618c65-48f9-450e-bbeb-7149909c0ce4"))
IAcadDimArcLength : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetAltUnits,put=PutAltUnits))
    VARIANT_BOOL AltUnits;
    __declspec(property(get=GetAltUnitsPrecision,put=PutAltUnitsPrecision))
    enum AcDimPrecision AltUnitsPrecision;
    __declspec(property(get=GetAltUnitsScale,put=PutAltUnitsScale))
    ACAD_NOUNITS AltUnitsScale;
    __declspec(property(get=GetAltRoundDistance,put=PutAltRoundDistance))
    double AltRoundDistance;
    __declspec(property(get=GetAltTolerancePrecision,put=PutAltTolerancePrecision))
    enum AcDimPrecision AltTolerancePrecision;
    __declspec(property(get=GetAltUnitsFormat,put=PutAltUnitsFormat))
    enum AcDimUnits AltUnitsFormat;
    __declspec(property(get=GetAltTextPrefix,put=PutAltTextPrefix))
    _bstr_t AltTextPrefix;
    __declspec(property(get=GetAltTextSuffix,put=PutAltTextSuffix))
    _bstr_t AltTextSuffix;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetExtensionLineColor,put=PutExtensionLineColor))
    ACAD_COLOR ExtensionLineColor;
    __declspec(property(get=GetPrimaryUnitsPrecision,put=PutPrimaryUnitsPrecision))
    enum AcDimPrecision PrimaryUnitsPrecision;
    __declspec(property(get=GetDimensionLineExtend,put=PutDimensionLineExtend))
    double DimensionLineExtend;
    __declspec(property(get=GetExtensionLineExtend,put=PutExtensionLineExtend))
    double ExtensionLineExtend;
    __declspec(property(get=GetFit,put=PutFit))
    enum AcDimFit Fit;
    __declspec(property(get=GetFractionFormat,put=PutFractionFormat))
    enum AcDimFractionType FractionFormat;
    __declspec(property(get=GetHorizontalTextPosition,put=PutHorizontalTextPosition))
    enum AcDimHorizontalJustification HorizontalTextPosition;
    __declspec(property(get=GetLinearScaleFactor,put=PutLinearScaleFactor))
    ACAD_NOUNITS LinearScaleFactor;
    __declspec(property(get=GetUnitsFormat,put=PutUnitsFormat))
    enum AcDimLUnits UnitsFormat;
    __declspec(property(get=GetExtensionLineWeight,put=PutExtensionLineWeight))
    ACAD_LWEIGHT ExtensionLineWeight;
    __declspec(property(get=GetRoundDistance,put=PutRoundDistance))
    double RoundDistance;
    __declspec(property(get=GetDimLine1Suppress,put=PutDimLine1Suppress))
    VARIANT_BOOL DimLine1Suppress;
    __declspec(property(get=GetDimLine2Suppress,put=PutDimLine2Suppress))
    VARIANT_BOOL DimLine2Suppress;
    __declspec(property(get=GetExtLine1Suppress,put=PutExtLine1Suppress))
    VARIANT_BOOL ExtLine1Suppress;
    __declspec(property(get=GetExtLine2Suppress,put=PutExtLine2Suppress))
    VARIANT_BOOL ExtLine2Suppress;
    __declspec(property(get=GetDimLineInside,put=PutDimLineInside))
    VARIANT_BOOL DimLineInside;
    __declspec(property(get=GetTextInsideAlign,put=PutTextInsideAlign))
    VARIANT_BOOL TextInsideAlign;
    __declspec(property(get=GetTextInside,put=PutTextInside))
    VARIANT_BOOL TextInside;
    __declspec(property(get=GetForceLineInside,put=PutForceLineInside))
    VARIANT_BOOL ForceLineInside;
    __declspec(property(get=GetTextOutsideAlign,put=PutTextOutsideAlign))
    VARIANT_BOOL TextOutsideAlign;
    __declspec(property(get=GetSubUnitsSuffix,put=PutSubUnitsSuffix))
    _bstr_t SubUnitsSuffix;
    __declspec(property(get=GetExtensionLineOffset,put=PutExtensionLineOffset))
    double ExtensionLineOffset;
    __declspec(property(get=GetSubUnitsFactor,put=PutSubUnitsFactor))
    double SubUnitsFactor;
    __declspec(property(get=GetAltSubUnitsSuffix,put=PutAltSubUnitsSuffix))
    _bstr_t AltSubUnitsSuffix;
    __declspec(property(get=GetAltSubUnitsFactor,put=PutAltSubUnitsFactor))
    double AltSubUnitsFactor;
    __declspec(property(get=GetAltSuppressLeadingZeros,put=PutAltSuppressLeadingZeros))
    VARIANT_BOOL AltSuppressLeadingZeros;
    __declspec(property(get=GetAltSuppressTrailingZeros,put=PutAltSuppressTrailingZeros))
    VARIANT_BOOL AltSuppressTrailingZeros;
    __declspec(property(get=GetAltSuppressZeroFeet,put=PutAltSuppressZeroFeet))
    VARIANT_BOOL AltSuppressZeroFeet;
    __declspec(property(get=GetAltSuppressZeroInches,put=PutAltSuppressZeroInches))
    VARIANT_BOOL AltSuppressZeroInches;
    __declspec(property(get=GetAltToleranceSuppressLeadingZeros,put=PutAltToleranceSuppressLeadingZeros))
    VARIANT_BOOL AltToleranceSuppressLeadingZeros;
    __declspec(property(get=GetAltToleranceSuppressTrailingZeros,put=PutAltToleranceSuppressTrailingZeros))
    VARIANT_BOOL AltToleranceSuppressTrailingZeros;
    __declspec(property(get=GetAltToleranceSuppressZeroFeet,put=PutAltToleranceSuppressZeroFeet))
    VARIANT_BOOL AltToleranceSuppressZeroFeet;
    __declspec(property(get=GetAltToleranceSuppressZeroInches,put=PutAltToleranceSuppressZeroInches))
    VARIANT_BOOL AltToleranceSuppressZeroInches;
    __declspec(property(get=GetSuppressZeroFeet,put=PutSuppressZeroFeet))
    VARIANT_BOOL SuppressZeroFeet;
    __declspec(property(get=GetSuppressZeroInches,put=PutSuppressZeroInches))
    VARIANT_BOOL SuppressZeroInches;
    __declspec(property(get=GetToleranceSuppressZeroFeet,put=PutToleranceSuppressZeroFeet))
    VARIANT_BOOL ToleranceSuppressZeroFeet;
    __declspec(property(get=GetToleranceSuppressZeroInches,put=PutToleranceSuppressZeroInches))
    VARIANT_BOOL ToleranceSuppressZeroInches;
    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetArrowhead1Type,put=PutArrowhead1Type))
    enum AcDimArrowheadType Arrowhead1Type;
    __declspec(property(get=GetArrowhead2Type,put=PutArrowhead2Type))
    enum AcDimArrowheadType Arrowhead2Type;
    __declspec(property(get=GetMeasurement))
    double Measurement;
    __declspec(property(get=GetArrowhead1Block,put=PutArrowhead1Block))
    _bstr_t Arrowhead1Block;
    __declspec(property(get=GetArrowhead2Block,put=PutArrowhead2Block))
    _bstr_t Arrowhead2Block;
    __declspec(property(get=GetSymbolPosition,put=PutSymbolPosition))
    enum AcDimArcLengthSymbol SymbolPosition;
    __declspec(property(get=GetArcPoint,put=PutArcPoint))
    _variant_t ArcPoint;
    __declspec(property(get=GetExtLine1Point,put=PutExtLine1Point))
    _variant_t ExtLine1Point;
    __declspec(property(get=GetExtLine2Point,put=PutExtLine2Point))
    _variant_t ExtLine2Point;
    __declspec(property(get=GetCenterPoint,put=PutCenterPoint))
    _variant_t CenterPoint;
    __declspec(property(get=GetLeader1Point,put=PutLeader1Point))
    _variant_t Leader1Point;
    __declspec(property(get=GetLeader2Point,put=PutLeader2Point))
    _variant_t Leader2Point;
    __declspec(property(get=GetIsPartial,put=PutIsPartial))
    VARIANT_BOOL IsPartial;
    __declspec(property(get=GetArcStartParam,put=PutArcStartParam))
    double ArcStartParam;
    __declspec(property(get=GetArcEndParam,put=PutArcEndParam))
    double ArcEndParam;
    __declspec(property(get=GetHasLeader,put=PutHasLeader))
    VARIANT_BOOL HasLeader;
    __declspec(property(get=GetDimensionLinetype,put=PutDimensionLinetype))
    _bstr_t DimensionLinetype;
    __declspec(property(get=GetExtLine1Linetype,put=PutExtLine1Linetype))
    _bstr_t ExtLine1Linetype;
    __declspec(property(get=GetExtLine2Linetype,put=PutExtLine2Linetype))
    _bstr_t ExtLine2Linetype;
    __declspec(property(get=GetExtLineFixedLenSuppress,put=PutExtLineFixedLenSuppress))
    VARIANT_BOOL ExtLineFixedLenSuppress;
    __declspec(property(get=GetExtLineFixedLen,put=PutExtLineFixedLen))
    double ExtLineFixedLen;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAltUnits ( );
    void PutAltUnits (
        VARIANT_BOOL bAlternate );
    enum AcDimPrecision GetAltUnitsPrecision ( );
    void PutAltUnitsPrecision (
        enum AcDimPrecision precision );
    ACAD_NOUNITS GetAltUnitsScale ( );
    void PutAltUnitsScale (
        ACAD_NOUNITS scale );
    double GetAltRoundDistance ( );
    void PutAltRoundDistance (
        double Distance );
    enum AcDimPrecision GetAltTolerancePrecision ( );
    void PutAltTolerancePrecision (
        enum AcDimPrecision Distance );
    enum AcDimUnits GetAltUnitsFormat ( );
    void PutAltUnitsFormat (
        enum AcDimUnits Units );
    _bstr_t GetAltTextPrefix ( );
    void PutAltTextPrefix (
        _bstr_t prefix );
    _bstr_t GetAltTextSuffix ( );
    void PutAltTextSuffix (
        _bstr_t prefix );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );
    ACAD_COLOR GetExtensionLineColor ( );
    void PutExtensionLineColor (
        ACAD_COLOR Type );
    enum AcDimPrecision GetPrimaryUnitsPrecision ( );
    void PutPrimaryUnitsPrecision (
        enum AcDimPrecision Prec );
    double GetDimensionLineExtend ( );
    void PutDimensionLineExtend (
        double extend );
    double GetExtensionLineExtend ( );
    void PutExtensionLineExtend (
        double extend );
    enum AcDimFit GetFit ( );
    void PutFit (
        enum AcDimFit fittype );
    enum AcDimFractionType GetFractionFormat ( );
    void PutFractionFormat (
        enum AcDimFractionType Type );
    enum AcDimHorizontalJustification GetHorizontalTextPosition ( );
    void PutHorizontalTextPosition (
        enum AcDimHorizontalJustification Type );
    ACAD_NOUNITS GetLinearScaleFactor ( );
    void PutLinearScaleFactor (
        ACAD_NOUNITS Type );
    enum AcDimLUnits GetUnitsFormat ( );
    void PutUnitsFormat (
        enum AcDimLUnits format );
    ACAD_LWEIGHT GetExtensionLineWeight ( );
    void PutExtensionLineWeight (
        ACAD_LWEIGHT lweight );
    double GetRoundDistance ( );
    void PutRoundDistance (
        double Distance );
    VARIANT_BOOL GetDimLine1Suppress ( );
    void PutDimLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLine2Suppress ( );
    void PutDimLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine1Suppress ( );
    void PutExtLine1Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetExtLine2Suppress ( );
    void PutExtLine2Suppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetDimLineInside ( );
    void PutDimLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInsideAlign ( );
    void PutTextInsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInside ( );
    void PutTextInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetForceLineInside ( );
    void PutForceLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextOutsideAlign ( );
    void PutTextOutsideAlign (
        VARIANT_BOOL bInside );
    double GetExtensionLineOffset ( );
    void PutExtensionLineOffset (
        double Offset );
    VARIANT_BOOL GetAltSuppressLeadingZeros ( );
    void PutAltSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressTrailingZeros ( );
    void PutAltSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroFeet ( );
    void PutAltSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroInches ( );
    void PutAltSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressLeadingZeros ( );
    void PutAltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressTrailingZeros ( );
    void PutAltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroFeet ( );
    void PutAltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroInches ( );
    void PutAltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroFeet ( );
    void PutSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroInches ( );
    void PutSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroFeet ( );
    void PutToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroInches ( );
    void PutToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowhead1Type ( );
    void PutArrowhead1Type (
        enum AcDimArrowheadType Type );
    enum AcDimArrowheadType GetArrowhead2Type ( );
    void PutArrowhead2Type (
        enum AcDimArrowheadType Type );
    double GetMeasurement ( );
    _bstr_t GetArrowhead1Block ( );
    void PutArrowhead1Block (
        _bstr_t BlockName );
    _bstr_t GetArrowhead2Block ( );
    void PutArrowhead2Block (
        _bstr_t BlockName );
    _variant_t GetArcPoint ( );
    void PutArcPoint (
        const _variant_t & pVal );
    _variant_t GetExtLine1Point ( );
    void PutExtLine1Point (
        const _variant_t & pVal );
    _variant_t GetExtLine2Point ( );
    void PutExtLine2Point (
        const _variant_t & pVal );
    _variant_t GetCenterPoint ( );
    void PutCenterPoint (
        const _variant_t & pVal );
    _variant_t GetLeader1Point ( );
    void PutLeader1Point (
        const _variant_t & pVal );
    _variant_t GetLeader2Point ( );
    void PutLeader2Point (
        const _variant_t & pVal );
    VARIANT_BOOL GetIsPartial ( );
    void PutIsPartial (
        VARIANT_BOOL pVal );
    double GetArcStartParam ( );
    void PutArcStartParam (
        double pVal );
    double GetArcEndParam ( );
    void PutArcEndParam (
        double pVal );
    VARIANT_BOOL GetHasLeader ( );
    void PutHasLeader (
        VARIANT_BOOL pVal );
    enum AcDimArcLengthSymbol GetSymbolPosition ( );
    void PutSymbolPosition (
        enum AcDimArcLengthSymbol Position );
    _bstr_t GetDimensionLinetype ( );
    void PutDimensionLinetype (
        _bstr_t Linetype );
    _bstr_t GetExtLine1Linetype ( );
    void PutExtLine1Linetype (
        _bstr_t Linetype );
    _bstr_t GetExtLine2Linetype ( );
    void PutExtLine2Linetype (
        _bstr_t Linetype );
    VARIANT_BOOL GetExtLineFixedLenSuppress ( );
    void PutExtLineFixedLenSuppress (
        VARIANT_BOOL bFixedLen );
    double GetExtLineFixedLen ( );
    void PutExtLineFixedLen (
        double FixedLen );
    _bstr_t GetSubUnitsSuffix ( );
    void PutSubUnitsSuffix (
        _bstr_t suffix );
    double GetSubUnitsFactor ( );
    void PutSubUnitsFactor (
        double factor );
    _bstr_t GetAltSubUnitsSuffix ( );
    void PutAltSubUnitsSuffix (
        _bstr_t suffix );
    double GetAltSubUnitsFactor ( );
    void PutAltSubUnitsFactor (
        double factor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AltUnits (
        /*[out,retval]*/ VARIANT_BOOL * bAlternate ) = 0;
      virtual HRESULT __stdcall put_AltUnits (
        /*[in]*/ VARIANT_BOOL bAlternate ) = 0;
      virtual HRESULT __stdcall get_AltUnitsPrecision (
        /*[out,retval]*/ enum AcDimPrecision * precision ) = 0;
      virtual HRESULT __stdcall put_AltUnitsPrecision (
        /*[in]*/ enum AcDimPrecision precision ) = 0;
      virtual HRESULT __stdcall get_AltUnitsScale (
        /*[out,retval]*/ ACAD_NOUNITS * scale ) = 0;
      virtual HRESULT __stdcall put_AltUnitsScale (
        /*[in]*/ ACAD_NOUNITS scale ) = 0;
      virtual HRESULT __stdcall get_AltRoundDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_AltRoundDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_AltTolerancePrecision (
        /*[out,retval]*/ enum AcDimPrecision * Distance ) = 0;
      virtual HRESULT __stdcall put_AltTolerancePrecision (
        /*[in]*/ enum AcDimPrecision Distance ) = 0;
      virtual HRESULT __stdcall get_AltUnitsFormat (
        /*[out,retval]*/ enum AcDimUnits * Units ) = 0;
      virtual HRESULT __stdcall put_AltUnitsFormat (
        /*[in]*/ enum AcDimUnits Units ) = 0;
      virtual HRESULT __stdcall get_AltTextPrefix (
        /*[out,retval]*/ BSTR * prefix ) = 0;
      virtual HRESULT __stdcall put_AltTextPrefix (
        /*[in]*/ BSTR prefix ) = 0;
      virtual HRESULT __stdcall get_AltTextSuffix (
        /*[out,retval]*/ BSTR * prefix ) = 0;
      virtual HRESULT __stdcall put_AltTextSuffix (
        /*[in]*/ BSTR prefix ) = 0;
      virtual HRESULT __stdcall get_DimensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * Type ) = 0;
      virtual HRESULT __stdcall put_DimensionLineColor (
        /*[in]*/ ACAD_COLOR Type ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * Type ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineColor (
        /*[in]*/ ACAD_COLOR Type ) = 0;
      virtual HRESULT __stdcall get_PrimaryUnitsPrecision (
        /*[out,retval]*/ enum AcDimPrecision * Prec ) = 0;
      virtual HRESULT __stdcall put_PrimaryUnitsPrecision (
        /*[in]*/ enum AcDimPrecision Prec ) = 0;
      virtual HRESULT __stdcall get_DimensionLineExtend (
        /*[out,retval]*/ double * extend ) = 0;
      virtual HRESULT __stdcall put_DimensionLineExtend (
        /*[in]*/ double extend ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineExtend (
        /*[out,retval]*/ double * extend ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineExtend (
        /*[in]*/ double extend ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ enum AcDimFit * fittype ) = 0;
      virtual HRESULT __stdcall put_Fit (
        /*[in]*/ enum AcDimFit fittype ) = 0;
      virtual HRESULT __stdcall get_FractionFormat (
        /*[out,retval]*/ enum AcDimFractionType * Type ) = 0;
      virtual HRESULT __stdcall put_FractionFormat (
        /*[in]*/ enum AcDimFractionType Type ) = 0;
      virtual HRESULT __stdcall get_HorizontalTextPosition (
        /*[out,retval]*/ enum AcDimHorizontalJustification * Type ) = 0;
      virtual HRESULT __stdcall put_HorizontalTextPosition (
        /*[in]*/ enum AcDimHorizontalJustification Type ) = 0;
      virtual HRESULT __stdcall get_LinearScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * Type ) = 0;
      virtual HRESULT __stdcall put_LinearScaleFactor (
        /*[in]*/ ACAD_NOUNITS Type ) = 0;
      virtual HRESULT __stdcall get_UnitsFormat (
        /*[out,retval]*/ enum AcDimLUnits * format ) = 0;
      virtual HRESULT __stdcall put_UnitsFormat (
        /*[in]*/ enum AcDimLUnits format ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * lweight ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT lweight ) = 0;
      virtual HRESULT __stdcall get_RoundDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_RoundDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_DimLine1Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_DimLine1Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_DimLine2Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_DimLine2Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_ExtLine1Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_ExtLine1Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_ExtLine2Suppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_ExtLine2Suppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_DimLineInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_DimLineInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextInsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_ForceLineInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_ForceLineInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextOutsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextOutsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_ExtensionLineOffset (
        /*[out,retval]*/ double * Offset ) = 0;
      virtual HRESULT __stdcall put_ExtensionLineOffset (
        /*[in]*/ double Offset ) = 0;
      virtual HRESULT __stdcall get_AltSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_DimensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * weight ) = 0;
      virtual HRESULT __stdcall put_DimensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT weight ) = 0;
      virtual HRESULT __stdcall get_ArrowheadSize (
        /*[out,retval]*/ double * size ) = 0;
      virtual HRESULT __stdcall put_ArrowheadSize (
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall get_Arrowhead1Type (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_Arrowhead1Type (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_Arrowhead2Type (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_Arrowhead2Type (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_Measurement (
        /*[out,retval]*/ double * bVal ) = 0;
      virtual HRESULT __stdcall get_Arrowhead1Block (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_Arrowhead1Block (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_Arrowhead2Block (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_Arrowhead2Block (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_ArcPoint (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ArcPoint (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ExtLine1Point (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ExtLine1Point (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ExtLine2Point (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ExtLine2Point (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_CenterPoint (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterPoint (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Leader1Point (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Leader1Point (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Leader2Point (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Leader2Point (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_IsPartial (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPartial (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ArcStartParam (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ArcStartParam (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ArcEndParam (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ArcEndParam (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasLeader (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HasLeader (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SymbolPosition (
        /*[out,retval]*/ enum AcDimArcLengthSymbol * Position ) = 0;
      virtual HRESULT __stdcall put_SymbolPosition (
        /*[in]*/ enum AcDimArcLengthSymbol Position ) = 0;
      virtual HRESULT __stdcall get_DimensionLinetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_DimensionLinetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLine1Linetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_ExtLine1Linetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLine2Linetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_ExtLine2Linetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_ExtLineFixedLenSuppress (
        /*[out,retval]*/ VARIANT_BOOL * bFixedLen ) = 0;
      virtual HRESULT __stdcall put_ExtLineFixedLenSuppress (
        /*[in]*/ VARIANT_BOOL bFixedLen ) = 0;
      virtual HRESULT __stdcall get_ExtLineFixedLen (
        /*[out,retval]*/ double * FixedLen ) = 0;
      virtual HRESULT __stdcall put_ExtLineFixedLen (
        /*[in]*/ double FixedLen ) = 0;
      virtual HRESULT __stdcall get_SubUnitsSuffix (
        /*[out,retval]*/ BSTR * suffix ) = 0;
      virtual HRESULT __stdcall put_SubUnitsSuffix (
        /*[in]*/ BSTR suffix ) = 0;
      virtual HRESULT __stdcall get_SubUnitsFactor (
        /*[out,retval]*/ double * factor ) = 0;
      virtual HRESULT __stdcall put_SubUnitsFactor (
        /*[in]*/ double factor ) = 0;
      virtual HRESULT __stdcall get_AltSubUnitsSuffix (
        /*[out,retval]*/ BSTR * suffix ) = 0;
      virtual HRESULT __stdcall put_AltSubUnitsSuffix (
        /*[in]*/ BSTR suffix ) = 0;
      virtual HRESULT __stdcall get_AltSubUnitsFactor (
        /*[out,retval]*/ double * factor ) = 0;
      virtual HRESULT __stdcall put_AltSubUnitsFactor (
        /*[in]*/ double factor ) = 0;
};

struct __declspec(uuid("fbd4807f-e100-4326-ae79-ff93f5dfc2f3"))
IAcadDimRadialLarge : IAcadDimension
{
    //
    // Property data
    //

    __declspec(property(get=GetAltUnits,put=PutAltUnits))
    VARIANT_BOOL AltUnits;
    __declspec(property(get=GetAltUnitsPrecision,put=PutAltUnitsPrecision))
    enum AcDimPrecision AltUnitsPrecision;
    __declspec(property(get=GetAltUnitsScale,put=PutAltUnitsScale))
    ACAD_NOUNITS AltUnitsScale;
    __declspec(property(get=GetAltRoundDistance,put=PutAltRoundDistance))
    double AltRoundDistance;
    __declspec(property(get=GetAltTolerancePrecision,put=PutAltTolerancePrecision))
    enum AcDimPrecision AltTolerancePrecision;
    __declspec(property(get=GetAltUnitsFormat,put=PutAltUnitsFormat))
    enum AcDimUnits AltUnitsFormat;
    __declspec(property(get=GetAltTextPrefix,put=PutAltTextPrefix))
    _bstr_t AltTextPrefix;
    __declspec(property(get=GetAltTextSuffix,put=PutAltTextSuffix))
    _bstr_t AltTextSuffix;
    __declspec(property(get=GetDimensionLineColor,put=PutDimensionLineColor))
    ACAD_COLOR DimensionLineColor;
    __declspec(property(get=GetPrimaryUnitsPrecision,put=PutPrimaryUnitsPrecision))
    enum AcDimPrecision PrimaryUnitsPrecision;
    __declspec(property(get=GetFit,put=PutFit))
    enum AcDimFit Fit;
    __declspec(property(get=GetFractionFormat,put=PutFractionFormat))
    enum AcDimFractionType FractionFormat;
    __declspec(property(get=GetLinearScaleFactor,put=PutLinearScaleFactor))
    ACAD_NOUNITS LinearScaleFactor;
    __declspec(property(get=GetUnitsFormat,put=PutUnitsFormat))
    enum AcDimLUnits UnitsFormat;
    __declspec(property(get=GetRoundDistance,put=PutRoundDistance))
    double RoundDistance;
    __declspec(property(get=GetDimLineSuppress,put=PutDimLineSuppress))
    VARIANT_BOOL DimLineSuppress;
    __declspec(property(get=GetTextInsideAlign,put=PutTextInsideAlign))
    VARIANT_BOOL TextInsideAlign;
    __declspec(property(get=GetTextInside,put=PutTextInside))
    VARIANT_BOOL TextInside;
    __declspec(property(get=GetForceLineInside,put=PutForceLineInside))
    VARIANT_BOOL ForceLineInside;
    __declspec(property(get=GetTextOutsideAlign,put=PutTextOutsideAlign))
    VARIANT_BOOL TextOutsideAlign;
    __declspec(property(get=GetCenterType,put=PutCenterType))
    enum AcDimCenterType CenterType;
    __declspec(property(get=GetCenterMarkSize,put=PutCenterMarkSize))
    double CenterMarkSize;
    __declspec(property(get=GetAltSuppressLeadingZeros,put=PutAltSuppressLeadingZeros))
    VARIANT_BOOL AltSuppressLeadingZeros;
    __declspec(property(get=GetAltSuppressTrailingZeros,put=PutAltSuppressTrailingZeros))
    VARIANT_BOOL AltSuppressTrailingZeros;
    __declspec(property(get=GetAltSuppressZeroFeet,put=PutAltSuppressZeroFeet))
    VARIANT_BOOL AltSuppressZeroFeet;
    __declspec(property(get=GetAltSuppressZeroInches,put=PutAltSuppressZeroInches))
    VARIANT_BOOL AltSuppressZeroInches;
    __declspec(property(get=GetAltToleranceSuppressLeadingZeros,put=PutAltToleranceSuppressLeadingZeros))
    VARIANT_BOOL AltToleranceSuppressLeadingZeros;
    __declspec(property(get=GetAltToleranceSuppressTrailingZeros,put=PutAltToleranceSuppressTrailingZeros))
    VARIANT_BOOL AltToleranceSuppressTrailingZeros;
    __declspec(property(get=GetAltToleranceSuppressZeroFeet,put=PutAltToleranceSuppressZeroFeet))
    VARIANT_BOOL AltToleranceSuppressZeroFeet;
    __declspec(property(get=GetAltToleranceSuppressZeroInches,put=PutAltToleranceSuppressZeroInches))
    VARIANT_BOOL AltToleranceSuppressZeroInches;
    __declspec(property(get=GetSuppressZeroFeet,put=PutSuppressZeroFeet))
    VARIANT_BOOL SuppressZeroFeet;
    __declspec(property(get=GetSuppressZeroInches,put=PutSuppressZeroInches))
    VARIANT_BOOL SuppressZeroInches;
    __declspec(property(get=GetToleranceSuppressZeroFeet,put=PutToleranceSuppressZeroFeet))
    VARIANT_BOOL ToleranceSuppressZeroFeet;
    __declspec(property(get=GetToleranceSuppressZeroInches,put=PutToleranceSuppressZeroInches))
    VARIANT_BOOL ToleranceSuppressZeroInches;
    __declspec(property(get=GetDimensionLineWeight,put=PutDimensionLineWeight))
    ACAD_LWEIGHT DimensionLineWeight;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetArrowheadType,put=PutArrowheadType))
    enum AcDimArrowheadType ArrowheadType;
    __declspec(property(get=GetMeasurement))
    double Measurement;
    __declspec(property(get=GetArrowheadBlock,put=PutArrowheadBlock))
    _bstr_t ArrowheadBlock;
    __declspec(property(get=GetOverrideCenter,put=PutOverrideCenter))
    _variant_t OverrideCenter;
    __declspec(property(get=GetJogLocation,put=PutJogLocation))
    _variant_t JogLocation;
    __declspec(property(get=GetJogAngle,put=PutJogAngle))
    ACAD_ANGLE JogAngle;
    __declspec(property(get=GetCenter,put=PutCenter))
    _variant_t Center;
    __declspec(property(get=GetChordPoint,put=PutChordPoint))
    _variant_t ChordPoint;
    __declspec(property(get=GetDimensionLinetype,put=PutDimensionLinetype))
    _bstr_t DimensionLinetype;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAltUnits ( );
    void PutAltUnits (
        VARIANT_BOOL bAlternate );
    enum AcDimPrecision GetAltUnitsPrecision ( );
    void PutAltUnitsPrecision (
        enum AcDimPrecision precision );
    ACAD_NOUNITS GetAltUnitsScale ( );
    void PutAltUnitsScale (
        ACAD_NOUNITS scale );
    double GetAltRoundDistance ( );
    void PutAltRoundDistance (
        double Distance );
    enum AcDimPrecision GetAltTolerancePrecision ( );
    void PutAltTolerancePrecision (
        enum AcDimPrecision Distance );
    enum AcDimUnits GetAltUnitsFormat ( );
    void PutAltUnitsFormat (
        enum AcDimUnits Units );
    _bstr_t GetAltTextPrefix ( );
    void PutAltTextPrefix (
        _bstr_t prefix );
    _bstr_t GetAltTextSuffix ( );
    void PutAltTextSuffix (
        _bstr_t prefix );
    enum AcDimCenterType GetCenterType ( );
    void PutCenterType (
        enum AcDimCenterType Type );
    double GetCenterMarkSize ( );
    void PutCenterMarkSize (
        double Type );
    ACAD_COLOR GetDimensionLineColor ( );
    void PutDimensionLineColor (
        ACAD_COLOR Type );
    enum AcDimPrecision GetPrimaryUnitsPrecision ( );
    void PutPrimaryUnitsPrecision (
        enum AcDimPrecision Prec );
    enum AcDimFractionType GetFractionFormat ( );
    void PutFractionFormat (
        enum AcDimFractionType Type );
    enum AcDimFit GetFit ( );
    void PutFit (
        enum AcDimFit fittype );
    ACAD_NOUNITS GetLinearScaleFactor ( );
    void PutLinearScaleFactor (
        ACAD_NOUNITS Type );
    enum AcDimLUnits GetUnitsFormat ( );
    void PutUnitsFormat (
        enum AcDimLUnits format );
    double GetRoundDistance ( );
    void PutRoundDistance (
        double Distance );
    VARIANT_BOOL GetDimLineSuppress ( );
    void PutDimLineSuppress (
        VARIANT_BOOL bSuppress );
    VARIANT_BOOL GetTextInsideAlign ( );
    void PutTextInsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextInside ( );
    void PutTextInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetForceLineInside ( );
    void PutForceLineInside (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetTextOutsideAlign ( );
    void PutTextOutsideAlign (
        VARIANT_BOOL bInside );
    VARIANT_BOOL GetAltSuppressLeadingZeros ( );
    void PutAltSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressTrailingZeros ( );
    void PutAltSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroFeet ( );
    void PutAltSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltSuppressZeroInches ( );
    void PutAltSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressLeadingZeros ( );
    void PutAltToleranceSuppressLeadingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressTrailingZeros ( );
    void PutAltToleranceSuppressTrailingZeros (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroFeet ( );
    void PutAltToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetAltToleranceSuppressZeroInches ( );
    void PutAltToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroFeet ( );
    void PutSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetSuppressZeroInches ( );
    void PutSuppressZeroInches (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroFeet ( );
    void PutToleranceSuppressZeroFeet (
        VARIANT_BOOL bVal );
    VARIANT_BOOL GetToleranceSuppressZeroInches ( );
    void PutToleranceSuppressZeroInches (
        VARIANT_BOOL bVal );
    ACAD_LWEIGHT GetDimensionLineWeight ( );
    void PutDimensionLineWeight (
        ACAD_LWEIGHT weight );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    enum AcDimArrowheadType GetArrowheadType ( );
    void PutArrowheadType (
        enum AcDimArrowheadType Type );
    double GetMeasurement ( );
    _bstr_t GetArrowheadBlock ( );
    void PutArrowheadBlock (
        _bstr_t BlockName );
    _variant_t GetOverrideCenter ( );
    void PutOverrideCenter (
        const _variant_t & overrideCenterPos );
    _variant_t GetJogLocation ( );
    void PutJogLocation (
        const _variant_t & jogPos );
    ACAD_ANGLE GetJogAngle ( );
    void PutJogAngle (
        ACAD_ANGLE JogAngle );
    _variant_t GetCenter ( );
    void PutCenter (
        const _variant_t & pVar );
    _variant_t GetChordPoint ( );
    void PutChordPoint (
        const _variant_t & pVal );
    _bstr_t GetDimensionLinetype ( );
    void PutDimensionLinetype (
        _bstr_t Linetype );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AltUnits (
        /*[out,retval]*/ VARIANT_BOOL * bAlternate ) = 0;
      virtual HRESULT __stdcall put_AltUnits (
        /*[in]*/ VARIANT_BOOL bAlternate ) = 0;
      virtual HRESULT __stdcall get_AltUnitsPrecision (
        /*[out,retval]*/ enum AcDimPrecision * precision ) = 0;
      virtual HRESULT __stdcall put_AltUnitsPrecision (
        /*[in]*/ enum AcDimPrecision precision ) = 0;
      virtual HRESULT __stdcall get_AltUnitsScale (
        /*[out,retval]*/ ACAD_NOUNITS * scale ) = 0;
      virtual HRESULT __stdcall put_AltUnitsScale (
        /*[in]*/ ACAD_NOUNITS scale ) = 0;
      virtual HRESULT __stdcall get_AltRoundDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_AltRoundDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_AltTolerancePrecision (
        /*[out,retval]*/ enum AcDimPrecision * Distance ) = 0;
      virtual HRESULT __stdcall put_AltTolerancePrecision (
        /*[in]*/ enum AcDimPrecision Distance ) = 0;
      virtual HRESULT __stdcall get_AltUnitsFormat (
        /*[out,retval]*/ enum AcDimUnits * Units ) = 0;
      virtual HRESULT __stdcall put_AltUnitsFormat (
        /*[in]*/ enum AcDimUnits Units ) = 0;
      virtual HRESULT __stdcall get_AltTextPrefix (
        /*[out,retval]*/ BSTR * prefix ) = 0;
      virtual HRESULT __stdcall put_AltTextPrefix (
        /*[in]*/ BSTR prefix ) = 0;
      virtual HRESULT __stdcall get_AltTextSuffix (
        /*[out,retval]*/ BSTR * prefix ) = 0;
      virtual HRESULT __stdcall put_AltTextSuffix (
        /*[in]*/ BSTR prefix ) = 0;
      virtual HRESULT __stdcall get_CenterType (
        /*[out,retval]*/ enum AcDimCenterType * Type ) = 0;
      virtual HRESULT __stdcall put_CenterType (
        /*[in]*/ enum AcDimCenterType Type ) = 0;
      virtual HRESULT __stdcall get_CenterMarkSize (
        /*[out,retval]*/ double * Type ) = 0;
      virtual HRESULT __stdcall put_CenterMarkSize (
        /*[in]*/ double Type ) = 0;
      virtual HRESULT __stdcall get_DimensionLineColor (
        /*[out,retval]*/ ACAD_COLOR * Type ) = 0;
      virtual HRESULT __stdcall put_DimensionLineColor (
        /*[in]*/ ACAD_COLOR Type ) = 0;
      virtual HRESULT __stdcall get_PrimaryUnitsPrecision (
        /*[out,retval]*/ enum AcDimPrecision * Prec ) = 0;
      virtual HRESULT __stdcall put_PrimaryUnitsPrecision (
        /*[in]*/ enum AcDimPrecision Prec ) = 0;
      virtual HRESULT __stdcall get_FractionFormat (
        /*[out,retval]*/ enum AcDimFractionType * Type ) = 0;
      virtual HRESULT __stdcall put_FractionFormat (
        /*[in]*/ enum AcDimFractionType Type ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ enum AcDimFit * fittype ) = 0;
      virtual HRESULT __stdcall put_Fit (
        /*[in]*/ enum AcDimFit fittype ) = 0;
      virtual HRESULT __stdcall get_LinearScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * Type ) = 0;
      virtual HRESULT __stdcall put_LinearScaleFactor (
        /*[in]*/ ACAD_NOUNITS Type ) = 0;
      virtual HRESULT __stdcall get_UnitsFormat (
        /*[out,retval]*/ enum AcDimLUnits * format ) = 0;
      virtual HRESULT __stdcall put_UnitsFormat (
        /*[in]*/ enum AcDimLUnits format ) = 0;
      virtual HRESULT __stdcall get_RoundDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_RoundDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_DimLineSuppress (
        /*[out,retval]*/ VARIANT_BOOL * bSuppress ) = 0;
      virtual HRESULT __stdcall put_DimLineSuppress (
        /*[in]*/ VARIANT_BOOL bSuppress ) = 0;
      virtual HRESULT __stdcall get_TextInsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_ForceLineInside (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_ForceLineInside (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_TextOutsideAlign (
        /*[out,retval]*/ VARIANT_BOOL * bInside ) = 0;
      virtual HRESULT __stdcall put_TextOutsideAlign (
        /*[in]*/ VARIANT_BOOL bInside ) = 0;
      virtual HRESULT __stdcall get_AltSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressLeadingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressTrailingZeros (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_AltToleranceSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_AltToleranceSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_SuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_SuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressZeroFeet (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressZeroFeet (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceSuppressZeroInches (
        /*[out,retval]*/ VARIANT_BOOL * bVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceSuppressZeroInches (
        /*[in]*/ VARIANT_BOOL bVal ) = 0;
      virtual HRESULT __stdcall get_DimensionLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * weight ) = 0;
      virtual HRESULT __stdcall put_DimensionLineWeight (
        /*[in]*/ ACAD_LWEIGHT weight ) = 0;
      virtual HRESULT __stdcall get_ArrowheadSize (
        /*[out,retval]*/ double * size ) = 0;
      virtual HRESULT __stdcall put_ArrowheadSize (
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall get_ArrowheadType (
        /*[out,retval]*/ enum AcDimArrowheadType * Type ) = 0;
      virtual HRESULT __stdcall put_ArrowheadType (
        /*[in]*/ enum AcDimArrowheadType Type ) = 0;
      virtual HRESULT __stdcall get_Measurement (
        /*[out,retval]*/ double * bVal ) = 0;
      virtual HRESULT __stdcall get_ArrowheadBlock (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_ArrowheadBlock (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_OverrideCenter (
        /*[out,retval]*/ VARIANT * overrideCenterPos ) = 0;
      virtual HRESULT __stdcall put_OverrideCenter (
        /*[in]*/ VARIANT overrideCenterPos ) = 0;
      virtual HRESULT __stdcall get_JogLocation (
        /*[out,retval]*/ VARIANT * jogPos ) = 0;
      virtual HRESULT __stdcall put_JogLocation (
        /*[in]*/ VARIANT jogPos ) = 0;
      virtual HRESULT __stdcall get_JogAngle (
        /*[out,retval]*/ ACAD_ANGLE * JogAngle ) = 0;
      virtual HRESULT __stdcall put_JogAngle (
        /*[in]*/ ACAD_ANGLE JogAngle ) = 0;
      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ VARIANT * pVar ) = 0;
      virtual HRESULT __stdcall put_Center (
        /*[in]*/ VARIANT pVar ) = 0;
      virtual HRESULT __stdcall get_ChordPoint (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ChordPoint (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_DimensionLinetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_DimensionLinetype (
        /*[in]*/ BSTR Linetype ) = 0;
};

struct __declspec(uuid("a240ec7f-14cf-4da1-b3d4-74b9062895da"))
IAcadSectionSettings : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrentSectionType,put=PutCurrentSectionType))
    enum AcSectionType CurrentSectionType;

    //
    // Wrapper methods for error-handling
    //

    enum AcSectionType GetCurrentSectionType ( );
    void PutCurrentSectionType (
        enum AcSectionType pVal );
    IAcadSectionTypeSettingsPtr GetSectionTypeSettings (
        enum AcSectionType secType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CurrentSectionType (
        /*[out,retval]*/ enum AcSectionType * pVal ) = 0;
      virtual HRESULT __stdcall put_CurrentSectionType (
        /*[in]*/ enum AcSectionType pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSectionTypeSettings (
        /*[in]*/ enum AcSectionType secType,
        /*[out,retval]*/ struct IAcadSectionTypeSettings * * pUnk ) = 0;
};

struct __declspec(uuid("23ab4987-f991-408c-a2e9-1c77b50befc3"))
IAcadSection : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetState,put=PutState))
    enum AcSectionState State;
    __declspec(property(get=GetViewingDirection,put=PutViewingDirection))
    _variant_t ViewingDirection;
    __declspec(property(get=GetVerticalDirection,put=PutVerticalDirection))
    _variant_t VerticalDirection;
    __declspec(property(get=GetNormal))
    _variant_t Normal;
    __declspec(property(get=GetLiveSectionEnabled,put=PutLiveSectionEnabled))
    VARIANT_BOOL LiveSectionEnabled;
    __declspec(property(get=GetIndicatorTransparency,put=PutIndicatorTransparency))
    int IndicatorTransparency;
    __declspec(property(get=GetIndicatorFillColor,put=PutIndicatorFillColor))
    IAcadAcCmColorPtr IndicatorFillColor;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetTopHeight,put=PutTopHeight))
    double TopHeight;
    __declspec(property(get=GetBottomHeight,put=PutBottomHeight))
    double BottomHeight;
    __declspec(property(get=GetNumVertices))
    int NumVertices;
    __declspec(property(get=GetVertices,put=PutVertices))
    _variant_t Vertices;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];
    __declspec(property(get=GetSettings))
    IAcadSectionSettingsPtr Settings;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pbstrName );
    enum AcSectionState GetState ( );
    void PutState (
        enum AcSectionState pVal );
    _variant_t GetViewingDirection ( );
    void PutViewingDirection (
        const _variant_t & pVal );
    _variant_t GetVerticalDirection ( );
    void PutVerticalDirection (
        const _variant_t & pVal );
    _variant_t GetNormal ( );
    VARIANT_BOOL GetLiveSectionEnabled ( );
    void PutLiveSectionEnabled (
        VARIANT_BOOL pVal );
    int GetIndicatorTransparency ( );
    void PutIndicatorTransparency (
        int pVal );
    IAcadAcCmColorPtr GetIndicatorFillColor ( );
    void PutIndicatorFillColor (
        struct IAcadAcCmColor * pColor );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetTopHeight ( );
    void PutTopHeight (
        double pVal );
    double GetBottomHeight ( );
    void PutBottomHeight (
        double pVal );
    int GetNumVertices ( );
    _variant_t GetVertices ( );
    void PutVertices (
        const _variant_t & pVal );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );
    HRESULT AddVertex (
        int nIndex,
        const _variant_t & val );
    HRESULT RemoveVertex (
        int nIndex );
    HRESULT HitTest (
        const _variant_t & varPtHit,
        VARIANT_BOOL * pHit,
        int * pSegmentIndex,
        VARIANT * pPtOnSegment,
        enum AcSectionSubItem * pSubItem );
    HRESULT CreateJog (
        const _variant_t & varPt );
    IAcadSectionSettingsPtr GetSettings ( );
    HRESULT GenerateSectionGeometry (
        struct IAcadEntity * pEntity,
        VARIANT * pIntersectionBoundaryObjs,
        VARIANT * pIntersectionFillObjs,
        VARIANT * pBackgroudnObjs,
        VARIANT * pForegroudObjs,
        VARIANT * pCurveTangencyObjs );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pbstrName ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum AcSectionState * pVal ) = 0;
      virtual HRESULT __stdcall put_State (
        /*[in]*/ enum AcSectionState pVal ) = 0;
      virtual HRESULT __stdcall get_ViewingDirection (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewingDirection (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_VerticalDirection (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_VerticalDirection (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_LiveSectionEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LiveSectionEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IndicatorTransparency (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_IndicatorTransparency (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_IndicatorFillColor (
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall put_IndicatorFillColor (
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TopHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TopHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BottomHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BottomHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NumVertices (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertices (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Coordinate (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Coordinate (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ int nIndex,
        /*[in]*/ VARIANT val ) = 0;
      virtual HRESULT __stdcall raw_RemoveVertex (
        /*[in]*/ int nIndex ) = 0;
      virtual HRESULT __stdcall raw_HitTest (
        /*[in]*/ VARIANT varPtHit,
        /*[out]*/ VARIANT_BOOL * pHit,
        /*[out]*/ int * pSegmentIndex,
        /*[out]*/ VARIANT * pPtOnSegment,
        /*[out]*/ enum AcSectionSubItem * pSubItem ) = 0;
      virtual HRESULT __stdcall raw_CreateJog (
        /*[in]*/ VARIANT varPt ) = 0;
      virtual HRESULT __stdcall get_Settings (
        /*[out,retval]*/ struct IAcadSectionSettings * * pUnk ) = 0;
      virtual HRESULT __stdcall raw_GenerateSectionGeometry (
        /*[in]*/ struct IAcadEntity * pEntity,
        /*[out]*/ VARIANT * pIntersectionBoundaryObjs,
        /*[out]*/ VARIANT * pIntersectionFillObjs,
        /*[out]*/ VARIANT * pBackgroudnObjs,
        /*[out]*/ VARIANT * pForegroudObjs,
        /*[out]*/ VARIANT * pCurveTangencyObjs ) = 0;
};

struct __declspec(uuid("8ee08989-6f86-4685-99c4-3f48a1242bd8"))
IAcadMLeader : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLeaderType,put=PutLeaderType))
    enum AcMLeaderType LeaderType;
    __declspec(property(get=GetLeaderLineColor,put=PutLeaderLineColor))
    IAcadAcCmColorPtr LeaderLineColor;
    __declspec(property(get=GetLeaderLinetype,put=PutLeaderLinetype))
    ACAD_LTYPE LeaderLinetype;
    __declspec(property(get=GetLeaderLineWeight,put=PutLeaderLineWeight))
    ACAD_LWEIGHT LeaderLineWeight;
    __declspec(property(get=GetArrowheadType,put=PutArrowheadType))
    enum AcDimArrowheadType ArrowheadType;
    __declspec(property(get=GetArrowheadSize,put=PutArrowheadSize))
    double ArrowheadSize;
    __declspec(property(get=GetDogLegged,put=PutDogLegged))
    VARIANT_BOOL DogLegged;
    __declspec(property(get=GetDoglegLength,put=PutDoglegLength))
    double DoglegLength;
    __declspec(property(get=GetContentBlockName,put=PutContentBlockName))
    _bstr_t ContentBlockName;
    __declspec(property(get=GetBlockConnectionType,put=PutBlockConnectionType))
    enum AcBlockConnectionType BlockConnectionType;
    __declspec(property(get=GetTextString,put=PutTextString))
    _bstr_t TextString;
    __declspec(property(get=GetTextStyleName,put=PutTextStyleName))
    _bstr_t TextStyleName;
    __declspec(property(get=GetTextJustify,put=PutTextJustify))
    enum AcAttachmentPoint TextJustify;
    __declspec(property(get=GetTextDirection,put=PutTextDirection))
    enum AcDrawingDirection TextDirection;
    __declspec(property(get=GetTextWidth,put=PutTextWidth))
    double TextWidth;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;
    __declspec(property(get=GetTextRotation,put=PutTextRotation))
    ACAD_ANGLE TextRotation;
    __declspec(property(get=GetTextLineSpacingFactor,put=PutTextLineSpacingFactor))
    double TextLineSpacingFactor;
    __declspec(property(get=GetTextLineSpacingDistance,put=PutTextLineSpacingDistance))
    double TextLineSpacingDistance;
    __declspec(property(get=GetTextLineSpacingStyle,put=PutTextLineSpacingStyle))
    enum AcLineSpacingStyle TextLineSpacingStyle;
    __declspec(property(get=GetTextBackgroundFill,put=PutTextBackgroundFill))
    VARIANT_BOOL TextBackgroundFill;
    __declspec(property(get=GetTextLeftAttachmentType,put=PutTextLeftAttachmentType))
    enum AcTextAttachmentType TextLeftAttachmentType;
    __declspec(property(get=GetLandingGap,put=PutLandingGap))
    double LandingGap;
    __declspec(property(get=GetArrowheadBlock,put=PutArrowheadBlock))
    _bstr_t ArrowheadBlock;
    __declspec(property(get=GetContentBlockType,put=PutContentBlockType))
    enum AcPredefBlockType ContentBlockType;
    __declspec(property(get=GetLeaderCount))
    int LeaderCount;
    __declspec(property(get=GetContentType,put=PutContentType))
    enum AcMLeaderContentType ContentType;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetTextFrameDisplay,put=PutTextFrameDisplay))
    VARIANT_BOOL TextFrameDisplay;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetTextRightAttachmentType,put=PutTextRightAttachmentType))
    enum AcTextAttachmentType TextRightAttachmentType;
    __declspec(property(get=GetTextAttachmentDirection,put=PutTextAttachmentDirection))
    enum AcTextAttachmentDirection TextAttachmentDirection;
    __declspec(property(get=GetTextTopAttachmentType,put=PutTextTopAttachmentType))
    enum AcVerticalTextAttachmentType TextTopAttachmentType;
    __declspec(property(get=GetTextBottomAttachmentType,put=PutTextBottomAttachmentType))
    enum AcVerticalTextAttachmentType TextBottomAttachmentType;
    __declspec(property(get=GetBlockScale,put=PutBlockScale))
    ACAD_NOUNITS BlockScale;

    //
    // Wrapper methods for error-handling
    //

    double GetScaleFactor ( );
    void PutScaleFactor (
        double scale );
    enum AcMLeaderType GetLeaderType ( );
    void PutLeaderType (
        enum AcMLeaderType Type );
    IAcadAcCmColorPtr GetLeaderLineColor ( );
    void PutLeaderLineColor (
        struct IAcadAcCmColor * Type );
    ACAD_LTYPE GetLeaderLinetype ( );
    void PutLeaderLinetype (
        ACAD_LTYPE Linetype );
    ACAD_LWEIGHT GetLeaderLineWeight ( );
    void PutLeaderLineWeight (
        ACAD_LWEIGHT Lineweight );
    enum AcDimArrowheadType GetArrowheadType ( );
    void PutArrowheadType (
        enum AcDimArrowheadType BlockName );
    double GetArrowheadSize ( );
    void PutArrowheadSize (
        double size );
    VARIANT_BOOL GetDogLegged ( );
    void PutDogLegged (
        VARIANT_BOOL val );
    double GetDoglegLength ( );
    void PutDoglegLength (
        double DoglegLength );
    _bstr_t GetContentBlockName ( );
    void PutContentBlockName (
        _bstr_t BlockName );
    enum AcBlockConnectionType GetBlockConnectionType ( );
    void PutBlockConnectionType (
        enum AcBlockConnectionType Type );
    ACAD_NOUNITS GetBlockScale ( );
    void PutBlockScale (
        ACAD_NOUNITS factor );
    _bstr_t GetTextString ( );
    void PutTextString (
        _bstr_t bstrText );
    _bstr_t GetTextStyleName ( );
    void PutTextStyleName (
        _bstr_t bstrName );
    enum AcAttachmentPoint GetTextJustify ( );
    void PutTextJustify (
        enum AcAttachmentPoint attPoint );
    enum AcDrawingDirection GetTextDirection ( );
    void PutTextDirection (
        enum AcDrawingDirection drawDir );
    double GetTextWidth ( );
    void PutTextWidth (
        double Width );
    double GetTextHeight ( );
    void PutTextHeight (
        double Height );
    ACAD_ANGLE GetTextRotation ( );
    void PutTextRotation (
        ACAD_ANGLE rotAngle );
    double GetTextLineSpacingFactor ( );
    void PutTextLineSpacingFactor (
        double factor );
    double GetTextLineSpacingDistance ( );
    void PutTextLineSpacingDistance (
        double Value );
    enum AcLineSpacingStyle GetTextLineSpacingStyle ( );
    void PutTextLineSpacingStyle (
        enum AcLineSpacingStyle style );
    VARIANT_BOOL GetTextBackgroundFill ( );
    void PutTextBackgroundFill (
        VARIANT_BOOL bUseBackgroundFill );
    enum AcTextAttachmentDirection GetTextAttachmentDirection ( );
    void PutTextAttachmentDirection (
        enum AcTextAttachmentDirection dir );
    enum AcTextAttachmentType GetTextLeftAttachmentType ( );
    void PutTextLeftAttachmentType (
        enum AcTextAttachmentType Type );
    enum AcTextAttachmentType GetTextRightAttachmentType ( );
    void PutTextRightAttachmentType (
        enum AcTextAttachmentType Type );
    enum AcVerticalTextAttachmentType GetTextTopAttachmentType ( );
    void PutTextTopAttachmentType (
        enum AcVerticalTextAttachmentType Type );
    enum AcVerticalTextAttachmentType GetTextBottomAttachmentType ( );
    void PutTextBottomAttachmentType (
        enum AcVerticalTextAttachmentType Type );
    double GetLandingGap ( );
    void PutLandingGap (
        double gap );
    _bstr_t GetArrowheadBlock ( );
    void PutArrowheadBlock (
        _bstr_t BlockName );
    enum AcPredefBlockType GetContentBlockType ( );
    void PutContentBlockType (
        enum AcPredefBlockType Type );
    int GetLeaderCount ( );
    int AddLeader ( );
    HRESULT RemoveLeader (
        int leaderIndex );
    int AddLeaderLine (
        int leaderIndex,
        const _variant_t & pointArray );
    int AddLeaderLineEx (
        const _variant_t & pointArray );
    HRESULT RemoveLeaderLine (
        int leaderLineIndex );
    HRESULT SetLeaderLineVertices (
        int leaderLineIndex,
        const _variant_t & pointArray );
    _variant_t GetLeaderLineVertices (
        int leaderLineIndex );
    void PutContentType (
        enum AcMLeaderContentType Type );
    enum AcMLeaderContentType GetContentType ( );
    int GetLeaderIndex (
        int leaderLineIndex );
    _variant_t GetLeaderLineIndexes (
        int leaderIndex );
    int GetVertexCount (
        int leaderLineIndex );
    VARIANT_BOOL GetTextFrameDisplay ( );
    void PutTextFrameDisplay (
        VARIANT_BOOL pVal );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t Name );
    _variant_t GetDoglegDirection (
        int leaderIndex );
    HRESULT SetDoglegDirection (
        int leaderIndex,
        const _variant_t & dirVec );
    _bstr_t GetBlockAttributeValue (
        LONG_PTR attdefId );
    HRESULT SetBlockAttributeValue (
        LONG_PTR attdefId,
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * scale ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double scale ) = 0;
      virtual HRESULT __stdcall get_LeaderType (
        /*[out,retval]*/ enum AcMLeaderType * Type ) = 0;
      virtual HRESULT __stdcall put_LeaderType (
        /*[in]*/ enum AcMLeaderType Type ) = 0;
      virtual HRESULT __stdcall get_LeaderLineColor (
        /*[out,retval]*/ struct IAcadAcCmColor * * Type ) = 0;
      virtual HRESULT __stdcall put_LeaderLineColor (
        /*[in]*/ struct IAcadAcCmColor * Type ) = 0;
      virtual HRESULT __stdcall get_LeaderLinetype (
        /*[out,retval]*/ ACAD_LTYPE * Linetype ) = 0;
      virtual HRESULT __stdcall put_LeaderLinetype (
        /*[in]*/ ACAD_LTYPE Linetype ) = 0;
      virtual HRESULT __stdcall get_LeaderLineWeight (
        /*[out,retval]*/ ACAD_LWEIGHT * Lineweight ) = 0;
      virtual HRESULT __stdcall put_LeaderLineWeight (
        /*[in]*/ ACAD_LWEIGHT Lineweight ) = 0;
      virtual HRESULT __stdcall get_ArrowheadType (
        /*[out,retval]*/ enum AcDimArrowheadType * BlockName ) = 0;
      virtual HRESULT __stdcall put_ArrowheadType (
        /*[in]*/ enum AcDimArrowheadType BlockName ) = 0;
      virtual HRESULT __stdcall get_ArrowheadSize (
        /*[out,retval]*/ double * size ) = 0;
      virtual HRESULT __stdcall put_ArrowheadSize (
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall get_DogLegged (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_DogLegged (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_DoglegLength (
        /*[out,retval]*/ double * DoglegLength ) = 0;
      virtual HRESULT __stdcall put_DoglegLength (
        /*[in]*/ double DoglegLength ) = 0;
      virtual HRESULT __stdcall get_ContentBlockName (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_ContentBlockName (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_BlockConnectionType (
        /*[out,retval]*/ enum AcBlockConnectionType * Type ) = 0;
      virtual HRESULT __stdcall put_BlockConnectionType (
        /*[in]*/ enum AcBlockConnectionType Type ) = 0;
      virtual HRESULT __stdcall get_BlockScale (
        /*[out,retval]*/ ACAD_NOUNITS * factor ) = 0;
      virtual HRESULT __stdcall put_BlockScale (
        /*[in]*/ ACAD_NOUNITS factor ) = 0;
      virtual HRESULT __stdcall get_TextString (
        /*[out,retval]*/ BSTR * bstrText ) = 0;
      virtual HRESULT __stdcall put_TextString (
        /*[in]*/ BSTR bstrText ) = 0;
      virtual HRESULT __stdcall get_TextStyleName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_TextStyleName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_TextJustify (
        /*[out,retval]*/ enum AcAttachmentPoint * attPoint ) = 0;
      virtual HRESULT __stdcall put_TextJustify (
        /*[in]*/ enum AcAttachmentPoint attPoint ) = 0;
      virtual HRESULT __stdcall get_TextDirection (
        /*[out,retval]*/ enum AcDrawingDirection * drawDir ) = 0;
      virtual HRESULT __stdcall put_TextDirection (
        /*[in]*/ enum AcDrawingDirection drawDir ) = 0;
      virtual HRESULT __stdcall get_TextWidth (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_TextWidth (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_TextRotation (
        /*[out,retval]*/ ACAD_ANGLE * rotAngle ) = 0;
      virtual HRESULT __stdcall put_TextRotation (
        /*[in]*/ ACAD_ANGLE rotAngle ) = 0;
      virtual HRESULT __stdcall get_TextLineSpacingFactor (
        /*[out,retval]*/ double * factor ) = 0;
      virtual HRESULT __stdcall put_TextLineSpacingFactor (
        /*[in]*/ double factor ) = 0;
      virtual HRESULT __stdcall get_TextLineSpacingDistance (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_TextLineSpacingDistance (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_TextLineSpacingStyle (
        /*[out,retval]*/ enum AcLineSpacingStyle * style ) = 0;
      virtual HRESULT __stdcall put_TextLineSpacingStyle (
        /*[in]*/ enum AcLineSpacingStyle style ) = 0;
      virtual HRESULT __stdcall get_TextBackgroundFill (
        /*[out,retval]*/ VARIANT_BOOL * bUseBackgroundFill ) = 0;
      virtual HRESULT __stdcall put_TextBackgroundFill (
        /*[in]*/ VARIANT_BOOL bUseBackgroundFill ) = 0;
      virtual HRESULT __stdcall get_TextAttachmentDirection (
        /*[out,retval]*/ enum AcTextAttachmentDirection * dir ) = 0;
      virtual HRESULT __stdcall put_TextAttachmentDirection (
        /*[in]*/ enum AcTextAttachmentDirection dir ) = 0;
      virtual HRESULT __stdcall get_TextLeftAttachmentType (
        /*[out,retval]*/ enum AcTextAttachmentType * Type ) = 0;
      virtual HRESULT __stdcall put_TextLeftAttachmentType (
        /*[in]*/ enum AcTextAttachmentType Type ) = 0;
      virtual HRESULT __stdcall get_TextRightAttachmentType (
        /*[out,retval]*/ enum AcTextAttachmentType * Type ) = 0;
      virtual HRESULT __stdcall put_TextRightAttachmentType (
        /*[in]*/ enum AcTextAttachmentType Type ) = 0;
      virtual HRESULT __stdcall get_TextTopAttachmentType (
        /*[out,retval]*/ enum AcVerticalTextAttachmentType * Type ) = 0;
      virtual HRESULT __stdcall put_TextTopAttachmentType (
        /*[in]*/ enum AcVerticalTextAttachmentType Type ) = 0;
      virtual HRESULT __stdcall get_TextBottomAttachmentType (
        /*[out,retval]*/ enum AcVerticalTextAttachmentType * Type ) = 0;
      virtual HRESULT __stdcall put_TextBottomAttachmentType (
        /*[in]*/ enum AcVerticalTextAttachmentType Type ) = 0;
      virtual HRESULT __stdcall get_LandingGap (
        /*[out,retval]*/ double * gap ) = 0;
      virtual HRESULT __stdcall put_LandingGap (
        /*[in]*/ double gap ) = 0;
      virtual HRESULT __stdcall get_ArrowheadBlock (
        /*[out,retval]*/ BSTR * BlockName ) = 0;
      virtual HRESULT __stdcall put_ArrowheadBlock (
        /*[in]*/ BSTR BlockName ) = 0;
      virtual HRESULT __stdcall get_ContentBlockType (
        /*[out,retval]*/ enum AcPredefBlockType * Type ) = 0;
      virtual HRESULT __stdcall put_ContentBlockType (
        /*[in]*/ enum AcPredefBlockType Type ) = 0;
      virtual HRESULT __stdcall get_LeaderCount (
        /*[out,retval]*/ int * number ) = 0;
      virtual HRESULT __stdcall raw_AddLeader (
        /*[out,retval]*/ int * leaderIndex ) = 0;
      virtual HRESULT __stdcall raw_RemoveLeader (
        /*[in]*/ int leaderIndex ) = 0;
      virtual HRESULT __stdcall raw_AddLeaderLine (
        /*[in]*/ int leaderIndex,
        /*[in]*/ VARIANT pointArray,
        /*[out,retval]*/ int * leaderLineIndex ) = 0;
      virtual HRESULT __stdcall raw_AddLeaderLineEx (
        /*[in]*/ VARIANT pointArray,
        /*[out,retval]*/ int * leaderLineIndex ) = 0;
      virtual HRESULT __stdcall raw_RemoveLeaderLine (
        /*[in]*/ int leaderLineIndex ) = 0;
      virtual HRESULT __stdcall raw_SetLeaderLineVertices (
        /*[in]*/ int leaderLineIndex,
        /*[in]*/ VARIANT pointArray ) = 0;
      virtual HRESULT __stdcall raw_GetLeaderLineVertices (
        /*[in]*/ int leaderLineIndex,
        /*[out,retval]*/ VARIANT * pointArray ) = 0;
      virtual HRESULT __stdcall put_ContentType (
        /*[in]*/ enum AcMLeaderContentType Type ) = 0;
      virtual HRESULT __stdcall get_ContentType (
        /*[out,retval]*/ enum AcMLeaderContentType * Type ) = 0;
      virtual HRESULT __stdcall raw_GetLeaderIndex (
        /*[in]*/ int leaderLineIndex,
        /*[out,retval]*/ int * leaderIndex ) = 0;
      virtual HRESULT __stdcall raw_GetLeaderLineIndexes (
        /*[in]*/ int leaderIndex,
        /*[out,retval]*/ VARIANT * leaderLineIndexes ) = 0;
      virtual HRESULT __stdcall raw_GetVertexCount (
        /*[in]*/ int leaderLineIndex,
        /*[out,retval]*/ int * number ) = 0;
      virtual HRESULT __stdcall get_TextFrameDisplay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TextFrameDisplay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_StyleName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_StyleName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_GetDoglegDirection (
        /*[in]*/ int leaderIndex,
        /*[out,retval]*/ VARIANT * dirVec ) = 0;
      virtual HRESULT __stdcall raw_SetDoglegDirection (
        /*[in]*/ int leaderIndex,
        /*[in]*/ VARIANT dirVec ) = 0;
      virtual HRESULT __stdcall raw_GetBlockAttributeValue (
        /*[in]*/ LONG_PTR attdefId,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_SetBlockAttributeValue (
        /*[in]*/ LONG_PTR attdefId,
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("d886f48c-94ab-4240-877b-a22428d6ffcd"))
IAcadView : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter,put=PutCenter))
    _variant_t Center;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetTarget,put=PutTarget))
    _variant_t Target;
    __declspec(property(get=GetDirection,put=PutDirection))
    _variant_t Direction;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetCategoryName,put=PutCategoryName))
    _bstr_t CategoryName;
    __declspec(property(get=GetLayoutId,put=PutLayoutId))
    LONG_PTR LayoutId;
    __declspec(property(get=GetLayerState,put=PutLayerState))
    _bstr_t LayerState;
    __declspec(property(get=GetHasVpAssociation,put=PutHasVpAssociation))
    VARIANT_BOOL HasVpAssociation;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCenter ( );
    void PutCenter (
        const _variant_t & Center );
    double GetHeight ( );
    void PutHeight (
        double Height );
    double GetWidth ( );
    void PutWidth (
        double Width );
    _variant_t GetTarget ( );
    void PutTarget (
        const _variant_t & targetPoint );
    _variant_t GetDirection ( );
    void PutDirection (
        const _variant_t & dirVec );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    _bstr_t GetCategoryName ( );
    void PutCategoryName (
        _bstr_t category );
    LONG_PTR GetLayoutId ( );
    void PutLayoutId (
        LONG_PTR ObjectID );
    _bstr_t GetLayerState ( );
    void PutLayerState (
        _bstr_t LayerState );
    VARIANT_BOOL GetHasVpAssociation ( );
    void PutHasVpAssociation (
        VARIANT_BOOL bVpAssoc );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ VARIANT * Center ) = 0;
      virtual HRESULT __stdcall put_Center (
        /*[in]*/ VARIANT Center ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ VARIANT * targetPoint ) = 0;
      virtual HRESULT __stdcall put_Target (
        /*[in]*/ VARIANT targetPoint ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT * dirVec ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT dirVec ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_CategoryName (
        /*[out,retval]*/ BSTR * category ) = 0;
      virtual HRESULT __stdcall put_CategoryName (
        /*[in]*/ BSTR category ) = 0;
      virtual HRESULT __stdcall get_LayoutId (
        /*[out,retval]*/ LONG_PTR * ObjectID ) = 0;
      virtual HRESULT __stdcall put_LayoutId (
        /*[in]*/ LONG_PTR ObjectID ) = 0;
      virtual HRESULT __stdcall get_LayerState (
        /*[out,retval]*/ BSTR * LayerState ) = 0;
      virtual HRESULT __stdcall put_LayerState (
        /*[in]*/ BSTR LayerState ) = 0;
      virtual HRESULT __stdcall get_HasVpAssociation (
        /*[out,retval]*/ VARIANT_BOOL * bVpAssoc ) = 0;
      virtual HRESULT __stdcall put_HasVpAssociation (
        /*[in]*/ VARIANT_BOOL bVpAssoc ) = 0;
};

struct __declspec(uuid("d71870d2-e2fe-43c5-90fa-8ff4711fc984"))
IAcadPViewport : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter,put=PutCenter))
    _variant_t Center;
    __declspec(property(get=GetDirection,put=PutDirection))
    _variant_t Direction;
    __declspec(property(get=GetGridOn,put=PutGridOn))
    VARIANT_BOOL GridOn;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetViewportOn,put=PutViewportOn))
    VARIANT_BOOL ViewportOn;
    __declspec(property(get=GetClipped))
    VARIANT_BOOL Clipped;
    __declspec(property(get=GetDisplayLocked,put=PutDisplayLocked))
    VARIANT_BOOL DisplayLocked;
    __declspec(property(get=GetStandardScale,put=PutStandardScale))
    enum AcViewportScale StandardScale;
    __declspec(property(get=GetCustomScale,put=PutCustomScale))
    double CustomScale;
    __declspec(property(get=GetStyleSheet,put=PutStyleSheet))
    _bstr_t StyleSheet;
    __declspec(property(get=GetUCSPerViewport,put=PutUCSPerViewport))
    VARIANT_BOOL UCSPerViewport;
    __declspec(property(get=GetSnapBasePoint,put=PutSnapBasePoint))
    _variant_t SnapBasePoint;
    __declspec(property(get=GetSnapOn,put=PutSnapOn))
    VARIANT_BOOL SnapOn;
    __declspec(property(get=GetSnapRotationAngle,put=PutSnapRotationAngle))
    double SnapRotationAngle;
    __declspec(property(get=GetUCSIconOn,put=PutUCSIconOn))
    VARIANT_BOOL UCSIconOn;
    __declspec(property(get=GetUCSIconAtOrigin,put=PutUCSIconAtOrigin))
    VARIANT_BOOL UCSIconAtOrigin;
    __declspec(property(get=GetTwistAngle,put=PutTwistAngle))
    ACAD_ANGLE TwistAngle;
    __declspec(property(get=GetLensLength,put=PutLensLength))
    double LensLength;
    __declspec(property(get=GetRemoveHiddenLines,put=PutRemoveHiddenLines))
    VARIANT_BOOL RemoveHiddenLines;
    __declspec(property(get=GetTarget,put=PutTarget))
    _variant_t Target;
    __declspec(property(get=GetArcSmoothness,put=PutArcSmoothness))
    long ArcSmoothness;
    __declspec(property(get=GetVisualStyle,put=PutVisualStyle))
    int VisualStyle;
    __declspec(property(get=GetShadePlot,put=PutShadePlot))
    int ShadePlot;
    __declspec(property(get=GetModelView,put=PutModelView))
    IAcadViewPtr ModelView;
    __declspec(property(get=GetSheetView,put=PutSheetView))
    IAcadViewPtr SheetView;
    __declspec(property(get=GetHasSheetView))
    VARIANT_BOOL HasSheetView;
    __declspec(property(get=GetLayerPropertyOverrides))
    VARIANT_BOOL LayerPropertyOverrides;
    __declspec(property(get=GetStandardScale2,put=PutStandardScale2))
    int StandardScale2;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCenter ( );
    void PutCenter (
        const _variant_t & CenterPoint );
    _variant_t GetDirection ( );
    void PutDirection (
        const _variant_t & dirVector );
    VARIANT_BOOL GetGridOn ( );
    void PutGridOn (
        VARIANT_BOOL bGridOn );
    double GetHeight ( );
    void PutHeight (
        double Height );
    double GetWidth ( );
    void PutWidth (
        double Width );
    VARIANT_BOOL GetViewportOn ( );
    void PutViewportOn (
        VARIANT_BOOL bOn );
    VARIANT_BOOL GetClipped ( );
    VARIANT_BOOL GetDisplayLocked ( );
    void PutDisplayLocked (
        VARIANT_BOOL bLocked );
    enum AcViewportScale GetStandardScale ( );
    void PutStandardScale (
        enum AcViewportScale scale );
    double GetCustomScale ( );
    void PutCustomScale (
        double scale );
    _bstr_t GetStyleSheet ( );
    void PutStyleSheet (
        _bstr_t pName );
    VARIANT_BOOL GetUCSPerViewport ( );
    void PutUCSPerViewport (
        VARIANT_BOOL UCSSaved );
    _variant_t GetSnapBasePoint ( );
    void PutSnapBasePoint (
        const _variant_t & lowLeft );
    VARIANT_BOOL GetSnapOn ( );
    void PutSnapOn (
        VARIANT_BOOL bSnapOn );
    double GetSnapRotationAngle ( );
    void PutSnapRotationAngle (
        double Angle );
    VARIANT_BOOL GetUCSIconOn ( );
    void PutUCSIconOn (
        VARIANT_BOOL bIconOn );
    VARIANT_BOOL GetUCSIconAtOrigin ( );
    void PutUCSIconAtOrigin (
        VARIANT_BOOL bIconAtOrigin );
    HRESULT GetGridSpacing (
        double * XSpacing,
        double * YSpacing );
    HRESULT SetGridSpacing (
        double XSpacing,
        double YSpacing );
    HRESULT GetSnapSpacing (
        double * XSpacing,
        double * YSpacing );
    HRESULT SetSnapSpacing (
        double XSpacing,
        double YSpacing );
    HRESULT Display (
        VARIANT_BOOL bStatus );
    ACAD_ANGLE GetTwistAngle ( );
    void PutTwistAngle (
        ACAD_ANGLE Angle );
    double GetLensLength ( );
    void PutLensLength (
        double Length );
    VARIANT_BOOL GetRemoveHiddenLines ( );
    void PutRemoveHiddenLines (
        VARIANT_BOOL bRemoval );
    _variant_t GetTarget ( );
    void PutTarget (
        const _variant_t & targetPoint );
    long GetArcSmoothness ( );
    void PutArcSmoothness (
        long arcSmooth );
    int GetVisualStyle ( );
    void PutVisualStyle (
        int pVisualStyleIndex );
    int GetShadePlot ( );
    void PutShadePlot (
        int pShadePlotIndex );
    IAcadViewPtr GetModelView ( );
    void PutModelView (
        struct IAcadView * View );
    IAcadViewPtr GetSheetView ( );
    void PutSheetView (
        struct IAcadView * View );
    LONG_PTR GetLabelBlockId ( );
    void PutLabelBlockId (
        LONG_PTR * ObjectID );
    VARIANT_BOOL GetHasSheetView ( );
    HRESULT SyncModelView ( );
    int GetStandardScale2 ( );
    void PutStandardScale2 (
        int scale );
    VARIANT_BOOL GetLayerPropertyOverrides ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ VARIANT * CenterPoint ) = 0;
      virtual HRESULT __stdcall put_Center (
        /*[in]*/ VARIANT CenterPoint ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT * dirVector ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT dirVector ) = 0;
      virtual HRESULT __stdcall get_GridOn (
        /*[out,retval]*/ VARIANT_BOOL * bGridOn ) = 0;
      virtual HRESULT __stdcall put_GridOn (
        /*[in]*/ VARIANT_BOOL bGridOn ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall get_ViewportOn (
        /*[out,retval]*/ VARIANT_BOOL * bOn ) = 0;
      virtual HRESULT __stdcall put_ViewportOn (
        /*[in]*/ VARIANT_BOOL bOn ) = 0;
      virtual HRESULT __stdcall get_Clipped (
        /*[out,retval]*/ VARIANT_BOOL * bClipped ) = 0;
      virtual HRESULT __stdcall get_DisplayLocked (
        /*[out,retval]*/ VARIANT_BOOL * bLocked ) = 0;
      virtual HRESULT __stdcall put_DisplayLocked (
        /*[in]*/ VARIANT_BOOL bLocked ) = 0;
      virtual HRESULT __stdcall get_StandardScale (
        /*[out,retval]*/ enum AcViewportScale * scale ) = 0;
      virtual HRESULT __stdcall put_StandardScale (
        /*[in]*/ enum AcViewportScale scale ) = 0;
      virtual HRESULT __stdcall get_CustomScale (
        /*[out,retval]*/ double * scale ) = 0;
      virtual HRESULT __stdcall put_CustomScale (
        /*[in]*/ double scale ) = 0;
      virtual HRESULT __stdcall get_StyleSheet (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall put_StyleSheet (
        /*[in]*/ BSTR pName ) = 0;
      virtual HRESULT __stdcall get_UCSPerViewport (
        /*[out,retval]*/ VARIANT_BOOL * UCSSaved ) = 0;
      virtual HRESULT __stdcall put_UCSPerViewport (
        /*[in]*/ VARIANT_BOOL UCSSaved ) = 0;
      virtual HRESULT __stdcall get_SnapBasePoint (
        /*[out,retval]*/ VARIANT * lowLeft ) = 0;
      virtual HRESULT __stdcall put_SnapBasePoint (
        /*[in]*/ VARIANT lowLeft ) = 0;
      virtual HRESULT __stdcall get_SnapOn (
        /*[out,retval]*/ VARIANT_BOOL * bSnapOn ) = 0;
      virtual HRESULT __stdcall put_SnapOn (
        /*[in]*/ VARIANT_BOOL bSnapOn ) = 0;
      virtual HRESULT __stdcall get_SnapRotationAngle (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_SnapRotationAngle (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_UCSIconOn (
        /*[out,retval]*/ VARIANT_BOOL * bIconOn ) = 0;
      virtual HRESULT __stdcall put_UCSIconOn (
        /*[in]*/ VARIANT_BOOL bIconOn ) = 0;
      virtual HRESULT __stdcall get_UCSIconAtOrigin (
        /*[out,retval]*/ VARIANT_BOOL * bIconAtOrigin ) = 0;
      virtual HRESULT __stdcall put_UCSIconAtOrigin (
        /*[in]*/ VARIANT_BOOL bIconAtOrigin ) = 0;
      virtual HRESULT __stdcall raw_GetGridSpacing (
        /*[out]*/ double * XSpacing,
        /*[out]*/ double * YSpacing ) = 0;
      virtual HRESULT __stdcall raw_SetGridSpacing (
        /*[in]*/ double XSpacing,
        /*[in]*/ double YSpacing ) = 0;
      virtual HRESULT __stdcall raw_GetSnapSpacing (
        /*[out]*/ double * XSpacing,
        /*[out]*/ double * YSpacing ) = 0;
      virtual HRESULT __stdcall raw_SetSnapSpacing (
        /*[in]*/ double XSpacing,
        /*[in]*/ double YSpacing ) = 0;
      virtual HRESULT __stdcall raw_Display (
        /*[in]*/ VARIANT_BOOL bStatus ) = 0;
      virtual HRESULT __stdcall get_TwistAngle (
        /*[out,retval]*/ ACAD_ANGLE * Angle ) = 0;
      virtual HRESULT __stdcall put_TwistAngle (
        /*[in]*/ ACAD_ANGLE Angle ) = 0;
      virtual HRESULT __stdcall get_LensLength (
        /*[out,retval]*/ double * Length ) = 0;
      virtual HRESULT __stdcall put_LensLength (
        /*[in]*/ double Length ) = 0;
      virtual HRESULT __stdcall get_RemoveHiddenLines (
        /*[out,retval]*/ VARIANT_BOOL * bRemoval ) = 0;
      virtual HRESULT __stdcall put_RemoveHiddenLines (
        /*[in]*/ VARIANT_BOOL bRemoval ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ VARIANT * targetPoint ) = 0;
      virtual HRESULT __stdcall put_Target (
        /*[in]*/ VARIANT targetPoint ) = 0;
      virtual HRESULT __stdcall get_ArcSmoothness (
        /*[out,retval]*/ long * arcSmooth ) = 0;
      virtual HRESULT __stdcall put_ArcSmoothness (
        /*[in]*/ long arcSmooth ) = 0;
      virtual HRESULT __stdcall get_VisualStyle (
        /*[out,retval]*/ int * pVisualStyleIndex ) = 0;
      virtual HRESULT __stdcall put_VisualStyle (
        /*[in]*/ int pVisualStyleIndex ) = 0;
      virtual HRESULT __stdcall get_ShadePlot (
        /*[out,retval]*/ int * pShadePlotIndex ) = 0;
      virtual HRESULT __stdcall put_ShadePlot (
        /*[in]*/ int pShadePlotIndex ) = 0;
      virtual HRESULT __stdcall get_ModelView (
        /*[out,retval]*/ struct IAcadView * * View ) = 0;
      virtual HRESULT __stdcall put_ModelView (
        /*[in]*/ struct IAcadView * View ) = 0;
      virtual HRESULT __stdcall get_SheetView (
        /*[out,retval]*/ struct IAcadView * * View ) = 0;
      virtual HRESULT __stdcall put_SheetView (
        /*[in]*/ struct IAcadView * View ) = 0;
      virtual HRESULT __stdcall get_LabelBlockId (
        /*[out,retval]*/ LONG_PTR * ObjectID ) = 0;
      virtual HRESULT __stdcall put_LabelBlockId (
        /*[in]*/ LONG_PTR * ObjectID ) = 0;
      virtual HRESULT __stdcall get_HasSheetView (
        /*[out,retval]*/ VARIANT_BOOL * bSheetView ) = 0;
      virtual HRESULT __stdcall raw_SyncModelView ( ) = 0;
      virtual HRESULT __stdcall get_StandardScale2 (
        /*[out,retval]*/ int * scale ) = 0;
      virtual HRESULT __stdcall put_StandardScale2 (
        /*[in]*/ int scale ) = 0;
      virtual HRESULT __stdcall get_LayerPropertyOverrides (
        /*[out,retval]*/ VARIANT_BOOL * bOverrides ) = 0;
};

struct __declspec(uuid("9f470d4d-44b7-4d3c-82e5-493da2e94215"))
IAcadGroup : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(put=Putcolor))
    enum AcColor color;
    __declspec(property(put=PutLayer))
    _bstr_t Layer;
    __declspec(property(put=PutLinetype))
    _bstr_t Linetype;
    __declspec(property(put=PutLinetypeScale))
    ACAD_NOUNITS LinetypeScale;
    __declspec(property(put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(put=PutPlotStyleName))
    _bstr_t PlotStyleName;
    __declspec(property(put=PutLineweight))
    ACAD_LWEIGHT Lineweight;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(put=PutTrueColor))
    IAcadAcCmColorPtr TrueColor;
    __declspec(property(put=PutMaterial))
    _bstr_t Material;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadEntityPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    void PutTrueColor (
        struct IAcadAcCmColor * _arg1 );
    void PutLayer (
        _bstr_t _arg1 );
    void PutLinetype (
        _bstr_t _arg1 );
    void PutLinetypeScale (
        ACAD_NOUNITS _arg1 );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    HRESULT Highlight (
        VARIANT_BOOL HighlightFlag );
    void PutPlotStyleName (
        _bstr_t _arg1 );
    void PutLineweight (
        ACAD_LWEIGHT _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    HRESULT AppendItems (
        const _variant_t & Objects );
    HRESULT RemoveItems (
        const _variant_t & Objects );
    HRESULT Update ( );
    void PutMaterial (
        _bstr_t _arg1 );
    void Putcolor (
        enum AcColor _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadEntity * * ppEntity ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TrueColor (
        /*[in]*/ struct IAcadAcCmColor * _arg1 ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_Linetype (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_LinetypeScale (
        /*[in]*/ ACAD_NOUNITS _arg1 ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall raw_Highlight (
        /*[in]*/ VARIANT_BOOL HighlightFlag ) = 0;
      virtual HRESULT __stdcall put_PlotStyleName (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_Lineweight (
        /*[in]*/ ACAD_LWEIGHT _arg1 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_AppendItems (
        /*[in]*/ VARIANT Objects ) = 0;
      virtual HRESULT __stdcall raw_RemoveItems (
        /*[in]*/ VARIANT Objects ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall put_Material (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_color (
        /*[in]*/ enum AcColor _arg1 ) = 0;
};

struct __declspec(uuid("15f4cd6c-78c7-4e34-97bb-88866ab7234c"))
IAcadGroups : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadGroupPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadGroupPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadGroup * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadGroup * * pDimStyle ) = 0;
};

struct __declspec(uuid("5f64b0a6-1728-41c4-93e6-24c2daa48e93"))
IAcadDimStyle : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    HRESULT CopyFrom (
        IDispatch * StyleSource );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall raw_CopyFrom (
        /*[in]*/ IDispatch * StyleSource ) = 0;
};

struct __declspec(uuid("ddae1905-b805-4444-8c99-0db4ae89f517"))
IAcadDimStyles : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadDimStylePtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadDimStylePtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadDimStyle * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadDimStyle * * pDimStyle ) = 0;
};

struct __declspec(uuid("7abc3225-0845-44cd-96e3-dc73e280aca0"))
IAcadLayer : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=Getcolor,put=Putcolor))
    enum AcColor color;
    __declspec(property(get=GetFreeze,put=PutFreeze))
    VARIANT_BOOL Freeze;
    __declspec(property(get=GetLayerOn,put=PutLayerOn))
    VARIANT_BOOL LayerOn;
    __declspec(property(get=GetLinetype,put=PutLinetype))
    _bstr_t Linetype;
    __declspec(property(get=GetLock,put=PutLock))
    VARIANT_BOOL Lock;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPlottable,put=PutPlottable))
    VARIANT_BOOL Plottable;
    __declspec(property(get=GetViewportDefault,put=PutViewportDefault))
    VARIANT_BOOL ViewportDefault;
    __declspec(property(get=GetPlotStyleName,put=PutPlotStyleName))
    _bstr_t PlotStyleName;
    __declspec(property(get=GetLineweight,put=PutLineweight))
    ACAD_LWEIGHT Lineweight;
    __declspec(property(get=GetTrueColor,put=PutTrueColor))
    IAcadAcCmColorPtr TrueColor;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetUsed))
    VARIANT_BOOL Used;
    __declspec(property(get=GetMaterial,put=PutMaterial))
    _bstr_t Material;

    //
    // Wrapper methods for error-handling
    //

    enum AcColor Getcolor ( );
    void Putcolor (
        enum AcColor color );
    IAcadAcCmColorPtr GetTrueColor ( );
    void PutTrueColor (
        struct IAcadAcCmColor * pColor );
    VARIANT_BOOL GetFreeze ( );
    void PutFreeze (
        VARIANT_BOOL bFreeze );
    VARIANT_BOOL GetLayerOn ( );
    void PutLayerOn (
        VARIANT_BOOL bOn );
    _bstr_t GetLinetype ( );
    void PutLinetype (
        _bstr_t Linetype );
    VARIANT_BOOL GetLock ( );
    void PutLock (
        VARIANT_BOOL Block );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    VARIANT_BOOL GetPlottable ( );
    void PutPlottable (
        VARIANT_BOOL bPlottable );
    VARIANT_BOOL GetViewportDefault ( );
    void PutViewportDefault (
        VARIANT_BOOL bDefault );
    _bstr_t GetPlotStyleName ( );
    void PutPlotStyleName (
        _bstr_t plotStyle );
    ACAD_LWEIGHT GetLineweight ( );
    void PutLineweight (
        ACAD_LWEIGHT Lineweight );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t Description );
    VARIANT_BOOL GetUsed ( );
    _bstr_t GetMaterial ( );
    void PutMaterial (
        _bstr_t Material );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_color (
        /*[out,retval]*/ enum AcColor * color ) = 0;
      virtual HRESULT __stdcall put_color (
        /*[in]*/ enum AcColor color ) = 0;
      virtual HRESULT __stdcall get_TrueColor (
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall put_TrueColor (
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall get_Freeze (
        /*[out,retval]*/ VARIANT_BOOL * bFreeze ) = 0;
      virtual HRESULT __stdcall put_Freeze (
        /*[in]*/ VARIANT_BOOL bFreeze ) = 0;
      virtual HRESULT __stdcall get_LayerOn (
        /*[out,retval]*/ VARIANT_BOOL * bOn ) = 0;
      virtual HRESULT __stdcall put_LayerOn (
        /*[in]*/ VARIANT_BOOL bOn ) = 0;
      virtual HRESULT __stdcall get_Linetype (
        /*[out,retval]*/ BSTR * Linetype ) = 0;
      virtual HRESULT __stdcall put_Linetype (
        /*[in]*/ BSTR Linetype ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ VARIANT_BOOL * Block ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ VARIANT_BOOL Block ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_Plottable (
        /*[out,retval]*/ VARIANT_BOOL * bPlottable ) = 0;
      virtual HRESULT __stdcall put_Plottable (
        /*[in]*/ VARIANT_BOOL bPlottable ) = 0;
      virtual HRESULT __stdcall get_ViewportDefault (
        /*[out,retval]*/ VARIANT_BOOL * bDefault ) = 0;
      virtual HRESULT __stdcall put_ViewportDefault (
        /*[in]*/ VARIANT_BOOL bDefault ) = 0;
      virtual HRESULT __stdcall get_PlotStyleName (
        /*[out,retval]*/ BSTR * plotStyle ) = 0;
      virtual HRESULT __stdcall put_PlotStyleName (
        /*[in]*/ BSTR plotStyle ) = 0;
      virtual HRESULT __stdcall get_Lineweight (
        /*[out,retval]*/ ACAD_LWEIGHT * Lineweight ) = 0;
      virtual HRESULT __stdcall put_Lineweight (
        /*[in]*/ ACAD_LWEIGHT Lineweight ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR Description ) = 0;
      virtual HRESULT __stdcall get_Used (
        /*[out,retval]*/ VARIANT_BOOL * bUsed ) = 0;
      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ BSTR * Material ) = 0;
      virtual HRESULT __stdcall put_Material (
        /*[in]*/ BSTR Material ) = 0;
};

struct __declspec(uuid("713e7af3-1517-49fc-b6b4-429bdcd83b40"))
IAcadLayers : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadLayerPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadLayerPtr Add (
        _bstr_t Name );
    HRESULT GenerateUsageData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadLayer * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadLayer * * pLayer ) = 0;
      virtual HRESULT __stdcall raw_GenerateUsageData ( ) = 0;
};

struct __declspec(uuid("545d3abe-3b77-45c3-afcc-0aff39d25dd5"))
IAcadLineType : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t bstrDes );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * bstrDes ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR bstrDes ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
};

struct __declspec(uuid("122c5869-568a-4df0-9b0d-fb113e8defce"))
IAcadLineTypes : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadLineTypePtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadLineTypePtr Add (
        _bstr_t Name );
    HRESULT Load (
        _bstr_t Name,
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadLineType * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadLineType * * pLinetype ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR FileName ) = 0;
};

struct __declspec(uuid("67433105-639d-42fb-abc4-1a4e70b638b5"))
IAcadXRecord : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTranslateIDs,put=PutTranslateIDs))
    VARIANT_BOOL TranslateIDs;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    HRESULT GetXRecordData (
        VARIANT * XRecordDataType,
        VARIANT * XRecordDataValue );
    HRESULT SetXRecordData (
        const _variant_t & XRecordDataType,
        const _variant_t & XRecordDataValue );
    VARIANT_BOOL GetTranslateIDs ( );
    void PutTranslateIDs (
        VARIANT_BOOL xlateIds );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall raw_GetXRecordData (
        /*[out]*/ VARIANT * XRecordDataType,
        /*[out]*/ VARIANT * XRecordDataValue ) = 0;
      virtual HRESULT __stdcall raw_SetXRecordData (
        /*[in]*/ VARIANT XRecordDataType,
        /*[in]*/ VARIANT XRecordDataValue ) = 0;
      virtual HRESULT __stdcall get_TranslateIDs (
        /*[out,retval]*/ VARIANT_BOOL * xlateIds ) = 0;
      virtual HRESULT __stdcall put_TranslateIDs (
        /*[in]*/ VARIANT_BOOL xlateIds ) = 0;
};

struct __declspec(uuid("42828358-7505-416b-9a56-98f4e9bb35c6"))
IAcadDictionary : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    IAcadObjectPtr AddObject (
        _bstr_t Keyword,
        _bstr_t ObjectName );
    _bstr_t GetName (
        struct IAcadObject * Object );
    IAcadObjectPtr GetObject (
        _bstr_t Name );
    IAcadObjectPtr Remove (
        _bstr_t Name );
    HRESULT Rename (
        _bstr_t OldName,
        _bstr_t NewName );
    HRESULT Replace (
        _bstr_t OldName,
        struct IAcadObject * pObj );
    IAcadObjectPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadXRecordPtr AddXRecord (
        _bstr_t Keyword );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_AddObject (
        /*[in]*/ BSTR Keyword,
        /*[in]*/ BSTR ObjectName,
        /*[out,retval]*/ struct IAcadObject * * pNewObj ) = 0;
      virtual HRESULT __stdcall raw_GetName (
        /*[in]*/ struct IAcadObject * Object,
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall raw_GetObject (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadObject * * pObj ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadObject * * pObj ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR OldName,
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ BSTR OldName,
        /*[in]*/ struct IAcadObject * pObj ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadObject * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddXRecord (
        /*[in]*/ BSTR Keyword,
        /*[out,retval]*/ struct IAcadXRecord * * pNewXRecord ) = 0;
};

struct __declspec(uuid("c2521948-f0c1-4af7-8507-baea76be3687"))
IAcadDictionaries : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadObjectPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadDictionaryPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadObject * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadDictionary * * pDimStyle ) = 0;
};

struct __declspec(uuid("553652d5-2c7e-4e81-bbeb-65579ec58471"))
IAcadRegisteredApplication : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
};

struct __declspec(uuid("97beb443-7259-4377-87fa-1a3e5e882b3c"))
IAcadRegisteredApplications : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadRegisteredApplicationPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadRegisteredApplicationPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadRegisteredApplication * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadRegisteredApplication * * pRegApp ) = 0;
};

struct __declspec(uuid("3b4c686e-d760-4b2e-9737-0cfd0a434d5d"))
IAcadTextStyle : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBigFontFile,put=PutBigFontFile))
    _bstr_t BigFontFile;
    __declspec(property(get=GetfontFile,put=PutfontFile))
    _bstr_t fontFile;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetLastHeight,put=PutLastHeight))
    double LastHeight;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetObliqueAngle,put=PutObliqueAngle))
    ACAD_ANGLE ObliqueAngle;
    __declspec(property(get=GetTextGenerationFlag,put=PutTextGenerationFlag))
    long TextGenerationFlag;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetBigFontFile ( );
    void PutBigFontFile (
        _bstr_t fontFile );
    _bstr_t GetfontFile ( );
    void PutfontFile (
        _bstr_t fontFile );
    double GetHeight ( );
    void PutHeight (
        double Height );
    double GetLastHeight ( );
    void PutLastHeight (
        double Height );
    _bstr_t GetName ( );
    ACAD_ANGLE GetObliqueAngle ( );
    void PutObliqueAngle (
        ACAD_ANGLE obliAngle );
    long GetTextGenerationFlag ( );
    void PutTextGenerationFlag (
        long textGenFlag );
    double GetWidth ( );
    void PutWidth (
        double Width );
    HRESULT GetFont (
        BSTR * TypeFace,
        VARIANT_BOOL * Bold,
        VARIANT_BOOL * Italic,
        long * Charset,
        long * PitchAndFamily );
    HRESULT SetFont (
        _bstr_t TypeFace,
        VARIANT_BOOL Bold,
        VARIANT_BOOL Italic,
        long Charset,
        long PitchAndFamily );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BigFontFile (
        /*[out,retval]*/ BSTR * fontFile ) = 0;
      virtual HRESULT __stdcall put_BigFontFile (
        /*[in]*/ BSTR fontFile ) = 0;
      virtual HRESULT __stdcall get_fontFile (
        /*[out,retval]*/ BSTR * fontFile ) = 0;
      virtual HRESULT __stdcall put_fontFile (
        /*[in]*/ BSTR fontFile ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_LastHeight (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_LastHeight (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall get_ObliqueAngle (
        /*[out,retval]*/ ACAD_ANGLE * obliAngle ) = 0;
      virtual HRESULT __stdcall put_ObliqueAngle (
        /*[in]*/ ACAD_ANGLE obliAngle ) = 0;
      virtual HRESULT __stdcall get_TextGenerationFlag (
        /*[out,retval]*/ long * textGenFlag ) = 0;
      virtual HRESULT __stdcall put_TextGenerationFlag (
        /*[in]*/ long textGenFlag ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall raw_GetFont (
        /*[out]*/ BSTR * TypeFace,
        /*[out]*/ VARIANT_BOOL * Bold,
        /*[out]*/ VARIANT_BOOL * Italic,
        /*[out]*/ long * Charset,
        /*[out]*/ long * PitchAndFamily ) = 0;
      virtual HRESULT __stdcall raw_SetFont (
        /*[in]*/ BSTR TypeFace,
        /*[in]*/ VARIANT_BOOL Bold,
        /*[in]*/ VARIANT_BOOL Italic,
        /*[in]*/ long Charset,
        /*[in]*/ long PitchAndFamily ) = 0;
};

struct __declspec(uuid("49ed276a-716c-4700-999f-e44f1d10dd8c"))
IAcadTextStyles : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadTextStylePtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadTextStylePtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadTextStyle * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadTextStyle * * pTextStyle ) = 0;
};

struct __declspec(uuid("27ca935e-e9c4-44e9-88fb-e6d22eed3f64"))
IAcadUCS : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    _variant_t Origin;
    __declspec(property(get=GetXVector,put=PutXVector))
    _variant_t XVector;
    __declspec(property(get=GetYVector,put=PutYVector))
    _variant_t YVector;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    _variant_t GetOrigin ( );
    void PutOrigin (
        const _variant_t & Origin );
    _variant_t GetXVector ( );
    void PutXVector (
        const _variant_t & XVector );
    _variant_t GetYVector ( );
    void PutYVector (
        const _variant_t & YVector );
    _variant_t GetUCSMatrix ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ VARIANT * Origin ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ VARIANT Origin ) = 0;
      virtual HRESULT __stdcall get_XVector (
        /*[out,retval]*/ VARIANT * XVector ) = 0;
      virtual HRESULT __stdcall put_XVector (
        /*[in]*/ VARIANT XVector ) = 0;
      virtual HRESULT __stdcall get_YVector (
        /*[out,retval]*/ VARIANT * YVector ) = 0;
      virtual HRESULT __stdcall put_YVector (
        /*[in]*/ VARIANT YVector ) = 0;
      virtual HRESULT __stdcall raw_GetUCSMatrix (
        /*[out,retval]*/ VARIANT * transMatrix ) = 0;
};

struct __declspec(uuid("1da18452-ee21-4ba4-83f8-80c52fb781fc"))
IAcadUCSs : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadUCSPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadUCSPtr Add (
        const _variant_t & Origin,
        const _variant_t & XAxisPoint,
        const _variant_t & YAxisPoint,
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadUCS * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Origin,
        /*[in]*/ VARIANT XAxisPoint,
        /*[in]*/ VARIANT YAxisPoint,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadUCS * * pUCS ) = 0;
};

struct __declspec(uuid("692a60f2-6e56-41be-ac25-054aa8b4dd2d"))
IAcadViews : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadViewPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadViewPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadView * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadView * * pRegApp ) = 0;
};

struct __declspec(uuid("6fe5c544-2694-48fc-9c50-5b32e38f6ea2"))
IAcadViewport : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter,put=PutCenter))
    _variant_t Center;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetTarget,put=PutTarget))
    _variant_t Target;
    __declspec(property(get=GetDirection,put=PutDirection))
    _variant_t Direction;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGridOn,put=PutGridOn))
    VARIANT_BOOL GridOn;
    __declspec(property(get=GetOrthoOn,put=PutOrthoOn))
    VARIANT_BOOL OrthoOn;
    __declspec(property(get=GetSnapBasePoint,put=PutSnapBasePoint))
    _variant_t SnapBasePoint;
    __declspec(property(get=GetSnapOn,put=PutSnapOn))
    VARIANT_BOOL SnapOn;
    __declspec(property(get=GetSnapRotationAngle,put=PutSnapRotationAngle))
    ACAD_ANGLE SnapRotationAngle;
    __declspec(property(get=GetUCSIconOn,put=PutUCSIconOn))
    VARIANT_BOOL UCSIconOn;
    __declspec(property(get=GetUCSIconAtOrigin,put=PutUCSIconAtOrigin))
    VARIANT_BOOL UCSIconAtOrigin;
    __declspec(property(get=GetLowerLeftCorner))
    _variant_t LowerLeftCorner;
    __declspec(property(get=GetUpperRightCorner))
    _variant_t UpperRightCorner;
    __declspec(property(get=GetArcSmoothness,put=PutArcSmoothness))
    long ArcSmoothness;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCenter ( );
    void PutCenter (
        const _variant_t & Center );
    double GetHeight ( );
    void PutHeight (
        double Height );
    double GetWidth ( );
    void PutWidth (
        double Width );
    _variant_t GetTarget ( );
    void PutTarget (
        const _variant_t & targetPoint );
    _variant_t GetDirection ( );
    void PutDirection (
        const _variant_t & dirVec );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    VARIANT_BOOL GetGridOn ( );
    void PutGridOn (
        VARIANT_BOOL bGridOn );
    VARIANT_BOOL GetOrthoOn ( );
    void PutOrthoOn (
        VARIANT_BOOL bOrthoOn );
    _variant_t GetSnapBasePoint ( );
    void PutSnapBasePoint (
        const _variant_t & lowLeft );
    VARIANT_BOOL GetSnapOn ( );
    void PutSnapOn (
        VARIANT_BOOL bSnapOn );
    ACAD_ANGLE GetSnapRotationAngle ( );
    void PutSnapRotationAngle (
        ACAD_ANGLE Angle );
    VARIANT_BOOL GetUCSIconOn ( );
    void PutUCSIconOn (
        VARIANT_BOOL bIconOn );
    VARIANT_BOOL GetUCSIconAtOrigin ( );
    void PutUCSIconAtOrigin (
        VARIANT_BOOL bIconAtOrigin );
    _variant_t GetLowerLeftCorner ( );
    _variant_t GetUpperRightCorner ( );
    HRESULT Split (
        enum AcViewportSplitType NumWins );
    HRESULT GetGridSpacing (
        double * XSpacing,
        double * YSpacing );
    HRESULT SetGridSpacing (
        double XSpacing,
        double YSpacing );
    HRESULT GetSnapSpacing (
        double * XSpacing,
        double * YSpacing );
    HRESULT SetSnapSpacing (
        double XSpacing,
        double YSpacing );
    HRESULT SetView (
        struct IAcadView * View );
    long GetArcSmoothness ( );
    void PutArcSmoothness (
        long arcSmooth );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ VARIANT * Center ) = 0;
      virtual HRESULT __stdcall put_Center (
        /*[in]*/ VARIANT Center ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ VARIANT * targetPoint ) = 0;
      virtual HRESULT __stdcall put_Target (
        /*[in]*/ VARIANT targetPoint ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT * dirVec ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT dirVec ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_GridOn (
        /*[out,retval]*/ VARIANT_BOOL * bGridOn ) = 0;
      virtual HRESULT __stdcall put_GridOn (
        /*[in]*/ VARIANT_BOOL bGridOn ) = 0;
      virtual HRESULT __stdcall get_OrthoOn (
        /*[out,retval]*/ VARIANT_BOOL * bOrthoOn ) = 0;
      virtual HRESULT __stdcall put_OrthoOn (
        /*[in]*/ VARIANT_BOOL bOrthoOn ) = 0;
      virtual HRESULT __stdcall get_SnapBasePoint (
        /*[out,retval]*/ VARIANT * lowLeft ) = 0;
      virtual HRESULT __stdcall put_SnapBasePoint (
        /*[in]*/ VARIANT lowLeft ) = 0;
      virtual HRESULT __stdcall get_SnapOn (
        /*[out,retval]*/ VARIANT_BOOL * bSnapOn ) = 0;
      virtual HRESULT __stdcall put_SnapOn (
        /*[in]*/ VARIANT_BOOL bSnapOn ) = 0;
      virtual HRESULT __stdcall get_SnapRotationAngle (
        /*[out,retval]*/ ACAD_ANGLE * Angle ) = 0;
      virtual HRESULT __stdcall put_SnapRotationAngle (
        /*[in]*/ ACAD_ANGLE Angle ) = 0;
      virtual HRESULT __stdcall get_UCSIconOn (
        /*[out,retval]*/ VARIANT_BOOL * bIconOn ) = 0;
      virtual HRESULT __stdcall put_UCSIconOn (
        /*[in]*/ VARIANT_BOOL bIconOn ) = 0;
      virtual HRESULT __stdcall get_UCSIconAtOrigin (
        /*[out,retval]*/ VARIANT_BOOL * bIconAtOrigin ) = 0;
      virtual HRESULT __stdcall put_UCSIconAtOrigin (
        /*[in]*/ VARIANT_BOOL bIconAtOrigin ) = 0;
      virtual HRESULT __stdcall get_LowerLeftCorner (
        /*[out,retval]*/ VARIANT * lowLeft ) = 0;
      virtual HRESULT __stdcall get_UpperRightCorner (
        /*[out,retval]*/ VARIANT * UpperRight ) = 0;
      virtual HRESULT __stdcall raw_Split (
        /*[in]*/ enum AcViewportSplitType NumWins ) = 0;
      virtual HRESULT __stdcall raw_GetGridSpacing (
        /*[out]*/ double * XSpacing,
        /*[out]*/ double * YSpacing ) = 0;
      virtual HRESULT __stdcall raw_SetGridSpacing (
        /*[in]*/ double XSpacing,
        /*[in]*/ double YSpacing ) = 0;
      virtual HRESULT __stdcall raw_GetSnapSpacing (
        /*[out]*/ double * XSpacing,
        /*[out]*/ double * YSpacing ) = 0;
      virtual HRESULT __stdcall raw_SetSnapSpacing (
        /*[in]*/ double XSpacing,
        /*[in]*/ double YSpacing ) = 0;
      virtual HRESULT __stdcall raw_SetView (
        /*[in]*/ struct IAcadView * View ) = 0;
      virtual HRESULT __stdcall get_ArcSmoothness (
        /*[out,retval]*/ long * arcSmooth ) = 0;
      virtual HRESULT __stdcall put_ArcSmoothness (
        /*[in]*/ long arcSmooth ) = 0;
};

struct __declspec(uuid("8caaf247-a4ae-486a-a886-37f07aa461a0"))
IAcadViewports : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadViewportPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadViewportPtr Add (
        _bstr_t Name );
    HRESULT DeleteConfiguration (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadViewport * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadViewport * * pRegApp ) = 0;
      virtual HRESULT __stdcall raw_DeleteConfiguration (
        /*[in]*/ BSTR Name ) = 0;
};

struct __declspec(uuid("b863a2f4-4fcd-4269-9f67-14ed9e75a7ce"))
IAcadPlotConfigurations : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadPlotConfigurationPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadPlotConfigurationPtr Add (
        _bstr_t Name,
        const _variant_t & ModelType = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadPlotConfiguration * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT ModelType,
        /*[out,retval]*/ struct IAcadPlotConfiguration * * pPlotConfig ) = 0;
};

struct __declspec(uuid("38d109f9-00b7-47bf-89bd-272084478231"))
IAcadSectionManager : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadSectionPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadSectionPtr GetLiveSection ( );
    _bstr_t GetUniqueSectionName (
        _bstr_t pBaseName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadSection * * pSection ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLiveSection (
        /*[out,retval]*/ struct IAcadSection * * pSection ) = 0;
      virtual HRESULT __stdcall raw_GetUniqueSectionName (
        /*[in]*/ BSTR pBaseName,
        /*[out,retval]*/ BSTR * ppUniqueName ) = 0;
};

struct __declspec(uuid("0c755ca3-0d6a-493a-8a3a-cf00550d7a3c"))
IAcadMaterial : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t bstrDes );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * bstrDes ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR bstrDes ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
};

struct __declspec(uuid("0f9a3916-cc82-4177-aabd-74d243a15a04"))
IAcadMaterials : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadMaterialPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadMaterialPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadMaterial * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadMaterial * * pDimStyle ) = 0;
};

struct __declspec(uuid("a0df146c-6a67-4497-b546-85af42b60244"))
IAcadObjectEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Modified (
        struct IAcadObject * pObject );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Modified (
        /*[in]*/ struct IAcadObject * pObject ) = 0;
};

struct __declspec(uuid("0978b906-02e7-42d8-a014-28ea9d61084e"))
IAcadTableStyle : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetBitFlags,put=PutBitFlags))
    long BitFlags;
    __declspec(property(get=GetFlowDirection,put=PutFlowDirection))
    enum AcTableDirection FlowDirection;
    __declspec(property(get=GetHorzCellMargin,put=PutHorzCellMargin))
    double HorzCellMargin;
    __declspec(property(get=GetVertCellMargin,put=PutVertCellMargin))
    double VertCellMargin;
    __declspec(property(get=GetTitleSuppressed,put=PutTitleSuppressed))
    VARIANT_BOOL TitleSuppressed;
    __declspec(property(get=GetHeaderSuppressed,put=PutHeaderSuppressed))
    VARIANT_BOOL HeaderSuppressed;
    __declspec(property(get=GetNumCellStyles))
    long NumCellStyles;
    __declspec(property(get=GetTemplateId,put=PutTemplateId))
    LONG_PTR TemplateId;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrValue );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t bstr );
    long GetBitFlags ( );
    void PutBitFlags (
        long bitFlag );
    enum AcTableDirection GetFlowDirection ( );
    void PutFlowDirection (
        enum AcTableDirection pFlow );
    double GetHorzCellMargin ( );
    void PutHorzCellMargin (
        double dHorzCellMargin );
    double GetVertCellMargin ( );
    void PutVertCellMargin (
        double dVertCellMargin );
    VARIANT_BOOL GetTitleSuppressed ( );
    void PutTitleSuppressed (
        VARIANT_BOOL bValue );
    VARIANT_BOOL GetHeaderSuppressed ( );
    void PutHeaderSuppressed (
        VARIANT_BOOL bValue );
    _bstr_t GetTextStyle (
        enum AcRowType rowType );
    HRESULT SetTextStyle (
        int rowTypes,
        _bstr_t bstrName );
    double GetTextHeight (
        enum AcRowType rowType );
    HRESULT SetTextHeight (
        int rowTypes,
        double TextHeight );
    enum AcCellAlignment GetAlignment (
        enum AcRowType rowType );
    HRESULT SetAlignment (
        int rowTypes,
        enum AcCellAlignment cellAlignment );
    IAcadAcCmColorPtr GetColor (
        enum AcRowType rowType );
    HRESULT SetColor (
        int rowTypes,
        struct IAcadAcCmColor * pColor );
    IAcadAcCmColorPtr GetBackgroundColor (
        enum AcRowType rowType );
    HRESULT SetBackgroundColor (
        int rowTypes,
        struct IAcadAcCmColor * pColor );
    VARIANT_BOOL GetBackgroundColorNone (
        enum AcRowType rowType );
    HRESULT SetBackgroundColorNone (
        int rowTypes,
        VARIANT_BOOL * bValue );
    ACAD_LWEIGHT GetGridLineWeight (
        enum AcGridLineType gridLineType,
        enum AcRowType rowType );
    HRESULT SetGridLineWeight (
        int gridLineTypes,
        int rowTypes,
        ACAD_LWEIGHT Lineweight );
    IAcadAcCmColorPtr GetGridColor (
        enum AcGridLineType gridLineType,
        enum AcRowType rowType );
    HRESULT SetGridColor (
        int gridLineTypes,
        int rowTypes,
        struct IAcadAcCmColor * pColor );
    VARIANT_BOOL GetGridVisibility (
        enum AcGridLineType gridLineType,
        enum AcRowType rowType );
    HRESULT SetGridVisibility (
        int gridLineTypes,
        int rowTypes,
        VARIANT_BOOL bValue );
    HRESULT GetDataType (
        enum AcRowType rowType,
        enum AcValueDataType * pDataType,
        enum AcValueUnitType * pUnitType );
    HRESULT SetDataType (
        int rowTypes,
        enum AcValueDataType nDataType,
        enum AcValueUnitType nUnitType );
    _bstr_t GetFormat (
        enum AcRowType rowType );
    HRESULT SetFormat (
        int rowTypes,
        _bstr_t val );
    HRESULT CreateCellStyle (
        _bstr_t bstrCellStyle );
    HRESULT CreateCellStyleFromStyle (
        _bstr_t bstrCellStyle,
        _bstr_t bstrSourceCellStyle );
    HRESULT RenameCellStyle (
        _bstr_t bstrOldName,
        _bstr_t bstrNewName );
    HRESULT DeleteCellStyle (
        _bstr_t bstrCellStyle );
    _bstr_t GetUniqueCellStyleName (
        _bstr_t pszBaseName );
    VARIANT_BOOL GetIsCellStyleInUse (
        _bstr_t pszCellStyle );
    long GetNumCellStyles ( );
    HRESULT GetCellStyles (
        VARIANT * cellStylesArray );
    LONG_PTR GetTextStyleId (
        _bstr_t bstrCellStyle );
    HRESULT SetTextStyleId (
        _bstr_t bstrCellStyle,
        LONG_PTR val );
    double GetTextHeight2 (
        _bstr_t bstrCellStyle );
    HRESULT SetTextHeight2 (
        _bstr_t bstrCellStyle,
        double Height );
    enum AcCellAlignment GetAlignment2 (
        _bstr_t bstrCellStyle );
    HRESULT SetAlignment2 (
        _bstr_t bstrCellStyle,
        enum AcCellAlignment cellAlignment );
    IAcadAcCmColorPtr GetColor2 (
        _bstr_t bstrCellStyle );
    HRESULT SetColor2 (
        _bstr_t bstrCellStyle,
        struct IAcadAcCmColor * color );
    IAcadAcCmColorPtr GetBackgroundColor2 (
        _bstr_t bstrCellStyle );
    HRESULT SetBackgroundColor2 (
        _bstr_t bstrCellStyle,
        struct IAcadAcCmColor * color );
    HRESULT GetDataType2 (
        _bstr_t bstrCellStyle,
        enum AcValueDataType * pDataType,
        enum AcValueUnitType * pUnitType );
    HRESULT SetDataType2 (
        _bstr_t bstrCellStyle,
        enum AcValueDataType nDataType,
        enum AcValueUnitType nUnitType );
    HRESULT GetFormat2 (
        _bstr_t bstrCellStyle,
        BSTR * pbstrFormat );
    HRESULT SetFormat2 (
        _bstr_t bstrCellStyle,
        _bstr_t bstrFormat );
    int GetCellClass (
        _bstr_t bstrCellStyle );
    HRESULT SetCellClass (
        _bstr_t bstrCellStyle,
        int cellClass );
    double GetRotation (
        _bstr_t bstrCellStyle );
    HRESULT SetRotation (
        _bstr_t bstrCellStyle,
        double Rotation );
    VARIANT_BOOL GetIsMergeAllEnabled (
        _bstr_t bstrCellStyle );
    HRESULT EnableMergeAll (
        _bstr_t bstrCellStyle,
        VARIANT_BOOL bEnable );
    ACAD_LWEIGHT GetGridLineWeight2 (
        _bstr_t bstrCellStyle,
        enum AcGridLineType gridLineType );
    HRESULT SetGridLineWeight2 (
        _bstr_t bstrCellStyle,
        enum AcGridLineType gridLineTypes,
        ACAD_LWEIGHT Lineweight );
    IAcadAcCmColorPtr GetGridColor2 (
        _bstr_t bstrCellStyle,
        enum AcGridLineType gridLineType );
    HRESULT SetGridColor2 (
        _bstr_t bstrCellStyle,
        enum AcGridLineType gridLineTypes,
        struct IAcadAcCmColor * pColor );
    VARIANT_BOOL GetGridVisibility2 (
        _bstr_t bstrCellStyle,
        enum AcGridLineType gridLineType );
    HRESULT SetGridVisibility2 (
        _bstr_t bstrCellStyle,
        enum AcGridLineType gridLineTypes,
        VARIANT_BOOL bValue );
    LONG_PTR GetTemplateId ( );
    void PutTemplateId (
        LONG_PTR pVal );
    HRESULT SetTemplateId (
        LONG_PTR val,
        enum AcMergeCellStyleOption option );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrValue ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrValue ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * bstr ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR bstr ) = 0;
      virtual HRESULT __stdcall get_BitFlags (
        /*[out,retval]*/ long * bitFlag ) = 0;
      virtual HRESULT __stdcall put_BitFlags (
        /*[in]*/ long bitFlag ) = 0;
      virtual HRESULT __stdcall get_FlowDirection (
        /*[out,retval]*/ enum AcTableDirection * pFlow ) = 0;
      virtual HRESULT __stdcall put_FlowDirection (
        /*[in]*/ enum AcTableDirection pFlow ) = 0;
      virtual HRESULT __stdcall get_HorzCellMargin (
        /*[out,retval]*/ double * dHorzCellMargin ) = 0;
      virtual HRESULT __stdcall put_HorzCellMargin (
        /*[in]*/ double dHorzCellMargin ) = 0;
      virtual HRESULT __stdcall get_VertCellMargin (
        /*[out,retval]*/ double * dVertCellMargin ) = 0;
      virtual HRESULT __stdcall put_VertCellMargin (
        /*[in]*/ double dVertCellMargin ) = 0;
      virtual HRESULT __stdcall get_TitleSuppressed (
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall put_TitleSuppressed (
        /*[in]*/ VARIANT_BOOL bValue ) = 0;
      virtual HRESULT __stdcall get_HeaderSuppressed (
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall put_HeaderSuppressed (
        /*[in]*/ VARIANT_BOOL bValue ) = 0;
      virtual HRESULT __stdcall raw_GetTextStyle (
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall raw_SetTextStyle (
        /*[in]*/ int rowTypes,
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall raw_GetTextHeight (
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ double * pTextHeight ) = 0;
      virtual HRESULT __stdcall raw_SetTextHeight (
        /*[in]*/ int rowTypes,
        /*[in]*/ double TextHeight ) = 0;
      virtual HRESULT __stdcall raw_GetAlignment (
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ enum AcCellAlignment * pCellAlignment ) = 0;
      virtual HRESULT __stdcall raw_SetAlignment (
        /*[in]*/ int rowTypes,
        /*[in]*/ enum AcCellAlignment cellAlignment ) = 0;
      virtual HRESULT __stdcall raw_GetColor (
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall raw_SetColor (
        /*[in]*/ int rowTypes,
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall raw_GetBackgroundColor (
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall raw_SetBackgroundColor (
        /*[in]*/ int rowTypes,
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall raw_GetBackgroundColorNone (
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_SetBackgroundColorNone (
        /*[in]*/ int rowTypes,
        /*[in]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_GetGridLineWeight (
        /*[in]*/ enum AcGridLineType gridLineType,
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ ACAD_LWEIGHT * Lineweight ) = 0;
      virtual HRESULT __stdcall raw_SetGridLineWeight (
        /*[in]*/ int gridLineTypes,
        /*[in]*/ int rowTypes,
        /*[in]*/ ACAD_LWEIGHT Lineweight ) = 0;
      virtual HRESULT __stdcall raw_GetGridColor (
        /*[in]*/ enum AcGridLineType gridLineType,
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall raw_SetGridColor (
        /*[in]*/ int gridLineTypes,
        /*[in]*/ int rowTypes,
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall raw_GetGridVisibility (
        /*[in]*/ enum AcGridLineType gridLineType,
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_SetGridVisibility (
        /*[in]*/ int gridLineTypes,
        /*[in]*/ int rowTypes,
        /*[in]*/ VARIANT_BOOL bValue ) = 0;
      virtual HRESULT __stdcall raw_GetDataType (
        /*[in]*/ enum AcRowType rowType,
        /*[out]*/ enum AcValueDataType * pDataType,
        /*[out]*/ enum AcValueUnitType * pUnitType ) = 0;
      virtual HRESULT __stdcall raw_SetDataType (
        /*[in]*/ int rowTypes,
        /*[in]*/ enum AcValueDataType nDataType,
        /*[in]*/ enum AcValueUnitType nUnitType ) = 0;
      virtual HRESULT __stdcall raw_GetFormat (
        /*[in]*/ enum AcRowType rowType,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetFormat (
        /*[in]*/ int rowTypes,
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_CreateCellStyle (
        /*[in]*/ BSTR bstrCellStyle ) = 0;
      virtual HRESULT __stdcall raw_CreateCellStyleFromStyle (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ BSTR bstrSourceCellStyle ) = 0;
      virtual HRESULT __stdcall raw_RenameCellStyle (
        /*[in]*/ BSTR bstrOldName,
        /*[in]*/ BSTR bstrNewName ) = 0;
      virtual HRESULT __stdcall raw_DeleteCellStyle (
        /*[in]*/ BSTR bstrCellStyle ) = 0;
      virtual HRESULT __stdcall raw_GetUniqueCellStyleName (
        /*[in]*/ BSTR pszBaseName,
        /*[out,retval]*/ BSTR * pbstrUniqueName ) = 0;
      virtual HRESULT __stdcall raw_GetIsCellStyleInUse (
        /*[in]*/ BSTR pszCellStyle,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_NumCellStyles (
        /*[out,retval]*/ long * NumCellStyles ) = 0;
      virtual HRESULT __stdcall raw_GetCellStyles (
        /*[in]*/ VARIANT * cellStylesArray ) = 0;
      virtual HRESULT __stdcall raw_GetTextStyleId (
        /*[in]*/ BSTR bstrCellStyle,
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTextStyleId (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ LONG_PTR val ) = 0;
      virtual HRESULT __stdcall raw_GetTextHeight2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[out,retval]*/ double * pHeight ) = 0;
      virtual HRESULT __stdcall raw_SetTextHeight2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall raw_GetAlignment2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[out,retval]*/ enum AcCellAlignment * pCellAlignment ) = 0;
      virtual HRESULT __stdcall raw_SetAlignment2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ enum AcCellAlignment cellAlignment ) = 0;
      virtual HRESULT __stdcall raw_GetColor2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[out,retval]*/ struct IAcadAcCmColor * * color ) = 0;
      virtual HRESULT __stdcall raw_SetColor2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ struct IAcadAcCmColor * color ) = 0;
      virtual HRESULT __stdcall raw_GetBackgroundColor2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[out,retval]*/ struct IAcadAcCmColor * * color ) = 0;
      virtual HRESULT __stdcall raw_SetBackgroundColor2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ struct IAcadAcCmColor * color ) = 0;
      virtual HRESULT __stdcall raw_GetDataType2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[out]*/ enum AcValueDataType * pDataType,
        /*[out]*/ enum AcValueUnitType * pUnitType ) = 0;
      virtual HRESULT __stdcall raw_SetDataType2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ enum AcValueDataType nDataType,
        /*[in]*/ enum AcValueUnitType nUnitType ) = 0;
      virtual HRESULT __stdcall raw_GetFormat2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[out]*/ BSTR * pbstrFormat ) = 0;
      virtual HRESULT __stdcall raw_SetFormat2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ BSTR bstrFormat ) = 0;
      virtual HRESULT __stdcall raw_GetCellClass (
        /*[in]*/ BSTR bstrCellStyle,
        /*[out,retval]*/ int * cellClass ) = 0;
      virtual HRESULT __stdcall raw_SetCellClass (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ int cellClass ) = 0;
      virtual HRESULT __stdcall raw_GetRotation (
        /*[in]*/ BSTR bstrCellStyle,
        /*[out,retval]*/ double * Rotation ) = 0;
      virtual HRESULT __stdcall raw_SetRotation (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ double Rotation ) = 0;
      virtual HRESULT __stdcall raw_GetIsMergeAllEnabled (
        /*[in]*/ BSTR bstrCellStyle,
        /*[out,retval]*/ VARIANT_BOOL * bEnable ) = 0;
      virtual HRESULT __stdcall raw_EnableMergeAll (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ VARIANT_BOOL bEnable ) = 0;
      virtual HRESULT __stdcall raw_GetGridLineWeight2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ enum AcGridLineType gridLineType,
        /*[out,retval]*/ ACAD_LWEIGHT * Lineweight ) = 0;
      virtual HRESULT __stdcall raw_SetGridLineWeight2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ enum AcGridLineType gridLineTypes,
        /*[in]*/ ACAD_LWEIGHT Lineweight ) = 0;
      virtual HRESULT __stdcall raw_GetGridColor2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ enum AcGridLineType gridLineType,
        /*[out,retval]*/ struct IAcadAcCmColor * * pColor ) = 0;
      virtual HRESULT __stdcall raw_SetGridColor2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ enum AcGridLineType gridLineTypes,
        /*[in]*/ struct IAcadAcCmColor * pColor ) = 0;
      virtual HRESULT __stdcall raw_GetGridVisibility2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ enum AcGridLineType gridLineType,
        /*[out,retval]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_SetGridVisibility2 (
        /*[in]*/ BSTR bstrCellStyle,
        /*[in]*/ enum AcGridLineType gridLineTypes,
        /*[in]*/ VARIANT_BOOL bValue ) = 0;
      virtual HRESULT __stdcall get_TemplateId (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TemplateId (
        /*[in]*/ LONG_PTR pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTemplateId (
        /*[in]*/ LONG_PTR val,
        enum AcMergeCellStyleOption option ) = 0;
};

struct __declspec(uuid("67388466-a056-4740-97c6-d81837fc8199"))
IAcadMLeaderStyle : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetBitFlags,put=PutBitFlags))
    long BitFlags;
    __declspec(property(get=GetContentType,put=PutContentType))
    enum AcMLeaderContentType ContentType;
    __declspec(property(get=GetDrawMLeaderOrderType,put=PutDrawMLeaderOrderType))
    enum AcDrawMLeaderOrderType DrawMLeaderOrderType;
    __declspec(property(get=GetDrawLeaderOrderType,put=PutDrawLeaderOrderType))
    enum AcDrawLeaderOrderType DrawLeaderOrderType;
    __declspec(property(get=GetMaxLeaderSegmentsPoints,put=PutMaxLeaderSegmentsPoints))
    int MaxLeaderSegmentsPoints;
    __declspec(property(get=GetFirstSegmentAngleConstraint,put=PutFirstSegmentAngleConstraint))
    enum AcSegmentAngleType FirstSegmentAngleConstraint;
    __declspec(property(get=GetSecondSegmentAngleConstraint,put=PutSecondSegmentAngleConstraint))
    enum AcSegmentAngleType SecondSegmentAngleConstraint;
    __declspec(property(get=GetLeaderLinetype,put=PutLeaderLinetype))
    enum AcMLeaderType LeaderLinetype;
    __declspec(property(get=GetLeaderLineColor,put=PutLeaderLineColor))
    IAcadAcCmColorPtr LeaderLineColor;
    __declspec(property(get=GetLeaderLineTypeId,put=PutLeaderLineTypeId))
    ACAD_LTYPE LeaderLineTypeId;
    __declspec(property(get=GetLeaderLineWeight,put=PutLeaderLineWeight))
    enum AcLineWeight LeaderLineWeight;
    __declspec(property(get=GetEnableLanding,put=PutEnableLanding))
    VARIANT_BOOL EnableLanding;
    __declspec(property(get=GetLandingGap,put=PutLandingGap))
    double LandingGap;
    __declspec(property(get=GetEnableDogleg,put=PutEnableDogleg))
    VARIANT_BOOL EnableDogleg;
    __declspec(property(get=GetDoglegLength,put=PutDoglegLength))
    double DoglegLength;
    __declspec(property(get=GetArrowSymbol,put=PutArrowSymbol))
    _bstr_t ArrowSymbol;
    __declspec(property(get=GetArrowSize,put=PutArrowSize))
    double ArrowSize;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextLeftAttachmentType,put=PutTextLeftAttachmentType))
    enum AcTextAttachmentType TextLeftAttachmentType;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    IAcadAcCmColorPtr TextColor;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;
    __declspec(property(get=GetEnableFrameText,put=PutEnableFrameText))
    VARIANT_BOOL EnableFrameText;
    __declspec(property(get=GetAlignSpace,put=PutAlignSpace))
    double AlignSpace;
    __declspec(property(get=GetBlock,put=PutBlock))
    _bstr_t Block;
    __declspec(property(get=GetBlockColor,put=PutBlockColor))
    IAcadAcCmColorPtr BlockColor;
    __declspec(property(get=GetEnableBlockScale,put=PutEnableBlockScale))
    VARIANT_BOOL EnableBlockScale;
    __declspec(property(get=GetBlockScale,put=PutBlockScale))
    double BlockScale;
    __declspec(property(get=GetEnableBlockRotation,put=PutEnableBlockRotation))
    VARIANT_BOOL EnableBlockRotation;
    __declspec(property(get=GetBlockRotation,put=PutBlockRotation))
    double BlockRotation;
    __declspec(property(get=GetBlockConnectionType,put=PutBlockConnectionType))
    enum AcBlockConnectionType BlockConnectionType;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetOverwritePropChanged))
    VARIANT_BOOL OverwritePropChanged;
    __declspec(property(get=GetAnnotative,put=PutAnnotative))
    VARIANT_BOOL Annotative;
    __declspec(property(get=GetBreakSize,put=PutBreakSize))
    double BreakSize;
    __declspec(property(get=GetTextString,put=PutTextString))
    _bstr_t TextString;
    __declspec(property(get=GetTextAngleType,put=PutTextAngleType))
    enum AcTextAngleType TextAngleType;
    __declspec(property(get=GetTextAlignmentType,put=PutTextAlignmentType))
    enum AcTextAlignmentType TextAlignmentType;
    __declspec(property(get=GetTextRightAttachmentType,put=PutTextRightAttachmentType))
    enum AcTextAttachmentType TextRightAttachmentType;
    __declspec(property(get=GetTextAttachmentDirection,put=PutTextAttachmentDirection))
    enum AcTextAttachmentDirection TextAttachmentDirection;
    __declspec(property(get=GetTextTopAttachmentType,put=PutTextTopAttachmentType))
    enum AcVerticalTextAttachmentType TextTopAttachmentType;
    __declspec(property(get=GetTextBottomAttachmentType,put=PutTextBottomAttachmentType))
    enum AcVerticalTextAttachmentType TextBottomAttachmentType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t Description );
    long GetBitFlags ( );
    void PutBitFlags (
        long bitFlag );
    enum AcMLeaderContentType GetContentType ( );
    void PutContentType (
        enum AcMLeaderContentType Type );
    enum AcDrawMLeaderOrderType GetDrawMLeaderOrderType ( );
    void PutDrawMLeaderOrderType (
        enum AcDrawMLeaderOrderType Type );
    enum AcDrawLeaderOrderType GetDrawLeaderOrderType ( );
    void PutDrawLeaderOrderType (
        enum AcDrawLeaderOrderType Type );
    int GetMaxLeaderSegmentsPoints ( );
    void PutMaxLeaderSegmentsPoints (
        int number );
    enum AcSegmentAngleType GetFirstSegmentAngleConstraint ( );
    void PutFirstSegmentAngleConstraint (
        enum AcSegmentAngleType constraint );
    enum AcSegmentAngleType GetSecondSegmentAngleConstraint ( );
    void PutSecondSegmentAngleConstraint (
        enum AcSegmentAngleType constraint );
    enum AcMLeaderType GetLeaderLinetype ( );
    void PutLeaderLinetype (
        enum AcMLeaderType Type );
    IAcadAcCmColorPtr GetLeaderLineColor ( );
    void PutLeaderLineColor (
        struct IAcadAcCmColor * color );
    ACAD_LTYPE GetLeaderLineTypeId ( );
    void PutLeaderLineTypeId (
        ACAD_LTYPE Type );
    enum AcLineWeight GetLeaderLineWeight ( );
    void PutLeaderLineWeight (
        enum AcLineWeight weight );
    VARIANT_BOOL GetEnableLanding ( );
    void PutEnableLanding (
        VARIANT_BOOL enabled );
    double GetLandingGap ( );
    void PutLandingGap (
        double LandingGap );
    VARIANT_BOOL GetEnableDogleg ( );
    void PutEnableDogleg (
        VARIANT_BOOL enabled );
    double GetDoglegLength ( );
    void PutDoglegLength (
        double DoglegLength );
    _bstr_t GetArrowSymbol ( );
    void PutArrowSymbol (
        _bstr_t Name );
    double GetArrowSize ( );
    void PutArrowSize (
        double size );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t Name );
    enum AcTextAttachmentDirection GetTextAttachmentDirection ( );
    void PutTextAttachmentDirection (
        enum AcTextAttachmentDirection dir );
    enum AcTextAttachmentType GetTextLeftAttachmentType ( );
    void PutTextLeftAttachmentType (
        enum AcTextAttachmentType Type );
    enum AcTextAttachmentType GetTextRightAttachmentType ( );
    void PutTextRightAttachmentType (
        enum AcTextAttachmentType Type );
    enum AcVerticalTextAttachmentType GetTextTopAttachmentType ( );
    void PutTextTopAttachmentType (
        enum AcVerticalTextAttachmentType Type );
    enum AcVerticalTextAttachmentType GetTextBottomAttachmentType ( );
    void PutTextBottomAttachmentType (
        enum AcVerticalTextAttachmentType Type );
    IAcadAcCmColorPtr GetTextColor ( );
    void PutTextColor (
        struct IAcadAcCmColor * color );
    double GetTextHeight ( );
    void PutTextHeight (
        double Height );
    VARIANT_BOOL GetEnableFrameText ( );
    void PutEnableFrameText (
        VARIANT_BOOL enabled );
    double GetAlignSpace ( );
    void PutAlignSpace (
        double AlignSpace );
    _bstr_t GetBlock ( );
    void PutBlock (
        _bstr_t Name );
    IAcadAcCmColorPtr GetBlockColor ( );
    void PutBlockColor (
        struct IAcadAcCmColor * color );
    VARIANT_BOOL GetEnableBlockScale ( );
    void PutEnableBlockScale (
        VARIANT_BOOL enabled );
    double GetBlockScale ( );
    void PutBlockScale (
        double ScaleFactor );
    VARIANT_BOOL GetEnableBlockRotation ( );
    void PutEnableBlockRotation (
        VARIANT_BOOL enabled );
    double GetBlockRotation ( );
    void PutBlockRotation (
        double Rotation );
    enum AcBlockConnectionType GetBlockConnectionType ( );
    void PutBlockConnectionType (
        enum AcBlockConnectionType Type );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double scale );
    VARIANT_BOOL GetOverwritePropChanged ( );
    VARIANT_BOOL GetAnnotative ( );
    void PutAnnotative (
        VARIANT_BOOL Annotative );
    double GetBreakSize ( );
    void PutBreakSize (
        double size );
    _bstr_t GetTextString ( );
    void PutTextString (
        _bstr_t Text );
    enum AcTextAngleType GetTextAngleType ( );
    void PutTextAngleType (
        enum AcTextAngleType Type );
    enum AcTextAlignmentType GetTextAlignmentType ( );
    void PutTextAlignmentType (
        enum AcTextAlignmentType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR Description ) = 0;
      virtual HRESULT __stdcall get_BitFlags (
        /*[out,retval]*/ long * bitFlag ) = 0;
      virtual HRESULT __stdcall put_BitFlags (
        /*[in]*/ long bitFlag ) = 0;
      virtual HRESULT __stdcall get_ContentType (
        /*[out,retval]*/ enum AcMLeaderContentType * Type ) = 0;
      virtual HRESULT __stdcall put_ContentType (
        /*[in]*/ enum AcMLeaderContentType Type ) = 0;
      virtual HRESULT __stdcall get_DrawMLeaderOrderType (
        /*[out,retval]*/ enum AcDrawMLeaderOrderType * Type ) = 0;
      virtual HRESULT __stdcall put_DrawMLeaderOrderType (
        /*[in]*/ enum AcDrawMLeaderOrderType Type ) = 0;
      virtual HRESULT __stdcall get_DrawLeaderOrderType (
        /*[out,retval]*/ enum AcDrawLeaderOrderType * Type ) = 0;
      virtual HRESULT __stdcall put_DrawLeaderOrderType (
        /*[in]*/ enum AcDrawLeaderOrderType Type ) = 0;
      virtual HRESULT __stdcall get_MaxLeaderSegmentsPoints (
        /*[out,retval]*/ int * number ) = 0;
      virtual HRESULT __stdcall put_MaxLeaderSegmentsPoints (
        /*[in]*/ int number ) = 0;
      virtual HRESULT __stdcall get_FirstSegmentAngleConstraint (
        /*[out,retval]*/ enum AcSegmentAngleType * constraint ) = 0;
      virtual HRESULT __stdcall put_FirstSegmentAngleConstraint (
        /*[in]*/ enum AcSegmentAngleType constraint ) = 0;
      virtual HRESULT __stdcall get_SecondSegmentAngleConstraint (
        /*[out,retval]*/ enum AcSegmentAngleType * constraint ) = 0;
      virtual HRESULT __stdcall put_SecondSegmentAngleConstraint (
        /*[in]*/ enum AcSegmentAngleType constraint ) = 0;
      virtual HRESULT __stdcall get_LeaderLinetype (
        /*[out,retval]*/ enum AcMLeaderType * Type ) = 0;
      virtual HRESULT __stdcall put_LeaderLinetype (
        /*[in]*/ enum AcMLeaderType Type ) = 0;
      virtual HRESULT __stdcall get_LeaderLineColor (
        /*[out,retval]*/ struct IAcadAcCmColor * * color ) = 0;
      virtual HRESULT __stdcall put_LeaderLineColor (
        /*[in]*/ struct IAcadAcCmColor * color ) = 0;
      virtual HRESULT __stdcall get_LeaderLineTypeId (
        /*[out,retval]*/ ACAD_LTYPE * Type ) = 0;
      virtual HRESULT __stdcall put_LeaderLineTypeId (
        /*[in]*/ ACAD_LTYPE Type ) = 0;
      virtual HRESULT __stdcall get_LeaderLineWeight (
        /*[out,retval]*/ enum AcLineWeight * weight ) = 0;
      virtual HRESULT __stdcall put_LeaderLineWeight (
        /*[in]*/ enum AcLineWeight weight ) = 0;
      virtual HRESULT __stdcall get_EnableLanding (
        /*[out,retval]*/ VARIANT_BOOL * enabled ) = 0;
      virtual HRESULT __stdcall put_EnableLanding (
        /*[in]*/ VARIANT_BOOL enabled ) = 0;
      virtual HRESULT __stdcall get_LandingGap (
        /*[out,retval]*/ double * LandingGap ) = 0;
      virtual HRESULT __stdcall put_LandingGap (
        /*[in]*/ double LandingGap ) = 0;
      virtual HRESULT __stdcall get_EnableDogleg (
        /*[out,retval]*/ VARIANT_BOOL * enabled ) = 0;
      virtual HRESULT __stdcall put_EnableDogleg (
        /*[in]*/ VARIANT_BOOL enabled ) = 0;
      virtual HRESULT __stdcall get_DoglegLength (
        /*[out,retval]*/ double * DoglegLength ) = 0;
      virtual HRESULT __stdcall put_DoglegLength (
        /*[in]*/ double DoglegLength ) = 0;
      virtual HRESULT __stdcall get_ArrowSymbol (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_ArrowSymbol (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_ArrowSize (
        /*[out,retval]*/ double * size ) = 0;
      virtual HRESULT __stdcall put_ArrowSize (
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_TextAttachmentDirection (
        /*[out,retval]*/ enum AcTextAttachmentDirection * dir ) = 0;
      virtual HRESULT __stdcall put_TextAttachmentDirection (
        /*[in]*/ enum AcTextAttachmentDirection dir ) = 0;
      virtual HRESULT __stdcall get_TextLeftAttachmentType (
        /*[out,retval]*/ enum AcTextAttachmentType * Type ) = 0;
      virtual HRESULT __stdcall put_TextLeftAttachmentType (
        /*[in]*/ enum AcTextAttachmentType Type ) = 0;
      virtual HRESULT __stdcall get_TextRightAttachmentType (
        /*[out,retval]*/ enum AcTextAttachmentType * Type ) = 0;
      virtual HRESULT __stdcall put_TextRightAttachmentType (
        /*[in]*/ enum AcTextAttachmentType Type ) = 0;
      virtual HRESULT __stdcall get_TextTopAttachmentType (
        /*[out,retval]*/ enum AcVerticalTextAttachmentType * Type ) = 0;
      virtual HRESULT __stdcall put_TextTopAttachmentType (
        /*[in]*/ enum AcVerticalTextAttachmentType Type ) = 0;
      virtual HRESULT __stdcall get_TextBottomAttachmentType (
        /*[out,retval]*/ enum AcVerticalTextAttachmentType * Type ) = 0;
      virtual HRESULT __stdcall put_TextBottomAttachmentType (
        /*[in]*/ enum AcVerticalTextAttachmentType Type ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ struct IAcadAcCmColor * * color ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ struct IAcadAcCmColor * color ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_EnableFrameText (
        /*[out,retval]*/ VARIANT_BOOL * enabled ) = 0;
      virtual HRESULT __stdcall put_EnableFrameText (
        /*[in]*/ VARIANT_BOOL enabled ) = 0;
      virtual HRESULT __stdcall get_AlignSpace (
        /*[out,retval]*/ double * AlignSpace ) = 0;
      virtual HRESULT __stdcall put_AlignSpace (
        /*[in]*/ double AlignSpace ) = 0;
      virtual HRESULT __stdcall get_Block (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Block (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_BlockColor (
        /*[out,retval]*/ struct IAcadAcCmColor * * color ) = 0;
      virtual HRESULT __stdcall put_BlockColor (
        /*[in]*/ struct IAcadAcCmColor * color ) = 0;
      virtual HRESULT __stdcall get_EnableBlockScale (
        /*[out,retval]*/ VARIANT_BOOL * enabled ) = 0;
      virtual HRESULT __stdcall put_EnableBlockScale (
        /*[in]*/ VARIANT_BOOL enabled ) = 0;
      virtual HRESULT __stdcall get_BlockScale (
        /*[out,retval]*/ double * ScaleFactor ) = 0;
      virtual HRESULT __stdcall put_BlockScale (
        /*[in]*/ double ScaleFactor ) = 0;
      virtual HRESULT __stdcall get_EnableBlockRotation (
        /*[out,retval]*/ VARIANT_BOOL * enabled ) = 0;
      virtual HRESULT __stdcall put_EnableBlockRotation (
        /*[in]*/ VARIANT_BOOL enabled ) = 0;
      virtual HRESULT __stdcall get_BlockRotation (
        /*[out,retval]*/ double * Rotation ) = 0;
      virtual HRESULT __stdcall put_BlockRotation (
        /*[in]*/ double Rotation ) = 0;
      virtual HRESULT __stdcall get_BlockConnectionType (
        /*[out,retval]*/ enum AcBlockConnectionType * Type ) = 0;
      virtual HRESULT __stdcall put_BlockConnectionType (
        /*[in]*/ enum AcBlockConnectionType Type ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * scale ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double scale ) = 0;
      virtual HRESULT __stdcall get_OverwritePropChanged (
        /*[out,retval]*/ VARIANT_BOOL * changed ) = 0;
      virtual HRESULT __stdcall get_Annotative (
        /*[out,retval]*/ VARIANT_BOOL * Annotative ) = 0;
      virtual HRESULT __stdcall put_Annotative (
        /*[in]*/ VARIANT_BOOL Annotative ) = 0;
      virtual HRESULT __stdcall get_BreakSize (
        /*[out,retval]*/ double * size ) = 0;
      virtual HRESULT __stdcall put_BreakSize (
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall get_TextString (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TextString (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TextAngleType (
        /*[out,retval]*/ enum AcTextAngleType * Type ) = 0;
      virtual HRESULT __stdcall put_TextAngleType (
        /*[in]*/ enum AcTextAngleType Type ) = 0;
      virtual HRESULT __stdcall get_TextAlignmentType (
        /*[out,retval]*/ enum AcTextAlignmentType * Type ) = 0;
      virtual HRESULT __stdcall put_TextAlignmentType (
        /*[in]*/ enum AcTextAlignmentType Type ) = 0;
};

struct __declspec(uuid("d867a88e-e78d-4eca-8637-74a342fa32b2"))
IAcadAttributeReference : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum AcHorizontalAlignment HorizontalAlignment;
    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetNormal,put=PutNormal))
    _variant_t Normal;
    __declspec(property(get=GetObliqueAngle,put=PutObliqueAngle))
    ACAD_ANGLE ObliqueAngle;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetTagString,put=PutTagString))
    _bstr_t TagString;
    __declspec(property(get=GetTextAlignmentPoint,put=PutTextAlignmentPoint))
    _variant_t TextAlignmentPoint;
    __declspec(property(get=GetTextGenerationFlag,put=PutTextGenerationFlag))
    long TextGenerationFlag;
    __declspec(property(get=GetTextString,put=PutTextString))
    _bstr_t TextString;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum AcVerticalAlignment VerticalAlignment;
    __declspec(property(get=GetFieldLength,put=PutFieldLength))
    long FieldLength;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum AcAlignment Alignment;
    __declspec(property(get=GetUpsideDown,put=PutUpsideDown))
    VARIANT_BOOL UpsideDown;
    __declspec(property(get=GetBackward,put=PutBackward))
    VARIANT_BOOL Backward;
    __declspec(property(get=GetInvisible,put=PutInvisible))
    VARIANT_BOOL Invisible;
    __declspec(property(get=GetConstant))
    VARIANT_BOOL Constant;
    __declspec(property(get=GetLockPosition))
    VARIANT_BOOL LockPosition;
    __declspec(property(get=GetMTextAttribute,put=PutMTextAttribute))
    VARIANT_BOOL MTextAttribute;
    __declspec(property(get=GetMTextAttributeContent,put=PutMTextAttributeContent))
    _bstr_t MTextAttributeContent;
    __declspec(property(get=GetMTextDrawingDirection,put=PutMTextDrawingDirection))
    enum AcDrawingDirection MTextDrawingDirection;

    //
    // Wrapper methods for error-handling
    //

    double GetHeight ( );
    void PutHeight (
        double Height );
    enum AcHorizontalAlignment GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum AcHorizontalAlignment horizAlign );
    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    _variant_t GetNormal ( );
    void PutNormal (
        const _variant_t & Normal );
    ACAD_ANGLE GetObliqueAngle ( );
    void PutObliqueAngle (
        ACAD_ANGLE obliAngle );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS scalFactor );
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t Name );
    _bstr_t GetTagString ( );
    void PutTagString (
        _bstr_t bstrTag );
    _variant_t GetTextAlignmentPoint ( );
    void PutTextAlignmentPoint (
        const _variant_t & alignPoint );
    long GetTextGenerationFlag ( );
    void PutTextGenerationFlag (
        long textGenFlag );
    _bstr_t GetTextString ( );
    void PutTextString (
        _bstr_t bstrText );
    double GetThickness ( );
    void PutThickness (
        double Thickness );
    enum AcVerticalAlignment GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum AcVerticalAlignment vertiAlign );
    long GetFieldLength ( );
    void PutFieldLength (
        long fieldLen );
    enum AcAlignment GetAlignment ( );
    void PutAlignment (
        enum AcAlignment align );
    VARIANT_BOOL GetUpsideDown ( );
    void PutUpsideDown (
        VARIANT_BOOL bUpsideDown );
    VARIANT_BOOL GetBackward ( );
    void PutBackward (
        VARIANT_BOOL bBackward );
    VARIANT_BOOL GetInvisible ( );
    void PutInvisible (
        VARIANT_BOOL bInvisible );
    VARIANT_BOOL GetConstant ( );
    VARIANT_BOOL GetLockPosition ( );
    VARIANT_BOOL GetMTextAttribute ( );
    void PutMTextAttribute (
        VARIANT_BOOL bMTextAttribute );
    _bstr_t GetMTextAttributeContent ( );
    void PutMTextAttributeContent (
        _bstr_t content );
    HRESULT UpdateMTextAttribute ( );
    double GetMTextBoundaryWidth ( );
    void PutMTextBoundaryWidth (
        double boundaryWidth );
    enum AcDrawingDirection GetMTextDrawingDirection ( );
    void PutMTextDrawingDirection (
        enum AcDrawingDirection drawDir );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ enum AcHorizontalAlignment * horizAlign ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ enum AcHorizontalAlignment horizAlign ) = 0;
      virtual HRESULT __stdcall get_InsertionPoint (
        /*[out,retval]*/ VARIANT * insPoint ) = 0;
      virtual HRESULT __stdcall put_InsertionPoint (
        /*[in]*/ VARIANT insPoint ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ VARIANT * Normal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ VARIANT Normal ) = 0;
      virtual HRESULT __stdcall get_ObliqueAngle (
        /*[out,retval]*/ ACAD_ANGLE * obliAngle ) = 0;
      virtual HRESULT __stdcall put_ObliqueAngle (
        /*[in]*/ ACAD_ANGLE obliAngle ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ ACAD_ANGLE * rotAngle ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ ACAD_ANGLE rotAngle ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * scalFactor ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ ACAD_NOUNITS scalFactor ) = 0;
      virtual HRESULT __stdcall get_StyleName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_StyleName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_TagString (
        /*[out,retval]*/ BSTR * bstrTag ) = 0;
      virtual HRESULT __stdcall put_TagString (
        /*[in]*/ BSTR bstrTag ) = 0;
      virtual HRESULT __stdcall get_TextAlignmentPoint (
        /*[out,retval]*/ VARIANT * alignPoint ) = 0;
      virtual HRESULT __stdcall put_TextAlignmentPoint (
        /*[in]*/ VARIANT alignPoint ) = 0;
      virtual HRESULT __stdcall get_TextGenerationFlag (
        /*[out,retval]*/ long * textGenFlag ) = 0;
      virtual HRESULT __stdcall put_TextGenerationFlag (
        /*[in]*/ long textGenFlag ) = 0;
      virtual HRESULT __stdcall get_TextString (
        /*[out,retval]*/ BSTR * bstrText ) = 0;
      virtual HRESULT __stdcall put_TextString (
        /*[in]*/ BSTR bstrText ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * Thickness ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double Thickness ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ enum AcVerticalAlignment * vertiAlign ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ enum AcVerticalAlignment vertiAlign ) = 0;
      virtual HRESULT __stdcall get_FieldLength (
        /*[out,retval]*/ long * fieldLen ) = 0;
      virtual HRESULT __stdcall put_FieldLength (
        /*[in]*/ long fieldLen ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum AcAlignment * align ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum AcAlignment align ) = 0;
      virtual HRESULT __stdcall get_UpsideDown (
        /*[out,retval]*/ VARIANT_BOOL * bUpsideDown ) = 0;
      virtual HRESULT __stdcall put_UpsideDown (
        /*[in]*/ VARIANT_BOOL bUpsideDown ) = 0;
      virtual HRESULT __stdcall get_Backward (
        /*[out,retval]*/ VARIANT_BOOL * bBackward ) = 0;
      virtual HRESULT __stdcall put_Backward (
        /*[in]*/ VARIANT_BOOL bBackward ) = 0;
      virtual HRESULT __stdcall get_Invisible (
        /*[out,retval]*/ VARIANT_BOOL * bInvisible ) = 0;
      virtual HRESULT __stdcall put_Invisible (
        /*[in]*/ VARIANT_BOOL bInvisible ) = 0;
      virtual HRESULT __stdcall get_Constant (
        /*[out,retval]*/ VARIANT_BOOL * bConstant ) = 0;
      virtual HRESULT __stdcall get_LockPosition (
        /*[out,retval]*/ VARIANT_BOOL * bLockPosition ) = 0;
      virtual HRESULT __stdcall get_MTextAttribute (
        /*[out,retval]*/ VARIANT_BOOL * bMTextAttribute ) = 0;
      virtual HRESULT __stdcall put_MTextAttribute (
        /*[in]*/ VARIANT_BOOL bMTextAttribute ) = 0;
      virtual HRESULT __stdcall get_MTextAttributeContent (
        /*[out,retval]*/ BSTR * content ) = 0;
      virtual HRESULT __stdcall put_MTextAttributeContent (
        /*[in]*/ BSTR content ) = 0;
      virtual HRESULT __stdcall raw_UpdateMTextAttribute ( ) = 0;
      virtual HRESULT __stdcall get_MTextBoundaryWidth (
        /*[out,retval]*/ double * boundaryWidth ) = 0;
      virtual HRESULT __stdcall put_MTextBoundaryWidth (
        double boundaryWidth ) = 0;
      virtual HRESULT __stdcall get_MTextDrawingDirection (
        /*[out,retval]*/ enum AcDrawingDirection * drawDir ) = 0;
      virtual HRESULT __stdcall put_MTextDrawingDirection (
        /*[in]*/ enum AcDrawingDirection drawDir ) = 0;
};

struct __declspec(uuid("5be299ec-70bb-4fe3-8609-d74ec8ff0eaf"))
IAcadOle : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetScaleWidth,put=PutScaleWidth))
    double ScaleWidth;
    __declspec(property(get=GetScaleHeight,put=PutScaleHeight))
    double ScaleHeight;
    __declspec(property(get=GetLockAspectRatio,put=PutLockAspectRatio))
    VARIANT_BOOL LockAspectRatio;
    __declspec(property(get=GetOleItemType,put=PutOleItemType))
    enum AcOleType OleItemType;
    __declspec(property(get=GetOlePlotQuality,put=PutOlePlotQuality))
    enum AcOlePlotQuality OlePlotQuality;
    __declspec(property(get=GetOleSourceApp,put=PutOleSourceApp))
    _bstr_t OleSourceApp;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & insPoint );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rot );
    double GetWidth ( );
    void PutWidth (
        double Width );
    double GetHeight ( );
    void PutHeight (
        double Height );
    double GetScaleWidth ( );
    void PutScaleWidth (
        double swidth );
    double GetScaleHeight ( );
    void PutScaleHeight (
        double sheight );
    VARIANT_BOOL GetLockAspectRatio ( );
    void PutLockAspectRatio (
        VARIANT_BOOL aspect );
    enum AcOleType GetOleItemType ( );
    void PutOleItemType (
        enum AcOleType pType );
    enum AcOlePlotQuality GetOlePlotQuality ( );
    void PutOlePlotQuality (
        enum AcOlePlotQuality pPQuality );
    _bstr_t GetOleSourceApp ( );
    void PutOleSourceApp (
        _bstr_t srcApp );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InsertionPoint (
        /*[out,retval]*/ VARIANT * insPoint ) = 0;
      virtual HRESULT __stdcall put_InsertionPoint (
        /*[in]*/ VARIANT insPoint ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ ACAD_ANGLE * rot ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ ACAD_ANGLE rot ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_ScaleWidth (
        /*[out,retval]*/ double * swidth ) = 0;
      virtual HRESULT __stdcall put_ScaleWidth (
        /*[in]*/ double swidth ) = 0;
      virtual HRESULT __stdcall get_ScaleHeight (
        /*[out,retval]*/ double * sheight ) = 0;
      virtual HRESULT __stdcall put_ScaleHeight (
        /*[in]*/ double sheight ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ VARIANT_BOOL * aspect ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ VARIANT_BOOL aspect ) = 0;
      virtual HRESULT __stdcall get_OleItemType (
        /*[out,retval]*/ enum AcOleType * pType ) = 0;
      virtual HRESULT __stdcall put_OleItemType (
        /*[in]*/ enum AcOleType pType ) = 0;
      virtual HRESULT __stdcall get_OlePlotQuality (
        /*[out,retval]*/ enum AcOlePlotQuality * pPQuality ) = 0;
      virtual HRESULT __stdcall put_OlePlotQuality (
        /*[in]*/ enum AcOlePlotQuality pPQuality ) = 0;
      virtual HRESULT __stdcall get_OleSourceApp (
        /*[out,retval]*/ BSTR * srcApp ) = 0;
      virtual HRESULT __stdcall put_OleSourceApp (
        /*[in]*/ BSTR srcApp ) = 0;
};

struct __declspec(uuid("be461951-c77e-4c70-bd83-c392820c11fc"))
IAcadHelix : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    _variant_t Position;
    __declspec(property(get=GetConstrain,put=PutConstrain))
    enum AcHelixConstrainType Constrain;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTurns,put=PutTurns))
    ACAD_NOUNITS Turns;
    __declspec(property(get=GetTurnHeight,put=PutTurnHeight))
    double TurnHeight;
    __declspec(property(get=GetBaseRadius,put=PutBaseRadius))
    double BaseRadius;
    __declspec(property(get=GetTopRadius,put=PutTopRadius))
    double TopRadius;
    __declspec(property(get=GetTwist,put=PutTwist))
    enum AcHelixTwistType Twist;
    __declspec(property(get=GetTurnSlope))
    ACAD_ANGLE TurnSlope;
    __declspec(property(get=GetTotalLength))
    double TotalLength;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetPosition ( );
    void PutPosition (
        const _variant_t & StartPoint );
    enum AcHelixConstrainType GetConstrain ( );
    void PutConstrain (
        enum AcHelixConstrainType constrainType );
    double GetHeight ( );
    void PutHeight (
        double Length );
    ACAD_NOUNITS GetTurns ( );
    void PutTurns (
        ACAD_NOUNITS Turns );
    double GetTurnHeight ( );
    void PutTurnHeight (
        double Distance );
    double GetBaseRadius ( );
    void PutBaseRadius (
        double Radius );
    double GetTopRadius ( );
    void PutTopRadius (
        double Radius );
    enum AcHelixTwistType GetTwist ( );
    void PutTwist (
        enum AcHelixTwistType twistType );
    ACAD_ANGLE GetTurnSlope ( );
    double GetTotalLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ VARIANT * StartPoint ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ VARIANT StartPoint ) = 0;
      virtual HRESULT __stdcall get_Constrain (
        /*[out,retval]*/ enum AcHelixConstrainType * constrainType ) = 0;
      virtual HRESULT __stdcall put_Constrain (
        /*[in]*/ enum AcHelixConstrainType constrainType ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Length ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Length ) = 0;
      virtual HRESULT __stdcall get_Turns (
        /*[out,retval]*/ ACAD_NOUNITS * Turns ) = 0;
      virtual HRESULT __stdcall put_Turns (
        /*[in]*/ ACAD_NOUNITS Turns ) = 0;
      virtual HRESULT __stdcall get_TurnHeight (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_TurnHeight (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_BaseRadius (
        /*[out,retval]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall put_BaseRadius (
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall get_TopRadius (
        /*[out,retval]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall put_TopRadius (
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall get_Twist (
        /*[out,retval]*/ enum AcHelixTwistType * twistType ) = 0;
      virtual HRESULT __stdcall put_Twist (
        /*[in]*/ enum AcHelixTwistType twistType ) = 0;
      virtual HRESULT __stdcall get_TurnSlope (
        /*[out,retval]*/ ACAD_ANGLE * slopeAngle ) = 0;
      virtual HRESULT __stdcall get_TotalLength (
        /*[out,retval]*/ double * TotalLength ) = 0;
};

struct __declspec(uuid("3d3962e2-e12b-4559-96cf-f32134a0577b"))
IAcadSurface : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetWireframeType,put=PutWireframeType))
    enum AcWireframeType WireframeType;
    __declspec(property(get=GetSurfaceType))
    _bstr_t SurfaceType;
    __declspec(property(get=GetEdgeExtensionDistances,put=PutEdgeExtensionDistances))
    _variant_t EdgeExtensionDistances;
    __declspec(property(get=GetSurfTrimAssociativity,put=PutSurfTrimAssociativity))
    _variant_t SurfTrimAssociativity;
    __declspec(property(get=GetUIsolineDensity,put=PutUIsolineDensity))
    long UIsolineDensity;
    __declspec(property(get=GetVIsolineDensity,put=PutVIsolineDensity))
    long VIsolineDensity;
    __declspec(property(get=GetMaintainAssociativity,put=PutMaintainAssociativity))
    int MaintainAssociativity;
    __declspec(property(get=GetShowAssociativity,put=PutShowAssociativity))
    VARIANT_BOOL ShowAssociativity;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSurfaceType ( );
    long GetUIsolineDensity ( );
    void PutUIsolineDensity (
        long density );
    long GetVIsolineDensity ( );
    void PutVIsolineDensity (
        long density );
    enum AcWireframeType GetWireframeType ( );
    void PutWireframeType (
        enum AcWireframeType Type );
    int GetMaintainAssociativity ( );
    void PutMaintainAssociativity (
        int maintainAssoc );
    VARIANT_BOOL GetShowAssociativity ( );
    void PutShowAssociativity (
        VARIANT_BOOL bEnabled );
    _variant_t GetEdgeExtensionDistances ( );
    void PutEdgeExtensionDistances (
        const _variant_t & extDistances );
    _variant_t GetSurfTrimAssociativity ( );
    void PutSurfTrimAssociativity (
        const _variant_t & associative );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SurfaceType (
        /*[out,retval]*/ BSTR * SurfaceType ) = 0;
      virtual HRESULT __stdcall get_UIsolineDensity (
        /*[out,retval]*/ long * density ) = 0;
      virtual HRESULT __stdcall put_UIsolineDensity (
        /*[in]*/ long density ) = 0;
      virtual HRESULT __stdcall get_VIsolineDensity (
        /*[out,retval]*/ long * density ) = 0;
      virtual HRESULT __stdcall put_VIsolineDensity (
        /*[in]*/ long density ) = 0;
      virtual HRESULT __stdcall get_WireframeType (
        /*[out,retval]*/ enum AcWireframeType * Type ) = 0;
      virtual HRESULT __stdcall put_WireframeType (
        /*[in]*/ enum AcWireframeType Type ) = 0;
      virtual HRESULT __stdcall get_MaintainAssociativity (
        /*[out,retval]*/ int * maintainAssoc ) = 0;
      virtual HRESULT __stdcall put_MaintainAssociativity (
        /*[in]*/ int maintainAssoc ) = 0;
      virtual HRESULT __stdcall get_ShowAssociativity (
        /*[out,retval]*/ VARIANT_BOOL * bEnabled ) = 0;
      virtual HRESULT __stdcall put_ShowAssociativity (
        /*[in]*/ VARIANT_BOOL bEnabled ) = 0;
      virtual HRESULT __stdcall get_EdgeExtensionDistances (
        /*[out,retval]*/ VARIANT * extDistances ) = 0;
      virtual HRESULT __stdcall put_EdgeExtensionDistances (
        /*[in]*/ VARIANT extDistances ) = 0;
      virtual HRESULT __stdcall get_SurfTrimAssociativity (
        /*[out,retval]*/ VARIANT * associative ) = 0;
      virtual HRESULT __stdcall put_SurfTrimAssociativity (
        /*[in]*/ VARIANT associative ) = 0;
};

struct __declspec(uuid("fb3fac8e-4f36-4a96-ae22-194b9b686d9f"))
IAcadPlaneSurface : IAcadSurface
{};

struct __declspec(uuid("813198dd-ef1c-4838-95f4-13a484cae932"))
IAcadExtrudedSurface : IAcadSurface
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTaperAngle,put=PutTaperAngle))
    ACAD_ANGLE TaperAngle;
    __declspec(property(get=GetDirection))
    _variant_t Direction;

    //
    // Wrapper methods for error-handling
    //

    double GetHeight ( );
    void PutHeight (
        double Height );
    ACAD_ANGLE GetTaperAngle ( );
    void PutTaperAngle (
        ACAD_ANGLE TaperAngle );
    _variant_t GetDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_TaperAngle (
        /*[out,retval]*/ ACAD_ANGLE * TaperAngle ) = 0;
      virtual HRESULT __stdcall put_TaperAngle (
        /*[in]*/ ACAD_ANGLE TaperAngle ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT * Direction ) = 0;
};

struct __declspec(uuid("60834ece-8e4a-4aec-a217-d0dd2de1b45f"))
IAcadRevolvedSurface : IAcadSurface
{
    //
    // Property data
    //

    __declspec(property(get=GetRevolutionAngle,put=PutRevolutionAngle))
    ACAD_ANGLE RevolutionAngle;
    __declspec(property(get=GetAxisPosition,put=PutAxisPosition))
    _variant_t AxisPosition;
    __declspec(property(get=GetAxisDirection))
    _variant_t AxisDirection;

    //
    // Wrapper methods for error-handling
    //

    ACAD_ANGLE GetRevolutionAngle ( );
    void PutRevolutionAngle (
        ACAD_ANGLE revAngle );
    _variant_t GetAxisPosition ( );
    void PutAxisPosition (
        const _variant_t & AxisPosition );
    _variant_t GetAxisDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RevolutionAngle (
        /*[out,retval]*/ ACAD_ANGLE * revAngle ) = 0;
      virtual HRESULT __stdcall put_RevolutionAngle (
        /*[in]*/ ACAD_ANGLE revAngle ) = 0;
      virtual HRESULT __stdcall get_AxisPosition (
        /*[out,retval]*/ VARIANT * AxisPosition ) = 0;
      virtual HRESULT __stdcall put_AxisPosition (
        /*[in]*/ VARIANT AxisPosition ) = 0;
      virtual HRESULT __stdcall get_AxisDirection (
        /*[out,retval]*/ VARIANT * AxisDirection ) = 0;
};

struct __declspec(uuid("b4ad389f-2624-4670-a480-dc8b29fbc3af"))
IAcadSweptSurface : IAcadSurface
{
    //
    // Property data
    //

    __declspec(property(get=GetProfileRotation,put=PutProfileRotation))
    ACAD_ANGLE ProfileRotation;
    __declspec(property(get=GetBank,put=PutBank))
    VARIANT_BOOL Bank;
    __declspec(property(get=GetTwist,put=PutTwist))
    ACAD_ANGLE Twist;
    __declspec(property(get=Getscale,put=Putscale))
    double scale;
    __declspec(property(get=GetLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    ACAD_ANGLE GetProfileRotation ( );
    void PutProfileRotation (
        ACAD_ANGLE profileRotationAngle );
    VARIANT_BOOL GetBank ( );
    void PutBank (
        VARIANT_BOOL bBank );
    ACAD_ANGLE GetTwist ( );
    void PutTwist (
        ACAD_ANGLE TwistAngle );
    double Getscale ( );
    void Putscale (
        double scale );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProfileRotation (
        /*[out,retval]*/ ACAD_ANGLE * profileRotationAngle ) = 0;
      virtual HRESULT __stdcall put_ProfileRotation (
        /*[in]*/ ACAD_ANGLE profileRotationAngle ) = 0;
      virtual HRESULT __stdcall get_Bank (
        /*[out,retval]*/ VARIANT_BOOL * bBank ) = 0;
      virtual HRESULT __stdcall put_Bank (
        /*[in]*/ VARIANT_BOOL bBank ) = 0;
      virtual HRESULT __stdcall get_Twist (
        /*[out,retval]*/ ACAD_ANGLE * TwistAngle ) = 0;
      virtual HRESULT __stdcall put_Twist (
        /*[in]*/ ACAD_ANGLE TwistAngle ) = 0;
      virtual HRESULT __stdcall get_scale (
        /*[out,retval]*/ double * scale ) = 0;
      virtual HRESULT __stdcall put_scale (
        /*[in]*/ double scale ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Length ) = 0;
};

struct __declspec(uuid("a501529b-d232-42a5-91c1-71479187900e"))
IAcadLoftedSurface : IAcadSurface
{
    //
    // Property data
    //

    __declspec(property(get=GetNumCrossSections))
    long NumCrossSections;
    __declspec(property(get=GetNumGuidePaths))
    long NumGuidePaths;
    __declspec(property(get=GetSurfaceNormals,put=PutSurfaceNormals))
    enum AcLoftedSurfaceNormalType SurfaceNormals;
    __declspec(property(get=GetStartDraftAngle,put=PutStartDraftAngle))
    ACAD_ANGLE StartDraftAngle;
    __declspec(property(get=GetEndDraftAngle,put=PutEndDraftAngle))
    ACAD_ANGLE EndDraftAngle;
    __declspec(property(get=GetStartDraftMagnitude,put=PutStartDraftMagnitude))
    double StartDraftMagnitude;
    __declspec(property(get=GetEndDraftMagnitude,put=PutEndDraftMagnitude))
    double EndDraftMagnitude;
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetStartSmoothMagnitude,put=PutStartSmoothMagnitude))
    double StartSmoothMagnitude;
    __declspec(property(get=GetEndSmoothMagnitude,put=PutEndSmoothMagnitude))
    double EndSmoothMagnitude;
    __declspec(property(get=GetStartSmoothContinuity,put=PutStartSmoothContinuity))
    int StartSmoothContinuity;
    __declspec(property(get=GetEndSmoothContinuity,put=PutEndSmoothContinuity))
    int EndSmoothContinuity;
    __declspec(property(get=GetPeriodic,put=PutPeriodic))
    VARIANT_BOOL Periodic;

    //
    // Wrapper methods for error-handling
    //

    long GetNumCrossSections ( );
    long GetNumGuidePaths ( );
    enum AcLoftedSurfaceNormalType GetSurfaceNormals ( );
    void PutSurfaceNormals (
        enum AcLoftedSurfaceNormalType surfaceNormal );
    ACAD_ANGLE GetStartDraftAngle ( );
    void PutStartDraftAngle (
        ACAD_ANGLE StartDraftAngle );
    double GetStartDraftMagnitude ( );
    void PutStartDraftMagnitude (
        double startDraftMag );
    ACAD_ANGLE GetEndDraftAngle ( );
    void PutEndDraftAngle (
        ACAD_ANGLE EndDraftAngle );
    double GetEndDraftMagnitude ( );
    void PutEndDraftMagnitude (
        double endDraftMag );
    VARIANT_BOOL GetClosed ( );
    void PutClosed (
        VARIANT_BOOL bClosed );
    double GetStartSmoothMagnitude ( );
    void PutStartSmoothMagnitude (
        double startSmoothMag );
    double GetEndSmoothMagnitude ( );
    void PutEndSmoothMagnitude (
        double endSmoothMag );
    int GetStartSmoothContinuity ( );
    void PutStartSmoothContinuity (
        int StartSmoothContinuity );
    int GetEndSmoothContinuity ( );
    void PutEndSmoothContinuity (
        int EndSmoothContinuity );
    VARIANT_BOOL GetPeriodic ( );
    void PutPeriodic (
        VARIANT_BOOL bPeriodic );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumCrossSections (
        /*[out,retval]*/ long * NumCrossSections ) = 0;
      virtual HRESULT __stdcall get_NumGuidePaths (
        /*[out,retval]*/ long * NumGuidePaths ) = 0;
      virtual HRESULT __stdcall get_SurfaceNormals (
        /*[out,retval]*/ enum AcLoftedSurfaceNormalType * surfaceNormal ) = 0;
      virtual HRESULT __stdcall put_SurfaceNormals (
        /*[in]*/ enum AcLoftedSurfaceNormalType surfaceNormal ) = 0;
      virtual HRESULT __stdcall get_StartDraftAngle (
        /*[out,retval]*/ ACAD_ANGLE * StartDraftAngle ) = 0;
      virtual HRESULT __stdcall put_StartDraftAngle (
        /*[in]*/ ACAD_ANGLE StartDraftAngle ) = 0;
      virtual HRESULT __stdcall get_StartDraftMagnitude (
        /*[out,retval]*/ double * startDraftMag ) = 0;
      virtual HRESULT __stdcall put_StartDraftMagnitude (
        /*[in]*/ double startDraftMag ) = 0;
      virtual HRESULT __stdcall get_EndDraftAngle (
        /*[out,retval]*/ ACAD_ANGLE * EndDraftAngle ) = 0;
      virtual HRESULT __stdcall put_EndDraftAngle (
        /*[in]*/ ACAD_ANGLE EndDraftAngle ) = 0;
      virtual HRESULT __stdcall get_EndDraftMagnitude (
        /*[out,retval]*/ double * endDraftMag ) = 0;
      virtual HRESULT __stdcall put_EndDraftMagnitude (
        /*[in]*/ double endDraftMag ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * bClosed ) = 0;
      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL bClosed ) = 0;
      virtual HRESULT __stdcall get_StartSmoothMagnitude (
        /*[out,retval]*/ double * startSmoothMag ) = 0;
      virtual HRESULT __stdcall put_StartSmoothMagnitude (
        /*[in]*/ double startSmoothMag ) = 0;
      virtual HRESULT __stdcall get_EndSmoothMagnitude (
        /*[out,retval]*/ double * endSmoothMag ) = 0;
      virtual HRESULT __stdcall put_EndSmoothMagnitude (
        /*[in]*/ double endSmoothMag ) = 0;
      virtual HRESULT __stdcall get_StartSmoothContinuity (
        /*[out,retval]*/ int * StartSmoothContinuity ) = 0;
      virtual HRESULT __stdcall put_StartSmoothContinuity (
        /*[in]*/ int StartSmoothContinuity ) = 0;
      virtual HRESULT __stdcall get_EndSmoothContinuity (
        /*[out,retval]*/ int * EndSmoothContinuity ) = 0;
      virtual HRESULT __stdcall put_EndSmoothContinuity (
        /*[in]*/ int EndSmoothContinuity ) = 0;
      virtual HRESULT __stdcall get_Periodic (
        /*[out,retval]*/ VARIANT_BOOL * bPeriodic ) = 0;
      virtual HRESULT __stdcall put_Periodic (
        /*[in]*/ VARIANT_BOOL bPeriodic ) = 0;
};

struct __declspec(uuid("010c960c-b734-4c93-a50c-e73d8f29d6de"))
IAcadSection2 : IAcadSection
{
    //
    // Property data
    //

    __declspec(property(get=GetSliceDepth,put=PutSliceDepth))
    double SliceDepth;
    __declspec(property(get=GetState2,put=PutState2))
    enum AcSectionState2 State2;
    __declspec(property(get=GetSectionPlaneOffset,put=PutSectionPlaneOffset))
    double SectionPlaneOffset;

    //
    // Wrapper methods for error-handling
    //

    enum AcSectionState2 GetState2 ( );
    void PutState2 (
        enum AcSectionState2 pVal );
    double GetSliceDepth ( );
    void PutSliceDepth (
        double pVal );
    double GetSectionPlaneOffset ( );
    void PutSectionPlaneOffset (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_State2 (
        /*[out,retval]*/ enum AcSectionState2 * pVal ) = 0;
      virtual HRESULT __stdcall put_State2 (
        /*[in]*/ enum AcSectionState2 pVal ) = 0;
      virtual HRESULT __stdcall get_SliceDepth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SliceDepth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SectionPlaneOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SectionPlaneOffset (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("92f36a6f-7faf-49de-93f0-93e9bcb8aa6c"))
IAcadUnderlay : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetContrast,put=PutContrast))
    long Contrast;
    __declspec(property(get=GetFade,put=PutFade))
    long Fade;
    __declspec(property(get=GetPosition,put=PutPosition))
    _variant_t Position;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetUnderlayName,put=PutUnderlayName))
    _bstr_t UnderlayName;
    __declspec(property(get=GetItemName,put=PutItemName))
    _bstr_t ItemName;
    __declspec(property(get=GetMonochrome,put=PutMonochrome))
    VARIANT_BOOL Monochrome;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    ACAD_NOUNITS ScaleFactor;
    __declspec(property(get=GetFile,put=PutFile))
    _bstr_t File;
    __declspec(property(get=GetUnderlayVisibility,put=PutUnderlayVisibility))
    VARIANT_BOOL UnderlayVisibility;
    __declspec(property(get=GetAdjustForBackground,put=PutAdjustForBackground))
    VARIANT_BOOL AdjustForBackground;
    __declspec(property(get=GetClippingEnabled,put=PutClippingEnabled))
    VARIANT_BOOL ClippingEnabled;
    __declspec(property(get=GetUnderlayLayerOverrideApplied,put=PutUnderlayLayerOverrideApplied))
    enum AcUnderlayLayerOverrideType UnderlayLayerOverrideApplied;

    //
    // Wrapper methods for error-handling
    //

    long GetContrast ( );
    void PutContrast (
        long Contrast );
    long GetFade ( );
    void PutFade (
        long Fade );
    _variant_t GetPosition ( );
    void PutPosition (
        const _variant_t & pos );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    double GetWidth ( );
    void PutWidth (
        double Width );
    double GetHeight ( );
    void PutHeight (
        double Height );
    _bstr_t GetUnderlayName ( );
    void PutUnderlayName (
        _bstr_t Name );
    void PutItemName (
        _bstr_t sheetName );
    _bstr_t GetItemName ( );
    VARIANT_BOOL GetMonochrome ( );
    void PutMonochrome (
        VARIANT_BOOL bMono );
    VARIANT_BOOL GetAdjustForBackground ( );
    void PutAdjustForBackground (
        VARIANT_BOOL Value );
    HRESULT ClipBoundary (
        const _variant_t & boundry );
    ACAD_NOUNITS GetScaleFactor ( );
    void PutScaleFactor (
        ACAD_NOUNITS ScaleFactor );
    _bstr_t GetFile ( );
    void PutFile (
        _bstr_t Name );
    VARIANT_BOOL GetUnderlayVisibility ( );
    void PutUnderlayVisibility (
        VARIANT_BOOL fVisible );
    VARIANT_BOOL GetClippingEnabled ( );
    void PutClippingEnabled (
        VARIANT_BOOL kClip );
    enum AcUnderlayLayerOverrideType GetUnderlayLayerOverrideApplied ( );
    void PutUnderlayLayerOverrideApplied (
        enum AcUnderlayLayerOverrideType bOverride );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Contrast (
        /*[out,retval]*/ long * Contrast ) = 0;
      virtual HRESULT __stdcall put_Contrast (
        /*[in]*/ long Contrast ) = 0;
      virtual HRESULT __stdcall get_Fade (
        /*[out,retval]*/ long * Fade ) = 0;
      virtual HRESULT __stdcall put_Fade (
        /*[in]*/ long Fade ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ VARIANT * pos ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ VARIANT pos ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ ACAD_ANGLE * rotAngle ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ ACAD_ANGLE rotAngle ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_UnderlayName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_UnderlayName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall put_ItemName (
        /*[in]*/ BSTR sheetName ) = 0;
      virtual HRESULT __stdcall get_ItemName (
        /*[out,retval]*/ BSTR * sheetName ) = 0;
      virtual HRESULT __stdcall get_Monochrome (
        /*[out,retval]*/ VARIANT_BOOL * bMono ) = 0;
      virtual HRESULT __stdcall put_Monochrome (
        /*[in]*/ VARIANT_BOOL bMono ) = 0;
      virtual HRESULT __stdcall get_AdjustForBackground (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AdjustForBackground (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_ClipBoundary (
        /*[in]*/ VARIANT boundry ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ ACAD_NOUNITS * ScaleFactor ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ ACAD_NOUNITS ScaleFactor ) = 0;
      virtual HRESULT __stdcall get_File (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_File (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_UnderlayVisibility (
        /*[out,retval]*/ VARIANT_BOOL * fVisible ) = 0;
      virtual HRESULT __stdcall put_UnderlayVisibility (
        /*[in]*/ VARIANT_BOOL fVisible ) = 0;
      virtual HRESULT __stdcall get_ClippingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * kClip ) = 0;
      virtual HRESULT __stdcall put_ClippingEnabled (
        /*[in]*/ VARIANT_BOOL kClip ) = 0;
      virtual HRESULT __stdcall get_UnderlayLayerOverrideApplied (
        /*[out,retval]*/ enum AcUnderlayLayerOverrideType * bOverride ) = 0;
      virtual HRESULT __stdcall put_UnderlayLayerOverrideApplied (
        /*[in]*/ enum AcUnderlayLayerOverrideType bOverride ) = 0;
};

struct __declspec(uuid("9e607850-b9bd-4516-8865-58d1ec3d2133"))
IAcadDwfUnderlay : IAcadUnderlay
{
    //
    // Property data
    //

    __declspec(property(get=GetDWFFormat,put=PutDWFFormat))
    _bstr_t DWFFormat;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDWFFormat ( );
    void PutDWFFormat (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DWFFormat (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_DWFFormat (
        /*[in]*/ BSTR Name ) = 0;
};

struct __declspec(uuid("03be17b5-89b0-4341-a5fc-31934bdb5482"))
IAcadWipeout : IAcadRasterImage
{};

struct __declspec(uuid("7b142040-0b30-4e59-966d-fa1277604017"))
IAcadSubDMesh : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetSmoothness,put=PutSmoothness))
    int Smoothness;
    __declspec(property(get=GetCoordinates,put=PutCoordinates))
    _variant_t Coordinates;
    __declspec(property(get=GetCoordinate,put=PutCoordinate))
    _variant_t Coordinate[];
    __declspec(property(get=GetVertexCount))
    int VertexCount;
    __declspec(property(get=GetFaceCount))
    int FaceCount;

    //
    // Wrapper methods for error-handling
    //

    int GetSmoothness ( );
    void PutSmoothness (
        int level );
    _variant_t GetCoordinates ( );
    void PutCoordinates (
        const _variant_t & corners );
    _variant_t GetCoordinate (
        int Index );
    void PutCoordinate (
        int Index,
        const _variant_t & pVal );
    int GetVertexCount ( );
    int GetFaceCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Smoothness (
        /*[out,retval]*/ int * level ) = 0;
      virtual HRESULT __stdcall put_Smoothness (
        /*[in]*/ int level ) = 0;
      virtual HRESULT __stdcall get_Coordinates (
        /*[out,retval]*/ VARIANT * corners ) = 0;
      virtual HRESULT __stdcall put_Coordinates (
        /*[in]*/ VARIANT corners ) = 0;
      virtual HRESULT __stdcall get_Coordinate (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Coordinate (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall get_FaceCount (
        /*[out,retval]*/ int * Count ) = 0;
};

struct __declspec(uuid("be4e6da9-6602-4f83-b458-df0fe7602cc8"))
IAcadNurbSurface : IAcadSurface
{
    //
    // Property data
    //

    __declspec(property(get=GetCvHullDisplay,put=PutCvHullDisplay))
    VARIANT_BOOL CvHullDisplay;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetCvHullDisplay ( );
    void PutCvHullDisplay (
        VARIANT_BOOL Display );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CvHullDisplay (
        /*[out,retval]*/ VARIANT_BOOL * Display ) = 0;
      virtual HRESULT __stdcall put_CvHullDisplay (
        /*[in]*/ VARIANT_BOOL Display ) = 0;
};

struct __declspec(uuid("030fbed4-476a-4db5-84c0-6f2cd856fcc3"))
IAcadGeoPositionMarker : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    _variant_t Position;
    __declspec(property(get=GetTextString,put=PutTextString))
    _bstr_t TextString;
    __declspec(property(get=GetTextStyleName,put=PutTextStyleName))
    _bstr_t TextStyleName;
    __declspec(property(get=GetTextJustify,put=PutTextJustify))
    enum AcAttachmentPoint TextJustify;
    __declspec(property(get=GetDrawingDirection,put=PutDrawingDirection))
    enum AcDrawingDirection DrawingDirection;
    __declspec(property(get=GetTextWidth,put=PutTextWidth))
    double TextWidth;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetLineSpacingFactor,put=PutLineSpacingFactor))
    double LineSpacingFactor;
    __declspec(property(get=GetLineSpacingDistance,put=PutLineSpacingDistance))
    double LineSpacingDistance;
    __declspec(property(get=GetLineSpacingStyle,put=PutLineSpacingStyle))
    enum AcLineSpacingStyle LineSpacingStyle;
    __declspec(property(get=GetBackgroundFill,put=PutBackgroundFill))
    VARIANT_BOOL BackgroundFill;
    __declspec(property(get=GetLandingGap,put=PutLandingGap))
    double LandingGap;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetTextFrameDisplay,put=PutTextFrameDisplay))
    VARIANT_BOOL TextFrameDisplay;
    __declspec(property(get=GetLatitude,put=PutLatitude))
    _bstr_t Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    _bstr_t Longitude;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetNotes,put=PutNotes))
    _bstr_t Notes;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetPosition ( );
    void PutPosition (
        const _variant_t & Position );
    _bstr_t GetTextString ( );
    void PutTextString (
        _bstr_t bstrText );
    _bstr_t GetTextStyleName ( );
    void PutTextStyleName (
        _bstr_t bstrName );
    enum AcAttachmentPoint GetTextJustify ( );
    void PutTextJustify (
        enum AcAttachmentPoint attPoint );
    enum AcDrawingDirection GetDrawingDirection ( );
    void PutDrawingDirection (
        enum AcDrawingDirection drawDir );
    double GetTextWidth ( );
    void PutTextWidth (
        double Width );
    double GetHeight ( );
    void PutHeight (
        double Height );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE rotAngle );
    double GetLineSpacingFactor ( );
    void PutLineSpacingFactor (
        double factor );
    double GetLineSpacingDistance ( );
    void PutLineSpacingDistance (
        double Value );
    enum AcLineSpacingStyle GetLineSpacingStyle ( );
    void PutLineSpacingStyle (
        enum AcLineSpacingStyle style );
    VARIANT_BOOL GetBackgroundFill ( );
    void PutBackgroundFill (
        VARIANT_BOOL bUseBackgroundFill );
    double GetLandingGap ( );
    void PutLandingGap (
        double gap );
    double GetRadius ( );
    void PutRadius (
        double gap );
    VARIANT_BOOL GetTextFrameDisplay ( );
    void PutTextFrameDisplay (
        VARIANT_BOOL pVal );
    _bstr_t GetLatitude ( );
    void PutLatitude (
        _bstr_t Latitude );
    _bstr_t GetLongitude ( );
    void PutLongitude (
        _bstr_t Longitude );
    double GetAltitude ( );
    void PutAltitude (
        double Altitude );
    _bstr_t GetNotes ( );
    void PutNotes (
        _bstr_t Notes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ VARIANT * Position ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ VARIANT Position ) = 0;
      virtual HRESULT __stdcall get_TextString (
        /*[out,retval]*/ BSTR * bstrText ) = 0;
      virtual HRESULT __stdcall put_TextString (
        /*[in]*/ BSTR bstrText ) = 0;
      virtual HRESULT __stdcall get_TextStyleName (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_TextStyleName (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_TextJustify (
        /*[out,retval]*/ enum AcAttachmentPoint * attPoint ) = 0;
      virtual HRESULT __stdcall put_TextJustify (
        /*[in]*/ enum AcAttachmentPoint attPoint ) = 0;
      virtual HRESULT __stdcall get_DrawingDirection (
        /*[out,retval]*/ enum AcDrawingDirection * drawDir ) = 0;
      virtual HRESULT __stdcall put_DrawingDirection (
        /*[in]*/ enum AcDrawingDirection drawDir ) = 0;
      virtual HRESULT __stdcall get_TextWidth (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_TextWidth (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ ACAD_ANGLE * rotAngle ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ ACAD_ANGLE rotAngle ) = 0;
      virtual HRESULT __stdcall get_LineSpacingFactor (
        /*[out,retval]*/ double * factor ) = 0;
      virtual HRESULT __stdcall put_LineSpacingFactor (
        /*[in]*/ double factor ) = 0;
      virtual HRESULT __stdcall get_LineSpacingDistance (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_LineSpacingDistance (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_LineSpacingStyle (
        /*[out,retval]*/ enum AcLineSpacingStyle * style ) = 0;
      virtual HRESULT __stdcall put_LineSpacingStyle (
        /*[in]*/ enum AcLineSpacingStyle style ) = 0;
      virtual HRESULT __stdcall get_BackgroundFill (
        /*[out,retval]*/ VARIANT_BOOL * bUseBackgroundFill ) = 0;
      virtual HRESULT __stdcall put_BackgroundFill (
        /*[in]*/ VARIANT_BOOL bUseBackgroundFill ) = 0;
      virtual HRESULT __stdcall get_LandingGap (
        /*[out,retval]*/ double * gap ) = 0;
      virtual HRESULT __stdcall put_LandingGap (
        /*[in]*/ double gap ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * gap ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double gap ) = 0;
      virtual HRESULT __stdcall get_TextFrameDisplay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TextFrameDisplay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ BSTR * Latitude ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ BSTR Latitude ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ BSTR * Longitude ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ BSTR Longitude ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * Altitude ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double Altitude ) = 0;
      virtual HRESULT __stdcall get_Notes (
        /*[out,retval]*/ BSTR * Notes ) = 0;
      virtual HRESULT __stdcall put_Notes (
        /*[in]*/ BSTR Notes ) = 0;
};

struct __declspec(uuid("0af8ab47-b44e-4e1c-92ef-20ec0202c3bd"))
IAcadGeomapImage : IAcadRasterImage
{
    //
    // Property data
    //

    __declspec(property(get=GetGeoImageBrightness,put=PutGeoImageBrightness))
    long GeoImageBrightness;
    __declspec(property(get=GetGeoImageContrast,put=PutGeoImageContrast))
    long GeoImageContrast;
    __declspec(property(get=GetGeoImageFade,put=PutGeoImageFade))
    long GeoImageFade;
    __declspec(property(get=GetGeoImagePosition))
    _variant_t GeoImagePosition;
    __declspec(property(get=GetGeoImageWidth))
    double GeoImageWidth;
    __declspec(property(get=GetGeoImageHeight))
    double GeoImageHeight;

    //
    // Wrapper methods for error-handling
    //

    long GetGeoImageBrightness ( );
    void PutGeoImageBrightness (
        long Brightness );
    long GetGeoImageContrast ( );
    void PutGeoImageContrast (
        long Contrast );
    long GetGeoImageFade ( );
    void PutGeoImageFade (
        long Fade );
    _variant_t GetGeoImagePosition ( );
    double GetGeoImageWidth ( );
    double GetGeoImageHeight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GeoImageBrightness (
        /*[out,retval]*/ long * Brightness ) = 0;
      virtual HRESULT __stdcall put_GeoImageBrightness (
        /*[in]*/ long Brightness ) = 0;
      virtual HRESULT __stdcall get_GeoImageContrast (
        /*[out,retval]*/ long * Contrast ) = 0;
      virtual HRESULT __stdcall put_GeoImageContrast (
        /*[in]*/ long Contrast ) = 0;
      virtual HRESULT __stdcall get_GeoImageFade (
        /*[out,retval]*/ long * Fade ) = 0;
      virtual HRESULT __stdcall put_GeoImageFade (
        /*[in]*/ long Fade ) = 0;
      virtual HRESULT __stdcall get_GeoImagePosition (
        /*[out,retval]*/ VARIANT * Position ) = 0;
      virtual HRESULT __stdcall get_GeoImageWidth (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall get_GeoImageHeight (
        /*[out,retval]*/ double * Height ) = 0;
};

struct __declspec(uuid("9995941c-67e4-4c5b-a2c7-f6bc8a329648"))
IAcadPointCloud : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=Getscale,put=Putscale))
    ACAD_NOUNITS scale;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetUseEntityColor,put=PutUseEntityColor))
    enum AcPointCloudColorType UseEntityColor;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetShowIntensity,put=PutShowIntensity))
    VARIANT_BOOL ShowIntensity;
    __declspec(property(get=GetIntensityColorScheme,put=PutIntensityColorScheme))
    enum AcPointCloudIntensityStyle IntensityColorScheme;
    __declspec(property(get=GetWidth,put=PutWidth))
    ACAD_DISTANCE Width;
    __declspec(property(get=GetLength,put=PutLength))
    ACAD_DISTANCE Length;
    __declspec(property(get=GetHeight,put=PutHeight))
    ACAD_DISTANCE Height;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetShowClipped,put=PutShowClipped))
    VARIANT_BOOL ShowClipped;
    __declspec(property(get=GetUnitFactor))
    ACAD_NOUNITS UnitFactor;
    __declspec(property(get=GetUnit))
    _bstr_t Unit;
    __declspec(property(get=GetStylization,put=PutStylization))
    enum AcPointCloudStylizationType Stylization;

    //
    // Wrapper methods for error-handling
    //

    enum AcPointCloudColorType GetUseEntityColor ( );
    void PutUseEntityColor (
        enum AcPointCloudColorType val );
    VARIANT_BOOL GetShowIntensity ( );
    void PutShowIntensity (
        VARIANT_BOOL val );
    enum AcPointCloudIntensityStyle GetIntensityColorScheme ( );
    void PutIntensityColorScheme (
        enum AcPointCloudIntensityStyle val );
    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & EndPoint );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE val );
    ACAD_DISTANCE GetWidth ( );
    void PutWidth (
        ACAD_DISTANCE val );
    ACAD_DISTANCE GetLength ( );
    void PutLength (
        ACAD_DISTANCE val );
    ACAD_DISTANCE GetHeight ( );
    void PutHeight (
        ACAD_DISTANCE val );
    ACAD_NOUNITS Getscale ( );
    void Putscale (
        ACAD_NOUNITS val );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetShowClipped ( );
    void PutShowClipped (
        VARIANT_BOOL val );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL val );
    enum AcPointCloudStylizationType GetStylization ( );
    void PutStylization (
        enum AcPointCloudStylizationType val );
    _bstr_t GetUnit ( );
    ACAD_NOUNITS GetUnitFactor ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseEntityColor (
        /*[out,retval]*/ enum AcPointCloudColorType * val ) = 0;
      virtual HRESULT __stdcall put_UseEntityColor (
        /*[in]*/ enum AcPointCloudColorType val ) = 0;
      virtual HRESULT __stdcall get_ShowIntensity (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowIntensity (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_IntensityColorScheme (
        /*[out,retval]*/ enum AcPointCloudIntensityStyle * val ) = 0;
      virtual HRESULT __stdcall put_IntensityColorScheme (
        /*[in]*/ enum AcPointCloudIntensityStyle val ) = 0;
      virtual HRESULT __stdcall get_InsertionPoint (
        /*[out,retval]*/ VARIANT * EndPoint ) = 0;
      virtual HRESULT __stdcall put_InsertionPoint (
        /*[in]*/ VARIANT EndPoint ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ ACAD_ANGLE * val ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ ACAD_ANGLE val ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ ACAD_DISTANCE * val ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ ACAD_DISTANCE val ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ ACAD_DISTANCE * val ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ ACAD_DISTANCE val ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ ACAD_DISTANCE * val ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ ACAD_DISTANCE val ) = 0;
      virtual HRESULT __stdcall get_scale (
        /*[out,retval]*/ ACAD_NOUNITS * val ) = 0;
      virtual HRESULT __stdcall put_scale (
        /*[in]*/ ACAD_NOUNITS val ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_ShowClipped (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowClipped (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Stylization (
        /*[out,retval]*/ enum AcPointCloudStylizationType * val ) = 0;
      virtual HRESULT __stdcall put_Stylization (
        /*[in]*/ enum AcPointCloudStylizationType val ) = 0;
      virtual HRESULT __stdcall get_Unit (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_UnitFactor (
        /*[out,retval]*/ ACAD_NOUNITS * val ) = 0;
};

struct __declspec(uuid("22c5274e-dc1a-4b3f-a1f4-943af9bb7a46"))
IAcadPointCloudEx : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetInsertionPoint,put=PutInsertionPoint))
    _variant_t InsertionPoint;
    __declspec(property(get=Getscale,put=Putscale))
    ACAD_NOUNITS scale;
    __declspec(property(get=GetRotation,put=PutRotation))
    ACAD_ANGLE Rotation;
    __declspec(property(get=GetStylization,put=PutStylization))
    enum AcPointCloudExStylizationType Stylization;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetShowCropped,put=PutShowCropped))
    VARIANT_BOOL ShowCropped;
    __declspec(property(get=GetUnitFactor))
    ACAD_NOUNITS UnitFactor;
    __declspec(property(get=GetUnit))
    _bstr_t Unit;
    __declspec(property(get=GetGeolocate,put=PutGeolocate))
    VARIANT_BOOL Geolocate;

    //
    // Wrapper methods for error-handling
    //

    enum AcPointCloudExStylizationType GetStylization ( );
    void PutStylization (
        enum AcPointCloudExStylizationType val );
    _bstr_t GetColorScheme ( );
    void PutColorScheme (
        int val );
    _variant_t GetInsertionPoint ( );
    void PutInsertionPoint (
        const _variant_t & EndPoint );
    ACAD_ANGLE GetRotation ( );
    void PutRotation (
        ACAD_ANGLE val );
    ACAD_NOUNITS Getscale ( );
    void Putscale (
        ACAD_NOUNITS val );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t val );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetShowCropped ( );
    void PutShowCropped (
        VARIANT_BOOL val );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL val );
    VARIANT_BOOL GetGeolocate ( );
    void PutGeolocate (
        VARIANT_BOOL val );
    _bstr_t GetUnit ( );
    ACAD_NOUNITS GetUnitFactor ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Stylization (
        /*[out,retval]*/ enum AcPointCloudExStylizationType * val ) = 0;
      virtual HRESULT __stdcall put_Stylization (
        /*[in]*/ enum AcPointCloudExStylizationType val ) = 0;
      virtual HRESULT __stdcall get_ColorScheme (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ColorScheme (
        /*[in]*/ int val ) = 0;
      virtual HRESULT __stdcall get_InsertionPoint (
        /*[out,retval]*/ VARIANT * EndPoint ) = 0;
      virtual HRESULT __stdcall put_InsertionPoint (
        /*[in]*/ VARIANT EndPoint ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ ACAD_ANGLE * val ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ ACAD_ANGLE val ) = 0;
      virtual HRESULT __stdcall get_scale (
        /*[out,retval]*/ ACAD_NOUNITS * val ) = 0;
      virtual HRESULT __stdcall put_scale (
        /*[in]*/ ACAD_NOUNITS val ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_ShowCropped (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowCropped (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Geolocate (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Geolocate (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Unit (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_UnitFactor (
        /*[out,retval]*/ ACAD_NOUNITS * val ) = 0;
};

struct __declspec(uuid("ffc368fe-bddf-4281-806a-aba65afad03e"))
IAcadPointCloudEx2 : IAcadPointCloudEx
{
    //
    // Property data
    //

    __declspec(property(get=GetSegmentation))
    _bstr_t Segmentation;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSegmentation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Segmentation (
        /*[out,retval]*/ BSTR * val ) = 0;
};

struct __declspec(uuid("6bdb570e-652b-4e06-9fa3-17266bc95414"))
IAcadDatabase : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModelSpace))
    IAcadModelSpacePtr ModelSpace;
    __declspec(property(get=GetPaperSpace))
    IAcadPaperSpacePtr PaperSpace;
    __declspec(property(get=GetBlocks))
    IAcadBlocksPtr Blocks;
    __declspec(property(get=GetGroups))
    IAcadGroupsPtr Groups;
    __declspec(property(get=GetDimStyles))
    IAcadDimStylesPtr DimStyles;
    __declspec(property(get=GetLayers))
    IAcadLayersPtr Layers;
    __declspec(property(get=GetLinetypes))
    IAcadLineTypesPtr Linetypes;
    __declspec(property(get=GetDictionaries))
    IAcadDictionariesPtr Dictionaries;
    __declspec(property(get=GetRegisteredApplications))
    IAcadRegisteredApplicationsPtr RegisteredApplications;
    __declspec(property(get=GetTextStyles))
    IAcadTextStylesPtr TextStyles;
    __declspec(property(get=GetUserCoordinateSystems))
    IAcadUCSsPtr UserCoordinateSystems;
    __declspec(property(get=GetViews))
    IAcadViewsPtr Views;
    __declspec(property(get=GetViewports))
    IAcadViewportsPtr Viewports;
    __declspec(property(get=GetElevationModelSpace,put=PutElevationModelSpace))
    double ElevationModelSpace;
    __declspec(property(get=GetElevationPaperSpace,put=PutElevationPaperSpace))
    double ElevationPaperSpace;
    __declspec(property(get=GetLimits,put=PutLimits))
    _variant_t Limits;
    __declspec(property(get=GetLayouts))
    IAcadLayoutsPtr Layouts;
    __declspec(property(get=GetPlotConfigurations))
    IAcadPlotConfigurationsPtr PlotConfigurations;
    __declspec(property(get=GetPreferences))
    IAcadDatabasePreferencesPtr Preferences;
    __declspec(property(get=GetSummaryInfo))
    IAcadSummaryInfoPtr SummaryInfo;
    __declspec(property(get=GetSectionManager))
    IAcadSectionManagerPtr SectionManager;
    __declspec(property(get=GetMaterials))
    IAcadMaterialsPtr Materials;

    //
    // Wrapper methods for error-handling
    //

    IAcadModelSpacePtr GetModelSpace ( );
    IAcadPaperSpacePtr GetPaperSpace ( );
    IAcadBlocksPtr GetBlocks ( );
    _variant_t CopyObjects (
        const _variant_t & Objects,
        const _variant_t & Owner,
        VARIANT * IdPairs );
    IAcadGroupsPtr GetGroups ( );
    IAcadDimStylesPtr GetDimStyles ( );
    IAcadLayersPtr GetLayers ( );
    IAcadLineTypesPtr GetLinetypes ( );
    IAcadDictionariesPtr GetDictionaries ( );
    IAcadRegisteredApplicationsPtr GetRegisteredApplications ( );
    IAcadTextStylesPtr GetTextStyles ( );
    IAcadUCSsPtr GetUserCoordinateSystems ( );
    IAcadViewsPtr GetViews ( );
    IAcadViewportsPtr GetViewports ( );
    double GetElevationModelSpace ( );
    void PutElevationModelSpace (
        double Elevation );
    double GetElevationPaperSpace ( );
    void PutElevationPaperSpace (
        double Elevation );
    _variant_t GetLimits ( );
    void PutLimits (
        const _variant_t & Limits );
    IDispatchPtr HandleToObject (
        _bstr_t Handle );
    IDispatchPtr ObjectIdToObject (
        LONG_PTR ObjectID );
    IAcadLayoutsPtr GetLayouts ( );
    IAcadPlotConfigurationsPtr GetPlotConfigurations ( );
    IAcadDatabasePreferencesPtr GetPreferences ( );
    IAcadSummaryInfoPtr GetSummaryInfo ( );
    IAcadSectionManagerPtr GetSectionManager ( );
    IAcadMaterialsPtr GetMaterials ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ModelSpace (
        /*[out,retval]*/ struct IAcadModelSpace * * pMSpace ) = 0;
      virtual HRESULT __stdcall get_PaperSpace (
        /*[out,retval]*/ struct IAcadPaperSpace * * pPSpace ) = 0;
      virtual HRESULT __stdcall get_Blocks (
        /*[out,retval]*/ struct IAcadBlocks * * pBlocks ) = 0;
      virtual HRESULT __stdcall raw_CopyObjects (
        /*[in]*/ VARIANT Objects,
        /*[in]*/ VARIANT Owner,
        /*[in,out]*/ VARIANT * IdPairs,
        /*[out,retval]*/ VARIANT * pNewObjects ) = 0;
      virtual HRESULT __stdcall get_Groups (
        /*[out,retval]*/ struct IAcadGroups * * pGroups ) = 0;
      virtual HRESULT __stdcall get_DimStyles (
        /*[out,retval]*/ struct IAcadDimStyles * * pDimStyles ) = 0;
      virtual HRESULT __stdcall get_Layers (
        /*[out,retval]*/ struct IAcadLayers * * pLayers ) = 0;
      virtual HRESULT __stdcall get_Linetypes (
        /*[out,retval]*/ struct IAcadLineTypes * * pLinetypes ) = 0;
      virtual HRESULT __stdcall get_Dictionaries (
        /*[out,retval]*/ struct IAcadDictionaries * * pDictionaries ) = 0;
      virtual HRESULT __stdcall get_RegisteredApplications (
        /*[out,retval]*/ struct IAcadRegisteredApplications * * pRegApps ) = 0;
      virtual HRESULT __stdcall get_TextStyles (
        /*[out,retval]*/ struct IAcadTextStyles * * pTextStyles ) = 0;
      virtual HRESULT __stdcall get_UserCoordinateSystems (
        /*[out,retval]*/ struct IAcadUCSs * * pUCSs ) = 0;
      virtual HRESULT __stdcall get_Views (
        /*[out,retval]*/ struct IAcadViews * * pViews ) = 0;
      virtual HRESULT __stdcall get_Viewports (
        /*[out,retval]*/ struct IAcadViewports * * pViewports ) = 0;
      virtual HRESULT __stdcall get_ElevationModelSpace (
        /*[out,retval]*/ double * Elevation ) = 0;
      virtual HRESULT __stdcall put_ElevationModelSpace (
        /*[in]*/ double Elevation ) = 0;
      virtual HRESULT __stdcall get_ElevationPaperSpace (
        /*[out,retval]*/ double * Elevation ) = 0;
      virtual HRESULT __stdcall put_ElevationPaperSpace (
        /*[in]*/ double Elevation ) = 0;
      virtual HRESULT __stdcall get_Limits (
        /*[out,retval]*/ VARIANT * Limits ) = 0;
      virtual HRESULT __stdcall put_Limits (
        /*[in]*/ VARIANT Limits ) = 0;
      virtual HRESULT __stdcall raw_HandleToObject (
        /*[in]*/ BSTR Handle,
        /*[out,retval]*/ IDispatch * * pObj ) = 0;
      virtual HRESULT __stdcall raw_ObjectIdToObject (
        /*[in]*/ LONG_PTR ObjectID,
        /*[out,retval]*/ IDispatch * * pObj ) = 0;
      virtual HRESULT __stdcall get_Layouts (
        /*[out,retval]*/ struct IAcadLayouts * * pLayouts ) = 0;
      virtual HRESULT __stdcall get_PlotConfigurations (
        /*[out,retval]*/ struct IAcadPlotConfigurations * * pPlotConfigs ) = 0;
      virtual HRESULT __stdcall get_Preferences (
        /*[out,retval]*/ struct IAcadDatabasePreferences * * pPref ) = 0;
      virtual HRESULT __stdcall get_SummaryInfo (
        /*[out,retval]*/ struct IAcadSummaryInfo * * pSummaryInfo ) = 0;
      virtual HRESULT __stdcall get_SectionManager (
        /*[out,retval]*/ struct IAcadSectionManager * * pSecMgr ) = 0;
      virtual HRESULT __stdcall get_Materials (
        /*[out,retval]*/ struct IAcadMaterials * * pMaterials ) = 0;
};

struct __declspec(uuid("0cb51cb5-cc33-4ac0-9867-085eba3316a0"))
IAcadLayerStateManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMask,put=PutMask))
    enum AcLayerStateMask Mask[];

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetDatabase (
        struct IAcadDatabase * iHostDb );
    void PutMask (
        _bstr_t bsName,
        enum AcLayerStateMask eMask );
    enum AcLayerStateMask GetMask (
        _bstr_t bsName );
    HRESULT Save (
        _bstr_t bsName,
        enum AcLayerStateMask eMask );
    HRESULT Restore (
        _bstr_t bsName );
    HRESULT Delete (
        _bstr_t bsName );
    HRESULT Rename (
        _bstr_t bsName,
        _bstr_t bsNewName );
    HRESULT Import (
        _bstr_t bsFilename );
    HRESULT Export (
        _bstr_t bsName,
        _bstr_t bsFilename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetDatabase (
        /*[in]*/ struct IAcadDatabase * iHostDb ) = 0;
      virtual HRESULT __stdcall put_Mask (
        /*[in]*/ BSTR bsName,
        /*[in]*/ enum AcLayerStateMask eMask ) = 0;
      virtual HRESULT __stdcall get_Mask (
        /*[in]*/ BSTR bsName,
        /*[out,retval]*/ enum AcLayerStateMask * eMask ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ BSTR bsName,
        /*[in]*/ enum AcLayerStateMask eMask ) = 0;
      virtual HRESULT __stdcall raw_Restore (
        /*[in]*/ BSTR bsName ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR bsName ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR bsName,
        /*[in]*/ BSTR bsNewName ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR bsFilename ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR bsName,
        /*[in]*/ BSTR bsFilename ) = 0;
};

struct __declspec(uuid("181f4481-763e-4e58-ae89-cf4c003ef491"))
IAcadBlock : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    _variant_t Origin;
    __declspec(property(get=GetExplodable,put=PutExplodable))
    VARIANT_BOOL Explodable;
    __declspec(property(get=GetBlockScaling,put=PutBlockScaling))
    enum AcBlockScaling BlockScaling;
    __declspec(property(get=GetIsDynamicBlock))
    VARIANT_BOOL IsDynamicBlock;
    __declspec(property(get=GetIsLayout))
    VARIANT_BOOL IsLayout;
    __declspec(property(get=GetLayout))
    IAcadLayoutPtr Layout;
    __declspec(property(get=GetIsXRef))
    VARIANT_BOOL IsXRef;
    __declspec(property(get=GetXRefDatabase))
    IAcadDatabasePtr XRefDatabase;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;
    __declspec(property(get=GetComments,put=PutComments))
    _bstr_t Comments;
    __declspec(property(get=GetUnits,put=PutUnits))
    enum AcInsertUnits Units;

    //
    // Wrapper methods for error-handling
    //

    IAcadEntityPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    _variant_t GetOrigin ( );
    void PutOrigin (
        const _variant_t & Origin );
    IDispatchPtr AddCustomObject (
        _bstr_t ClassName );
    IAcad3DFacePtr Add3DFace (
        const _variant_t & Point1,
        const _variant_t & Point2,
        const _variant_t & point3,
        const _variant_t & Point4 );
    IAcadPolygonMeshPtr Add3DMesh (
        int M,
        int N,
        const _variant_t & PointsMatrix );
    IAcad3DPolylinePtr Add3DPoly (
        const _variant_t & PointsArray );
    IAcadArcPtr AddArc (
        const _variant_t & Center,
        double Radius,
        double StartAngle,
        double EndAngle );
    IAcadAttributePtr AddAttribute (
        double Height,
        enum AcAttributeMode Mode,
        _bstr_t Prompt,
        const _variant_t & InsertionPoint,
        _bstr_t Tag,
        _bstr_t Value );
    IAcad3DSolidPtr AddBox (
        const _variant_t & Origin,
        double Length,
        double Width,
        double Height );
    IAcadCirclePtr AddCircle (
        const _variant_t & Center,
        double Radius );
    IAcad3DSolidPtr AddCone (
        const _variant_t & Center,
        double BaseRadius,
        double Height );
    IAcad3DSolidPtr AddCylinder (
        const _variant_t & Center,
        double Radius,
        double Height );
    IAcadDimAlignedPtr AddDimAligned (
        const _variant_t & ExtLine1Point,
        const _variant_t & ExtLine2Point,
        const _variant_t & TextPosition );
    IAcadDimAngularPtr AddDimAngular (
        const _variant_t & AngleVertex,
        const _variant_t & FirstEndPoint,
        const _variant_t & SecondEndPoint,
        const _variant_t & TextPoint );
    IAcadDimDiametricPtr AddDimDiametric (
        const _variant_t & ChordPoint,
        const _variant_t & FarChordPoint,
        double LeaderLength );
    IAcadDimRotatedPtr AddDimRotated (
        const _variant_t & ExtLine1Point,
        const _variant_t & ExtLine2Point,
        const _variant_t & DimLineLocation,
        double RotationAngle );
    IAcadDimOrdinatePtr AddDimOrdinate (
        const _variant_t & DefinitionPoint,
        const _variant_t & LeaderEndPoint,
        int UseXAxis );
    IAcadDimRadialPtr AddDimRadial (
        const _variant_t & Center,
        const _variant_t & ChordPoint,
        double LeaderLength );
    IAcadEllipsePtr AddEllipse (
        const _variant_t & Center,
        const _variant_t & MajorAxis,
        double RadiusRatio );
    IAcad3DSolidPtr AddEllipticalCone (
        const _variant_t & Center,
        double MajorRadius,
        double MinorRadius,
        double Height );
    IAcad3DSolidPtr AddEllipticalCylinder (
        const _variant_t & Center,
        double MajorRadius,
        double MinorRadius,
        double Height );
    IAcad3DSolidPtr AddExtrudedSolid (
        struct IAcadRegion * Profile,
        double Height,
        double TaperAngle );
    IAcad3DSolidPtr AddExtrudedSolidAlongPath (
        struct IAcadRegion * Profile,
        IDispatch * Path );
    IAcadLeaderPtr AddLeader (
        const _variant_t & PointsArray,
        struct IAcadEntity * Annotation,
        enum AcLeaderType Type );
    IAcadMTextPtr AddMText (
        const _variant_t & InsertionPoint,
        double Width,
        _bstr_t Text );
    IAcadPointPtr AddPoint (
        const _variant_t & Point );
    IAcadLWPolylinePtr AddLightWeightPolyline (
        const _variant_t & VerticesList );
    IAcadPolylinePtr AddPolyline (
        const _variant_t & VerticesList );
    IAcadRayPtr AddRay (
        const _variant_t & Point1,
        const _variant_t & Point2 );
    _variant_t AddRegion (
        const _variant_t & ObjectList );
    IAcad3DSolidPtr AddRevolvedSolid (
        struct IAcadRegion * Profile,
        const _variant_t & AxisPoint,
        const _variant_t & AxisDir,
        double Angle );
    IAcadShapePtr AddShape (
        _bstr_t Name,
        const _variant_t & InsertionPoint,
        double ScaleFactor,
        double RotationAngle );
    IAcadSolidPtr AddSolid (
        const _variant_t & Point1,
        const _variant_t & Point2,
        const _variant_t & point3,
        const _variant_t & Point4 );
    IAcad3DSolidPtr AddSphere (
        const _variant_t & Center,
        double Radius );
    IAcadSplinePtr AddSpline (
        const _variant_t & PointsArray,
        const _variant_t & StartTangent,
        const _variant_t & EndTangent );
    IAcadTextPtr AddText (
        _bstr_t TextString,
        const _variant_t & InsertionPoint,
        double Height );
    IAcadTolerancePtr AddTolerance (
        _bstr_t Text,
        const _variant_t & InsertionPoint,
        const _variant_t & Direction );
    IAcad3DSolidPtr AddTorus (
        const _variant_t & Center,
        double TorusRadius,
        double TubeRadius );
    IAcadTracePtr AddTrace (
        const _variant_t & PointsArray );
    IAcad3DSolidPtr AddWedge (
        const _variant_t & Center,
        double Length,
        double Width,
        double Height );
    IAcadXlinePtr AddXline (
        const _variant_t & Point1,
        const _variant_t & Point2 );
    IAcadBlockReferencePtr InsertBlock (
        const _variant_t & InsertionPoint,
        _bstr_t Name,
        double Xscale,
        double Yscale,
        double Zscale,
        double Rotation,
        const _variant_t & Password = vtMissing );
    IAcadHatchPtr AddHatch (
        int PatternType,
        _bstr_t PatternName,
        VARIANT_BOOL Associativity,
        const _variant_t & HatchObjectType = vtMissing );
    IAcadRasterImagePtr AddRaster (
        _bstr_t imageFileName,
        const _variant_t & InsertionPoint,
        double ScaleFactor,
        double RotationAngle );
    IAcadLinePtr AddLine (
        const _variant_t & StartPoint,
        const _variant_t & EndPoint );
    VARIANT_BOOL GetIsLayout ( );
    IAcadLayoutPtr GetLayout ( );
    VARIANT_BOOL GetIsXRef ( );
    IAcadMInsertBlockPtr AddMInsertBlock (
        const _variant_t & InsertionPoint,
        _bstr_t Name,
        double Xscale,
        double Yscale,
        double Zscale,
        double Rotation,
        long NumRows,
        long NumColumns,
        long RowSpacing,
        long ColumnSpacing,
        const _variant_t & Password = vtMissing );
    IAcadPolyfaceMeshPtr AddPolyfaceMesh (
        const _variant_t & VertexList,
        const _variant_t & FaceList );
    IAcadMLinePtr AddMLine (
        const _variant_t & VertexList );
    IAcadDim3PointAngularPtr AddDim3PointAngular (
        const _variant_t & AngleVertex,
        const _variant_t & FirstEndPoint,
        const _variant_t & SecondEndPoint,
        const _variant_t & TextPoint );
    IAcadDatabasePtr GetXRefDatabase ( );
    IAcadExternalReferencePtr AttachExternalReference (
        _bstr_t PathName,
        _bstr_t Name,
        const _variant_t & InsertionPoint,
        double Xscale,
        double Yscale,
        double Zscale,
        double Rotation,
        VARIANT_BOOL bOverlay,
        const _variant_t & Password = vtMissing );
    HRESULT Unload ( );
    HRESULT Reload ( );
    HRESULT Bind (
        VARIANT_BOOL bPrefixName );
    HRESULT Detach ( );
    IAcadTablePtr AddTable (
        const _variant_t & InsertionPoint,
        int NumRows,
        int NumColumns,
        double RowHeight,
        double ColWidth );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t bstrName );
    _bstr_t GetComments ( );
    void PutComments (
        _bstr_t bstrName );
    enum AcInsertUnits GetUnits ( );
    void PutUnits (
        enum AcInsertUnits pIU );
    VARIANT_BOOL GetExplodable ( );
    void PutExplodable (
        VARIANT_BOOL bExplodable );
    enum AcBlockScaling GetBlockScaling ( );
    void PutBlockScaling (
        enum AcBlockScaling pBS );
    VARIANT_BOOL GetIsDynamicBlock ( );
    IAcadDimArcLengthPtr AddDimArc (
        const _variant_t & ArcCenter,
        const _variant_t & FirstEndPoint,
        const _variant_t & SecondEndPoint,
        const _variant_t & ArcPoint );
    IAcadDimRadialLargePtr AddDimRadialLarge (
        const _variant_t & Center,
        const _variant_t & ChordPoint,
        const _variant_t & OverrideCenter,
        const _variant_t & JogPoint,
        double JogAngle );
    IAcadSectionPtr AddSection (
        const _variant_t & FromPoint,
        const _variant_t & ToPoint,
        const _variant_t & planeVector );
    IAcadMLeaderPtr AddMLeader (
        const _variant_t & PointsArray,
        int * leaderLineIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadEntity * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ VARIANT * Origin ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ VARIANT Origin ) = 0;
      virtual HRESULT __stdcall raw_AddCustomObject (
        /*[in]*/ BSTR ClassName,
        /*[out,retval]*/ IDispatch * * pObject ) = 0;
      virtual HRESULT __stdcall raw_Add3DFace (
        /*[in]*/ VARIANT Point1,
        /*[in]*/ VARIANT Point2,
        /*[in]*/ VARIANT point3,
        /*[in]*/ VARIANT Point4,
        /*[out,retval]*/ struct IAcad3DFace * * pFace3d ) = 0;
      virtual HRESULT __stdcall raw_Add3DMesh (
        /*[in]*/ int M,
        /*[in]*/ int N,
        /*[in]*/ VARIANT PointsMatrix,
        /*[out,retval]*/ struct IAcadPolygonMesh * * pMesh3d ) = 0;
      virtual HRESULT __stdcall raw_Add3DPoly (
        /*[in]*/ VARIANT PointsArray,
        /*[out,retval]*/ struct IAcad3DPolyline * * pPoly3d ) = 0;
      virtual HRESULT __stdcall raw_AddArc (
        /*[in]*/ VARIANT Center,
        /*[in]*/ double Radius,
        /*[in]*/ double StartAngle,
        /*[in]*/ double EndAngle,
        /*[out,retval]*/ struct IAcadArc * * pArc ) = 0;
      virtual HRESULT __stdcall raw_AddAttribute (
        /*[in]*/ double Height,
        /*[in]*/ enum AcAttributeMode Mode,
        /*[in]*/ BSTR Prompt,
        /*[in]*/ VARIANT InsertionPoint,
        /*[in]*/ BSTR Tag,
        /*[in]*/ BSTR Value,
        /*[out,retval]*/ struct IAcadAttribute * * pAttr ) = 0;
      virtual HRESULT __stdcall raw_AddBox (
        /*[in]*/ VARIANT Origin,
        /*[in]*/ double Length,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct IAcad3DSolid * * pBox ) = 0;
      virtual HRESULT __stdcall raw_AddCircle (
        /*[in]*/ VARIANT Center,
        /*[in]*/ double Radius,
        /*[out,retval]*/ struct IAcadCircle * * pCircle ) = 0;
      virtual HRESULT __stdcall raw_AddCone (
        /*[in]*/ VARIANT Center,
        /*[in]*/ double BaseRadius,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct IAcad3DSolid * * pCone ) = 0;
      virtual HRESULT __stdcall raw_AddCylinder (
        /*[in]*/ VARIANT Center,
        /*[in]*/ double Radius,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct IAcad3DSolid * * pCyl ) = 0;
      virtual HRESULT __stdcall raw_AddDimAligned (
        /*[in]*/ VARIANT ExtLine1Point,
        /*[in]*/ VARIANT ExtLine2Point,
        /*[in]*/ VARIANT TextPosition,
        /*[out,retval]*/ struct IAcadDimAligned * * pDim ) = 0;
      virtual HRESULT __stdcall raw_AddDimAngular (
        /*[in]*/ VARIANT AngleVertex,
        /*[in]*/ VARIANT FirstEndPoint,
        /*[in]*/ VARIANT SecondEndPoint,
        /*[in]*/ VARIANT TextPoint,
        /*[out,retval]*/ struct IAcadDimAngular * * pDim ) = 0;
      virtual HRESULT __stdcall raw_AddDimDiametric (
        /*[in]*/ VARIANT ChordPoint,
        /*[in]*/ VARIANT FarChordPoint,
        /*[in]*/ double LeaderLength,
        /*[out,retval]*/ struct IAcadDimDiametric * * pDim ) = 0;
      virtual HRESULT __stdcall raw_AddDimRotated (
        /*[in]*/ VARIANT ExtLine1Point,
        /*[in]*/ VARIANT ExtLine2Point,
        /*[in]*/ VARIANT DimLineLocation,
        /*[in]*/ double RotationAngle,
        /*[out,retval]*/ struct IAcadDimRotated * * pDim ) = 0;
      virtual HRESULT __stdcall raw_AddDimOrdinate (
        /*[in]*/ VARIANT DefinitionPoint,
        /*[in]*/ VARIANT LeaderEndPoint,
        /*[in]*/ int UseXAxis,
        /*[out,retval]*/ struct IAcadDimOrdinate * * pDim ) = 0;
      virtual HRESULT __stdcall raw_AddDimRadial (
        /*[in]*/ VARIANT Center,
        /*[in]*/ VARIANT ChordPoint,
        /*[in]*/ double LeaderLength,
        /*[out,retval]*/ struct IAcadDimRadial * * pDim ) = 0;
      virtual HRESULT __stdcall raw_AddEllipse (
        /*[in]*/ VARIANT Center,
        /*[in]*/ VARIANT MajorAxis,
        /*[in]*/ double RadiusRatio,
        /*[out,retval]*/ struct IAcadEllipse * * pEllipse ) = 0;
      virtual HRESULT __stdcall raw_AddEllipticalCone (
        /*[in]*/ VARIANT Center,
        /*[in]*/ double MajorRadius,
        /*[in]*/ double MinorRadius,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct IAcad3DSolid * * pEllipCone ) = 0;
      virtual HRESULT __stdcall raw_AddEllipticalCylinder (
        /*[in]*/ VARIANT Center,
        /*[in]*/ double MajorRadius,
        /*[in]*/ double MinorRadius,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct IAcad3DSolid * * pEllipCyl ) = 0;
      virtual HRESULT __stdcall raw_AddExtrudedSolid (
        /*[in]*/ struct IAcadRegion * Profile,
        /*[in]*/ double Height,
        /*[in]*/ double TaperAngle,
        /*[out,retval]*/ struct IAcad3DSolid * * pExtrSolid ) = 0;
      virtual HRESULT __stdcall raw_AddExtrudedSolidAlongPath (
        /*[in]*/ struct IAcadRegion * Profile,
        /*[in]*/ IDispatch * Path,
        /*[out,retval]*/ struct IAcad3DSolid * * pExtrSolid ) = 0;
      virtual HRESULT __stdcall raw_AddLeader (
        /*[in]*/ VARIANT PointsArray,
        /*[in]*/ struct IAcadEntity * Annotation,
        /*[in]*/ enum AcLeaderType Type,
        /*[out,retval]*/ struct IAcadLeader * * pLeader ) = 0;
      virtual HRESULT __stdcall raw_AddMText (
        /*[in]*/ VARIANT InsertionPoint,
        /*[in]*/ double Width,
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ struct IAcadMText * * pMtext ) = 0;
      virtual HRESULT __stdcall raw_AddPoint (
        /*[in]*/ VARIANT Point,
        /*[out,retval]*/ struct IAcadPoint * * pPoint ) = 0;
      virtual HRESULT __stdcall raw_AddLightWeightPolyline (
        /*[in]*/ VARIANT VerticesList,
        /*[out,retval]*/ struct IAcadLWPolyline * * pLWPolyline ) = 0;
      virtual HRESULT __stdcall raw_AddPolyline (
        /*[in]*/ VARIANT VerticesList,
        /*[out,retval]*/ struct IAcadPolyline * * pPolyline ) = 0;
      virtual HRESULT __stdcall raw_AddRay (
        /*[in]*/ VARIANT Point1,
        /*[in]*/ VARIANT Point2,
        /*[out,retval]*/ struct IAcadRay * * pRay ) = 0;
      virtual HRESULT __stdcall raw_AddRegion (
        /*[in]*/ VARIANT ObjectList,
        /*[out,retval]*/ VARIANT * pRegions ) = 0;
      virtual HRESULT __stdcall raw_AddRevolvedSolid (
        /*[in]*/ struct IAcadRegion * Profile,
        /*[in]*/ VARIANT AxisPoint,
        /*[in]*/ VARIANT AxisDir,
        /*[in]*/ double Angle,
        /*[out,retval]*/ struct IAcad3DSolid * * pRevolSolid ) = 0;
      virtual HRESULT __stdcall raw_AddShape (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT InsertionPoint,
        /*[in]*/ double ScaleFactor,
        /*[in]*/ double RotationAngle,
        /*[out,retval]*/ struct IAcadShape * * pShape ) = 0;
      virtual HRESULT __stdcall raw_AddSolid (
        /*[in]*/ VARIANT Point1,
        /*[in]*/ VARIANT Point2,
        /*[in]*/ VARIANT point3,
        /*[in]*/ VARIANT Point4,
        /*[out,retval]*/ struct IAcadSolid * * pSolid ) = 0;
      virtual HRESULT __stdcall raw_AddSphere (
        /*[in]*/ VARIANT Center,
        /*[in]*/ double Radius,
        /*[out,retval]*/ struct IAcad3DSolid * * pSphere ) = 0;
      virtual HRESULT __stdcall raw_AddSpline (
        /*[in]*/ VARIANT PointsArray,
        /*[in]*/ VARIANT StartTangent,
        /*[in]*/ VARIANT EndTangent,
        /*[out,retval]*/ struct IAcadSpline * * pSpline ) = 0;
      virtual HRESULT __stdcall raw_AddText (
        /*[in]*/ BSTR TextString,
        /*[in]*/ VARIANT InsertionPoint,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct IAcadText * * pText ) = 0;
      virtual HRESULT __stdcall raw_AddTolerance (
        /*[in]*/ BSTR Text,
        /*[in]*/ VARIANT InsertionPoint,
        /*[in]*/ VARIANT Direction,
        /*[out,retval]*/ struct IAcadTolerance * * pTolerance ) = 0;
      virtual HRESULT __stdcall raw_AddTorus (
        /*[in]*/ VARIANT Center,
        /*[in]*/ double TorusRadius,
        /*[in]*/ double TubeRadius,
        /*[out,retval]*/ struct IAcad3DSolid * * pTorus ) = 0;
      virtual HRESULT __stdcall raw_AddTrace (
        /*[in]*/ VARIANT PointsArray,
        /*[out,retval]*/ struct IAcadTrace * * pTrace ) = 0;
      virtual HRESULT __stdcall raw_AddWedge (
        /*[in]*/ VARIANT Center,
        /*[in]*/ double Length,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct IAcad3DSolid * * pWedge ) = 0;
      virtual HRESULT __stdcall raw_AddXline (
        /*[in]*/ VARIANT Point1,
        /*[in]*/ VARIANT Point2,
        /*[out,retval]*/ struct IAcadXline * * pXline ) = 0;
      virtual HRESULT __stdcall raw_InsertBlock (
        /*[in]*/ VARIANT InsertionPoint,
        /*[in]*/ BSTR Name,
        /*[in]*/ double Xscale,
        /*[in]*/ double Yscale,
        /*[in]*/ double Zscale,
        /*[in]*/ double Rotation,
        /*[in]*/ VARIANT Password,
        /*[out,retval]*/ struct IAcadBlockReference * * pBlkRef ) = 0;
      virtual HRESULT __stdcall raw_AddHatch (
        /*[in]*/ int PatternType,
        /*[in]*/ BSTR PatternName,
        /*[in]*/ VARIANT_BOOL Associativity,
        /*[in]*/ VARIANT HatchObjectType,
        /*[out,retval]*/ struct IAcadHatch * * pHatch ) = 0;
      virtual HRESULT __stdcall raw_AddRaster (
        /*[in]*/ BSTR imageFileName,
        /*[in]*/ VARIANT InsertionPoint,
        /*[in]*/ double ScaleFactor,
        /*[in]*/ double RotationAngle,
        /*[out,retval]*/ struct IAcadRasterImage * * pRaster ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ VARIANT StartPoint,
        /*[in]*/ VARIANT EndPoint,
        /*[out,retval]*/ struct IAcadLine * * pLine ) = 0;
      virtual HRESULT __stdcall get_IsLayout (
        /*[out,retval]*/ VARIANT_BOOL * bIsLayout ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ struct IAcadLayout * * pLayout ) = 0;
      virtual HRESULT __stdcall get_IsXRef (
        /*[out,retval]*/ VARIANT_BOOL * pIsXRref ) = 0;
      virtual HRESULT __stdcall raw_AddMInsertBlock (
        /*[in]*/ VARIANT InsertionPoint,
        /*[in]*/ BSTR Name,
        /*[in]*/ double Xscale,
        /*[in]*/ double Yscale,
        /*[in]*/ double Zscale,
        /*[in]*/ double Rotation,
        /*[in]*/ long NumRows,
        /*[in]*/ long NumColumns,
        /*[in]*/ long RowSpacing,
        /*[in]*/ long ColumnSpacing,
        /*[in]*/ VARIANT Password,
        /*[out,retval]*/ struct IAcadMInsertBlock * * pMInsertBlk ) = 0;
      virtual HRESULT __stdcall raw_AddPolyfaceMesh (
        /*[in]*/ VARIANT VertexList,
        /*[in]*/ VARIANT FaceList,
        /*[out,retval]*/ struct IAcadPolyfaceMesh * * pPFMesh ) = 0;
      virtual HRESULT __stdcall raw_AddMLine (
        /*[in]*/ VARIANT VertexList,
        /*[out,retval]*/ struct IAcadMLine * * pMLine ) = 0;
      virtual HRESULT __stdcall raw_AddDim3PointAngular (
        /*[in]*/ VARIANT AngleVertex,
        /*[in]*/ VARIANT FirstEndPoint,
        /*[in]*/ VARIANT SecondEndPoint,
        /*[in]*/ VARIANT TextPoint,
        /*[out,retval]*/ struct IAcadDim3PointAngular * * pDim ) = 0;
      virtual HRESULT __stdcall get_XRefDatabase (
        /*[out,retval]*/ struct IAcadDatabase * * pDatabase ) = 0;
      virtual HRESULT __stdcall raw_AttachExternalReference (
        /*[in]*/ BSTR PathName,
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT InsertionPoint,
        /*[in]*/ double Xscale,
        /*[in]*/ double Yscale,
        /*[in]*/ double Zscale,
        /*[in]*/ double Rotation,
        /*[in]*/ VARIANT_BOOL bOverlay,
        /*[in]*/ VARIANT Password,
        /*[out,retval]*/ struct IAcadExternalReference * * pXRef ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_Reload ( ) = 0;
      virtual HRESULT __stdcall raw_Bind (
        /*[in]*/ VARIANT_BOOL bPrefixName ) = 0;
      virtual HRESULT __stdcall raw_Detach ( ) = 0;
      virtual HRESULT __stdcall raw_AddTable (
        /*[in]*/ VARIANT InsertionPoint,
        /*[in]*/ int NumRows,
        /*[in]*/ int NumColumns,
        /*[in]*/ double RowHeight,
        /*[in]*/ double ColWidth,
        /*[out,retval]*/ struct IAcadTable * * pTable ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Comments (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ enum AcInsertUnits * pIU ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ enum AcInsertUnits pIU ) = 0;
      virtual HRESULT __stdcall get_Explodable (
        /*[out,retval]*/ VARIANT_BOOL * bExplodable ) = 0;
      virtual HRESULT __stdcall put_Explodable (
        /*[in]*/ VARIANT_BOOL bExplodable ) = 0;
      virtual HRESULT __stdcall get_BlockScaling (
        /*[out,retval]*/ enum AcBlockScaling * pBS ) = 0;
      virtual HRESULT __stdcall put_BlockScaling (
        /*[in]*/ enum AcBlockScaling pBS ) = 0;
      virtual HRESULT __stdcall get_IsDynamicBlock (
        /*[out,retval]*/ VARIANT_BOOL * pDynamicBlock ) = 0;
      virtual HRESULT __stdcall raw_AddDimArc (
        /*[in]*/ VARIANT ArcCenter,
        /*[in]*/ VARIANT FirstEndPoint,
        /*[in]*/ VARIANT SecondEndPoint,
        /*[in]*/ VARIANT ArcPoint,
        /*[out,retval]*/ struct IAcadDimArcLength * * pDim ) = 0;
      virtual HRESULT __stdcall raw_AddDimRadialLarge (
        /*[in]*/ VARIANT Center,
        /*[in]*/ VARIANT ChordPoint,
        /*[in]*/ VARIANT OverrideCenter,
        /*[in]*/ VARIANT JogPoint,
        /*[in]*/ double JogAngle,
        /*[out,retval]*/ struct IAcadDimRadialLarge * * pDim ) = 0;
      virtual HRESULT __stdcall raw_AddSection (
        /*[in]*/ VARIANT FromPoint,
        /*[in]*/ VARIANT ToPoint,
        /*[in]*/ VARIANT planeVector,
        /*[out,retval]*/ struct IAcadSection * * ppSecPlane ) = 0;
      virtual HRESULT __stdcall raw_AddMLeader (
        /*[in]*/ VARIANT PointsArray,
        /*[out]*/ int * leaderLineIndex,
        /*[out,retval]*/ struct IAcadMLeader * * pMLeader ) = 0;
};

struct __declspec(uuid("dd75d714-5662-44ea-bd50-3c48aa71e248"))
IAcadModelSpace : IAcadBlock
{};

struct __declspec(uuid("39642510-ece5-4620-a0ee-5ec5c6382c15"))
IAcadLayout : IAcadPlotConfiguration
{
    //
    // Property data
    //

    __declspec(property(get=GetBlock))
    IAcadBlockPtr Block;
    __declspec(property(get=GetTabOrder,put=PutTabOrder))
    long TabOrder;

    //
    // Wrapper methods for error-handling
    //

    IAcadBlockPtr GetBlock ( );
    long GetTabOrder ( );
    void PutTabOrder (
        long pOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Block (
        /*[out,retval]*/ struct IAcadBlock * * pBlock ) = 0;
      virtual HRESULT __stdcall get_TabOrder (
        /*[out,retval]*/ long * pOrder ) = 0;
      virtual HRESULT __stdcall put_TabOrder (
        /*[in]*/ long pOrder ) = 0;
};

struct __declspec(uuid("655a39a8-041f-4156-9f02-f9180a0468a5"))
IAcadPaperSpace : IAcadBlock
{
    //
    // Wrapper methods for error-handling
    //

    IAcadPViewportPtr AddPViewport (
        const _variant_t & Center,
        double Width,
        double Height );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPViewport (
        /*[in]*/ VARIANT Center,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct IAcadPViewport * * pPViewport ) = 0;
};

struct __declspec(uuid("16effb20-32ce-494d-982c-373a53968a40"))
IAcadBlocks : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadBlockPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadBlockPtr Add (
        const _variant_t & InsertionPoint,
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadBlock * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT InsertionPoint,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadBlock * * pBlock ) = 0;
};

struct __declspec(uuid("a1bd1006-20ed-48c4-9180-1ee5b26f6848"))
IAcadLayouts : IAcadObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadLayoutPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadLayoutPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadLayout * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadLayout * * pLayout ) = 0;
};

struct __declspec(uuid("f24a1ea1-ca8e-4a39-a23c-a28d3423ae5e"))
IAcadSortentsTable : IAcadObject
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT MoveToBottom (
        const _variant_t & Objects );
    HRESULT MoveToTop (
        const _variant_t & Objects );
    HRESULT MoveBelow (
        const _variant_t & Objects,
        struct IAcadEntity * Target );
    HRESULT MoveAbove (
        const _variant_t & Objects,
        struct IAcadEntity * Target );
    HRESULT SwapOrder (
        struct IAcadEntity * Object1,
        struct IAcadEntity * Object2 );
    IAcadBlockPtr Block ( );
    HRESULT GetFullDrawOrder (
        VARIANT * Objects,
        VARIANT_BOOL honorSortentsSysvar );
    HRESULT GetRelativeDrawOrder (
        VARIANT * Objects,
        VARIANT_BOOL honorSortentsSysvar );
    HRESULT SetRelativeDrawOrder (
        const _variant_t & Objects );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MoveToBottom (
        /*[in]*/ VARIANT Objects ) = 0;
      virtual HRESULT __stdcall raw_MoveToTop (
        /*[in]*/ VARIANT Objects ) = 0;
      virtual HRESULT __stdcall raw_MoveBelow (
        /*[in]*/ VARIANT Objects,
        /*[in]*/ struct IAcadEntity * Target ) = 0;
      virtual HRESULT __stdcall raw_MoveAbove (
        /*[in]*/ VARIANT Objects,
        /*[in]*/ struct IAcadEntity * Target ) = 0;
      virtual HRESULT __stdcall raw_SwapOrder (
        /*[in]*/ struct IAcadEntity * Object1,
        /*[in]*/ struct IAcadEntity * Object2 ) = 0;
      virtual HRESULT __stdcall raw_Block (
        /*[out,retval]*/ struct IAcadBlock * * pBlock ) = 0;
      virtual HRESULT __stdcall raw_GetFullDrawOrder (
        /*[out]*/ VARIANT * Objects,
        /*[in]*/ VARIANT_BOOL honorSortentsSysvar ) = 0;
      virtual HRESULT __stdcall raw_GetRelativeDrawOrder (
        /*[out]*/ VARIANT * Objects,
        /*[in]*/ VARIANT_BOOL honorSortentsSysvar ) = 0;
      virtual HRESULT __stdcall raw_SetRelativeDrawOrder (
        /*[in]*/ VARIANT Objects ) = 0;
};

struct __declspec(uuid("1c6e41bb-3441-477c-bcc0-6e05a3d487fd"))
IAcadDocument : IAcadDatabase
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    int Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    int Height;
    __declspec(property(get=GetActiveLayout,put=PutActiveLayout))
    IAcadLayoutPtr ActiveLayout;
    __declspec(property(get=GetHWND))
    LONG_PTR HWND;
    __declspec(property(get=GetWindowTitle))
    _bstr_t WindowTitle;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetDatabase))
    IAcadDatabasePtr Database;
    __declspec(property(get=GetActiveMaterial,put=PutActiveMaterial))
    IAcadMaterialPtr ActiveMaterial;
    __declspec(property(get=GetPlot))
    IAcadPlotPtr Plot;
    __declspec(property(get=GetActiveLayer,put=PutActiveLayer))
    IAcadLayerPtr ActiveLayer;
    __declspec(property(get=GetActiveLinetype,put=PutActiveLinetype))
    IAcadLineTypePtr ActiveLinetype;
    __declspec(property(get=GetActiveDimStyle,put=PutActiveDimStyle))
    IAcadDimStylePtr ActiveDimStyle;
    __declspec(property(get=GetActiveTextStyle,put=PutActiveTextStyle))
    IAcadTextStylePtr ActiveTextStyle;
    __declspec(property(get=GetActiveUCS,put=PutActiveUCS))
    IAcadUCSPtr ActiveUCS;
    __declspec(property(get=GetActiveViewport,put=PutActiveViewport))
    IAcadViewportPtr ActiveViewport;
    __declspec(property(get=GetActivePViewport,put=PutActivePViewport))
    IAcadPViewportPtr ActivePViewport;
    __declspec(property(get=GetActiveSpace,put=PutActiveSpace))
    enum AcActiveSpace ActiveSpace;
    __declspec(property(get=GetSelectionSets))
    IAcadSelectionSetsPtr SelectionSets;
    __declspec(property(get=GetActiveSelectionSet))
    IAcadSelectionSetPtr ActiveSelectionSet;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetObjectSnapMode,put=PutObjectSnapMode))
    VARIANT_BOOL ObjectSnapMode;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetSaved))
    VARIANT_BOOL Saved;
    __declspec(property(get=GetMSpace,put=PutMSpace))
    VARIANT_BOOL MSpace;
    __declspec(property(get=GetUtility))
    IAcadUtilityPtr Utility;
    __declspec(property(get=GetPickfirstSelectionSet))
    IAcadSelectionSetPtr PickfirstSelectionSet;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum AcWindowState WindowState;

    //
    // Wrapper methods for error-handling
    //

    IAcadPlotPtr GetPlot ( );
    IAcadLayerPtr GetActiveLayer ( );
    void PutActiveLayer (
        struct IAcadLayer * pActLayer );
    IAcadLineTypePtr GetActiveLinetype ( );
    void PutActiveLinetype (
        struct IAcadLineType * pActLinetype );
    IAcadDimStylePtr GetActiveDimStyle ( );
    void PutActiveDimStyle (
        struct IAcadDimStyle * pActDimStyle );
    IAcadTextStylePtr GetActiveTextStyle ( );
    void PutActiveTextStyle (
        struct IAcadTextStyle * pActTextStyle );
    IAcadUCSPtr GetActiveUCS ( );
    void PutActiveUCS (
        struct IAcadUCS * pActUCS );
    IAcadViewportPtr GetActiveViewport ( );
    void PutActiveViewport (
        struct IAcadViewport * pActView );
    IAcadPViewportPtr GetActivePViewport ( );
    void PutActivePViewport (
        struct IAcadPViewport * pActView );
    enum AcActiveSpace GetActiveSpace ( );
    void PutActiveSpace (
        enum AcActiveSpace ActSpace );
    IAcadSelectionSetsPtr GetSelectionSets ( );
    IAcadSelectionSetPtr GetActiveSelectionSet ( );
    _bstr_t GetFullName ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetObjectSnapMode ( );
    void PutObjectSnapMode (
        VARIANT_BOOL fSnapMode );
    VARIANT_BOOL GetReadOnly ( );
    VARIANT_BOOL GetSaved ( );
    VARIANT_BOOL GetMSpace ( );
    void PutMSpace (
        VARIANT_BOOL Mode );
    IAcadUtilityPtr GetUtility ( );
    IAcadDocumentPtr Open (
        _bstr_t FullName,
        const _variant_t & Password = vtMissing );
    HRESULT AuditInfo (
        VARIANT_BOOL FixErr );
    IDispatchPtr Import (
        _bstr_t FileName,
        const _variant_t & InsertionPoint,
        double ScaleFactor );
    HRESULT Export (
        _bstr_t FileName,
        _bstr_t Extension,
        struct IAcadSelectionSet * SelectionSet );
    IAcadDocumentPtr New (
        _bstr_t TemplateFileName );
    HRESULT Save ( );
    HRESULT SaveAs (
        _bstr_t FullFileName,
        const _variant_t & SaveAsType = vtMissing,
        const _variant_t & vSecurityParams = vtMissing );
    HRESULT Wblock (
        _bstr_t FileName,
        struct IAcadSelectionSet * SelectionSet );
    HRESULT PurgeAll ( );
    _variant_t GetVariable (
        _bstr_t Name );
    HRESULT SetVariable (
        _bstr_t Name,
        const _variant_t & Value );
    HRESULT LoadShapeFile (
        _bstr_t FullName );
    HRESULT Regen (
        enum AcRegenType WhichViewports );
    IAcadSelectionSetPtr GetPickfirstSelectionSet ( );
    VARIANT_BOOL GetActive ( );
    HRESULT Activate ( );
    HRESULT Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & FileName = vtMissing );
    void PutWindowState (
        enum AcWindowState pWinState );
    enum AcWindowState GetWindowState ( );
    void PutWidth (
        int pWidth );
    int GetWidth ( );
    void PutHeight (
        int pHeight );
    int GetHeight ( );
    void PutActiveLayout (
        struct IAcadLayout * pLayout );
    IAcadLayoutPtr GetActiveLayout ( );
    HRESULT SendCommand (
        _bstr_t Command );
    LONG_PTR GetHWND ( );
    _bstr_t GetWindowTitle ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadDatabasePtr GetDatabase ( );
    HRESULT StartUndoMark ( );
    HRESULT EndUndoMark ( );
    IAcadMaterialPtr GetActiveMaterial ( );
    void PutActiveMaterial (
        struct IAcadMaterial * pActMaterial );
    HRESULT PostCommand (
        _bstr_t Command );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Plot (
        /*[out,retval]*/ struct IAcadPlot * * pPlot ) = 0;
      virtual HRESULT __stdcall get_ActiveLayer (
        /*[out,retval]*/ struct IAcadLayer * * pActLayer ) = 0;
      virtual HRESULT __stdcall put_ActiveLayer (
        /*[in]*/ struct IAcadLayer * pActLayer ) = 0;
      virtual HRESULT __stdcall get_ActiveLinetype (
        /*[out,retval]*/ struct IAcadLineType * * pActLinetype ) = 0;
      virtual HRESULT __stdcall put_ActiveLinetype (
        /*[in]*/ struct IAcadLineType * pActLinetype ) = 0;
      virtual HRESULT __stdcall get_ActiveDimStyle (
        /*[out,retval]*/ struct IAcadDimStyle * * pActDimStyle ) = 0;
      virtual HRESULT __stdcall put_ActiveDimStyle (
        /*[in]*/ struct IAcadDimStyle * pActDimStyle ) = 0;
      virtual HRESULT __stdcall get_ActiveTextStyle (
        /*[out,retval]*/ struct IAcadTextStyle * * pActTextStyle ) = 0;
      virtual HRESULT __stdcall put_ActiveTextStyle (
        /*[in]*/ struct IAcadTextStyle * pActTextStyle ) = 0;
      virtual HRESULT __stdcall get_ActiveUCS (
        /*[out,retval]*/ struct IAcadUCS * * pActUCS ) = 0;
      virtual HRESULT __stdcall put_ActiveUCS (
        /*[in]*/ struct IAcadUCS * pActUCS ) = 0;
      virtual HRESULT __stdcall get_ActiveViewport (
        /*[out,retval]*/ struct IAcadViewport * * pActView ) = 0;
      virtual HRESULT __stdcall put_ActiveViewport (
        /*[in]*/ struct IAcadViewport * pActView ) = 0;
      virtual HRESULT __stdcall get_ActivePViewport (
        /*[out,retval]*/ struct IAcadPViewport * * pActView ) = 0;
      virtual HRESULT __stdcall put_ActivePViewport (
        /*[in]*/ struct IAcadPViewport * pActView ) = 0;
      virtual HRESULT __stdcall get_ActiveSpace (
        /*[out,retval]*/ enum AcActiveSpace * ActSpace ) = 0;
      virtual HRESULT __stdcall put_ActiveSpace (
        /*[in]*/ enum AcActiveSpace ActSpace ) = 0;
      virtual HRESULT __stdcall get_SelectionSets (
        /*[out,retval]*/ struct IAcadSelectionSets * * pSelSets ) = 0;
      virtual HRESULT __stdcall get_ActiveSelectionSet (
        /*[out,retval]*/ struct IAcadSelectionSet * * pSelSet ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * FullName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall get_ObjectSnapMode (
        /*[out,retval]*/ VARIANT_BOOL * fSnapMode ) = 0;
      virtual HRESULT __stdcall put_ObjectSnapMode (
        /*[in]*/ VARIANT_BOOL fSnapMode ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * bReadOnly ) = 0;
      virtual HRESULT __stdcall get_Saved (
        /*[out,retval]*/ VARIANT_BOOL * bSaved ) = 0;
      virtual HRESULT __stdcall get_MSpace (
        /*[out,retval]*/ VARIANT_BOOL * Mode ) = 0;
      virtual HRESULT __stdcall put_MSpace (
        /*[in]*/ VARIANT_BOOL Mode ) = 0;
      virtual HRESULT __stdcall get_Utility (
        /*[out,retval]*/ struct IAcadUtility * * pUtil ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR FullName,
        /*[in]*/ VARIANT Password,
        /*[out,retval]*/ struct IAcadDocument * * pDocObj ) = 0;
      virtual HRESULT __stdcall raw_AuditInfo (
        /*[in]*/ VARIANT_BOOL FixErr ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT InsertionPoint,
        /*[in]*/ double ScaleFactor,
        /*[out,retval]*/ IDispatch * * pObj ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR Extension,
        /*[in]*/ struct IAcadSelectionSet * SelectionSet ) = 0;
      virtual HRESULT __stdcall raw_New (
        /*[in]*/ BSTR TemplateFileName,
        /*[out,retval]*/ struct IAcadDocument * * pDocObj ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR FullFileName,
        /*[in]*/ VARIANT SaveAsType = vtMissing,
        /*[in]*/ VARIANT vSecurityParams = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Wblock (
        /*[in]*/ BSTR FileName,
        /*[in]*/ struct IAcadSelectionSet * SelectionSet ) = 0;
      virtual HRESULT __stdcall raw_PurgeAll ( ) = 0;
      virtual HRESULT __stdcall raw_GetVariable (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_SetVariable (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_LoadShapeFile (
        /*[in]*/ BSTR FullName ) = 0;
      virtual HRESULT __stdcall raw_Regen (
        /*[in]*/ enum AcRegenType WhichViewports ) = 0;
      virtual HRESULT __stdcall get_PickfirstSelectionSet (
        /*[out,retval]*/ struct IAcadSelectionSet * * pSelSet ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * pvbActive ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT SaveChanges = vtMissing,
        /*[in]*/ VARIANT FileName = vtMissing ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ enum AcWindowState pWinState ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ enum AcWindowState * pWinState ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ int pWidth ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * pWidth ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ int pHeight ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * pHeight ) = 0;
      virtual HRESULT __stdcall put_ActiveLayout (
        /*[in]*/ struct IAcadLayout * pLayout ) = 0;
      virtual HRESULT __stdcall get_ActiveLayout (
        /*[out,retval]*/ struct IAcadLayout * * pLayout ) = 0;
      virtual HRESULT __stdcall raw_SendCommand (
        /*[in]*/ BSTR Command ) = 0;
      virtual HRESULT __stdcall get_HWND (
        /*[out,retval]*/ LONG_PTR * HWND ) = 0;
      virtual HRESULT __stdcall get_WindowTitle (
        /*[out,retval]*/ BSTR * Title ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_Database (
        /*[out,retval]*/ struct IAcadDatabase * * pDatabase ) = 0;
      virtual HRESULT __stdcall raw_StartUndoMark ( ) = 0;
      virtual HRESULT __stdcall raw_EndUndoMark ( ) = 0;
      virtual HRESULT __stdcall get_ActiveMaterial (
        /*[out,retval]*/ struct IAcadMaterial * * pActMaterial ) = 0;
      virtual HRESULT __stdcall put_ActiveMaterial (
        /*[in]*/ struct IAcadMaterial * pActMaterial ) = 0;
      virtual HRESULT __stdcall raw_PostCommand (
        /*[in]*/ BSTR Command ) = 0;
};

struct __declspec(uuid("2761aa3f-0da6-4203-836e-fd0a0fc168c6"))
IAcadPlot : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetQuietErrorMode,put=PutQuietErrorMode))
    VARIANT_BOOL QuietErrorMode;
    __declspec(property(get=GetNumberOfCopies,put=PutNumberOfCopies))
    long NumberOfCopies;
    __declspec(property(get=GetBatchPlotProgress,put=PutBatchPlotProgress))
    VARIANT_BOOL BatchPlotProgress;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    VARIANT_BOOL GetQuietErrorMode ( );
    void PutQuietErrorMode (
        VARIANT_BOOL bErrorMode );
    long GetNumberOfCopies ( );
    void PutNumberOfCopies (
        long numCopies );
    VARIANT_BOOL GetBatchPlotProgress ( );
    void PutBatchPlotProgress (
        VARIANT_BOOL bProgressStatus );
    HRESULT DisplayPlotPreview (
        enum AcPreviewMode Preview );
    VARIANT_BOOL PlotToFile (
        _bstr_t plotFile,
        const _variant_t & plotConfig = vtMissing );
    VARIANT_BOOL PlotToDevice (
        const _variant_t & plotConfig = vtMissing );
    HRESULT SetLayoutsToPlot (
        const _variant_t & layoutList );
    HRESULT StartBatchMode (
        long entryCount );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_QuietErrorMode (
        /*[out,retval]*/ VARIANT_BOOL * bErrorMode ) = 0;
      virtual HRESULT __stdcall put_QuietErrorMode (
        /*[in]*/ VARIANT_BOOL bErrorMode ) = 0;
      virtual HRESULT __stdcall get_NumberOfCopies (
        /*[out,retval]*/ long * numCopies ) = 0;
      virtual HRESULT __stdcall put_NumberOfCopies (
        /*[in]*/ long numCopies ) = 0;
      virtual HRESULT __stdcall get_BatchPlotProgress (
        /*[out,retval]*/ VARIANT_BOOL * bProgressStatus ) = 0;
      virtual HRESULT __stdcall put_BatchPlotProgress (
        /*[in]*/ VARIANT_BOOL bProgressStatus ) = 0;
      virtual HRESULT __stdcall raw_DisplayPlotPreview (
        /*[in]*/ enum AcPreviewMode Preview ) = 0;
      virtual HRESULT __stdcall raw_PlotToFile (
        /*[in]*/ BSTR plotFile,
        /*[in]*/ VARIANT plotConfig,
        /*[out,retval]*/ VARIANT_BOOL * success ) = 0;
      virtual HRESULT __stdcall raw_PlotToDevice (
        /*[in]*/ VARIANT plotConfig,
        /*[out,retval]*/ VARIANT_BOOL * success ) = 0;
      virtual HRESULT __stdcall raw_SetLayoutsToPlot (
        /*[in]*/ VARIANT layoutList ) = 0;
      virtual HRESULT __stdcall raw_StartBatchMode (
        /*[in]*/ long entryCount ) = 0;
};

struct __declspec(uuid("2007dd78-b05a-422e-af97-cd08d8dcd8e0"))
IAcadApplication : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDocuments))
    IAcadDocumentsPtr Documents;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetActiveDocument,put=PutActiveDocument))
    IAcadDocumentPtr ActiveDocument;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetHeight,put=PutHeight))
    int Height;
    __declspec(property(get=GetWindowLeft,put=PutWindowLeft))
    int WindowLeft;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetLocaleId))
    long LocaleId;
    __declspec(property(get=GetWindowTop,put=PutWindowTop))
    int WindowTop;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetWidth,put=PutWidth))
    int Width;
    __declspec(property(get=GetPreferences))
    IAcadPreferencesPtr Preferences;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum AcWindowState WindowState;
    __declspec(property(get=GetHWND))
    LONG_PTR HWND;
    __declspec(property(get=GetStatusId))
    VARIANT_BOOL StatusId[];
    __declspec(property(get=GetVBE))
    IDispatchPtr VBE;
    __declspec(property(get=GetMenuGroups))
    IAcadMenuGroupsPtr MenuGroups;
    __declspec(property(get=GetMenuBar))
    IAcadMenuBarPtr MenuBar;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    _bstr_t GetName ( );
    _bstr_t GetCaption ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadDocumentPtr GetActiveDocument ( );
    void PutActiveDocument (
        struct IAcadDocument * pActiveDoc );
    _bstr_t GetFullName ( );
    int GetHeight ( );
    void PutHeight (
        int Height );
    int GetWindowLeft ( );
    void PutWindowLeft (
        int left );
    _bstr_t GetPath ( );
    long GetLocaleId ( );
    int GetWindowTop ( );
    void PutWindowTop (
        int top );
    _bstr_t GetVersion ( );
    int GetWidth ( );
    void PutWidth (
        int Width );
    IAcadPreferencesPtr GetPreferences ( );
    VARIANT_BOOL GetStatusId (
        IDispatch * VportObj );
    _variant_t ListArx ( );
    HRESULT LoadArx (
        _bstr_t Name );
    IDispatchPtr GetInterfaceObject (
        _bstr_t ProgID );
    HRESULT UnloadArx (
        _bstr_t Name );
    HRESULT Update ( );
    HRESULT Quit ( );
    HRESULT Zoom (
        int Type,
        VARIANT * vParams );
    IDispatchPtr GetVBE ( );
    IAcadMenuGroupsPtr GetMenuGroups ( );
    IAcadMenuBarPtr GetMenuBar ( );
    HRESULT LoadDVB (
        _bstr_t Name );
    HRESULT UnloadDVB (
        _bstr_t Name );
    IAcadDocumentsPtr GetDocuments ( );
    HRESULT Eval (
        _bstr_t Expression );
    enum AcWindowState GetWindowState ( );
    void PutWindowState (
        enum AcWindowState eWinState );
    HRESULT RunMacro (
        _bstr_t MacroPath );
    HRESULT ZoomExtents ( );
    HRESULT ZoomAll ( );
    HRESULT ZoomCenter (
        const _variant_t & Center,
        double Magnify );
    HRESULT ZoomScaled (
        double scale,
        enum AcZoomScaleType ScaleType );
    HRESULT ZoomWindow (
        const _variant_t & LowerLeft,
        const _variant_t & UpperRight );
    HRESULT ZoomPickWindow ( );
    IAcadStatePtr GetAcadState ( );
    HRESULT ZoomPrevious ( );
    LONG_PTR GetHWND ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pAppName ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * bstrCaption ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_ActiveDocument (
        /*[out,retval]*/ struct IAcadDocument * * pActiveDoc ) = 0;
      virtual HRESULT __stdcall put_ActiveDocument (
        /*[in]*/ struct IAcadDocument * pActiveDoc ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * FullName ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ int Height ) = 0;
      virtual HRESULT __stdcall get_WindowLeft (
        /*[out,retval]*/ int * left ) = 0;
      virtual HRESULT __stdcall put_WindowLeft (
        /*[in]*/ int left ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * bstrPath ) = 0;
      virtual HRESULT __stdcall get_LocaleId (
        /*[out,retval]*/ long * lcid ) = 0;
      virtual HRESULT __stdcall get_WindowTop (
        /*[out,retval]*/ int * top ) = 0;
      virtual HRESULT __stdcall put_WindowTop (
        /*[in]*/ int top ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * bstrVer ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ int Width ) = 0;
      virtual HRESULT __stdcall get_Preferences (
        /*[out,retval]*/ struct IAcadPreferences * * pPreferences ) = 0;
      virtual HRESULT __stdcall get_StatusId (
        /*[in]*/ IDispatch * VportObj,
        /*[out,retval]*/ VARIANT_BOOL * bStatus ) = 0;
      virtual HRESULT __stdcall raw_ListArx (
        /*[out,retval]*/ VARIANT * pVarListArray ) = 0;
      virtual HRESULT __stdcall raw_LoadArx (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_GetInterfaceObject (
        /*[in]*/ BSTR ProgID,
        /*[out,retval]*/ IDispatch * * pObj ) = 0;
      virtual HRESULT __stdcall raw_UnloadArx (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall raw_Quit ( ) = 0;
      virtual HRESULT __stdcall raw_Zoom (
        /*[in]*/ int Type,
        /*[in]*/ VARIANT * vParams ) = 0;
      virtual HRESULT __stdcall get_VBE (
        /*[out,retval]*/ IDispatch * * pDispVBE ) = 0;
      virtual HRESULT __stdcall get_MenuGroups (
        /*[out,retval]*/ struct IAcadMenuGroups * * pMenuGroups ) = 0;
      virtual HRESULT __stdcall get_MenuBar (
        /*[out,retval]*/ struct IAcadMenuBar * * pMenuBar ) = 0;
      virtual HRESULT __stdcall raw_LoadDVB (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_UnloadDVB (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Documents (
        /*[out,retval]*/ struct IAcadDocuments * * pDocuments ) = 0;
      virtual HRESULT __stdcall raw_Eval (
        /*[in]*/ BSTR Expression ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ enum AcWindowState * eWinState ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ enum AcWindowState eWinState ) = 0;
      virtual HRESULT __stdcall raw_RunMacro (
        /*[in]*/ BSTR MacroPath ) = 0;
      virtual HRESULT __stdcall raw_ZoomExtents ( ) = 0;
      virtual HRESULT __stdcall raw_ZoomAll ( ) = 0;
      virtual HRESULT __stdcall raw_ZoomCenter (
        /*[in]*/ VARIANT Center,
        /*[in]*/ double Magnify ) = 0;
      virtual HRESULT __stdcall raw_ZoomScaled (
        /*[in]*/ double scale,
        /*[in]*/ enum AcZoomScaleType ScaleType ) = 0;
      virtual HRESULT __stdcall raw_ZoomWindow (
        /*[in]*/ VARIANT LowerLeft,
        /*[in]*/ VARIANT UpperRight ) = 0;
      virtual HRESULT __stdcall raw_ZoomPickWindow ( ) = 0;
      virtual HRESULT __stdcall raw_GetAcadState (
        /*[out,retval]*/ struct IAcadState * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ZoomPrevious ( ) = 0;
      virtual HRESULT __stdcall get_HWND (
        /*[out,retval]*/ LONG_PTR * HWND ) = 0;
};

struct __declspec(uuid("cfd2d9a8-bdda-455a-93ad-8d47ed6cd9cb"))
IAcadPreferencesFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetSupportPath,put=PutSupportPath))
    _bstr_t SupportPath;
    __declspec(property(get=GetColorBookPath,put=PutColorBookPath))
    _bstr_t ColorBookPath;
    __declspec(property(get=GetDriversPath,put=PutDriversPath))
    _bstr_t DriversPath;
    __declspec(property(get=GetToolPalettePath,put=PutToolPalettePath))
    _bstr_t ToolPalettePath;
    __declspec(property(get=GetMenuFile,put=PutMenuFile))
    _bstr_t MenuFile;
    __declspec(property(get=GetQNewTemplateFile,put=PutQNewTemplateFile))
    _bstr_t QNewTemplateFile;
    __declspec(property(get=GetEnterpriseMenuFile,put=PutEnterpriseMenuFile))
    _bstr_t EnterpriseMenuFile;
    __declspec(property(get=GetPlotLogFilePath,put=PutPlotLogFilePath))
    _bstr_t PlotLogFilePath;
    __declspec(property(get=GetCustomIconPath,put=PutCustomIconPath))
    _bstr_t CustomIconPath;
    __declspec(property(get=GetPageSetupOverridesTemplateFile,put=PutPageSetupOverridesTemplateFile))
    _bstr_t PageSetupOverridesTemplateFile;
    __declspec(property(get=GetHelpFilePath,put=PutHelpFilePath))
    _bstr_t HelpFilePath;
    __declspec(property(get=GetActiveInvProject,put=PutActiveInvProject))
    _bstr_t ActiveInvProject;
    __declspec(property(get=GetDefaultInternetURL,put=PutDefaultInternetURL))
    _bstr_t DefaultInternetURL;
    __declspec(property(get=GetConfigFile))
    _bstr_t ConfigFile;
    __declspec(property(get=GetLicenseServer))
    _bstr_t LicenseServer;
    __declspec(property(get=GetTextEditor,put=PutTextEditor))
    _bstr_t TextEditor;
    __declspec(property(get=GetMainDictionary,put=PutMainDictionary))
    _bstr_t MainDictionary;
    __declspec(property(get=GetCustomDictionary,put=PutCustomDictionary))
    _bstr_t CustomDictionary;
    __declspec(property(get=GetAltFontFile,put=PutAltFontFile))
    _bstr_t AltFontFile;
    __declspec(property(get=GetFontFileMap,put=PutFontFileMap))
    _bstr_t FontFileMap;
    __declspec(property(get=GetPrintFile,put=PutPrintFile))
    _bstr_t PrintFile;
    __declspec(property(get=GetPrintSpoolExecutable,put=PutPrintSpoolExecutable))
    _bstr_t PrintSpoolExecutable;
    __declspec(property(get=GetPostScriptPrologFile,put=PutPostScriptPrologFile))
    _bstr_t PostScriptPrologFile;
    __declspec(property(get=GetPrintSpoolerPath,put=PutPrintSpoolerPath))
    _bstr_t PrintSpoolerPath;
    __declspec(property(get=GetAutoSavePath,put=PutAutoSavePath))
    _bstr_t AutoSavePath;
    __declspec(property(get=GetTemplateDwgPath,put=PutTemplateDwgPath))
    _bstr_t TemplateDwgPath;
    __declspec(property(get=GetLogFilePath,put=PutLogFilePath))
    _bstr_t LogFilePath;
    __declspec(property(get=GetTempFilePath,put=PutTempFilePath))
    _bstr_t TempFilePath;
    __declspec(property(get=GetTempXrefPath,put=PutTempXrefPath))
    _bstr_t TempXrefPath;
    __declspec(property(get=GetTextureMapPath,put=PutTextureMapPath))
    _bstr_t TextureMapPath;
    __declspec(property(get=GetAltTabletMenuFile,put=PutAltTabletMenuFile))
    _bstr_t AltTabletMenuFile;
    __declspec(property(get=GetPrinterConfigPath,put=PutPrinterConfigPath))
    _bstr_t PrinterConfigPath;
    __declspec(property(get=GetPrinterDescPath,put=PutPrinterDescPath))
    _bstr_t PrinterDescPath;
    __declspec(property(get=GetPrinterStyleSheetPath,put=PutPrinterStyleSheetPath))
    _bstr_t PrinterStyleSheetPath;
    __declspec(property(get=GetWorkspacePath,put=PutWorkspacePath))
    _bstr_t WorkspacePath;
    __declspec(property(get=GetObjectARXPath,put=PutObjectARXPath))
    _bstr_t ObjectARXPath;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutSupportPath (
        _bstr_t orient );
    _bstr_t GetSupportPath ( );
    void PutDriversPath (
        _bstr_t Path );
    _bstr_t GetDriversPath ( );
    void PutMenuFile (
        _bstr_t Path );
    _bstr_t GetMenuFile ( );
    void PutEnterpriseMenuFile (
        _bstr_t Path );
    _bstr_t GetEnterpriseMenuFile ( );
    void PutCustomIconPath (
        _bstr_t Path );
    _bstr_t GetCustomIconPath ( );
    void PutHelpFilePath (
        _bstr_t Path );
    _bstr_t GetHelpFilePath ( );
    void PutDefaultInternetURL (
        _bstr_t Path );
    _bstr_t GetDefaultInternetURL ( );
    _bstr_t GetConfigFile ( );
    _bstr_t GetLicenseServer ( );
    void PutTextEditor (
        _bstr_t Path );
    _bstr_t GetTextEditor ( );
    void PutMainDictionary (
        _bstr_t Path );
    _bstr_t GetMainDictionary ( );
    void PutCustomDictionary (
        _bstr_t Path );
    _bstr_t GetCustomDictionary ( );
    void PutAltFontFile (
        _bstr_t fontFile );
    _bstr_t GetAltFontFile ( );
    void PutFontFileMap (
        _bstr_t Path );
    _bstr_t GetFontFileMap ( );
    void PutPrintFile (
        _bstr_t Path );
    _bstr_t GetPrintFile ( );
    void PutPrintSpoolExecutable (
        _bstr_t Path );
    _bstr_t GetPrintSpoolExecutable ( );
    void PutPostScriptPrologFile (
        _bstr_t Path );
    _bstr_t GetPostScriptPrologFile ( );
    void PutPrintSpoolerPath (
        _bstr_t Path );
    _bstr_t GetPrintSpoolerPath ( );
    void PutAutoSavePath (
        _bstr_t AutoSavePath );
    _bstr_t GetAutoSavePath ( );
    void PutTemplateDwgPath (
        _bstr_t Path );
    _bstr_t GetTemplateDwgPath ( );
    void PutLogFilePath (
        _bstr_t Path );
    _bstr_t GetLogFilePath ( );
    void PutTempFilePath (
        _bstr_t Path );
    _bstr_t GetTempFilePath ( );
    void PutTempXrefPath (
        _bstr_t Path );
    _bstr_t GetTempXrefPath ( );
    void PutTextureMapPath (
        _bstr_t Path );
    _bstr_t GetTextureMapPath ( );
    void PutAltTabletMenuFile (
        _bstr_t MenuFile );
    _bstr_t GetAltTabletMenuFile ( );
    HRESULT SetProjectFilePath (
        _bstr_t ProjectName,
        _bstr_t ProjectFilePath );
    _bstr_t GetProjectFilePath (
        _bstr_t ProjectName );
    void PutPrinterConfigPath (
        _bstr_t Path );
    _bstr_t GetPrinterConfigPath ( );
    void PutPrinterDescPath (
        _bstr_t Path );
    _bstr_t GetPrinterDescPath ( );
    void PutPrinterStyleSheetPath (
        _bstr_t Path );
    _bstr_t GetPrinterStyleSheetPath ( );
    void PutWorkspacePath (
        _bstr_t Path );
    _bstr_t GetWorkspacePath ( );
    void PutObjectARXPath (
        _bstr_t Path );
    _bstr_t GetObjectARXPath ( );
    void PutColorBookPath (
        _bstr_t Path );
    _bstr_t GetColorBookPath ( );
    void PutToolPalettePath (
        _bstr_t Path );
    _bstr_t GetToolPalettePath ( );
    void PutQNewTemplateFile (
        _bstr_t templateFile );
    _bstr_t GetQNewTemplateFile ( );
    void PutPlotLogFilePath (
        _bstr_t templateFile );
    _bstr_t GetPlotLogFilePath ( );
    void PutPageSetupOverridesTemplateFile (
        _bstr_t templateFile );
    _bstr_t GetPageSetupOverridesTemplateFile ( );
    void PutActiveInvProject (
        _bstr_t Path );
    _bstr_t GetActiveInvProject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall put_SupportPath (
        /*[in]*/ BSTR orient ) = 0;
      virtual HRESULT __stdcall get_SupportPath (
        /*[out,retval]*/ BSTR * orient ) = 0;
      virtual HRESULT __stdcall put_DriversPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_DriversPath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_MenuFile (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_MenuFile (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_EnterpriseMenuFile (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_EnterpriseMenuFile (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_CustomIconPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_CustomIconPath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_HelpFilePath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_HelpFilePath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_DefaultInternetURL (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_DefaultInternetURL (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall get_ConfigFile (
        /*[out,retval]*/ BSTR * ConfigFile ) = 0;
      virtual HRESULT __stdcall get_LicenseServer (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_TextEditor (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_TextEditor (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_MainDictionary (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_MainDictionary (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_CustomDictionary (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_CustomDictionary (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_AltFontFile (
        /*[in]*/ BSTR fontFile ) = 0;
      virtual HRESULT __stdcall get_AltFontFile (
        /*[out,retval]*/ BSTR * fontFile ) = 0;
      virtual HRESULT __stdcall put_FontFileMap (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_FontFileMap (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_PrintFile (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_PrintFile (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_PrintSpoolExecutable (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_PrintSpoolExecutable (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_PostScriptPrologFile (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_PostScriptPrologFile (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_PrintSpoolerPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_PrintSpoolerPath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_AutoSavePath (
        /*[in]*/ BSTR AutoSavePath ) = 0;
      virtual HRESULT __stdcall get_AutoSavePath (
        /*[out,retval]*/ BSTR * AutoSavePath ) = 0;
      virtual HRESULT __stdcall put_TemplateDwgPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_TemplateDwgPath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_LogFilePath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_LogFilePath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_TempFilePath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_TempFilePath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_TempXrefPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_TempXrefPath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_TextureMapPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_TextureMapPath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_AltTabletMenuFile (
        /*[in]*/ BSTR MenuFile ) = 0;
      virtual HRESULT __stdcall get_AltTabletMenuFile (
        /*[out,retval]*/ BSTR * MenuFile ) = 0;
      virtual HRESULT __stdcall raw_SetProjectFilePath (
        /*[in]*/ BSTR ProjectName,
        /*[in]*/ BSTR ProjectFilePath ) = 0;
      virtual HRESULT __stdcall raw_GetProjectFilePath (
        /*[in]*/ BSTR ProjectName,
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_PrinterConfigPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_PrinterConfigPath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_PrinterDescPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_PrinterDescPath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_PrinterStyleSheetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_PrinterStyleSheetPath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_WorkspacePath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_WorkspacePath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_ObjectARXPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_ObjectARXPath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_ColorBookPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_ColorBookPath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_ToolPalettePath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_ToolPalettePath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_QNewTemplateFile (
        /*[in]*/ BSTR templateFile ) = 0;
      virtual HRESULT __stdcall get_QNewTemplateFile (
        /*[out,retval]*/ BSTR * templateFile ) = 0;
      virtual HRESULT __stdcall put_PlotLogFilePath (
        /*[in]*/ BSTR templateFile ) = 0;
      virtual HRESULT __stdcall get_PlotLogFilePath (
        /*[out,retval]*/ BSTR * templateFile ) = 0;
      virtual HRESULT __stdcall put_PageSetupOverridesTemplateFile (
        /*[in]*/ BSTR templateFile ) = 0;
      virtual HRESULT __stdcall get_PageSetupOverridesTemplateFile (
        /*[out,retval]*/ BSTR * templateFile ) = 0;
      virtual HRESULT __stdcall put_ActiveInvProject (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_ActiveInvProject (
        /*[out,retval]*/ BSTR * Path ) = 0;
};

struct __declspec(uuid("bf71abf6-0878-493d-b7ec-f221797c41db"))
IAcadPreferencesDisplay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetLayoutDisplayMargins,put=PutLayoutDisplayMargins))
    VARIANT_BOOL LayoutDisplayMargins;
    __declspec(property(get=GetDisplayLayoutTabs,put=PutDisplayLayoutTabs))
    VARIANT_BOOL DisplayLayoutTabs;
    __declspec(property(get=GetLayoutDisplayPaper,put=PutLayoutDisplayPaper))
    VARIANT_BOOL LayoutDisplayPaper;
    __declspec(property(get=GetImageFrameHighlight,put=PutImageFrameHighlight))
    VARIANT_BOOL ImageFrameHighlight;
    __declspec(property(get=GetLayoutDisplayPaperShadow,put=PutLayoutDisplayPaperShadow))
    VARIANT_BOOL LayoutDisplayPaperShadow;
    __declspec(property(get=GetTrueColorImages,put=PutTrueColorImages))
    VARIANT_BOOL TrueColorImages;
    __declspec(property(get=GetLayoutShowPlotSetup,put=PutLayoutShowPlotSetup))
    VARIANT_BOOL LayoutShowPlotSetup;
    __declspec(property(get=GetXRefFadeIntensity,put=PutXRefFadeIntensity))
    long XRefFadeIntensity;
    __declspec(property(get=GetLayoutCreateViewport,put=PutLayoutCreateViewport))
    VARIANT_BOOL LayoutCreateViewport;
    __declspec(property(get=GetDisplayScrollBars,put=PutDisplayScrollBars))
    VARIANT_BOOL DisplayScrollBars;
    __declspec(property(get=GetDisplayScreenMenu,put=PutDisplayScreenMenu))
    VARIANT_BOOL DisplayScreenMenu;
    __declspec(property(get=GetCursorSize,put=PutCursorSize))
    int CursorSize;
    __declspec(property(get=GetDockedVisibleLines,put=PutDockedVisibleLines))
    int DockedVisibleLines;
    __declspec(property(get=GetShowRasterImage,put=PutShowRasterImage))
    VARIANT_BOOL ShowRasterImage;
    __declspec(property(get=GetGraphicsWinModelBackgrndColor,put=PutGraphicsWinModelBackgrndColor))
    OLE_COLOR GraphicsWinModelBackgrndColor;
    __declspec(property(get=GetModelCrosshairColor,put=PutModelCrosshairColor))
    OLE_COLOR ModelCrosshairColor;
    __declspec(property(get=GetGraphicsWinLayoutBackgrndColor,put=PutGraphicsWinLayoutBackgrndColor))
    OLE_COLOR GraphicsWinLayoutBackgrndColor;
    __declspec(property(get=GetTextWinBackgrndColor,put=PutTextWinBackgrndColor))
    OLE_COLOR TextWinBackgrndColor;
    __declspec(property(get=GetTextWinTextColor,put=PutTextWinTextColor))
    OLE_COLOR TextWinTextColor;
    __declspec(property(get=GetLayoutCrosshairColor,put=PutLayoutCrosshairColor))
    OLE_COLOR LayoutCrosshairColor;
    __declspec(property(get=GetAutoTrackingVecColor,put=PutAutoTrackingVecColor))
    OLE_COLOR AutoTrackingVecColor;
    __declspec(property(get=GetTextFont,put=PutTextFont))
    _bstr_t TextFont;
    __declspec(property(get=GetTextFontStyle,put=PutTextFontStyle))
    enum AcTextFontStyle TextFontStyle;
    __declspec(property(get=GetTextFontSize,put=PutTextFontSize))
    int TextFontSize;
    __declspec(property(get=GetHistoryLines,put=PutHistoryLines))
    int HistoryLines;
    __declspec(property(get=GetMaxAutoCADWindow,put=PutMaxAutoCADWindow))
    VARIANT_BOOL MaxAutoCADWindow;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutLayoutDisplayMargins (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetLayoutDisplayMargins ( );
    void PutLayoutDisplayPaper (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetLayoutDisplayPaper ( );
    void PutLayoutDisplayPaperShadow (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetLayoutDisplayPaperShadow ( );
    void PutLayoutShowPlotSetup (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetLayoutShowPlotSetup ( );
    void PutLayoutCreateViewport (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetLayoutCreateViewport ( );
    void PutDisplayScrollBars (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetDisplayScrollBars ( );
    void PutDisplayScreenMenu (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetDisplayScreenMenu ( );
    void PutCursorSize (
        int Path );
    int GetCursorSize ( );
    void PutDockedVisibleLines (
        int Path );
    int GetDockedVisibleLines ( );
    void PutShowRasterImage (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetShowRasterImage ( );
    void PutGraphicsWinModelBackgrndColor (
        OLE_COLOR color );
    OLE_COLOR GetGraphicsWinModelBackgrndColor ( );
    void PutModelCrosshairColor (
        OLE_COLOR crossHairColor );
    OLE_COLOR GetModelCrosshairColor ( );
    void PutGraphicsWinLayoutBackgrndColor (
        OLE_COLOR color );
    OLE_COLOR GetGraphicsWinLayoutBackgrndColor ( );
    void PutTextWinBackgrndColor (
        OLE_COLOR Path );
    OLE_COLOR GetTextWinBackgrndColor ( );
    void PutTextWinTextColor (
        OLE_COLOR Path );
    OLE_COLOR GetTextWinTextColor ( );
    void PutLayoutCrosshairColor (
        OLE_COLOR crossHairColor );
    OLE_COLOR GetLayoutCrosshairColor ( );
    void PutAutoTrackingVecColor (
        OLE_COLOR AutoTrackingVecColor );
    OLE_COLOR GetAutoTrackingVecColor ( );
    void PutTextFont (
        _bstr_t Path );
    _bstr_t GetTextFont ( );
    void PutTextFontStyle (
        enum AcTextFontStyle Path );
    enum AcTextFontStyle GetTextFontStyle ( );
    void PutTextFontSize (
        int Path );
    int GetTextFontSize ( );
    void PutHistoryLines (
        int Path );
    int GetHistoryLines ( );
    void PutMaxAutoCADWindow (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetMaxAutoCADWindow ( );
    void PutDisplayLayoutTabs (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetDisplayLayoutTabs ( );
    void PutImageFrameHighlight (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetImageFrameHighlight ( );
    void PutTrueColorImages (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetTrueColorImages ( );
    void PutXRefFadeIntensity (
        long Path );
    long GetXRefFadeIntensity ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall put_LayoutDisplayMargins (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_LayoutDisplayMargins (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_LayoutDisplayPaper (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_LayoutDisplayPaper (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_LayoutDisplayPaperShadow (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_LayoutDisplayPaperShadow (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_LayoutShowPlotSetup (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_LayoutShowPlotSetup (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_LayoutCreateViewport (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_LayoutCreateViewport (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_DisplayScrollBars (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_DisplayScrollBars (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_DisplayScreenMenu (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_DisplayScreenMenu (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_CursorSize (
        /*[in]*/ int Path ) = 0;
      virtual HRESULT __stdcall get_CursorSize (
        /*[out,retval]*/ int * Path ) = 0;
      virtual HRESULT __stdcall put_DockedVisibleLines (
        /*[in]*/ int Path ) = 0;
      virtual HRESULT __stdcall get_DockedVisibleLines (
        /*[out,retval]*/ int * Path ) = 0;
      virtual HRESULT __stdcall put_ShowRasterImage (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_ShowRasterImage (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_GraphicsWinModelBackgrndColor (
        /*[in]*/ OLE_COLOR color ) = 0;
      virtual HRESULT __stdcall get_GraphicsWinModelBackgrndColor (
        /*[out,retval]*/ OLE_COLOR * color ) = 0;
      virtual HRESULT __stdcall put_ModelCrosshairColor (
        /*[in]*/ OLE_COLOR crossHairColor ) = 0;
      virtual HRESULT __stdcall get_ModelCrosshairColor (
        /*[out,retval]*/ OLE_COLOR * crossHairColor ) = 0;
      virtual HRESULT __stdcall put_GraphicsWinLayoutBackgrndColor (
        /*[in]*/ OLE_COLOR color ) = 0;
      virtual HRESULT __stdcall get_GraphicsWinLayoutBackgrndColor (
        /*[out,retval]*/ OLE_COLOR * color ) = 0;
      virtual HRESULT __stdcall put_TextWinBackgrndColor (
        /*[in]*/ OLE_COLOR Path ) = 0;
      virtual HRESULT __stdcall get_TextWinBackgrndColor (
        /*[out,retval]*/ OLE_COLOR * Path ) = 0;
      virtual HRESULT __stdcall put_TextWinTextColor (
        /*[in]*/ OLE_COLOR Path ) = 0;
      virtual HRESULT __stdcall get_TextWinTextColor (
        /*[out,retval]*/ OLE_COLOR * Path ) = 0;
      virtual HRESULT __stdcall put_LayoutCrosshairColor (
        /*[in]*/ OLE_COLOR crossHairColor ) = 0;
      virtual HRESULT __stdcall get_LayoutCrosshairColor (
        /*[out,retval]*/ OLE_COLOR * crossHairColor ) = 0;
      virtual HRESULT __stdcall put_AutoTrackingVecColor (
        /*[in]*/ OLE_COLOR AutoTrackingVecColor ) = 0;
      virtual HRESULT __stdcall get_AutoTrackingVecColor (
        /*[out,retval]*/ OLE_COLOR * AutoTrackingVecColor ) = 0;
      virtual HRESULT __stdcall put_TextFont (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_TextFont (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_TextFontStyle (
        /*[in]*/ enum AcTextFontStyle Path ) = 0;
      virtual HRESULT __stdcall get_TextFontStyle (
        /*[out,retval]*/ enum AcTextFontStyle * Path ) = 0;
      virtual HRESULT __stdcall put_TextFontSize (
        /*[in]*/ int Path ) = 0;
      virtual HRESULT __stdcall get_TextFontSize (
        /*[out,retval]*/ int * Path ) = 0;
      virtual HRESULT __stdcall put_HistoryLines (
        /*[in]*/ int Path ) = 0;
      virtual HRESULT __stdcall get_HistoryLines (
        /*[out,retval]*/ int * Path ) = 0;
      virtual HRESULT __stdcall put_MaxAutoCADWindow (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_MaxAutoCADWindow (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_DisplayLayoutTabs (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_DisplayLayoutTabs (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_ImageFrameHighlight (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_ImageFrameHighlight (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_TrueColorImages (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_TrueColorImages (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_XRefFadeIntensity (
        /*[in]*/ long Path ) = 0;
      virtual HRESULT __stdcall get_XRefFadeIntensity (
        /*[out,retval]*/ long * Path ) = 0;
};

struct __declspec(uuid("dbb44995-7728-499e-8273-2ab30ac17794"))
IAcadPreferencesOpenSave : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetSavePreviewThumbnail,put=PutSavePreviewThumbnail))
    VARIANT_BOOL SavePreviewThumbnail;
    __declspec(property(get=GetIncrementalSavePercent,put=PutIncrementalSavePercent))
    int IncrementalSavePercent;
    __declspec(property(get=GetAutoSaveInterval,put=PutAutoSaveInterval))
    int AutoSaveInterval;
    __declspec(property(get=GetCreateBackup,put=PutCreateBackup))
    VARIANT_BOOL CreateBackup;
    __declspec(property(get=GetFullCRCValidation,put=PutFullCRCValidation))
    VARIANT_BOOL FullCRCValidation;
    __declspec(property(get=GetLogFileOn,put=PutLogFileOn))
    VARIANT_BOOL LogFileOn;
    __declspec(property(get=GetTempFileExtension,put=PutTempFileExtension))
    _bstr_t TempFileExtension;
    __declspec(property(get=GetXrefDemandLoad,put=PutXrefDemandLoad))
    enum AcXRefDemandLoad XrefDemandLoad;
    __declspec(property(get=GetDemandLoadARXApp,put=PutDemandLoadARXApp))
    enum AcARXDemandLoad DemandLoadARXApp;
    __declspec(property(get=GetProxyImage,put=PutProxyImage))
    enum AcProxyImage ProxyImage;
    __declspec(property(get=GetShowProxyDialogBox,put=PutShowProxyDialogBox))
    VARIANT_BOOL ShowProxyDialogBox;
    __declspec(property(get=GetAutoAudit,put=PutAutoAudit))
    VARIANT_BOOL AutoAudit;
    __declspec(property(get=GetSaveAsType,put=PutSaveAsType))
    enum AcSaveAsType SaveAsType;
    __declspec(property(get=GetMRUNumber))
    long MRUNumber;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutSavePreviewThumbnail (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetSavePreviewThumbnail ( );
    void PutIncrementalSavePercent (
        int Path );
    int GetIncrementalSavePercent ( );
    void PutAutoSaveInterval (
        int Path );
    int GetAutoSaveInterval ( );
    void PutCreateBackup (
        VARIANT_BOOL CreateBackup );
    VARIANT_BOOL GetCreateBackup ( );
    void PutFullCRCValidation (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetFullCRCValidation ( );
    void PutLogFileOn (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetLogFileOn ( );
    void PutTempFileExtension (
        _bstr_t Path );
    _bstr_t GetTempFileExtension ( );
    void PutXrefDemandLoad (
        enum AcXRefDemandLoad Path );
    enum AcXRefDemandLoad GetXrefDemandLoad ( );
    void PutDemandLoadARXApp (
        enum AcARXDemandLoad Path );
    enum AcARXDemandLoad GetDemandLoadARXApp ( );
    void PutProxyImage (
        enum AcProxyImage Path );
    enum AcProxyImage GetProxyImage ( );
    void PutShowProxyDialogBox (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetShowProxyDialogBox ( );
    void PutAutoAudit (
        VARIANT_BOOL bAudit );
    VARIANT_BOOL GetAutoAudit ( );
    void PutSaveAsType (
        enum AcSaveAsType Path );
    enum AcSaveAsType GetSaveAsType ( );
    long GetMRUNumber ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall put_SavePreviewThumbnail (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_SavePreviewThumbnail (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_IncrementalSavePercent (
        /*[in]*/ int Path ) = 0;
      virtual HRESULT __stdcall get_IncrementalSavePercent (
        /*[out,retval]*/ int * Path ) = 0;
      virtual HRESULT __stdcall put_AutoSaveInterval (
        /*[in]*/ int Path ) = 0;
      virtual HRESULT __stdcall get_AutoSaveInterval (
        /*[out,retval]*/ int * Path ) = 0;
      virtual HRESULT __stdcall put_CreateBackup (
        /*[in]*/ VARIANT_BOOL CreateBackup ) = 0;
      virtual HRESULT __stdcall get_CreateBackup (
        /*[out,retval]*/ VARIANT_BOOL * CreateBackup ) = 0;
      virtual HRESULT __stdcall put_FullCRCValidation (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_FullCRCValidation (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_LogFileOn (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_LogFileOn (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_TempFileExtension (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_TempFileExtension (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_XrefDemandLoad (
        /*[in]*/ enum AcXRefDemandLoad Path ) = 0;
      virtual HRESULT __stdcall get_XrefDemandLoad (
        /*[out,retval]*/ enum AcXRefDemandLoad * Path ) = 0;
      virtual HRESULT __stdcall put_DemandLoadARXApp (
        /*[in]*/ enum AcARXDemandLoad Path ) = 0;
      virtual HRESULT __stdcall get_DemandLoadARXApp (
        /*[out,retval]*/ enum AcARXDemandLoad * Path ) = 0;
      virtual HRESULT __stdcall put_ProxyImage (
        /*[in]*/ enum AcProxyImage Path ) = 0;
      virtual HRESULT __stdcall get_ProxyImage (
        /*[out,retval]*/ enum AcProxyImage * Path ) = 0;
      virtual HRESULT __stdcall put_ShowProxyDialogBox (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_ShowProxyDialogBox (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_AutoAudit (
        /*[in]*/ VARIANT_BOOL bAudit ) = 0;
      virtual HRESULT __stdcall get_AutoAudit (
        /*[out,retval]*/ VARIANT_BOOL * bAudit ) = 0;
      virtual HRESULT __stdcall put_SaveAsType (
        /*[in]*/ enum AcSaveAsType Path ) = 0;
      virtual HRESULT __stdcall get_SaveAsType (
        /*[out,retval]*/ enum AcSaveAsType * Path ) = 0;
      virtual HRESULT __stdcall get_MRUNumber (
        /*[out,retval]*/ long * Path ) = 0;
};

struct __declspec(uuid("bc4af42a-d51e-4936-962d-1adbddfd6090"))
IAcadPreferencesOutput : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetDefaultOutputDevice,put=PutDefaultOutputDevice))
    _bstr_t DefaultOutputDevice;
    __declspec(property(get=GetPrinterSpoolAlert,put=PutPrinterSpoolAlert))
    enum AcPrinterSpoolAlert PrinterSpoolAlert;
    __declspec(property(get=GetPrinterPaperSizeAlert,put=PutPrinterPaperSizeAlert))
    VARIANT_BOOL PrinterPaperSizeAlert;
    __declspec(property(get=GetPlotLegacy,put=PutPlotLegacy))
    VARIANT_BOOL PlotLegacy;
    __declspec(property(get=GetOLEQuality,put=PutOLEQuality))
    enum AcOleQuality OLEQuality;
    __declspec(property(get=GetUseLastPlotSettings,put=PutUseLastPlotSettings))
    VARIANT_BOOL UseLastPlotSettings;
    __declspec(property(get=GetPlotPolicy,put=PutPlotPolicy))
    enum AcPlotPolicy PlotPolicy;
    __declspec(property(get=GetDefaultPlotStyleTable,put=PutDefaultPlotStyleTable))
    _bstr_t DefaultPlotStyleTable;
    __declspec(property(get=GetDefaultPlotStyleForObjects,put=PutDefaultPlotStyleForObjects))
    _bstr_t DefaultPlotStyleForObjects;
    __declspec(property(get=GetDefaultPlotStyleForLayer,put=PutDefaultPlotStyleForLayer))
    _bstr_t DefaultPlotStyleForLayer;
    __declspec(property(get=GetContinuousPlotLog,put=PutContinuousPlotLog))
    VARIANT_BOOL ContinuousPlotLog;
    __declspec(property(get=GetAutomaticPlotLog,put=PutAutomaticPlotLog))
    VARIANT_BOOL AutomaticPlotLog;
    __declspec(property(get=GetDefaultPlotToFilePath,put=PutDefaultPlotToFilePath))
    _bstr_t DefaultPlotToFilePath;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutDefaultOutputDevice (
        _bstr_t Path );
    _bstr_t GetDefaultOutputDevice ( );
    void PutPrinterSpoolAlert (
        enum AcPrinterSpoolAlert Path );
    enum AcPrinterSpoolAlert GetPrinterSpoolAlert ( );
    void PutPrinterPaperSizeAlert (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetPrinterPaperSizeAlert ( );
    void PutPlotLegacy (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetPlotLegacy ( );
    void PutOLEQuality (
        enum AcOleQuality Path );
    enum AcOleQuality GetOLEQuality ( );
    void PutUseLastPlotSettings (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetUseLastPlotSettings ( );
    void PutPlotPolicy (
        enum AcPlotPolicy Path );
    enum AcPlotPolicy GetPlotPolicy ( );
    void PutDefaultPlotStyleTable (
        _bstr_t Path );
    _bstr_t GetDefaultPlotStyleTable ( );
    void PutDefaultPlotStyleForObjects (
        _bstr_t Path );
    _bstr_t GetDefaultPlotStyleForObjects ( );
    void PutDefaultPlotStyleForLayer (
        _bstr_t Path );
    _bstr_t GetDefaultPlotStyleForLayer ( );
    void PutContinuousPlotLog (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetContinuousPlotLog ( );
    void PutAutomaticPlotLog (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetAutomaticPlotLog ( );
    void PutDefaultPlotToFilePath (
        _bstr_t Path );
    _bstr_t GetDefaultPlotToFilePath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall put_DefaultOutputDevice (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_DefaultOutputDevice (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_PrinterSpoolAlert (
        /*[in]*/ enum AcPrinterSpoolAlert Path ) = 0;
      virtual HRESULT __stdcall get_PrinterSpoolAlert (
        /*[out,retval]*/ enum AcPrinterSpoolAlert * Path ) = 0;
      virtual HRESULT __stdcall put_PrinterPaperSizeAlert (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_PrinterPaperSizeAlert (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_PlotLegacy (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_PlotLegacy (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_OLEQuality (
        /*[in]*/ enum AcOleQuality Path ) = 0;
      virtual HRESULT __stdcall get_OLEQuality (
        /*[out,retval]*/ enum AcOleQuality * Path ) = 0;
      virtual HRESULT __stdcall put_UseLastPlotSettings (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_UseLastPlotSettings (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_PlotPolicy (
        /*[in]*/ enum AcPlotPolicy Path ) = 0;
      virtual HRESULT __stdcall get_PlotPolicy (
        /*[out,retval]*/ enum AcPlotPolicy * Path ) = 0;
      virtual HRESULT __stdcall put_DefaultPlotStyleTable (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_DefaultPlotStyleTable (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_DefaultPlotStyleForObjects (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_DefaultPlotStyleForObjects (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_DefaultPlotStyleForLayer (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_DefaultPlotStyleForLayer (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_ContinuousPlotLog (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_ContinuousPlotLog (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_AutomaticPlotLog (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_AutomaticPlotLog (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_DefaultPlotToFilePath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_DefaultPlotToFilePath (
        /*[out,retval]*/ BSTR * Path ) = 0;
};

struct __declspec(uuid("daf7bc7c-a60a-4ca7-bbd9-a6ded455682e"))
IAcadPreferencesSystem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetSingleDocumentMode,put=PutSingleDocumentMode))
    VARIANT_BOOL SingleDocumentMode;
    __declspec(property(get=GetDisplayOLEScale,put=PutDisplayOLEScale))
    VARIANT_BOOL DisplayOLEScale;
    __declspec(property(get=GetStoreSQLIndex,put=PutStoreSQLIndex))
    VARIANT_BOOL StoreSQLIndex;
    __declspec(property(get=GetTablesReadOnly,put=PutTablesReadOnly))
    VARIANT_BOOL TablesReadOnly;
    __declspec(property(get=GetEnableStartupDialog,put=PutEnableStartupDialog))
    VARIANT_BOOL EnableStartupDialog;
    __declspec(property(get=GetBeepOnError,put=PutBeepOnError))
    VARIANT_BOOL BeepOnError;
    __declspec(property(get=GetShowWarningMessages,put=PutShowWarningMessages))
    VARIANT_BOOL ShowWarningMessages;
    __declspec(property(get=GetLoadAcadLspInAllDocuments,put=PutLoadAcadLspInAllDocuments))
    VARIANT_BOOL LoadAcadLspInAllDocuments;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutSingleDocumentMode (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetSingleDocumentMode ( );
    void PutDisplayOLEScale (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetDisplayOLEScale ( );
    void PutStoreSQLIndex (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetStoreSQLIndex ( );
    void PutTablesReadOnly (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetTablesReadOnly ( );
    void PutEnableStartupDialog (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetEnableStartupDialog ( );
    void PutBeepOnError (
        VARIANT_BOOL BeepOnError );
    VARIANT_BOOL GetBeepOnError ( );
    void PutShowWarningMessages (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetShowWarningMessages ( );
    void PutLoadAcadLspInAllDocuments (
        VARIANT_BOOL pALID );
    VARIANT_BOOL GetLoadAcadLspInAllDocuments ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall put_SingleDocumentMode (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_SingleDocumentMode (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_DisplayOLEScale (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_DisplayOLEScale (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_StoreSQLIndex (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_StoreSQLIndex (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_TablesReadOnly (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_TablesReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_EnableStartupDialog (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_EnableStartupDialog (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_BeepOnError (
        /*[in]*/ VARIANT_BOOL BeepOnError ) = 0;
      virtual HRESULT __stdcall get_BeepOnError (
        /*[out,retval]*/ VARIANT_BOOL * BeepOnError ) = 0;
      virtual HRESULT __stdcall put_ShowWarningMessages (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_ShowWarningMessages (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_LoadAcadLspInAllDocuments (
        /*[in]*/ VARIANT_BOOL pALID ) = 0;
      virtual HRESULT __stdcall get_LoadAcadLspInAllDocuments (
        /*[out,retval]*/ VARIANT_BOOL * pALID ) = 0;
};

struct __declspec(uuid("65651c0f-4381-452b-a8d7-a01f1a8efc9d"))
IAcadPreferencesUser : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetKeyboardAccelerator,put=PutKeyboardAccelerator))
    enum AcKeyboardAccelerator KeyboardAccelerator;
    __declspec(property(get=GetKeyboardPriority,put=PutKeyboardPriority))
    enum AcKeyboardPriority KeyboardPriority;
    __declspec(property(get=GetHyperlinkDisplayCursor,put=PutHyperlinkDisplayCursor))
    VARIANT_BOOL HyperlinkDisplayCursor;
    __declspec(property(get=GetADCInsertUnitsDefaultSource,put=PutADCInsertUnitsDefaultSource))
    enum AcInsertUnits ADCInsertUnitsDefaultSource;
    __declspec(property(get=GetADCInsertUnitsDefaultTarget,put=PutADCInsertUnitsDefaultTarget))
    enum AcInsertUnits ADCInsertUnitsDefaultTarget;
    __declspec(property(get=GetShortCutMenuDisplay,put=PutShortCutMenuDisplay))
    VARIANT_BOOL ShortCutMenuDisplay;
    __declspec(property(get=GetSCMDefaultMode,put=PutSCMDefaultMode))
    enum AcDrawingAreaSCMDefault SCMDefaultMode;
    __declspec(property(get=GetSCMEditMode,put=PutSCMEditMode))
    enum AcDrawingAreaSCMEdit SCMEditMode;
    __declspec(property(get=GetSCMCommandMode,put=PutSCMCommandMode))
    enum AcDrawingAreaSCMCommand SCMCommandMode;
    __declspec(property(get=GetSCMTimeMode,put=PutSCMTimeMode))
    VARIANT_BOOL SCMTimeMode;
    __declspec(property(get=GetSCMTimeValue,put=PutSCMTimeValue))
    int SCMTimeValue;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutKeyboardAccelerator (
        enum AcKeyboardAccelerator Path );
    enum AcKeyboardAccelerator GetKeyboardAccelerator ( );
    void PutKeyboardPriority (
        enum AcKeyboardPriority Path );
    enum AcKeyboardPriority GetKeyboardPriority ( );
    void PutHyperlinkDisplayCursor (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetHyperlinkDisplayCursor ( );
    void PutADCInsertUnitsDefaultSource (
        enum AcInsertUnits pIU );
    enum AcInsertUnits GetADCInsertUnitsDefaultSource ( );
    void PutADCInsertUnitsDefaultTarget (
        enum AcInsertUnits pSUunits );
    enum AcInsertUnits GetADCInsertUnitsDefaultTarget ( );
    void PutShortCutMenuDisplay (
        VARIANT_BOOL pSCM );
    VARIANT_BOOL GetShortCutMenuDisplay ( );
    void PutSCMDefaultMode (
        enum AcDrawingAreaSCMDefault pSCM );
    enum AcDrawingAreaSCMDefault GetSCMDefaultMode ( );
    void PutSCMEditMode (
        enum AcDrawingAreaSCMEdit pSCM );
    enum AcDrawingAreaSCMEdit GetSCMEditMode ( );
    void PutSCMCommandMode (
        enum AcDrawingAreaSCMCommand pSCM );
    enum AcDrawingAreaSCMCommand GetSCMCommandMode ( );
    void PutSCMTimeMode (
        VARIANT_BOOL time );
    VARIANT_BOOL GetSCMTimeMode ( );
    void PutSCMTimeValue (
        int time );
    int GetSCMTimeValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall put_KeyboardAccelerator (
        /*[in]*/ enum AcKeyboardAccelerator Path ) = 0;
      virtual HRESULT __stdcall get_KeyboardAccelerator (
        /*[out,retval]*/ enum AcKeyboardAccelerator * Path ) = 0;
      virtual HRESULT __stdcall put_KeyboardPriority (
        /*[in]*/ enum AcKeyboardPriority Path ) = 0;
      virtual HRESULT __stdcall get_KeyboardPriority (
        /*[out,retval]*/ enum AcKeyboardPriority * Path ) = 0;
      virtual HRESULT __stdcall put_HyperlinkDisplayCursor (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_HyperlinkDisplayCursor (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_ADCInsertUnitsDefaultSource (
        /*[in]*/ enum AcInsertUnits pIU ) = 0;
      virtual HRESULT __stdcall get_ADCInsertUnitsDefaultSource (
        /*[out,retval]*/ enum AcInsertUnits * pIU ) = 0;
      virtual HRESULT __stdcall put_ADCInsertUnitsDefaultTarget (
        /*[in]*/ enum AcInsertUnits pSUunits ) = 0;
      virtual HRESULT __stdcall get_ADCInsertUnitsDefaultTarget (
        /*[out,retval]*/ enum AcInsertUnits * pSUunits ) = 0;
      virtual HRESULT __stdcall put_ShortCutMenuDisplay (
        /*[in]*/ VARIANT_BOOL pSCM ) = 0;
      virtual HRESULT __stdcall get_ShortCutMenuDisplay (
        /*[out,retval]*/ VARIANT_BOOL * pSCM ) = 0;
      virtual HRESULT __stdcall put_SCMDefaultMode (
        /*[in]*/ enum AcDrawingAreaSCMDefault pSCM ) = 0;
      virtual HRESULT __stdcall get_SCMDefaultMode (
        /*[out,retval]*/ enum AcDrawingAreaSCMDefault * pSCM ) = 0;
      virtual HRESULT __stdcall put_SCMEditMode (
        /*[in]*/ enum AcDrawingAreaSCMEdit pSCM ) = 0;
      virtual HRESULT __stdcall get_SCMEditMode (
        /*[out,retval]*/ enum AcDrawingAreaSCMEdit * pSCM ) = 0;
      virtual HRESULT __stdcall put_SCMCommandMode (
        /*[in]*/ enum AcDrawingAreaSCMCommand pSCM ) = 0;
      virtual HRESULT __stdcall get_SCMCommandMode (
        /*[out,retval]*/ enum AcDrawingAreaSCMCommand * pSCM ) = 0;
      virtual HRESULT __stdcall put_SCMTimeMode (
        /*[in]*/ VARIANT_BOOL time ) = 0;
      virtual HRESULT __stdcall get_SCMTimeMode (
        /*[out,retval]*/ VARIANT_BOOL * time ) = 0;
      virtual HRESULT __stdcall put_SCMTimeValue (
        /*[in]*/ int time ) = 0;
      virtual HRESULT __stdcall get_SCMTimeValue (
        /*[out,retval]*/ int * time ) = 0;
};

struct __declspec(uuid("1f8ebfdf-587c-473d-ae11-330cda3c669f"))
IAcadPreferencesDrafting : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetAutoSnapMarker,put=PutAutoSnapMarker))
    VARIANT_BOOL AutoSnapMarker;
    __declspec(property(get=GetAutoSnapMagnet,put=PutAutoSnapMagnet))
    VARIANT_BOOL AutoSnapMagnet;
    __declspec(property(get=GetAutoSnapTooltip,put=PutAutoSnapTooltip))
    VARIANT_BOOL AutoSnapTooltip;
    __declspec(property(get=GetAutoSnapAperture,put=PutAutoSnapAperture))
    VARIANT_BOOL AutoSnapAperture;
    __declspec(property(get=GetAutoSnapApertureSize,put=PutAutoSnapApertureSize))
    long AutoSnapApertureSize;
    __declspec(property(get=GetAutoSnapMarkerColor,put=PutAutoSnapMarkerColor))
    enum AcColor AutoSnapMarkerColor;
    __declspec(property(get=GetAutoSnapMarkerSize,put=PutAutoSnapMarkerSize))
    long AutoSnapMarkerSize;
    __declspec(property(get=GetPolarTrackingVector,put=PutPolarTrackingVector))
    VARIANT_BOOL PolarTrackingVector;
    __declspec(property(get=GetFullScreenTrackingVector,put=PutFullScreenTrackingVector))
    VARIANT_BOOL FullScreenTrackingVector;
    __declspec(property(get=GetAutoTrackTooltip,put=PutAutoTrackTooltip))
    VARIANT_BOOL AutoTrackTooltip;
    __declspec(property(get=GetAlignmentPointAcquisition,put=PutAlignmentPointAcquisition))
    enum AcAlignmentPointAcquisition AlignmentPointAcquisition;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutAutoSnapMarker (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetAutoSnapMarker ( );
    void PutAutoSnapMagnet (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetAutoSnapMagnet ( );
    void PutAutoSnapTooltip (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetAutoSnapTooltip ( );
    void PutAutoSnapAperture (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetAutoSnapAperture ( );
    void PutAutoSnapApertureSize (
        long Path );
    long GetAutoSnapApertureSize ( );
    void PutAutoSnapMarkerColor (
        enum AcColor Path );
    enum AcColor GetAutoSnapMarkerColor ( );
    void PutAutoSnapMarkerSize (
        long Path );
    long GetAutoSnapMarkerSize ( );
    void PutPolarTrackingVector (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetPolarTrackingVector ( );
    void PutFullScreenTrackingVector (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetFullScreenTrackingVector ( );
    void PutAutoTrackTooltip (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetAutoTrackTooltip ( );
    void PutAlignmentPointAcquisition (
        enum AcAlignmentPointAcquisition Path );
    enum AcAlignmentPointAcquisition GetAlignmentPointAcquisition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall put_AutoSnapMarker (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_AutoSnapMarker (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_AutoSnapMagnet (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_AutoSnapMagnet (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_AutoSnapTooltip (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_AutoSnapTooltip (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_AutoSnapAperture (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_AutoSnapAperture (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_AutoSnapApertureSize (
        /*[in]*/ long Path ) = 0;
      virtual HRESULT __stdcall get_AutoSnapApertureSize (
        /*[out,retval]*/ long * Path ) = 0;
      virtual HRESULT __stdcall put_AutoSnapMarkerColor (
        /*[in]*/ enum AcColor Path ) = 0;
      virtual HRESULT __stdcall get_AutoSnapMarkerColor (
        /*[out,retval]*/ enum AcColor * Path ) = 0;
      virtual HRESULT __stdcall put_AutoSnapMarkerSize (
        /*[in]*/ long Path ) = 0;
      virtual HRESULT __stdcall get_AutoSnapMarkerSize (
        /*[out,retval]*/ long * Path ) = 0;
      virtual HRESULT __stdcall put_PolarTrackingVector (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_PolarTrackingVector (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_FullScreenTrackingVector (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_FullScreenTrackingVector (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_AutoTrackTooltip (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_AutoTrackTooltip (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_AlignmentPointAcquisition (
        /*[in]*/ enum AcAlignmentPointAcquisition Path ) = 0;
      virtual HRESULT __stdcall get_AlignmentPointAcquisition (
        /*[out,retval]*/ enum AcAlignmentPointAcquisition * Path ) = 0;
};

struct __declspec(uuid("16dc76bd-ed63-45e5-a967-19df2f7d3020"))
IAcadPreferencesSelection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetPickFirst,put=PutPickFirst))
    VARIANT_BOOL PickFirst;
    __declspec(property(get=GetPickAdd,put=PutPickAdd))
    VARIANT_BOOL PickAdd;
    __declspec(property(get=GetPickDrag,put=PutPickDrag))
    VARIANT_BOOL PickDrag;
    __declspec(property(get=GetPickAuto,put=PutPickAuto))
    VARIANT_BOOL PickAuto;
    __declspec(property(get=GetPickBoxSize,put=PutPickBoxSize))
    long PickBoxSize;
    __declspec(property(get=GetDisplayGrips,put=PutDisplayGrips))
    VARIANT_BOOL DisplayGrips;
    __declspec(property(get=GetDisplayGripsWithinBlocks,put=PutDisplayGripsWithinBlocks))
    VARIANT_BOOL DisplayGripsWithinBlocks;
    __declspec(property(get=GetGripColorSelected,put=PutGripColorSelected))
    enum AcColor GripColorSelected;
    __declspec(property(get=GetGripColorUnselected,put=PutGripColorUnselected))
    enum AcColor GripColorUnselected;
    __declspec(property(get=GetGripSize,put=PutGripSize))
    long GripSize;
    __declspec(property(get=GetPickGroup,put=PutPickGroup))
    VARIANT_BOOL PickGroup;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutPickFirst (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetPickFirst ( );
    void PutPickAdd (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetPickAdd ( );
    void PutPickDrag (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetPickDrag ( );
    void PutPickAuto (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetPickAuto ( );
    void PutPickBoxSize (
        long Path );
    long GetPickBoxSize ( );
    void PutDisplayGrips (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetDisplayGrips ( );
    void PutDisplayGripsWithinBlocks (
        VARIANT_BOOL Path );
    VARIANT_BOOL GetDisplayGripsWithinBlocks ( );
    void PutGripColorSelected (
        enum AcColor Path );
    enum AcColor GetGripColorSelected ( );
    void PutGripColorUnselected (
        enum AcColor Path );
    enum AcColor GetGripColorUnselected ( );
    void PutGripSize (
        long Path );
    long GetGripSize ( );
    void PutPickGroup (
        VARIANT_BOOL pick );
    VARIANT_BOOL GetPickGroup ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall put_PickFirst (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_PickFirst (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_PickAdd (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_PickAdd (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_PickDrag (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_PickDrag (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_PickAuto (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_PickAuto (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_PickBoxSize (
        /*[in]*/ long Path ) = 0;
      virtual HRESULT __stdcall get_PickBoxSize (
        /*[out,retval]*/ long * Path ) = 0;
      virtual HRESULT __stdcall put_DisplayGrips (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_DisplayGrips (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_DisplayGripsWithinBlocks (
        /*[in]*/ VARIANT_BOOL Path ) = 0;
      virtual HRESULT __stdcall get_DisplayGripsWithinBlocks (
        /*[out,retval]*/ VARIANT_BOOL * Path ) = 0;
      virtual HRESULT __stdcall put_GripColorSelected (
        /*[in]*/ enum AcColor Path ) = 0;
      virtual HRESULT __stdcall get_GripColorSelected (
        /*[out,retval]*/ enum AcColor * Path ) = 0;
      virtual HRESULT __stdcall put_GripColorUnselected (
        /*[in]*/ enum AcColor Path ) = 0;
      virtual HRESULT __stdcall get_GripColorUnselected (
        /*[out,retval]*/ enum AcColor * Path ) = 0;
      virtual HRESULT __stdcall put_GripSize (
        /*[in]*/ long Path ) = 0;
      virtual HRESULT __stdcall get_GripSize (
        /*[out,retval]*/ long * Path ) = 0;
      virtual HRESULT __stdcall put_PickGroup (
        /*[in]*/ VARIANT_BOOL pick ) = 0;
      virtual HRESULT __stdcall get_PickGroup (
        /*[out,retval]*/ VARIANT_BOOL * pick ) = 0;
};

struct __declspec(uuid("873b8ce1-8b8a-4d5a-8c07-63fd9cd6ba6c"))
IAcadPreferencesProfiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetActiveProfile,put=PutActiveProfile))
    _bstr_t ActiveProfile;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    void PutActiveProfile (
        _bstr_t Path );
    _bstr_t GetActiveProfile ( );
    HRESULT ImportProfile (
        _bstr_t ProfileName,
        _bstr_t RegFile,
        VARIANT_BOOL IncludePathInfo );
    HRESULT ExportProfile (
        _bstr_t ProfileName,
        _bstr_t RegFile );
    HRESULT DeleteProfile (
        _bstr_t ProfileName );
    HRESULT ResetProfile (
        _bstr_t Profile );
    HRESULT RenameProfile (
        _bstr_t origProfileName,
        _bstr_t newProfileName );
    HRESULT CopyProfile (
        _bstr_t oldProfileName,
        _bstr_t newProfileName );
    HRESULT GetAllProfileNames (
        VARIANT * pNames );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall put_ActiveProfile (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall get_ActiveProfile (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall raw_ImportProfile (
        /*[in]*/ BSTR ProfileName,
        /*[in]*/ BSTR RegFile,
        /*[in]*/ VARIANT_BOOL IncludePathInfo ) = 0;
      virtual HRESULT __stdcall raw_ExportProfile (
        /*[in]*/ BSTR ProfileName,
        /*[in]*/ BSTR RegFile ) = 0;
      virtual HRESULT __stdcall raw_DeleteProfile (
        /*[in]*/ BSTR ProfileName ) = 0;
      virtual HRESULT __stdcall raw_ResetProfile (
        /*[in]*/ BSTR Profile ) = 0;
      virtual HRESULT __stdcall raw_RenameProfile (
        /*[in]*/ BSTR origProfileName,
        /*[in]*/ BSTR newProfileName ) = 0;
      virtual HRESULT __stdcall raw_CopyProfile (
        /*[in]*/ BSTR oldProfileName,
        /*[in]*/ BSTR newProfileName ) = 0;
      virtual HRESULT __stdcall raw_GetAllProfileNames (
        /*[out]*/ VARIANT * pNames ) = 0;
};

struct __declspec(uuid("c8fba802-6ff6-46bb-a29b-96f46e09ea4f"))
IAcadPreferences : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetFiles))
    IAcadPreferencesFilesPtr Files;
    __declspec(property(get=GetDisplay))
    IAcadPreferencesDisplayPtr Display;
    __declspec(property(get=GetOpenSave))
    IAcadPreferencesOpenSavePtr OpenSave;
    __declspec(property(get=GetOutput))
    IAcadPreferencesOutputPtr Output;
    __declspec(property(get=GetSystem))
    IAcadPreferencesSystemPtr System;
    __declspec(property(get=GetUser))
    IAcadPreferencesUserPtr User;
    __declspec(property(get=GetDrafting))
    IAcadPreferencesDraftingPtr Drafting;
    __declspec(property(get=GetSelection))
    IAcadPreferencesSelectionPtr Selection;
    __declspec(property(get=GetProfiles))
    IAcadPreferencesProfilesPtr Profiles;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    IAcadPreferencesFilesPtr GetFiles ( );
    IAcadPreferencesDisplayPtr GetDisplay ( );
    IAcadPreferencesOpenSavePtr GetOpenSave ( );
    IAcadPreferencesOutputPtr GetOutput ( );
    IAcadPreferencesSystemPtr GetSystem ( );
    IAcadPreferencesUserPtr GetUser ( );
    IAcadPreferencesDraftingPtr GetDrafting ( );
    IAcadPreferencesSelectionPtr GetSelection ( );
    IAcadPreferencesProfilesPtr GetProfiles ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_Files (
        /*[out,retval]*/ struct IAcadPreferencesFiles * * pObj ) = 0;
      virtual HRESULT __stdcall get_Display (
        /*[out,retval]*/ struct IAcadPreferencesDisplay * * pObj ) = 0;
      virtual HRESULT __stdcall get_OpenSave (
        /*[out,retval]*/ struct IAcadPreferencesOpenSave * * pObj ) = 0;
      virtual HRESULT __stdcall get_Output (
        /*[out,retval]*/ struct IAcadPreferencesOutput * * pObj ) = 0;
      virtual HRESULT __stdcall get_System (
        /*[out,retval]*/ struct IAcadPreferencesSystem * * pObj ) = 0;
      virtual HRESULT __stdcall get_User (
        /*[out,retval]*/ struct IAcadPreferencesUser * * pObj ) = 0;
      virtual HRESULT __stdcall get_Drafting (
        /*[out,retval]*/ struct IAcadPreferencesDrafting * * pObj ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[out,retval]*/ struct IAcadPreferencesSelection * * pObj ) = 0;
      virtual HRESULT __stdcall get_Profiles (
        /*[out,retval]*/ struct IAcadPreferencesProfiles * * pObj ) = 0;
};

struct __declspec(uuid("cf9b7f19-1488-4bfe-a94a-5c2afc337694"))
IAcadDocuments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadDocumentPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadDocumentPtr Add (
        const _variant_t & TemplateName = vtMissing );
    IAcadDocumentPtr Open (
        _bstr_t Name,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Password = vtMissing );
    HRESULT Close ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadDocument * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnumVariant ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT TemplateName,
        /*[out,retval]*/ struct IAcadDocument * * pDispDoc ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT ReadOnly,
        /*[in]*/ VARIANT Password,
        /*[out,retval]*/ struct IAcadDocument * * pDispDoc ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
};

struct __declspec(uuid("533c7ec0-df22-4932-af1a-dc3bee5738ff"))
IAcadState : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetIsQuiescent))
    VARIANT_BOOL IsQuiescent;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    VARIANT_BOOL GetIsQuiescent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_IsQuiescent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("1d771106-2777-4623-a067-a3df340f5b04"))
IAcadSelectionSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadEntityPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    _bstr_t GetName ( );
    HRESULT Highlight (
        VARIANT_BOOL bFlag );
    HRESULT Erase ( );
    HRESULT Update ( );
    IAcadApplicationPtr GetApplication ( );
    HRESULT AddItems (
        const _variant_t & pSelSet );
    HRESULT RemoveItems (
        const _variant_t & Objects );
    HRESULT Clear ( );
    HRESULT Select (
        enum AcSelect Mode,
        const _variant_t & Point1 = vtMissing,
        const _variant_t & Point2 = vtMissing,
        const _variant_t & FilterType = vtMissing,
        const _variant_t & FilterData = vtMissing );
    HRESULT SelectAtPoint (
        const _variant_t & Point,
        const _variant_t & FilterType = vtMissing,
        const _variant_t & FilterData = vtMissing );
    HRESULT SelectByPolygon (
        enum AcSelect Mode,
        const _variant_t & PointsList,
        const _variant_t & FilterType = vtMissing,
        const _variant_t & FilterData = vtMissing );
    HRESULT SelectOnScreen (
        const _variant_t & FilterType = vtMissing,
        const _variant_t & FilterData = vtMissing );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadEntity * * pEntity ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall raw_Highlight (
        /*[in]*/ VARIANT_BOOL bFlag ) = 0;
      virtual HRESULT __stdcall raw_Erase ( ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall raw_AddItems (
        /*[in]*/ VARIANT pSelSet ) = 0;
      virtual HRESULT __stdcall raw_RemoveItems (
        /*[in]*/ VARIANT Objects ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ enum AcSelect Mode,
        /*[in]*/ VARIANT Point1 = vtMissing,
        /*[in]*/ VARIANT Point2 = vtMissing,
        /*[in]*/ VARIANT FilterType = vtMissing,
        /*[in]*/ VARIANT FilterData = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SelectAtPoint (
        /*[in]*/ VARIANT Point,
        /*[in]*/ VARIANT FilterType = vtMissing,
        /*[in]*/ VARIANT FilterData = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SelectByPolygon (
        /*[in]*/ enum AcSelect Mode,
        /*[in]*/ VARIANT PointsList,
        /*[in]*/ VARIANT FilterType = vtMissing,
        /*[in]*/ VARIANT FilterData = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SelectOnScreen (
        /*[in]*/ VARIANT FilterType = vtMissing,
        /*[in]*/ VARIANT FilterData = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("05a76357-f243-4dcb-9252-13cc350b860a"))
IAcadSelectionSets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadSelectionSetPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadSelectionSetPtr Add (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadSelectionSet * * pItem ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAcadSelectionSet * * pSet ) = 0;
};

struct __declspec(uuid("938efd49-a1f8-47bc-b190-512513cde0e9"))
IAcadMenuGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IAcadApplicationPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadMenuGroupPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadApplicationPtr GetParent ( );
    IAcadMenuGroupPtr Load (
        _bstr_t MenuFileName,
        const _variant_t & BaseMenu = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadMenuGroup * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnumVariant ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAcadApplication * * pParent ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR MenuFileName,
        /*[in]*/ VARIANT BaseMenu,
        /*[out,retval]*/ struct IAcadMenuGroup * * pMenuGroup ) = 0;
};

struct __declspec(uuid("04809366-ad70-4f50-b1bf-c4c0f6a7b9fb"))
IAcadMenuGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IAcadMenuGroupsPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum AcMenuGroupType Type;
    __declspec(property(get=GetMenuFileName))
    _bstr_t MenuFileName;
    __declspec(property(get=GetMenus))
    IAcadPopupMenusPtr Menus;
    __declspec(property(get=GetToolbars))
    IAcadToolbarsPtr Toolbars;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    IAcadMenuGroupsPtr GetParent ( );
    _bstr_t GetName ( );
    enum AcMenuGroupType GetType ( );
    _bstr_t GetMenuFileName ( );
    IAcadPopupMenusPtr GetMenus ( );
    IAcadToolbarsPtr GetToolbars ( );
    HRESULT Unload ( );
    HRESULT Save (
        enum AcMenuFileType MenuFileType );
    HRESULT SaveAs (
        _bstr_t MenuFileName,
        enum AcMenuFileType MenuFileType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAcadMenuGroups * * pParent ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AcMenuGroupType * menuType ) = 0;
      virtual HRESULT __stdcall get_MenuFileName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Menus (
        /*[out,retval]*/ struct IAcadPopupMenus * * pMenus ) = 0;
      virtual HRESULT __stdcall get_Toolbars (
        /*[out,retval]*/ struct IAcadToolbars * * pToolbars ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ enum AcMenuFileType MenuFileType ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR MenuFileName,
        /*[in]*/ enum AcMenuFileType MenuFileType ) = 0;
};

struct __declspec(uuid("d550a209-e331-4ec9-9ff8-2f61b2e34894"))
IAcadPopupMenus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IAcadMenuGroupPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadPopupMenuPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadMenuGroupPtr GetParent ( );
    IAcadPopupMenuPtr Add (
        _bstr_t MenuName );
    HRESULT InsertMenuInMenuBar (
        _bstr_t MenuName,
        const _variant_t & Index );
    HRESULT RemoveMenuFromMenuBar (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadPopupMenu * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnumVariant ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAcadMenuGroup * * pParent ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR MenuName,
        /*[out,retval]*/ struct IAcadPopupMenu * * pMenu ) = 0;
      virtual HRESULT __stdcall raw_InsertMenuInMenuBar (
        /*[in]*/ BSTR MenuName,
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveMenuFromMenuBar (
        /*[in]*/ VARIANT Index ) = 0;
};

struct __declspec(uuid("43dc6ffa-aeb4-48a4-b5af-9fd8a00062f1"))
IAcadPopupMenu : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNameNoMnemonic))
    _bstr_t NameNoMnemonic;
    __declspec(property(get=GetShortcutMenu))
    VARIANT_BOOL ShortcutMenu;
    __declspec(property(get=GetOnMenuBar))
    VARIANT_BOOL OnMenuBar;
    __declspec(property(get=GetTagString))
    _bstr_t TagString;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadPopupMenuItemPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    _bstr_t GetNameNoMnemonic ( );
    VARIANT_BOOL GetShortcutMenu ( );
    VARIANT_BOOL GetOnMenuBar ( );
    IAcadPopupMenuItemPtr AddMenuItem (
        const _variant_t & Index,
        _bstr_t Label,
        _bstr_t Macro );
    IAcadPopupMenuPtr AddSubMenu (
        const _variant_t & Index,
        _bstr_t Label );
    IAcadPopupMenuItemPtr AddSeparator (
        const _variant_t & Index );
    HRESULT InsertInMenuBar (
        const _variant_t & Index );
    HRESULT RemoveFromMenuBar ( );
    _bstr_t GetTagString ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadPopupMenuItem * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnumVariant ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_NameNoMnemonic (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall get_ShortcutMenu (
        /*[out,retval]*/ VARIANT_BOOL * bFlag ) = 0;
      virtual HRESULT __stdcall get_OnMenuBar (
        /*[out,retval]*/ VARIANT_BOOL * bFlag ) = 0;
      virtual HRESULT __stdcall raw_AddMenuItem (
        /*[in]*/ VARIANT Index,
        /*[in]*/ BSTR Label,
        /*[in]*/ BSTR Macro,
        /*[out,retval]*/ struct IAcadPopupMenuItem * * pItem ) = 0;
      virtual HRESULT __stdcall raw_AddSubMenu (
        /*[in]*/ VARIANT Index,
        /*[in]*/ BSTR Label,
        /*[out,retval]*/ struct IAcadPopupMenu * * pMenu ) = 0;
      virtual HRESULT __stdcall raw_AddSeparator (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadPopupMenuItem * * pItem ) = 0;
      virtual HRESULT __stdcall raw_InsertInMenuBar (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromMenuBar ( ) = 0;
      virtual HRESULT __stdcall get_TagString (
        /*[out,retval]*/ BSTR * bstrTag ) = 0;
};

struct __declspec(uuid("1b1eaf6b-11f1-41bc-9f67-b678a9b4ee02"))
IAcadPopupMenuItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IAcadPopupMenuPtr Parent;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetTagString,put=PutTagString))
    _bstr_t TagString;
    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetCheck,put=PutCheck))
    VARIANT_BOOL Check;
    __declspec(property(get=GetType))
    enum AcMenuItemType Type;
    __declspec(property(get=GetSubMenu))
    IAcadPopupMenuPtr SubMenu;
    __declspec(property(get=GetMacro,put=PutMacro))
    _bstr_t Macro;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetHelpString,put=PutHelpString))
    _bstr_t HelpString;
    __declspec(property(get=GetEndSubMenuLevel,put=PutEndSubMenuLevel))
    int EndSubMenuLevel;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    IAcadPopupMenuPtr GetParent ( );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t bstrLabel );
    _bstr_t GetTagString ( );
    void PutTagString (
        _bstr_t bstrTag );
    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL bFlag );
    VARIANT_BOOL GetCheck ( );
    void PutCheck (
        VARIANT_BOOL bFlag );
    enum AcMenuItemType GetType ( );
    IAcadPopupMenuPtr GetSubMenu ( );
    _bstr_t GetMacro ( );
    void PutMacro (
        _bstr_t bstrMacro );
    int GetIndex ( );
    _bstr_t GetCaption ( );
    _bstr_t GetHelpString ( );
    void PutHelpString (
        _bstr_t bstrHelp );
    HRESULT Delete ( );
    int GetEndSubMenuLevel ( );
    void PutEndSubMenuLevel (
        int level );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAcadPopupMenu * * pParent ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * bstrLabel ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR bstrLabel ) = 0;
      virtual HRESULT __stdcall get_TagString (
        /*[out,retval]*/ BSTR * bstrTag ) = 0;
      virtual HRESULT __stdcall put_TagString (
        /*[in]*/ BSTR bstrTag ) = 0;
      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * bFlag ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL bFlag ) = 0;
      virtual HRESULT __stdcall get_Check (
        /*[out,retval]*/ VARIANT_BOOL * bFlag ) = 0;
      virtual HRESULT __stdcall put_Check (
        /*[in]*/ VARIANT_BOOL bFlag ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AcMenuItemType * itemType ) = 0;
      virtual HRESULT __stdcall get_SubMenu (
        /*[out,retval]*/ struct IAcadPopupMenu * * pMenu ) = 0;
      virtual HRESULT __stdcall get_Macro (
        /*[out,retval]*/ BSTR * bstrMacro ) = 0;
      virtual HRESULT __stdcall put_Macro (
        /*[in]*/ BSTR bstrMacro ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ int * nIndex ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * bstrCaption ) = 0;
      virtual HRESULT __stdcall get_HelpString (
        /*[out,retval]*/ BSTR * bstrHelp ) = 0;
      virtual HRESULT __stdcall put_HelpString (
        /*[in]*/ BSTR bstrHelp ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_EndSubMenuLevel (
        /*[out,retval]*/ int * level ) = 0;
      virtual HRESULT __stdcall put_EndSubMenuLevel (
        /*[in]*/ int level ) = 0;
};

struct __declspec(uuid("a3b67312-1dd6-40b7-b00f-9015491261ec"))
IAcadMenuBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IAcadApplicationPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadPopupMenuPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadApplicationPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadPopupMenu * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnumVariant ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAcadApplication * * pParent ) = 0;
};

struct __declspec(uuid("9fe35c7f-8487-45ab-bf73-f69bbf400224"))
IAcadToolbars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IAcadMenuGroupPtr Parent;
    __declspec(property(get=GetLargeButtons,put=PutLargeButtons))
    VARIANT_BOOL LargeButtons;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadToolbarPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadApplicationPtr GetApplication ( );
    IAcadMenuGroupPtr GetParent ( );
    VARIANT_BOOL GetLargeButtons ( );
    void PutLargeButtons (
        VARIANT_BOOL bFlag );
    IAcadToolbarPtr Add (
        _bstr_t ToolbarName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadToolbar * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnumVariant ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAcadMenuGroup * * pParent ) = 0;
      virtual HRESULT __stdcall get_LargeButtons (
        /*[out,retval]*/ VARIANT_BOOL * bFlag ) = 0;
      virtual HRESULT __stdcall put_LargeButtons (
        /*[in]*/ VARIANT_BOOL bFlag ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR ToolbarName,
        /*[out,retval]*/ struct IAcadToolbar * * pTlbar ) = 0;
};

struct __declspec(uuid("cc174f04-f9ea-44a1-9ea1-3a403d86727e"))
IAcadToolbar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetDockStatus))
    enum AcToolbarDockStatus DockStatus;
    __declspec(property(get=GetLargeButtons))
    VARIANT_BOOL LargeButtons;
    __declspec(property(get=Getleft,put=Putleft))
    int left;
    __declspec(property(get=Gettop,put=Puttop))
    int top;
    __declspec(property(get=GetWidth))
    int Width;
    __declspec(property(get=GetHeight))
    int Height;
    __declspec(property(get=GetFloatingRows,put=PutFloatingRows))
    int FloatingRows;
    __declspec(property(get=GetHelpString,put=PutHelpString))
    _bstr_t HelpString;
    __declspec(property(get=GetTagString))
    _bstr_t TagString;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAcadToolbarItemPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAcadApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL bFlag );
    enum AcToolbarDockStatus GetDockStatus ( );
    VARIANT_BOOL GetLargeButtons ( );
    int Getleft ( );
    void Putleft (
        int nLeft );
    int Gettop ( );
    void Puttop (
        int nTop );
    int GetWidth ( );
    int GetHeight ( );
    int GetFloatingRows ( );
    void PutFloatingRows (
        int nRows );
    _bstr_t GetHelpString ( );
    void PutHelpString (
        _bstr_t bstrHelp );
    IAcadToolbarItemPtr AddToolbarButton (
        const _variant_t & Index,
        _bstr_t Name,
        _bstr_t HelpString,
        _bstr_t Macro,
        const _variant_t & FlyoutButton = vtMissing );
    IAcadToolbarItemPtr AddSeparator (
        const _variant_t & Index );
    HRESULT Dock (
        enum AcToolbarDockStatus Side );
    HRESULT Float (
        int top,
        int left,
        int NumberFloatRows );
    HRESULT Delete ( );
    _bstr_t GetTagString ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadToolbarItem * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnumVariant ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * bFlag ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL bFlag ) = 0;
      virtual HRESULT __stdcall get_DockStatus (
        /*[out,retval]*/ enum AcToolbarDockStatus * nStatus ) = 0;
      virtual HRESULT __stdcall get_LargeButtons (
        /*[out,retval]*/ VARIANT_BOOL * bFlag ) = 0;
      virtual HRESULT __stdcall get_left (
        /*[out,retval]*/ int * nLeft ) = 0;
      virtual HRESULT __stdcall put_left (
        /*[in]*/ int nLeft ) = 0;
      virtual HRESULT __stdcall get_top (
        /*[out,retval]*/ int * nTop ) = 0;
      virtual HRESULT __stdcall put_top (
        /*[in]*/ int nTop ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * nWidth ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * nHeight ) = 0;
      virtual HRESULT __stdcall get_FloatingRows (
        /*[out,retval]*/ int * nRows ) = 0;
      virtual HRESULT __stdcall put_FloatingRows (
        /*[in]*/ int nRows ) = 0;
      virtual HRESULT __stdcall get_HelpString (
        /*[out,retval]*/ BSTR * bstrHelp ) = 0;
      virtual HRESULT __stdcall put_HelpString (
        /*[in]*/ BSTR bstrHelp ) = 0;
      virtual HRESULT __stdcall raw_AddToolbarButton (
        /*[in]*/ VARIANT Index,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR HelpString,
        /*[in]*/ BSTR Macro,
        /*[in]*/ VARIANT FlyoutButton,
        /*[out,retval]*/ struct IAcadToolbarItem * * pItem ) = 0;
      virtual HRESULT __stdcall raw_AddSeparator (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAcadToolbarItem * * pItem ) = 0;
      virtual HRESULT __stdcall raw_Dock (
        /*[in]*/ enum AcToolbarDockStatus Side ) = 0;
      virtual HRESULT __stdcall raw_Float (
        /*[in]*/ int top,
        /*[in]*/ int left,
        /*[in]*/ int NumberFloatRows ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_TagString (
        /*[out,retval]*/ BSTR * bstrTag ) = 0;
};

struct __declspec(uuid("8c8f63d0-35a7-4d29-9c4d-9886f164fd5d"))
IAcadToolbarItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IAcadApplicationPtr Application;
    __declspec(property(get=GetParent))
    IAcadToolbarPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTagString,put=PutTagString))
    _bstr_t TagString;
    __declspec(property(get=GetType))
    enum AcToolbarItemType Type;
    __declspec(property(get=GetFlyout))
    IAcadToolbarPtr Flyout;
    __declspec(property(get=GetMacro,put=PutMacro))
    _bstr_t Macro;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetHelpString,put=PutHelpString))
    _bstr_t HelpString;
    __declspec(property(get=GetCommandDisplayName,put=PutCommandDisplayName))
    _bstr_t CommandDisplayName;

    //
    // Wrapper methods for error-handling
    //

    IAcadApplicationPtr GetApplication ( );
    IAcadToolbarPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t bstrName );
    _bstr_t GetTagString ( );
    void PutTagString (
        _bstr_t bstrTag );
    enum AcToolbarItemType GetType ( );
    IAcadToolbarPtr GetFlyout ( );
    _bstr_t GetMacro ( );
    void PutMacro (
        _bstr_t bstrMacro );
    int GetIndex ( );
    _bstr_t GetHelpString ( );
    void PutHelpString (
        _bstr_t bstrHelp );
    HRESULT GetBitmaps (
        BSTR * SmallIconName,
        BSTR * LargeIconName );
    HRESULT SetBitmaps (
        _bstr_t SmallIconName,
        _bstr_t LargeIconName );
    HRESULT AttachToolbarToFlyout (
        _bstr_t MenuGroupName,
        _bstr_t ToolbarName );
    HRESULT Delete ( );
    _bstr_t GetCommandDisplayName ( );
    void PutCommandDisplayName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IAcadApplication * * pAppObj ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAcadToolbar * * pParent ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall get_TagString (
        /*[out,retval]*/ BSTR * bstrTag ) = 0;
      virtual HRESULT __stdcall put_TagString (
        /*[in]*/ BSTR bstrTag ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AcToolbarItemType * itemType ) = 0;
      virtual HRESULT __stdcall get_Flyout (
        /*[out,retval]*/ struct IAcadToolbar * * pTlbar ) = 0;
      virtual HRESULT __stdcall get_Macro (
        /*[out,retval]*/ BSTR * bstrMacro ) = 0;
      virtual HRESULT __stdcall put_Macro (
        /*[in]*/ BSTR bstrMacro ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ int * nIndex ) = 0;
      virtual HRESULT __stdcall get_HelpString (
        /*[out,retval]*/ BSTR * bstrHelp ) = 0;
      virtual HRESULT __stdcall put_HelpString (
        /*[in]*/ BSTR bstrHelp ) = 0;
      virtual HRESULT __stdcall raw_GetBitmaps (
        /*[out]*/ BSTR * SmallIconName,
        /*[out]*/ BSTR * LargeIconName ) = 0;
      virtual HRESULT __stdcall raw_SetBitmaps (
        /*[in]*/ BSTR SmallIconName,
        /*[in]*/ BSTR LargeIconName ) = 0;
      virtual HRESULT __stdcall raw_AttachToolbarToFlyout (
        /*[in]*/ BSTR MenuGroupName,
        /*[in]*/ BSTR ToolbarName ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_CommandDisplayName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_CommandDisplayName (
        /*[in]*/ BSTR Name ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region(".\mark\AutoCAD\acax22enu.tli")
__declspec(implementation_key(1)) void IAcadAcCmColor::PutEntityColor ( long eColor );
__declspec(implementation_key(2)) long IAcadAcCmColor::GetEntityColor ( );
__declspec(implementation_key(3)) _bstr_t IAcadAcCmColor::GetColorName ( );
__declspec(implementation_key(4)) _bstr_t IAcadAcCmColor::GetBookName ( );
__declspec(implementation_key(5)) HRESULT IAcadAcCmColor::SetNames ( _bstr_t ColorName, _bstr_t BookName );
__declspec(implementation_key(6)) HRESULT IAcadAcCmColor::Delete ( );
__declspec(implementation_key(7)) long IAcadAcCmColor::GetRed ( );
__declspec(implementation_key(8)) long IAcadAcCmColor::GetBlue ( );
__declspec(implementation_key(9)) long IAcadAcCmColor::GetGreen ( );
__declspec(implementation_key(10)) HRESULT IAcadAcCmColor::SetRGB ( long Red, long Green, long Blue );
__declspec(implementation_key(11)) void IAcadAcCmColor::PutColorMethod ( enum AcColorMethod Flags );
__declspec(implementation_key(12)) enum AcColorMethod IAcadAcCmColor::GetColorMethod ( );
__declspec(implementation_key(13)) enum AcColor IAcadAcCmColor::GetColorIndex ( );
__declspec(implementation_key(14)) void IAcadAcCmColor::PutColorIndex ( enum AcColor color );
__declspec(implementation_key(15)) HRESULT IAcadAcCmColor::SetColorBookColor ( _bstr_t BookName, _bstr_t ColorName );
__declspec(implementation_key(16)) void IAcadHyperlink::PutURL ( _bstr_t URLPath );
__declspec(implementation_key(17)) _bstr_t IAcadHyperlink::GetURL ( );
__declspec(implementation_key(18)) void IAcadHyperlink::PutURLDescription ( _bstr_t Description );
__declspec(implementation_key(19)) _bstr_t IAcadHyperlink::GetURLDescription ( );
__declspec(implementation_key(20)) IDispatchPtr IAcadHyperlink::GetApplication ( );
__declspec(implementation_key(21)) HRESULT IAcadHyperlink::Delete ( );
__declspec(implementation_key(22)) void IAcadHyperlink::PutURLNamedLocation ( _bstr_t Location );
__declspec(implementation_key(23)) _bstr_t IAcadHyperlink::GetURLNamedLocation ( );
__declspec(implementation_key(24)) IAcadHyperlinkPtr IAcadHyperlinks::Item ( long Index );
__declspec(implementation_key(25)) long IAcadHyperlinks::GetCount ( );
__declspec(implementation_key(26)) IUnknownPtr IAcadHyperlinks::Get_NewEnum ( );
__declspec(implementation_key(27)) IDispatchPtr IAcadHyperlinks::GetApplication ( );
__declspec(implementation_key(28)) IAcadHyperlinkPtr IAcadHyperlinks::Add ( _bstr_t Name, const _variant_t & Description, const _variant_t & NamedLocation );
__declspec(implementation_key(29)) enum AcSectionGeneration IAcadSectionTypeSettings::GetGenerationOptions ( );
__declspec(implementation_key(30)) void IAcadSectionTypeSettings::PutGenerationOptions ( enum AcSectionGeneration pVal );
__declspec(implementation_key(31)) _variant_t IAcadSectionTypeSettings::GetSourceObjects ( );
__declspec(implementation_key(32)) void IAcadSectionTypeSettings::PutSourceObjects ( const _variant_t & pVal );
__declspec(implementation_key(33)) _variant_t IAcadSectionTypeSettings::GetDestinationBlock ( );
__declspec(implementation_key(34)) void IAcadSectionTypeSettings::PutDestinationBlock ( const _variant_t & pVal );
__declspec(implementation_key(35)) _bstr_t IAcadSectionTypeSettings::GetDestinationFile ( );
__declspec(implementation_key(36)) void IAcadSectionTypeSettings::PutDestinationFile ( _bstr_t pVal );
__declspec(implementation_key(37)) IAcadAcCmColorPtr IAcadSectionTypeSettings::GetIntersectionBoundaryColor ( );
__declspec(implementation_key(38)) void IAcadSectionTypeSettings::PutIntersectionBoundaryColor ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(39)) _bstr_t IAcadSectionTypeSettings::GetIntersectionBoundaryLayer ( );
__declspec(implementation_key(40)) void IAcadSectionTypeSettings::PutIntersectionBoundaryLayer ( _bstr_t Layer );
__declspec(implementation_key(41)) _bstr_t IAcadSectionTypeSettings::GetIntersectionBoundaryLinetype ( );
__declspec(implementation_key(42)) void IAcadSectionTypeSettings::PutIntersectionBoundaryLinetype ( _bstr_t Linetype );
__declspec(implementation_key(43)) ACAD_NOUNITS IAcadSectionTypeSettings::GetIntersectionBoundaryLinetypeScale ( );
__declspec(implementation_key(44)) void IAcadSectionTypeSettings::PutIntersectionBoundaryLinetypeScale ( ACAD_NOUNITS ltScale );
__declspec(implementation_key(45)) _bstr_t IAcadSectionTypeSettings::GetIntersectionBoundaryPlotStyleName ( );
__declspec(implementation_key(46)) void IAcadSectionTypeSettings::PutIntersectionBoundaryPlotStyleName ( _bstr_t plotStyle );
__declspec(implementation_key(47)) ACAD_LWEIGHT IAcadSectionTypeSettings::GetIntersectionBoundaryLineweight ( );
__declspec(implementation_key(48)) void IAcadSectionTypeSettings::PutIntersectionBoundaryLineweight ( ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(49)) VARIANT_BOOL IAcadSectionTypeSettings::GetIntersectionBoundaryDivisionLines ( );
__declspec(implementation_key(50)) void IAcadSectionTypeSettings::PutIntersectionBoundaryDivisionLines ( VARIANT_BOOL pVal );
__declspec(implementation_key(51)) VARIANT_BOOL IAcadSectionTypeSettings::GetIntersectionFillVisible ( );
__declspec(implementation_key(52)) void IAcadSectionTypeSettings::PutIntersectionFillVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(53)) enum AcPatternType IAcadSectionTypeSettings::GetIntersectionFillHatchPatternType ( );
__declspec(implementation_key(54)) void IAcadSectionTypeSettings::PutIntersectionFillHatchPatternType ( enum AcPatternType pVal );
__declspec(implementation_key(55)) _bstr_t IAcadSectionTypeSettings::GetIntersectionFillHatchPatternName ( );
__declspec(implementation_key(56)) void IAcadSectionTypeSettings::PutIntersectionFillHatchPatternName ( _bstr_t pVal );
__declspec(implementation_key(57)) ACAD_ANGLE IAcadSectionTypeSettings::GetIntersectionFillHatchAngle ( );
__declspec(implementation_key(58)) void IAcadSectionTypeSettings::PutIntersectionFillHatchAngle ( ACAD_ANGLE pVal );
__declspec(implementation_key(59)) ACAD_NOUNITS IAcadSectionTypeSettings::GetIntersectionFillHatchScale ( );
__declspec(implementation_key(60)) void IAcadSectionTypeSettings::PutIntersectionFillHatchScale ( ACAD_NOUNITS pVal );
__declspec(implementation_key(61)) double IAcadSectionTypeSettings::GetIntersectionFillHatchSpacing ( );
__declspec(implementation_key(62)) void IAcadSectionTypeSettings::PutIntersectionFillHatchSpacing ( double pVal );
__declspec(implementation_key(63)) IAcadAcCmColorPtr IAcadSectionTypeSettings::GetIntersectionFillColor ( );
__declspec(implementation_key(64)) void IAcadSectionTypeSettings::PutIntersectionFillColor ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(65)) _bstr_t IAcadSectionTypeSettings::GetIntersectionFillLayer ( );
__declspec(implementation_key(66)) void IAcadSectionTypeSettings::PutIntersectionFillLayer ( _bstr_t Layer );
__declspec(implementation_key(67)) _bstr_t IAcadSectionTypeSettings::GetIntersectionFillLinetype ( );
__declspec(implementation_key(68)) void IAcadSectionTypeSettings::PutIntersectionFillLinetype ( _bstr_t Linetype );
__declspec(implementation_key(69)) ACAD_NOUNITS IAcadSectionTypeSettings::GetIntersectionFillLinetypeScale ( );
__declspec(implementation_key(70)) void IAcadSectionTypeSettings::PutIntersectionFillLinetypeScale ( ACAD_NOUNITS ltScale );
__declspec(implementation_key(71)) _bstr_t IAcadSectionTypeSettings::GetIntersectionFillPlotStyleName ( );
__declspec(implementation_key(72)) void IAcadSectionTypeSettings::PutIntersectionFillPlotStyleName ( _bstr_t plotStyle );
__declspec(implementation_key(73)) ACAD_LWEIGHT IAcadSectionTypeSettings::GetIntersectionFillLineweight ( );
__declspec(implementation_key(74)) void IAcadSectionTypeSettings::PutIntersectionFillLineweight ( ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(75)) long IAcadSectionTypeSettings::GetIntersectionFillFaceTransparency ( );
__declspec(implementation_key(76)) void IAcadSectionTypeSettings::PutIntersectionFillFaceTransparency ( long pVal );
__declspec(implementation_key(77)) VARIANT_BOOL IAcadSectionTypeSettings::GetBackgroundLinesVisible ( );
__declspec(implementation_key(78)) void IAcadSectionTypeSettings::PutBackgroundLinesVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(79)) VARIANT_BOOL IAcadSectionTypeSettings::GetBackgroundLinesHiddenLine ( );
__declspec(implementation_key(80)) void IAcadSectionTypeSettings::PutBackgroundLinesHiddenLine ( VARIANT_BOOL pVal );
__declspec(implementation_key(81)) IAcadAcCmColorPtr IAcadSectionTypeSettings::GetBackgroundLinesColor ( );
__declspec(implementation_key(82)) void IAcadSectionTypeSettings::PutBackgroundLinesColor ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(83)) _bstr_t IAcadSectionTypeSettings::GetBackgroundLinesLayer ( );
__declspec(implementation_key(84)) void IAcadSectionTypeSettings::PutBackgroundLinesLayer ( _bstr_t Layer );
__declspec(implementation_key(85)) _bstr_t IAcadSectionTypeSettings::GetBackgroundLinesLinetype ( );
__declspec(implementation_key(86)) void IAcadSectionTypeSettings::PutBackgroundLinesLinetype ( _bstr_t Linetype );
__declspec(implementation_key(87)) ACAD_NOUNITS IAcadSectionTypeSettings::GetBackgroundLinesLinetypeScale ( );
__declspec(implementation_key(88)) void IAcadSectionTypeSettings::PutBackgroundLinesLinetypeScale ( ACAD_NOUNITS ltScale );
__declspec(implementation_key(89)) _bstr_t IAcadSectionTypeSettings::GetBackgroundLinesPlotStyleName ( );
__declspec(implementation_key(90)) void IAcadSectionTypeSettings::PutBackgroundLinesPlotStyleName ( _bstr_t plotStyle );
__declspec(implementation_key(91)) ACAD_LWEIGHT IAcadSectionTypeSettings::GetBackgroundLinesLineweight ( );
__declspec(implementation_key(92)) void IAcadSectionTypeSettings::PutBackgroundLinesLineweight ( ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(93)) VARIANT_BOOL IAcadSectionTypeSettings::GetForegroundLinesVisible ( );
__declspec(implementation_key(94)) void IAcadSectionTypeSettings::PutForegroundLinesVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(95)) VARIANT_BOOL IAcadSectionTypeSettings::GetForegroundLinesHiddenLine ( );
__declspec(implementation_key(96)) void IAcadSectionTypeSettings::PutForegroundLinesHiddenLine ( VARIANT_BOOL pVal );
__declspec(implementation_key(97)) IAcadAcCmColorPtr IAcadSectionTypeSettings::GetForegroundLinesColor ( );
__declspec(implementation_key(98)) void IAcadSectionTypeSettings::PutForegroundLinesColor ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(99)) _bstr_t IAcadSectionTypeSettings::GetForegroundLinesLayer ( );
__declspec(implementation_key(100)) void IAcadSectionTypeSettings::PutForegroundLinesLayer ( _bstr_t Layer );
__declspec(implementation_key(101)) _bstr_t IAcadSectionTypeSettings::GetForegroundLinesLinetype ( );
__declspec(implementation_key(102)) void IAcadSectionTypeSettings::PutForegroundLinesLinetype ( _bstr_t Linetype );
__declspec(implementation_key(103)) ACAD_NOUNITS IAcadSectionTypeSettings::GetForegroundLinesLinetypeScale ( );
__declspec(implementation_key(104)) void IAcadSectionTypeSettings::PutForegroundLinesLinetypeScale ( ACAD_NOUNITS ltScale );
__declspec(implementation_key(105)) _bstr_t IAcadSectionTypeSettings::GetForegroundLinesPlotStyleName ( );
__declspec(implementation_key(106)) void IAcadSectionTypeSettings::PutForegroundLinesPlotStyleName ( _bstr_t plotStyle );
__declspec(implementation_key(107)) ACAD_LWEIGHT IAcadSectionTypeSettings::GetForegroundLinesLineweight ( );
__declspec(implementation_key(108)) void IAcadSectionTypeSettings::PutForegroundLinesLineweight ( ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(109)) long IAcadSectionTypeSettings::GetForegroundLinesFaceTransparency ( );
__declspec(implementation_key(110)) void IAcadSectionTypeSettings::PutForegroundLinesFaceTransparency ( long pVal );
__declspec(implementation_key(111)) long IAcadSectionTypeSettings::GetForegroundLinesEdgeTransparency ( );
__declspec(implementation_key(112)) void IAcadSectionTypeSettings::PutForegroundLinesEdgeTransparency ( long pVal );
__declspec(implementation_key(113)) VARIANT_BOOL IAcadSectionTypeSettings::GetCurveTangencyLinesVisible ( );
__declspec(implementation_key(114)) void IAcadSectionTypeSettings::PutCurveTangencyLinesVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(115)) IAcadAcCmColorPtr IAcadSectionTypeSettings::GetCurveTangencyLinesColor ( );
__declspec(implementation_key(116)) void IAcadSectionTypeSettings::PutCurveTangencyLinesColor ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(117)) _bstr_t IAcadSectionTypeSettings::GetCurveTangencyLinesLayer ( );
__declspec(implementation_key(118)) void IAcadSectionTypeSettings::PutCurveTangencyLinesLayer ( _bstr_t Layer );
__declspec(implementation_key(119)) _bstr_t IAcadSectionTypeSettings::GetCurveTangencyLinesLinetype ( );
__declspec(implementation_key(120)) void IAcadSectionTypeSettings::PutCurveTangencyLinesLinetype ( _bstr_t Linetype );
__declspec(implementation_key(121)) ACAD_NOUNITS IAcadSectionTypeSettings::GetCurveTangencyLinesLinetypeScale ( );
__declspec(implementation_key(122)) void IAcadSectionTypeSettings::PutCurveTangencyLinesLinetypeScale ( ACAD_NOUNITS ltScale );
__declspec(implementation_key(123)) _bstr_t IAcadSectionTypeSettings::GetCurveTangencyLinesPlotStyleName ( );
__declspec(implementation_key(124)) void IAcadSectionTypeSettings::PutCurveTangencyLinesPlotStyleName ( _bstr_t plotStyle );
__declspec(implementation_key(125)) ACAD_LWEIGHT IAcadSectionTypeSettings::GetCurveTangencyLinesLineweight ( );
__declspec(implementation_key(126)) void IAcadSectionTypeSettings::PutCurveTangencyLinesLineweight ( ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(127)) IDispatchPtr IAcadDatabasePreferences::GetApplication ( );
__declspec(implementation_key(128)) VARIANT_BOOL IAcadDatabasePreferences::GetSolidFill ( );
__declspec(implementation_key(129)) void IAcadDatabasePreferences::PutSolidFill ( VARIANT_BOOL Fill );
__declspec(implementation_key(130)) VARIANT_BOOL IAcadDatabasePreferences::GetXRefEdit ( );
__declspec(implementation_key(131)) void IAcadDatabasePreferences::PutXRefEdit ( VARIANT_BOOL Edit );
__declspec(implementation_key(132)) VARIANT_BOOL IAcadDatabasePreferences::GetXRefLayerVisibility ( );
__declspec(implementation_key(133)) void IAcadDatabasePreferences::PutXRefLayerVisibility ( VARIANT_BOOL XRefLayerVis );
__declspec(implementation_key(134)) VARIANT_BOOL IAcadDatabasePreferences::GetOLELaunch ( );
__declspec(implementation_key(135)) void IAcadDatabasePreferences::PutOLELaunch ( VARIANT_BOOL Launch );
__declspec(implementation_key(136)) VARIANT_BOOL IAcadDatabasePreferences::GetAllowLongSymbolNames ( );
__declspec(implementation_key(137)) void IAcadDatabasePreferences::PutAllowLongSymbolNames ( VARIANT_BOOL LongNames );
__declspec(implementation_key(138)) VARIANT_BOOL IAcadDatabasePreferences::GetObjectSortBySelection ( );
__declspec(implementation_key(139)) void IAcadDatabasePreferences::PutObjectSortBySelection ( VARIANT_BOOL Sort );
__declspec(implementation_key(140)) VARIANT_BOOL IAcadDatabasePreferences::GetObjectSortBySnap ( );
__declspec(implementation_key(141)) void IAcadDatabasePreferences::PutObjectSortBySnap ( VARIANT_BOOL Sort );
__declspec(implementation_key(142)) VARIANT_BOOL IAcadDatabasePreferences::GetObjectSortByRedraws ( );
__declspec(implementation_key(143)) void IAcadDatabasePreferences::PutObjectSortByRedraws ( VARIANT_BOOL Sort );
__declspec(implementation_key(144)) VARIANT_BOOL IAcadDatabasePreferences::GetObjectSortByRegens ( );
__declspec(implementation_key(145)) void IAcadDatabasePreferences::PutObjectSortByRegens ( VARIANT_BOOL Sort );
__declspec(implementation_key(146)) VARIANT_BOOL IAcadDatabasePreferences::GetObjectSortByPlotting ( );
__declspec(implementation_key(147)) void IAcadDatabasePreferences::PutObjectSortByPlotting ( VARIANT_BOOL Sort );
__declspec(implementation_key(148)) VARIANT_BOOL IAcadDatabasePreferences::GetObjectSortByPSOutput ( );
__declspec(implementation_key(149)) void IAcadDatabasePreferences::PutObjectSortByPSOutput ( VARIANT_BOOL Sort );
__declspec(implementation_key(150)) void IAcadDatabasePreferences::PutContourLinesPerSurface ( long Path );
__declspec(implementation_key(151)) long IAcadDatabasePreferences::GetContourLinesPerSurface ( );
__declspec(implementation_key(152)) void IAcadDatabasePreferences::PutDisplaySilhouette ( VARIANT_BOOL Path );
__declspec(implementation_key(153)) VARIANT_BOOL IAcadDatabasePreferences::GetDisplaySilhouette ( );
__declspec(implementation_key(154)) void IAcadDatabasePreferences::PutMaxActiveViewports ( long Path );
__declspec(implementation_key(155)) long IAcadDatabasePreferences::GetMaxActiveViewports ( );
__declspec(implementation_key(156)) void IAcadDatabasePreferences::PutRenderSmoothness ( double Path );
__declspec(implementation_key(157)) double IAcadDatabasePreferences::GetRenderSmoothness ( );
__declspec(implementation_key(158)) void IAcadDatabasePreferences::PutSegmentPerPolyline ( long Path );
__declspec(implementation_key(159)) long IAcadDatabasePreferences::GetSegmentPerPolyline ( );
__declspec(implementation_key(160)) void IAcadDatabasePreferences::PutTextFrameDisplay ( VARIANT_BOOL Path );
__declspec(implementation_key(161)) VARIANT_BOOL IAcadDatabasePreferences::GetTextFrameDisplay ( );
__declspec(implementation_key(162)) void IAcadDatabasePreferences::PutLineweight ( enum AcLineWeight Path );
__declspec(implementation_key(163)) enum AcLineWeight IAcadDatabasePreferences::GetLineweight ( );
__declspec(implementation_key(164)) void IAcadDatabasePreferences::PutLineWeightDisplay ( VARIANT_BOOL Path );
__declspec(implementation_key(165)) VARIANT_BOOL IAcadDatabasePreferences::GetLineWeightDisplay ( );
__declspec(implementation_key(166)) _bstr_t IAcadSummaryInfo::GetAuthor ( );
__declspec(implementation_key(167)) void IAcadSummaryInfo::PutAuthor ( _bstr_t pAuthor );
__declspec(implementation_key(168)) _bstr_t IAcadSummaryInfo::GetComments ( );
__declspec(implementation_key(169)) void IAcadSummaryInfo::PutComments ( _bstr_t pComments );
__declspec(implementation_key(170)) _bstr_t IAcadSummaryInfo::GetHyperlinkBase ( );
__declspec(implementation_key(171)) void IAcadSummaryInfo::PutHyperlinkBase ( _bstr_t pHyperlinkBase );
__declspec(implementation_key(172)) _bstr_t IAcadSummaryInfo::GetKeywords ( );
__declspec(implementation_key(173)) void IAcadSummaryInfo::PutKeywords ( _bstr_t pKeywords );
__declspec(implementation_key(174)) _bstr_t IAcadSummaryInfo::GetLastSavedBy ( );
__declspec(implementation_key(175)) void IAcadSummaryInfo::PutLastSavedBy ( _bstr_t pLastSavedBy );
__declspec(implementation_key(176)) _bstr_t IAcadSummaryInfo::GetRevisionNumber ( );
__declspec(implementation_key(177)) void IAcadSummaryInfo::PutRevisionNumber ( _bstr_t pRevisionNumber );
__declspec(implementation_key(178)) _bstr_t IAcadSummaryInfo::GetSubject ( );
__declspec(implementation_key(179)) void IAcadSummaryInfo::PutSubject ( _bstr_t pSubject );
__declspec(implementation_key(180)) _bstr_t IAcadSummaryInfo::GetTitle ( );
__declspec(implementation_key(181)) void IAcadSummaryInfo::PutTitle ( _bstr_t pTitle );
__declspec(implementation_key(182)) int IAcadSummaryInfo::NumCustomInfo ( );
__declspec(implementation_key(183)) HRESULT IAcadSummaryInfo::GetCustomByIndex ( int Index, BSTR * pKey, BSTR * pValue );
__declspec(implementation_key(184)) HRESULT IAcadSummaryInfo::GetCustomByKey ( _bstr_t key, BSTR * pValue );
__declspec(implementation_key(185)) HRESULT IAcadSummaryInfo::SetCustomByIndex ( int Index, _bstr_t key, _bstr_t Value );
__declspec(implementation_key(186)) HRESULT IAcadSummaryInfo::SetCustomByKey ( _bstr_t key, _bstr_t Value );
__declspec(implementation_key(187)) HRESULT IAcadSummaryInfo::AddCustomInfo ( _bstr_t key, _bstr_t Value );
__declspec(implementation_key(188)) HRESULT IAcadSummaryInfo::RemoveCustomByIndex ( int Index );
__declspec(implementation_key(189)) HRESULT IAcadSummaryInfo::RemoveCustomByKey ( _bstr_t key );
__declspec(implementation_key(190)) VARIANT_BOOL IAcadSectionTypeSettings2::GetIntersectionBoundaryVisible ( );
__declspec(implementation_key(191)) void IAcadSectionTypeSettings2::PutIntersectionBoundaryVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(192)) _bstr_t IAcadDynamicBlockReferenceProperty::GetPropertyName ( );
__declspec(implementation_key(193)) VARIANT_BOOL IAcadDynamicBlockReferenceProperty::GetReadOnly ( );
__declspec(implementation_key(194)) VARIANT_BOOL IAcadDynamicBlockReferenceProperty::Getshow ( );
__declspec(implementation_key(195)) _bstr_t IAcadDynamicBlockReferenceProperty::GetDescription ( );
__declspec(implementation_key(196)) _variant_t IAcadDynamicBlockReferenceProperty::GetAllowedValues ( );
__declspec(implementation_key(197)) _variant_t IAcadDynamicBlockReferenceProperty::GetValue ( );
__declspec(implementation_key(198)) void IAcadDynamicBlockReferenceProperty::PutValue ( const _variant_t & Value );
__declspec(implementation_key(199)) enum AcDynamicBlockReferencePropertyUnitsType IAcadDynamicBlockReferenceProperty::GetUnitsType ( );
__declspec(implementation_key(200)) VARIANT_BOOL IAcadIdPair::GetIsCloned ( );
__declspec(implementation_key(201)) VARIANT_BOOL IAcadIdPair::GetIsOwnerXlated ( );
__declspec(implementation_key(202)) VARIANT_BOOL IAcadIdPair::GetIsPrimary ( );
__declspec(implementation_key(203)) LONG_PTR IAcadIdPair::Getkey ( );
__declspec(implementation_key(204)) LONG_PTR IAcadIdPair::GetValue ( );
__declspec(implementation_key(205)) IDispatchPtr IAcadIdPair::GetApplication ( );
__declspec(implementation_key(206)) enum AcShadowDisplayType IAcadShadowDisplay::GetShadowDisplay ( );
__declspec(implementation_key(207)) void IAcadShadowDisplay::PutShadowDisplay ( enum AcShadowDisplayType ShadowDisplay );
__declspec(implementation_key(208)) long IAcadShadowDisplay::GetEnableShadowDisplay ( );
__declspec(implementation_key(209)) HRESULT IAcadSubEntity::OnModified ( );
__declspec(implementation_key(210)) _bstr_t IAcadSubEntity::GetObjectName ( );
__declspec(implementation_key(211)) IAcadAcCmColorPtr IAcadSubEntity::Getcolor ( );
__declspec(implementation_key(212)) void IAcadSubEntity::Putcolor ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(213)) _bstr_t IAcadSubEntity::GetLayer ( );
__declspec(implementation_key(214)) _bstr_t IAcadSubEntity::GetLinetype ( );
__declspec(implementation_key(215)) ACAD_NOUNITS IAcadSubEntity::GetLinetypeScale ( );
__declspec(implementation_key(216)) _bstr_t IAcadSubEntity::GetPlotStyleName ( );
__declspec(implementation_key(217)) ACAD_LWEIGHT IAcadSubEntity::GetLineweight ( );
__declspec(implementation_key(218)) IAcadHyperlinksPtr IAcadSubEntity::GetHyperlinks ( );
__declspec(implementation_key(219)) enum AcMLeaderType IAcadMLeaderLeader::GetLeaderType ( );
__declspec(implementation_key(220)) void IAcadMLeaderLeader::PutLeaderType ( enum AcMLeaderType Type );
__declspec(implementation_key(221)) IAcadAcCmColorPtr IAcadMLeaderLeader::GetLeaderLineColor ( );
__declspec(implementation_key(222)) void IAcadMLeaderLeader::PutLeaderLineColor ( struct IAcadAcCmColor * Type );
__declspec(implementation_key(223)) ACAD_LTYPE IAcadMLeaderLeader::GetLeaderLinetype ( );
__declspec(implementation_key(224)) void IAcadMLeaderLeader::PutLeaderLinetype ( ACAD_LTYPE Linetype );
__declspec(implementation_key(225)) ACAD_LWEIGHT IAcadMLeaderLeader::GetLeaderLineWeight ( );
__declspec(implementation_key(226)) void IAcadMLeaderLeader::PutLeaderLineWeight ( ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(227)) enum AcDimArrowheadType IAcadMLeaderLeader::GetArrowheadType ( );
__declspec(implementation_key(228)) void IAcadMLeaderLeader::PutArrowheadType ( enum AcDimArrowheadType BlockName );
__declspec(implementation_key(229)) double IAcadMLeaderLeader::GetArrowheadSize ( );
__declspec(implementation_key(230)) void IAcadMLeaderLeader::PutArrowheadSize ( double size );
__declspec(implementation_key(231)) _bstr_t IAcadMLeaderLeader::GetArrowheadBlock ( );
__declspec(implementation_key(232)) void IAcadMLeaderLeader::PutArrowheadBlock ( _bstr_t BlockName );
__declspec(implementation_key(233)) _bstr_t IAcadSubEntSolidFace::GetMaterial ( );
__declspec(implementation_key(234)) void IAcadSubEntSolidFace::PutMaterial ( _bstr_t Material );
__declspec(implementation_key(235)) _bstr_t IAcadSubDMeshFace::GetMaterial ( );
__declspec(implementation_key(236)) void IAcadSubDMeshFace::PutMaterial ( _bstr_t Material );
__declspec(implementation_key(237)) enum AcMeshCreaseType IAcadSubDMeshFace::GetCreaseType ( );
__declspec(implementation_key(238)) void IAcadSubDMeshFace::PutCreaseType ( enum AcMeshCreaseType Type );
__declspec(implementation_key(239)) double IAcadSubDMeshFace::GetCreaseLevel ( );
__declspec(implementation_key(240)) void IAcadSubDMeshFace::PutCreaseLevel ( double level );
__declspec(implementation_key(241)) enum AcMeshCreaseType IAcadSubDMeshEdge::GetCreaseType ( );
__declspec(implementation_key(242)) void IAcadSubDMeshEdge::PutCreaseType ( enum AcMeshCreaseType Type );
__declspec(implementation_key(243)) double IAcadSubDMeshEdge::GetCreaseLevel ( );
__declspec(implementation_key(244)) void IAcadSubDMeshEdge::PutCreaseLevel ( double level );
__declspec(implementation_key(245)) _variant_t IAcadSubDMeshVertex::GetCoordinates ( );
__declspec(implementation_key(246)) void IAcadSubDMeshVertex::PutCoordinates ( const _variant_t & coord );
__declspec(implementation_key(247)) enum AcMeshCreaseType IAcadSubDMeshVertex::GetCreaseType ( );
__declspec(implementation_key(248)) void IAcadSubDMeshVertex::PutCreaseType ( enum AcMeshCreaseType Type );
__declspec(implementation_key(249)) double IAcadSubDMeshVertex::GetCreaseLevel ( );
__declspec(implementation_key(250)) void IAcadSubDMeshVertex::PutCreaseLevel ( double level );
__declspec(implementation_key(251)) void IAcadSecurityParams::PutAction ( long pOperations );
__declspec(implementation_key(252)) long IAcadSecurityParams::GetAction ( );
__declspec(implementation_key(253)) void IAcadSecurityParams::PutPassword ( _bstr_t pSecret );
__declspec(implementation_key(254)) _bstr_t IAcadSecurityParams::GetPassword ( );
__declspec(implementation_key(255)) void IAcadSecurityParams::PutProviderType ( long pProvType );
__declspec(implementation_key(256)) long IAcadSecurityParams::GetProviderType ( );
__declspec(implementation_key(257)) void IAcadSecurityParams::PutProviderName ( _bstr_t pProvName );
__declspec(implementation_key(258)) _bstr_t IAcadSecurityParams::GetProviderName ( );
__declspec(implementation_key(259)) void IAcadSecurityParams::PutAlgorithm ( long pAlgId );
__declspec(implementation_key(260)) long IAcadSecurityParams::GetAlgorithm ( );
__declspec(implementation_key(261)) void IAcadSecurityParams::PutKeyLength ( long pKeyLen );
__declspec(implementation_key(262)) long IAcadSecurityParams::GetKeyLength ( );
__declspec(implementation_key(263)) void IAcadSecurityParams::PutSubject ( _bstr_t pCertSubject );
__declspec(implementation_key(264)) _bstr_t IAcadSecurityParams::GetSubject ( );
__declspec(implementation_key(265)) void IAcadSecurityParams::PutIssuer ( _bstr_t pCertIssuer );
__declspec(implementation_key(266)) _bstr_t IAcadSecurityParams::GetIssuer ( );
__declspec(implementation_key(267)) void IAcadSecurityParams::PutSerialNumber ( _bstr_t pSerialNum );
__declspec(implementation_key(268)) _bstr_t IAcadSecurityParams::GetSerialNumber ( );
__declspec(implementation_key(269)) void IAcadSecurityParams::PutComment ( _bstr_t pText );
__declspec(implementation_key(270)) _bstr_t IAcadSecurityParams::GetComment ( );
__declspec(implementation_key(271)) void IAcadSecurityParams::PutTimeServer ( _bstr_t pTimeServerName );
__declspec(implementation_key(272)) _bstr_t IAcadSecurityParams::GetTimeServer ( );
__declspec(implementation_key(273)) HRESULT _DAcadApplicationEvents::SysVarChanged ( _bstr_t SysvarName, const _variant_t & newVal );
__declspec(implementation_key(274)) HRESULT _DAcadApplicationEvents::NewDrawing ( );
__declspec(implementation_key(275)) HRESULT _DAcadApplicationEvents::AppActivate ( );
__declspec(implementation_key(276)) HRESULT _DAcadApplicationEvents::AppDeactivate ( );
__declspec(implementation_key(277)) HRESULT _DAcadApplicationEvents::WindowMovedOrResized ( long HWNDFrame, VARIANT_BOOL bMoved );
__declspec(implementation_key(278)) HRESULT _DAcadApplicationEvents::BeginModal ( );
__declspec(implementation_key(279)) HRESULT _DAcadApplicationEvents::EndModal ( );
__declspec(implementation_key(280)) HRESULT _DAcadApplicationEvents::BeginQuit ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(281)) HRESULT _DAcadApplicationEvents::BeginFileDrop ( _bstr_t FileName, VARIANT_BOOL * Cancel );
__declspec(implementation_key(282)) HRESULT _DAcadApplicationEvents::ARXLoaded ( _bstr_t AppName );
__declspec(implementation_key(283)) HRESULT _DAcadApplicationEvents::ARXUnloaded ( _bstr_t AppName );
__declspec(implementation_key(284)) HRESULT _DAcadApplicationEvents::BeginPlot ( _bstr_t DrawingName );
__declspec(implementation_key(285)) HRESULT _DAcadApplicationEvents::EndPlot ( _bstr_t DrawingName );
__declspec(implementation_key(286)) HRESULT _DAcadApplicationEvents::BeginSave ( _bstr_t FileName );
__declspec(implementation_key(287)) HRESULT _DAcadApplicationEvents::EndSave ( _bstr_t FileName );
__declspec(implementation_key(288)) HRESULT _DAcadApplicationEvents::BeginOpen ( BSTR * FileName );
__declspec(implementation_key(289)) HRESULT _DAcadApplicationEvents::EndOpen ( _bstr_t FileName );
__declspec(implementation_key(290)) HRESULT _DAcadApplicationEvents::BeginCommand ( _bstr_t CommandName );
__declspec(implementation_key(291)) HRESULT _DAcadApplicationEvents::EndCommand ( _bstr_t CommandName );
__declspec(implementation_key(292)) HRESULT _DAcadApplicationEvents::BeginLisp ( _bstr_t FirstLine );
__declspec(implementation_key(293)) HRESULT _DAcadApplicationEvents::EndLisp ( );
__declspec(implementation_key(294)) HRESULT _DAcadApplicationEvents::LispCancelled ( );
__declspec(implementation_key(295)) HRESULT _DAcadApplicationEvents::WindowChanged ( enum AcWindowState WindowState );
__declspec(implementation_key(296)) double IAcadUtility::AngleToReal ( _bstr_t Angle, enum AcAngleUnits Unit );
__declspec(implementation_key(297)) _bstr_t IAcadUtility::AngleToString ( double Angle, enum AcAngleUnits Unit, int precision );
__declspec(implementation_key(298)) double IAcadUtility::DistanceToReal ( _bstr_t Distance, enum AcUnits Unit );
__declspec(implementation_key(299)) _bstr_t IAcadUtility::RealToString ( double Value, enum AcUnits Unit, int precision );
__declspec(implementation_key(300)) _variant_t IAcadUtility::TranslateCoordinates ( const _variant_t & Point, enum AcCoordinateSystem FromCoordSystem, enum AcCoordinateSystem ToCoordSystem, int Displacement, const _variant_t & OCSNormal );
__declspec(implementation_key(301)) HRESULT IAcadUtility::InitializeUserInput ( int Bits, const _variant_t & KeyWordList );
__declspec(implementation_key(302)) int IAcadUtility::GetInteger ( const _variant_t & Prompt );
__declspec(implementation_key(303)) double IAcadUtility::GetReal ( const _variant_t & Prompt );
__declspec(implementation_key(304)) _bstr_t IAcadUtility::GetInput ( );
__declspec(implementation_key(305)) _bstr_t IAcadUtility::GetKeyword ( const _variant_t & Prompt );
__declspec(implementation_key(306)) _bstr_t IAcadUtility::GetString ( int HasSpaces, const _variant_t & Prompt );
__declspec(implementation_key(307)) double IAcadUtility::GetAngle ( const _variant_t & Point, const _variant_t & Prompt );
__declspec(implementation_key(308)) double IAcadUtility::AngleFromXAxis ( const _variant_t & StartPoint, const _variant_t & EndPoint );
__declspec(implementation_key(309)) _variant_t IAcadUtility::GetCorner ( const _variant_t & Point, const _variant_t & Prompt );
__declspec(implementation_key(310)) double IAcadUtility::GetDistance ( const _variant_t & Point, const _variant_t & Prompt );
__declspec(implementation_key(311)) double IAcadUtility::GetOrientation ( const _variant_t & Point, const _variant_t & Prompt );
__declspec(implementation_key(312)) _variant_t IAcadUtility::GetPoint ( const _variant_t & Point, const _variant_t & Prompt );
__declspec(implementation_key(313)) _variant_t IAcadUtility::PolarPoint ( const _variant_t & Point, double Angle, double Distance );
__declspec(implementation_key(314)) HRESULT IAcadUtility::CreateTypedArray ( VARIANT * varArr, int Type, SAFEARRAY * inArgs );
__declspec(implementation_key(315)) HRESULT IAcadUtility::GetEntity ( IDispatch * * Object, VARIANT * PickedPoint, const _variant_t & Prompt );
__declspec(implementation_key(316)) HRESULT IAcadUtility::Prompt ( _bstr_t Message );
__declspec(implementation_key(317)) HRESULT IAcadUtility::GetSubEntity ( IDispatch * * Object, VARIANT * PickedPoint, VARIANT * transMatrix, VARIANT * ContextData, const _variant_t & Prompt );
__declspec(implementation_key(318)) VARIANT_BOOL IAcadUtility::IsURL ( _bstr_t URL );
__declspec(implementation_key(319)) HRESULT IAcadUtility::GetRemoteFile ( _bstr_t URL, BSTR * LocalFile, VARIANT_BOOL IgnoreCache );
__declspec(implementation_key(320)) HRESULT IAcadUtility::PutRemoteFile ( _bstr_t URL, _bstr_t LocalFile );
__declspec(implementation_key(321)) VARIANT_BOOL IAcadUtility::IsRemoteFile ( _bstr_t LocalFile, BSTR * URL );
__declspec(implementation_key(322)) VARIANT_BOOL IAcadUtility::LaunchBrowserDialog ( BSTR * SelectedURL, _bstr_t DialogTitle, _bstr_t OpenButtonCaption, _bstr_t StartPageURL, _bstr_t RegistryRootKey, VARIANT_BOOL OpenButtonAlwaysEnabled );
__declspec(implementation_key(323)) HRESULT IAcadUtility::SendModelessOperationStart ( _bstr_t Context );
__declspec(implementation_key(324)) HRESULT IAcadUtility::SendModelessOperationEnded ( _bstr_t Context );
__declspec(implementation_key(325)) _bstr_t IAcadUtility::GetObjectIdString ( IDispatch * Object, VARIANT_BOOL bHex );
__declspec(implementation_key(326)) HRESULT _DAcadDocumentEvents::BeginSave ( _bstr_t FileName );
__declspec(implementation_key(327)) HRESULT _DAcadDocumentEvents::EndSave ( _bstr_t FileName );
__declspec(implementation_key(328)) HRESULT _DAcadDocumentEvents::BeginCommand ( _bstr_t CommandName );
__declspec(implementation_key(329)) HRESULT _DAcadDocumentEvents::EndCommand ( _bstr_t CommandName );
__declspec(implementation_key(330)) HRESULT _DAcadDocumentEvents::BeginLisp ( _bstr_t FirstLine );
__declspec(implementation_key(331)) HRESULT _DAcadDocumentEvents::EndLisp ( );
__declspec(implementation_key(332)) HRESULT _DAcadDocumentEvents::LispCancelled ( );
__declspec(implementation_key(333)) HRESULT _DAcadDocumentEvents::SelectionChanged ( );
__declspec(implementation_key(334)) HRESULT _DAcadDocumentEvents::Activate ( );
__declspec(implementation_key(335)) HRESULT _DAcadDocumentEvents::Deactivate ( );
__declspec(implementation_key(336)) HRESULT _DAcadDocumentEvents::BeginRightClick ( const _variant_t & PickPoint );
__declspec(implementation_key(337)) HRESULT _DAcadDocumentEvents::BeginShortcutMenuDefault ( struct IAcadPopupMenu * * ShortcutMenu );
__declspec(implementation_key(338)) HRESULT _DAcadDocumentEvents::BeginShortcutMenuEdit ( struct IAcadPopupMenu * * ShortcutMenu, struct IAcadSelectionSet * * SelectionSet );
__declspec(implementation_key(339)) HRESULT _DAcadDocumentEvents::BeginShortcutMenuCommand ( struct IAcadPopupMenu * * ShortcutMenu, _bstr_t Command );
__declspec(implementation_key(340)) HRESULT _DAcadDocumentEvents::BeginShortcutMenuGrip ( struct IAcadPopupMenu * * ShortcutMenu );
__declspec(implementation_key(341)) HRESULT _DAcadDocumentEvents::BeginShortcutMenuOsnap ( struct IAcadPopupMenu * * ShortcutMenu );
__declspec(implementation_key(342)) HRESULT _DAcadDocumentEvents::EndShortcutMenu ( struct IAcadPopupMenu * * ShortcutMenu );
__declspec(implementation_key(343)) HRESULT _DAcadDocumentEvents::BeginDoubleClick ( const _variant_t & PickPoint );
__declspec(implementation_key(344)) HRESULT _DAcadDocumentEvents::ObjectAdded ( IDispatch * Object );
__declspec(implementation_key(345)) HRESULT _DAcadDocumentEvents::ObjectErased ( LONG_PTR ObjectID );
__declspec(implementation_key(346)) HRESULT _DAcadDocumentEvents::ObjectModified ( IDispatch * Object );
__declspec(implementation_key(347)) HRESULT _DAcadDocumentEvents::BeginPlot ( _bstr_t DrawingName );
__declspec(implementation_key(348)) HRESULT _DAcadDocumentEvents::EndPlot ( _bstr_t DrawingName );
__declspec(implementation_key(349)) HRESULT _DAcadDocumentEvents::WindowMovedOrResized ( LONG_PTR HWNDFrame, VARIANT_BOOL bMoved );
__declspec(implementation_key(350)) HRESULT _DAcadDocumentEvents::LayoutSwitched ( _bstr_t LayoutName );
__declspec(implementation_key(351)) HRESULT _DAcadDocumentEvents::WindowChanged ( enum AcWindowState WindowState );
__declspec(implementation_key(352)) HRESULT _DAcadDocumentEvents::BeginClose ( );
__declspec(implementation_key(353)) HRESULT _DAcadDocumentEvents::BeginDocClose ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(354)) _bstr_t IAcadObject::GetHandle ( );
__declspec(implementation_key(355)) _bstr_t IAcadObject::GetObjectName ( );
__declspec(implementation_key(356)) HRESULT IAcadObject::GetXData ( _bstr_t AppName, VARIANT * XDataType, VARIANT * XDataValue );
__declspec(implementation_key(357)) HRESULT IAcadObject::SetXData ( const _variant_t & XDataType, const _variant_t & XDataValue );
__declspec(implementation_key(358)) HRESULT IAcadObject::Delete ( );
__declspec(implementation_key(359)) LONG_PTR IAcadObject::GetObjectID ( );
__declspec(implementation_key(360)) IDispatchPtr IAcadObject::GetApplication ( );
__declspec(implementation_key(361)) IAcadDatabasePtr IAcadObject::GetDatabase ( );
__declspec(implementation_key(362)) VARIANT_BOOL IAcadObject::GetHasExtensionDictionary ( );
__declspec(implementation_key(363)) IAcadDictionaryPtr IAcadObject::GetExtensionDictionary ( );
__declspec(implementation_key(364)) LONG_PTR IAcadObject::GetOwnerID ( );
__declspec(implementation_key(365)) IDispatchPtr IAcadObject::GetDocument ( );
__declspec(implementation_key(366)) HRESULT IAcadObject::Erase ( );
__declspec(implementation_key(367)) IAcadAcCmColorPtr IAcadEntity::GetTrueColor ( );
__declspec(implementation_key(368)) void IAcadEntity::PutTrueColor ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(369)) _bstr_t IAcadEntity::GetLayer ( );
__declspec(implementation_key(370)) void IAcadEntity::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(371)) _bstr_t IAcadEntity::GetLinetype ( );
__declspec(implementation_key(372)) void IAcadEntity::PutLinetype ( _bstr_t Linetype );
__declspec(implementation_key(373)) ACAD_NOUNITS IAcadEntity::GetLinetypeScale ( );
__declspec(implementation_key(374)) void IAcadEntity::PutLinetypeScale ( ACAD_NOUNITS ltScale );
__declspec(implementation_key(375)) VARIANT_BOOL IAcadEntity::GetVisible ( );
__declspec(implementation_key(376)) void IAcadEntity::PutVisible ( VARIANT_BOOL bVisible );
__declspec(implementation_key(377)) _variant_t IAcadEntity::ArrayPolar ( int NumberOfObjects, double AngleToFill, const _variant_t & CenterPoint );
__declspec(implementation_key(378)) _variant_t IAcadEntity::ArrayRectangular ( int NumberOfRows, int NumberOfColumns, int NumberOfLevels, double DistBetweenRows, double DistBetweenCols, double DistBetweenLevels );
__declspec(implementation_key(379)) HRESULT IAcadEntity::Highlight ( VARIANT_BOOL HighlightFlag );
__declspec(implementation_key(380)) IDispatchPtr IAcadEntity::Copy ( );
__declspec(implementation_key(381)) HRESULT IAcadEntity::Move ( const _variant_t & FromPoint, const _variant_t & ToPoint );
__declspec(implementation_key(382)) HRESULT IAcadEntity::Rotate ( const _variant_t & BasePoint, double RotationAngle );
__declspec(implementation_key(383)) HRESULT IAcadEntity::Rotate3D ( const _variant_t & Point1, const _variant_t & Point2, double RotationAngle );
__declspec(implementation_key(384)) IDispatchPtr IAcadEntity::Mirror ( const _variant_t & Point1, const _variant_t & Point2 );
__declspec(implementation_key(385)) IDispatchPtr IAcadEntity::Mirror3D ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3 );
__declspec(implementation_key(386)) HRESULT IAcadEntity::ScaleEntity ( const _variant_t & BasePoint, double ScaleFactor );
__declspec(implementation_key(387)) HRESULT IAcadEntity::TransformBy ( const _variant_t & TransformationMatrix );
__declspec(implementation_key(388)) HRESULT IAcadEntity::Update ( );
__declspec(implementation_key(389)) HRESULT IAcadEntity::GetBoundingBox ( VARIANT * MinPoint, VARIANT * MaxPoint );
__declspec(implementation_key(390)) _variant_t IAcadEntity::IntersectWith ( IDispatch * IntersectObject, enum AcExtendOption option );
__declspec(implementation_key(391)) _bstr_t IAcadEntity::GetPlotStyleName ( );
__declspec(implementation_key(392)) void IAcadEntity::PutPlotStyleName ( _bstr_t plotStyle );
__declspec(implementation_key(393)) ACAD_LWEIGHT IAcadEntity::GetLineweight ( );
__declspec(implementation_key(394)) void IAcadEntity::PutLineweight ( ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(395)) _bstr_t IAcadEntity::GetEntityTransparency ( );
__declspec(implementation_key(396)) void IAcadEntity::PutEntityTransparency ( _bstr_t transparency );
__declspec(implementation_key(397)) IAcadHyperlinksPtr IAcadEntity::GetHyperlinks ( );
__declspec(implementation_key(398)) _bstr_t IAcadEntity::GetMaterial ( );
__declspec(implementation_key(399)) void IAcadEntity::PutMaterial ( _bstr_t Material );
__declspec(implementation_key(400)) _bstr_t IAcadEntity::GetEntityName ( );
__declspec(implementation_key(401)) long IAcadEntity::GetEntityType ( );
__declspec(implementation_key(402)) ACAD_COLOR IAcadEntity::Getcolor ( );
__declspec(implementation_key(403)) void IAcadEntity::Putcolor ( ACAD_COLOR color );
__declspec(implementation_key(404)) _variant_t IAcad3DFace::GetCoordinates ( );
__declspec(implementation_key(405)) void IAcad3DFace::PutCoordinates ( const _variant_t & corners );
__declspec(implementation_key(406)) VARIANT_BOOL IAcad3DFace::GetVisibilityEdge1 ( );
__declspec(implementation_key(407)) void IAcad3DFace::PutVisibilityEdge1 ( VARIANT_BOOL visibility );
__declspec(implementation_key(408)) VARIANT_BOOL IAcad3DFace::GetVisibilityEdge2 ( );
__declspec(implementation_key(409)) void IAcad3DFace::PutVisibilityEdge2 ( VARIANT_BOOL visibility );
__declspec(implementation_key(410)) VARIANT_BOOL IAcad3DFace::GetVisibilityEdge3 ( );
__declspec(implementation_key(411)) void IAcad3DFace::PutVisibilityEdge3 ( VARIANT_BOOL visibility );
__declspec(implementation_key(412)) VARIANT_BOOL IAcad3DFace::GetVisibilityEdge4 ( );
__declspec(implementation_key(413)) void IAcad3DFace::PutVisibilityEdge4 ( VARIANT_BOOL visibility );
__declspec(implementation_key(414)) VARIANT_BOOL IAcad3DFace::GetInvisibleEdge ( int Index );
__declspec(implementation_key(415)) HRESULT IAcad3DFace::SetInvisibleEdge ( int Index, VARIANT_BOOL State );
__declspec(implementation_key(416)) _variant_t IAcad3DFace::GetCoordinate ( int Index );
__declspec(implementation_key(417)) void IAcad3DFace::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(418)) _variant_t IAcadPolygonMesh::GetCoordinates ( );
__declspec(implementation_key(419)) void IAcadPolygonMesh::PutCoordinates ( const _variant_t & Coordinates );
__declspec(implementation_key(420)) VARIANT_BOOL IAcadPolygonMesh::GetMClose ( );
__declspec(implementation_key(421)) void IAcadPolygonMesh::PutMClose ( VARIANT_BOOL bClose );
__declspec(implementation_key(422)) VARIANT_BOOL IAcadPolygonMesh::GetNClose ( );
__declspec(implementation_key(423)) void IAcadPolygonMesh::PutNClose ( VARIANT_BOOL bClose );
__declspec(implementation_key(424)) long IAcadPolygonMesh::GetMDensity ( );
__declspec(implementation_key(425)) void IAcadPolygonMesh::PutMDensity ( long density );
__declspec(implementation_key(426)) long IAcadPolygonMesh::GetNDensity ( );
__declspec(implementation_key(427)) void IAcadPolygonMesh::PutNDensity ( long density );
__declspec(implementation_key(428)) long IAcadPolygonMesh::GetMVertexCount ( );
__declspec(implementation_key(429)) long IAcadPolygonMesh::GetNVertexCount ( );
__declspec(implementation_key(430)) enum AcPolymeshType IAcadPolygonMesh::GetType ( );
__declspec(implementation_key(431)) void IAcadPolygonMesh::PutType ( enum AcPolymeshType Type );
__declspec(implementation_key(432)) HRESULT IAcadPolygonMesh::AppendVertex ( const _variant_t & vertex );
__declspec(implementation_key(433)) _variant_t IAcadPolygonMesh::Explode ( );
__declspec(implementation_key(434)) _variant_t IAcadPolygonMesh::GetCoordinate ( int Index );
__declspec(implementation_key(435)) void IAcadPolygonMesh::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(436)) _variant_t IAcad3DPolyline::GetCoordinates ( );
__declspec(implementation_key(437)) void IAcad3DPolyline::PutCoordinates ( const _variant_t & Coordinates );
__declspec(implementation_key(438)) HRESULT IAcad3DPolyline::AppendVertex ( const _variant_t & vertex );
__declspec(implementation_key(439)) _variant_t IAcad3DPolyline::Explode ( );
__declspec(implementation_key(440)) _variant_t IAcad3DPolyline::GetCoordinate ( int Index );
__declspec(implementation_key(441)) void IAcad3DPolyline::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(442)) enum Ac3DPolylineType IAcad3DPolyline::GetType ( );
__declspec(implementation_key(443)) void IAcad3DPolyline::PutType ( enum Ac3DPolylineType Type );
__declspec(implementation_key(444)) VARIANT_BOOL IAcad3DPolyline::GetClosed ( );
__declspec(implementation_key(445)) void IAcad3DPolyline::PutClosed ( VARIANT_BOOL fClose );
__declspec(implementation_key(446)) double IAcad3DPolyline::GetLength ( );
__declspec(implementation_key(447)) _variant_t IAcadArc::GetStartPoint ( );
__declspec(implementation_key(448)) _variant_t IAcadArc::GetCenter ( );
__declspec(implementation_key(449)) void IAcadArc::PutCenter ( const _variant_t & CenterPoint );
__declspec(implementation_key(450)) _variant_t IAcadArc::GetEndPoint ( );
__declspec(implementation_key(451)) double IAcadArc::GetRadius ( );
__declspec(implementation_key(452)) void IAcadArc::PutRadius ( double Radius );
__declspec(implementation_key(453)) ACAD_ANGLE IAcadArc::GetStartAngle ( );
__declspec(implementation_key(454)) void IAcadArc::PutStartAngle ( ACAD_ANGLE Angle );
__declspec(implementation_key(455)) ACAD_ANGLE IAcadArc::GetEndAngle ( );
__declspec(implementation_key(456)) void IAcadArc::PutEndAngle ( ACAD_ANGLE Angle );
__declspec(implementation_key(457)) ACAD_ANGLE IAcadArc::GetTotalAngle ( );
__declspec(implementation_key(458)) ACAD_DISTANCE IAcadArc::GetArcLength ( );
__declspec(implementation_key(459)) double IAcadArc::GetThickness ( );
__declspec(implementation_key(460)) void IAcadArc::PutThickness ( double Thickness );
__declspec(implementation_key(461)) _variant_t IAcadArc::Offset ( double Distance );
__declspec(implementation_key(462)) double IAcadArc::GetArea ( );
__declspec(implementation_key(463)) _variant_t IAcadArc::GetNormal ( );
__declspec(implementation_key(464)) void IAcadArc::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(465)) long IAcadAttribute::GetFieldLength ( );
__declspec(implementation_key(466)) void IAcadAttribute::PutFieldLength ( long fieldLen );
__declspec(implementation_key(467)) _bstr_t IAcadAttribute::GetTagString ( );
__declspec(implementation_key(468)) void IAcadAttribute::PutTagString ( _bstr_t Tag );
__declspec(implementation_key(469)) _bstr_t IAcadAttribute::GetPromptString ( );
__declspec(implementation_key(470)) void IAcadAttribute::PutPromptString ( _bstr_t bstrPrompt );
__declspec(implementation_key(471)) _bstr_t IAcadAttribute::GetTextString ( );
__declspec(implementation_key(472)) void IAcadAttribute::PutTextString ( _bstr_t bstrText );
__declspec(implementation_key(473)) _bstr_t IAcadAttribute::GetStyleName ( );
__declspec(implementation_key(474)) void IAcadAttribute::PutStyleName ( _bstr_t Name );
__declspec(implementation_key(475)) enum AcAlignment IAcadAttribute::GetAlignment ( );
__declspec(implementation_key(476)) void IAcadAttribute::PutAlignment ( enum AcAlignment align );
__declspec(implementation_key(477)) enum AcHorizontalAlignment IAcadAttribute::GetHorizontalAlignment ( );
__declspec(implementation_key(478)) void IAcadAttribute::PutHorizontalAlignment ( enum AcHorizontalAlignment horizAlign );
__declspec(implementation_key(479)) enum AcVerticalAlignment IAcadAttribute::GetVerticalAlignment ( );
__declspec(implementation_key(480)) void IAcadAttribute::PutVerticalAlignment ( enum AcVerticalAlignment vertiAlign );
__declspec(implementation_key(481)) double IAcadAttribute::GetHeight ( );
__declspec(implementation_key(482)) void IAcadAttribute::PutHeight ( double Height );
__declspec(implementation_key(483)) ACAD_ANGLE IAcadAttribute::GetRotation ( );
__declspec(implementation_key(484)) void IAcadAttribute::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(485)) ACAD_NOUNITS IAcadAttribute::GetScaleFactor ( );
__declspec(implementation_key(486)) void IAcadAttribute::PutScaleFactor ( ACAD_NOUNITS scalFactor );
__declspec(implementation_key(487)) ACAD_ANGLE IAcadAttribute::GetObliqueAngle ( );
__declspec(implementation_key(488)) void IAcadAttribute::PutObliqueAngle ( ACAD_ANGLE obliAngle );
__declspec(implementation_key(489)) _variant_t IAcadAttribute::GetTextAlignmentPoint ( );
__declspec(implementation_key(490)) void IAcadAttribute::PutTextAlignmentPoint ( const _variant_t & alignPoint );
__declspec(implementation_key(491)) _variant_t IAcadAttribute::GetInsertionPoint ( );
__declspec(implementation_key(492)) void IAcadAttribute::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(493)) _variant_t IAcadAttribute::GetNormal ( );
__declspec(implementation_key(494)) void IAcadAttribute::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(495)) long IAcadAttribute::GetTextGenerationFlag ( );
__declspec(implementation_key(496)) void IAcadAttribute::PutTextGenerationFlag ( long textGenFlag );
__declspec(implementation_key(497)) double IAcadAttribute::GetThickness ( );
__declspec(implementation_key(498)) void IAcadAttribute::PutThickness ( double Thickness );
__declspec(implementation_key(499)) long IAcadAttribute::GetMode ( );
__declspec(implementation_key(500)) void IAcadAttribute::PutMode ( long Mode );
__declspec(implementation_key(501)) VARIANT_BOOL IAcadAttribute::GetUpsideDown ( );
__declspec(implementation_key(502)) void IAcadAttribute::PutUpsideDown ( VARIANT_BOOL bUpsideDown );
__declspec(implementation_key(503)) VARIANT_BOOL IAcadAttribute::GetBackward ( );
__declspec(implementation_key(504)) void IAcadAttribute::PutBackward ( VARIANT_BOOL bBackward );
__declspec(implementation_key(505)) VARIANT_BOOL IAcadAttribute::GetInvisible ( );
__declspec(implementation_key(506)) void IAcadAttribute::PutInvisible ( VARIANT_BOOL bInvisible );
__declspec(implementation_key(507)) VARIANT_BOOL IAcadAttribute::GetConstant ( );
__declspec(implementation_key(508)) void IAcadAttribute::PutConstant ( VARIANT_BOOL bConstant );
__declspec(implementation_key(509)) VARIANT_BOOL IAcadAttribute::GetVerify ( );
__declspec(implementation_key(510)) void IAcadAttribute::PutVerify ( VARIANT_BOOL bVerify );
__declspec(implementation_key(511)) VARIANT_BOOL IAcadAttribute::GetPreset ( );
__declspec(implementation_key(512)) void IAcadAttribute::PutPreset ( VARIANT_BOOL bPreset );
__declspec(implementation_key(513)) VARIANT_BOOL IAcadAttribute::GetLockPosition ( );
__declspec(implementation_key(514)) void IAcadAttribute::PutLockPosition ( VARIANT_BOOL bLockPosition );
__declspec(implementation_key(515)) VARIANT_BOOL IAcadAttribute::GetMTextAttribute ( );
__declspec(implementation_key(516)) void IAcadAttribute::PutMTextAttribute ( VARIANT_BOOL bMTextAttribute );
__declspec(implementation_key(517)) _bstr_t IAcadAttribute::GetMTextAttributeContent ( );
__declspec(implementation_key(518)) void IAcadAttribute::PutMTextAttributeContent ( _bstr_t content );
__declspec(implementation_key(519)) HRESULT IAcadAttribute::UpdateMTextAttribute ( );
__declspec(implementation_key(520)) double IAcadAttribute::GetMTextBoundaryWidth ( );
__declspec(implementation_key(521)) void IAcadAttribute::PutMTextBoundaryWidth ( double boundaryWidth );
__declspec(implementation_key(522)) enum AcDrawingDirection IAcadAttribute::GetMTextDrawingDirection ( );
__declspec(implementation_key(523)) void IAcadAttribute::PutMTextDrawingDirection ( enum AcDrawingDirection drawDir );
__declspec(implementation_key(524)) double IAcadRegion::GetArea ( );
__declspec(implementation_key(525)) _variant_t IAcadRegion::GetCentroid ( );
__declspec(implementation_key(526)) _variant_t IAcadRegion::GetMomentOfInertia ( );
__declspec(implementation_key(527)) _variant_t IAcadRegion::GetNormal ( );
__declspec(implementation_key(528)) double IAcadRegion::GetPerimeter ( );
__declspec(implementation_key(529)) _variant_t IAcadRegion::GetPrincipalDirections ( );
__declspec(implementation_key(530)) _variant_t IAcadRegion::GetPrincipalMoments ( );
__declspec(implementation_key(531)) double IAcadRegion::GetProductOfInertia ( );
__declspec(implementation_key(532)) _variant_t IAcadRegion::GetRadiiOfGyration ( );
__declspec(implementation_key(533)) HRESULT IAcadRegion::Boolean ( enum AcBooleanType Operation, struct IAcadRegion * Object );
__declspec(implementation_key(534)) _variant_t IAcadRegion::Explode ( );
__declspec(implementation_key(535)) _variant_t IAcad3DSolid::GetCentroid ( );
__declspec(implementation_key(536)) _variant_t IAcad3DSolid::GetMomentOfInertia ( );
__declspec(implementation_key(537)) _variant_t IAcad3DSolid::GetPrincipalDirections ( );
__declspec(implementation_key(538)) _variant_t IAcad3DSolid::GetPrincipalMoments ( );
__declspec(implementation_key(539)) _variant_t IAcad3DSolid::GetProductOfInertia ( );
__declspec(implementation_key(540)) _variant_t IAcad3DSolid::GetRadiiOfGyration ( );
__declspec(implementation_key(541)) double IAcad3DSolid::GetVolume ( );
__declspec(implementation_key(542)) HRESULT IAcad3DSolid::Boolean ( enum AcBooleanType Operation, struct IAcad3DSolid * SolidObject );
__declspec(implementation_key(543)) IAcad3DSolidPtr IAcad3DSolid::CheckInterference ( struct IAcad3DSolid * Object, VARIANT_BOOL CreateInterferenceSolid, VARIANT_BOOL * SolidsInterfere );
__declspec(implementation_key(544)) IAcadRegionPtr IAcad3DSolid::SectionSolid ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3 );
__declspec(implementation_key(545)) IAcad3DSolidPtr IAcad3DSolid::SliceSolid ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3, VARIANT_BOOL Negative );
__declspec(implementation_key(546)) _bstr_t IAcad3DSolid::GetSolidType ( );
__declspec(implementation_key(547)) _variant_t IAcad3DSolid::GetPosition ( );
__declspec(implementation_key(548)) void IAcad3DSolid::PutPosition ( const _variant_t & Position );
__declspec(implementation_key(549)) VARIANT_BOOL IAcad3DSolid::GetHistory ( );
__declspec(implementation_key(550)) void IAcad3DSolid::PutHistory ( VARIANT_BOOL bHistory );
__declspec(implementation_key(551)) VARIANT_BOOL IAcad3DSolid::GetShowHistory ( );
__declspec(implementation_key(552)) void IAcad3DSolid::PutShowHistory ( VARIANT_BOOL Position );
__declspec(implementation_key(553)) _variant_t IAcadCircle::GetCenter ( );
__declspec(implementation_key(554)) void IAcadCircle::PutCenter ( const _variant_t & CenterPoint );
__declspec(implementation_key(555)) double IAcadCircle::GetRadius ( );
__declspec(implementation_key(556)) void IAcadCircle::PutRadius ( double Radius );
__declspec(implementation_key(557)) double IAcadCircle::GetDiameter ( );
__declspec(implementation_key(558)) void IAcadCircle::PutDiameter ( double Diameter );
__declspec(implementation_key(559)) double IAcadCircle::GetCircumference ( );
__declspec(implementation_key(560)) void IAcadCircle::PutCircumference ( double Circumference );
__declspec(implementation_key(561)) double IAcadCircle::GetArea ( );
__declspec(implementation_key(562)) void IAcadCircle::PutArea ( double Area );
__declspec(implementation_key(563)) _variant_t IAcadCircle::GetNormal ( );
__declspec(implementation_key(564)) void IAcadCircle::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(565)) double IAcadCircle::GetThickness ( );
__declspec(implementation_key(566)) void IAcadCircle::PutThickness ( double Thickness );
__declspec(implementation_key(567)) _variant_t IAcadCircle::Offset ( double Distance );
__declspec(implementation_key(568)) _variant_t IAcadDimension::GetNormal ( );
__declspec(implementation_key(569)) void IAcadDimension::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(570)) ACAD_ANGLE IAcadDimension::GetRotation ( );
__declspec(implementation_key(571)) void IAcadDimension::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(572)) _variant_t IAcadDimension::GetTextPosition ( );
__declspec(implementation_key(573)) void IAcadDimension::PutTextPosition ( const _variant_t & textPos );
__declspec(implementation_key(574)) ACAD_ANGLE IAcadDimension::GetTextRotation ( );
__declspec(implementation_key(575)) void IAcadDimension::PutTextRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(576)) _bstr_t IAcadDimension::GetTextOverride ( );
__declspec(implementation_key(577)) void IAcadDimension::PutTextOverride ( _bstr_t bstrText );
__declspec(implementation_key(578)) _bstr_t IAcadDimension::GetStyleName ( );
__declspec(implementation_key(579)) void IAcadDimension::PutStyleName ( _bstr_t bstrName );
__declspec(implementation_key(580)) ACAD_COLOR IAcadDimension::GetTextColor ( );
__declspec(implementation_key(581)) void IAcadDimension::PutTextColor ( ACAD_COLOR color );
__declspec(implementation_key(582)) _bstr_t IAcadDimension::GetDecimalSeparator ( );
__declspec(implementation_key(583)) void IAcadDimension::PutDecimalSeparator ( _bstr_t character );
__declspec(implementation_key(584)) double IAcadDimension::GetTextGap ( );
__declspec(implementation_key(585)) void IAcadDimension::PutTextGap ( double Offset );
__declspec(implementation_key(586)) _bstr_t IAcadDimension::GetTextPrefix ( );
__declspec(implementation_key(587)) void IAcadDimension::PutTextPrefix ( _bstr_t prefix );
__declspec(implementation_key(588)) _bstr_t IAcadDimension::GetTextSuffix ( );
__declspec(implementation_key(589)) void IAcadDimension::PutTextSuffix ( _bstr_t suffix );
__declspec(implementation_key(590)) ACAD_NOUNITS IAcadDimension::GetScaleFactor ( );
__declspec(implementation_key(591)) void IAcadDimension::PutScaleFactor ( ACAD_NOUNITS factor );
__declspec(implementation_key(592)) enum AcDimVerticalJustification IAcadDimension::GetVerticalTextPosition ( );
__declspec(implementation_key(593)) void IAcadDimension::PutVerticalTextPosition ( enum AcDimVerticalJustification Type );
__declspec(implementation_key(594)) enum AcDimPrecision IAcadDimension::GetTolerancePrecision ( );
__declspec(implementation_key(595)) void IAcadDimension::PutTolerancePrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(596)) ACAD_NOUNITS IAcadDimension::GetToleranceHeightScale ( );
__declspec(implementation_key(597)) void IAcadDimension::PutToleranceHeightScale ( ACAD_NOUNITS scale );
__declspec(implementation_key(598)) double IAcadDimension::GetToleranceLowerLimit ( );
__declspec(implementation_key(599)) void IAcadDimension::PutToleranceLowerLimit ( double lower );
__declspec(implementation_key(600)) enum AcDimTextMovement IAcadDimension::GetTextMovement ( );
__declspec(implementation_key(601)) void IAcadDimension::PutTextMovement ( enum AcDimTextMovement Move );
__declspec(implementation_key(602)) enum AcDimToleranceMethod IAcadDimension::GetToleranceDisplay ( );
__declspec(implementation_key(603)) void IAcadDimension::PutToleranceDisplay ( enum AcDimToleranceMethod method );
__declspec(implementation_key(604)) enum AcDimToleranceJustify IAcadDimension::GetToleranceJustification ( );
__declspec(implementation_key(605)) void IAcadDimension::PutToleranceJustification ( enum AcDimToleranceJustify method );
__declspec(implementation_key(606)) double IAcadDimension::GetToleranceUpperLimit ( );
__declspec(implementation_key(607)) void IAcadDimension::PutToleranceUpperLimit ( double upper );
__declspec(implementation_key(608)) _bstr_t IAcadDimension::GetTextStyle ( );
__declspec(implementation_key(609)) void IAcadDimension::PutTextStyle ( _bstr_t style );
__declspec(implementation_key(610)) double IAcadDimension::GetTextHeight ( );
__declspec(implementation_key(611)) void IAcadDimension::PutTextHeight ( double Height );
__declspec(implementation_key(612)) VARIANT_BOOL IAcadDimension::GetSuppressLeadingZeros ( );
__declspec(implementation_key(613)) void IAcadDimension::PutSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(614)) VARIANT_BOOL IAcadDimension::GetSuppressTrailingZeros ( );
__declspec(implementation_key(615)) void IAcadDimension::PutSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(616)) VARIANT_BOOL IAcadDimension::GetToleranceSuppressLeadingZeros ( );
__declspec(implementation_key(617)) void IAcadDimension::PutToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(618)) VARIANT_BOOL IAcadDimension::GetToleranceSuppressTrailingZeros ( );
__declspec(implementation_key(619)) void IAcadDimension::PutToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(620)) VARIANT_BOOL IAcadDimension::GetTextFill ( );
__declspec(implementation_key(621)) void IAcadDimension::PutTextFill ( VARIANT_BOOL bVal );
__declspec(implementation_key(622)) ACAD_COLOR IAcadDimension::GetTextFillColor ( );
__declspec(implementation_key(623)) void IAcadDimension::PutTextFillColor ( ACAD_COLOR color );
__declspec(implementation_key(624)) VARIANT_BOOL IAcadDimension::GetDimTxtDirection ( );
__declspec(implementation_key(625)) void IAcadDimension::PutDimTxtDirection ( VARIANT_BOOL bVal );
__declspec(implementation_key(626)) _variant_t IAcadDimAligned::GetExtLine1Point ( );
__declspec(implementation_key(627)) void IAcadDimAligned::PutExtLine1Point ( const _variant_t & xLine1Point );
__declspec(implementation_key(628)) _variant_t IAcadDimAligned::GetExtLine2Point ( );
__declspec(implementation_key(629)) void IAcadDimAligned::PutExtLine2Point ( const _variant_t & xLine2Point );
__declspec(implementation_key(630)) VARIANT_BOOL IAcadDimAligned::GetAltUnits ( );
__declspec(implementation_key(631)) void IAcadDimAligned::PutAltUnits ( VARIANT_BOOL bAlternate );
__declspec(implementation_key(632)) enum AcDimPrecision IAcadDimAligned::GetAltUnitsPrecision ( );
__declspec(implementation_key(633)) void IAcadDimAligned::PutAltUnitsPrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(634)) ACAD_NOUNITS IAcadDimAligned::GetAltUnitsScale ( );
__declspec(implementation_key(635)) void IAcadDimAligned::PutAltUnitsScale ( ACAD_NOUNITS scale );
__declspec(implementation_key(636)) double IAcadDimAligned::GetAltRoundDistance ( );
__declspec(implementation_key(637)) void IAcadDimAligned::PutAltRoundDistance ( double Distance );
__declspec(implementation_key(638)) enum AcDimPrecision IAcadDimAligned::GetAltTolerancePrecision ( );
__declspec(implementation_key(639)) void IAcadDimAligned::PutAltTolerancePrecision ( enum AcDimPrecision Distance );
__declspec(implementation_key(640)) enum AcDimUnits IAcadDimAligned::GetAltUnitsFormat ( );
__declspec(implementation_key(641)) void IAcadDimAligned::PutAltUnitsFormat ( enum AcDimUnits Units );
__declspec(implementation_key(642)) _bstr_t IAcadDimAligned::GetAltTextPrefix ( );
__declspec(implementation_key(643)) void IAcadDimAligned::PutAltTextPrefix ( _bstr_t prefix );
__declspec(implementation_key(644)) _bstr_t IAcadDimAligned::GetAltTextSuffix ( );
__declspec(implementation_key(645)) void IAcadDimAligned::PutAltTextSuffix ( _bstr_t suffix );
__declspec(implementation_key(646)) ACAD_COLOR IAcadDimAligned::GetDimensionLineColor ( );
__declspec(implementation_key(647)) void IAcadDimAligned::PutDimensionLineColor ( ACAD_COLOR color );
__declspec(implementation_key(648)) ACAD_COLOR IAcadDimAligned::GetExtensionLineColor ( );
__declspec(implementation_key(649)) void IAcadDimAligned::PutExtensionLineColor ( ACAD_COLOR color );
__declspec(implementation_key(650)) enum AcDimPrecision IAcadDimAligned::GetPrimaryUnitsPrecision ( );
__declspec(implementation_key(651)) void IAcadDimAligned::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec );
__declspec(implementation_key(652)) double IAcadDimAligned::GetDimensionLineExtend ( );
__declspec(implementation_key(653)) void IAcadDimAligned::PutDimensionLineExtend ( double extend );
__declspec(implementation_key(654)) double IAcadDimAligned::GetExtensionLineExtend ( );
__declspec(implementation_key(655)) void IAcadDimAligned::PutExtensionLineExtend ( double extend );
__declspec(implementation_key(656)) enum AcDimFit IAcadDimAligned::GetFit ( );
__declspec(implementation_key(657)) void IAcadDimAligned::PutFit ( enum AcDimFit fittype );
__declspec(implementation_key(658)) enum AcDimFractionType IAcadDimAligned::GetFractionFormat ( );
__declspec(implementation_key(659)) void IAcadDimAligned::PutFractionFormat ( enum AcDimFractionType Type );
__declspec(implementation_key(660)) enum AcDimHorizontalJustification IAcadDimAligned::GetHorizontalTextPosition ( );
__declspec(implementation_key(661)) void IAcadDimAligned::PutHorizontalTextPosition ( enum AcDimHorizontalJustification Type );
__declspec(implementation_key(662)) ACAD_NOUNITS IAcadDimAligned::GetLinearScaleFactor ( );
__declspec(implementation_key(663)) void IAcadDimAligned::PutLinearScaleFactor ( ACAD_NOUNITS Type );
__declspec(implementation_key(664)) enum AcDimLUnits IAcadDimAligned::GetUnitsFormat ( );
__declspec(implementation_key(665)) void IAcadDimAligned::PutUnitsFormat ( enum AcDimLUnits format );
__declspec(implementation_key(666)) ACAD_LWEIGHT IAcadDimAligned::GetExtensionLineWeight ( );
__declspec(implementation_key(667)) void IAcadDimAligned::PutExtensionLineWeight ( ACAD_LWEIGHT lweight );
__declspec(implementation_key(668)) double IAcadDimAligned::GetRoundDistance ( );
__declspec(implementation_key(669)) void IAcadDimAligned::PutRoundDistance ( double Distance );
__declspec(implementation_key(670)) VARIANT_BOOL IAcadDimAligned::GetDimLine1Suppress ( );
__declspec(implementation_key(671)) void IAcadDimAligned::PutDimLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(672)) VARIANT_BOOL IAcadDimAligned::GetDimLine2Suppress ( );
__declspec(implementation_key(673)) void IAcadDimAligned::PutDimLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(674)) VARIANT_BOOL IAcadDimAligned::GetExtLine1Suppress ( );
__declspec(implementation_key(675)) void IAcadDimAligned::PutExtLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(676)) VARIANT_BOOL IAcadDimAligned::GetExtLine2Suppress ( );
__declspec(implementation_key(677)) void IAcadDimAligned::PutExtLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(678)) VARIANT_BOOL IAcadDimAligned::GetDimLineInside ( );
__declspec(implementation_key(679)) void IAcadDimAligned::PutDimLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(680)) VARIANT_BOOL IAcadDimAligned::GetTextInsideAlign ( );
__declspec(implementation_key(681)) void IAcadDimAligned::PutTextInsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(682)) VARIANT_BOOL IAcadDimAligned::GetTextInside ( );
__declspec(implementation_key(683)) void IAcadDimAligned::PutTextInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(684)) VARIANT_BOOL IAcadDimAligned::GetForceLineInside ( );
__declspec(implementation_key(685)) void IAcadDimAligned::PutForceLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(686)) VARIANT_BOOL IAcadDimAligned::GetTextOutsideAlign ( );
__declspec(implementation_key(687)) void IAcadDimAligned::PutTextOutsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(688)) double IAcadDimAligned::GetExtensionLineOffset ( );
__declspec(implementation_key(689)) void IAcadDimAligned::PutExtensionLineOffset ( double Offset );
__declspec(implementation_key(690)) VARIANT_BOOL IAcadDimAligned::GetAltSuppressLeadingZeros ( );
__declspec(implementation_key(691)) void IAcadDimAligned::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(692)) VARIANT_BOOL IAcadDimAligned::GetAltSuppressTrailingZeros ( );
__declspec(implementation_key(693)) void IAcadDimAligned::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(694)) VARIANT_BOOL IAcadDimAligned::GetAltSuppressZeroFeet ( );
__declspec(implementation_key(695)) void IAcadDimAligned::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(696)) VARIANT_BOOL IAcadDimAligned::GetAltSuppressZeroInches ( );
__declspec(implementation_key(697)) void IAcadDimAligned::PutAltSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(698)) VARIANT_BOOL IAcadDimAligned::GetAltToleranceSuppressLeadingZeros ( );
__declspec(implementation_key(699)) void IAcadDimAligned::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(700)) VARIANT_BOOL IAcadDimAligned::GetAltToleranceSuppressTrailingZeros ( );
__declspec(implementation_key(701)) void IAcadDimAligned::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(702)) VARIANT_BOOL IAcadDimAligned::GetAltToleranceSuppressZeroFeet ( );
__declspec(implementation_key(703)) void IAcadDimAligned::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(704)) VARIANT_BOOL IAcadDimAligned::GetAltToleranceSuppressZeroInches ( );
__declspec(implementation_key(705)) void IAcadDimAligned::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(706)) VARIANT_BOOL IAcadDimAligned::GetSuppressZeroFeet ( );
__declspec(implementation_key(707)) void IAcadDimAligned::PutSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(708)) VARIANT_BOOL IAcadDimAligned::GetSuppressZeroInches ( );
__declspec(implementation_key(709)) void IAcadDimAligned::PutSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(710)) VARIANT_BOOL IAcadDimAligned::GetToleranceSuppressZeroFeet ( );
__declspec(implementation_key(711)) void IAcadDimAligned::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(712)) VARIANT_BOOL IAcadDimAligned::GetToleranceSuppressZeroInches ( );
__declspec(implementation_key(713)) void IAcadDimAligned::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(714)) ACAD_LWEIGHT IAcadDimAligned::GetDimensionLineWeight ( );
__declspec(implementation_key(715)) void IAcadDimAligned::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(716)) double IAcadDimAligned::GetArrowheadSize ( );
__declspec(implementation_key(717)) void IAcadDimAligned::PutArrowheadSize ( double size );
__declspec(implementation_key(718)) enum AcDimArrowheadType IAcadDimAligned::GetArrowhead1Type ( );
__declspec(implementation_key(719)) void IAcadDimAligned::PutArrowhead1Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(720)) enum AcDimArrowheadType IAcadDimAligned::GetArrowhead2Type ( );
__declspec(implementation_key(721)) void IAcadDimAligned::PutArrowhead2Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(722)) double IAcadDimAligned::GetMeasurement ( );
__declspec(implementation_key(723)) _bstr_t IAcadDimAligned::GetArrowhead1Block ( );
__declspec(implementation_key(724)) void IAcadDimAligned::PutArrowhead1Block ( _bstr_t BlockName );
__declspec(implementation_key(725)) _bstr_t IAcadDimAligned::GetArrowhead2Block ( );
__declspec(implementation_key(726)) void IAcadDimAligned::PutArrowhead2Block ( _bstr_t BlockName );
__declspec(implementation_key(727)) _bstr_t IAcadDimAligned::GetDimensionLinetype ( );
__declspec(implementation_key(728)) void IAcadDimAligned::PutDimensionLinetype ( _bstr_t Linetype );
__declspec(implementation_key(729)) _bstr_t IAcadDimAligned::GetExtLine1Linetype ( );
__declspec(implementation_key(730)) void IAcadDimAligned::PutExtLine1Linetype ( _bstr_t Linetype );
__declspec(implementation_key(731)) _bstr_t IAcadDimAligned::GetExtLine2Linetype ( );
__declspec(implementation_key(732)) void IAcadDimAligned::PutExtLine2Linetype ( _bstr_t Linetype );
__declspec(implementation_key(733)) VARIANT_BOOL IAcadDimAligned::GetExtLineFixedLenSuppress ( );
__declspec(implementation_key(734)) void IAcadDimAligned::PutExtLineFixedLenSuppress ( VARIANT_BOOL bFixedLen );
__declspec(implementation_key(735)) double IAcadDimAligned::GetExtLineFixedLen ( );
__declspec(implementation_key(736)) void IAcadDimAligned::PutExtLineFixedLen ( double FixedLen );
__declspec(implementation_key(737)) VARIANT_BOOL IAcadDimAligned::GetDimConstrForm ( );
__declspec(implementation_key(738)) void IAcadDimAligned::PutDimConstrForm ( VARIANT_BOOL bIsDynamic );
__declspec(implementation_key(739)) VARIANT_BOOL IAcadDimAligned::GetDimConstrReference ( );
__declspec(implementation_key(740)) void IAcadDimAligned::PutDimConstrReference ( VARIANT_BOOL bIsReference );
__declspec(implementation_key(741)) _bstr_t IAcadDimAligned::GetDimConstrName ( );
__declspec(implementation_key(742)) void IAcadDimAligned::PutDimConstrName ( _bstr_t bstrName );
__declspec(implementation_key(743)) _bstr_t IAcadDimAligned::GetDimConstrExpression ( );
__declspec(implementation_key(744)) void IAcadDimAligned::PutDimConstrExpression ( _bstr_t bstrExpression );
__declspec(implementation_key(745)) _bstr_t IAcadDimAligned::GetDimConstrValue ( );
__declspec(implementation_key(746)) void IAcadDimAligned::PutDimConstrValue ( _bstr_t Value );
__declspec(implementation_key(747)) _bstr_t IAcadDimAligned::GetDimConstrDesc ( );
__declspec(implementation_key(748)) void IAcadDimAligned::PutDimConstrDesc ( _bstr_t bstrDescription );
__declspec(implementation_key(749)) _bstr_t IAcadDimAligned::GetSubUnitsSuffix ( );
__declspec(implementation_key(750)) void IAcadDimAligned::PutSubUnitsSuffix ( _bstr_t suffix );
__declspec(implementation_key(751)) double IAcadDimAligned::GetSubUnitsFactor ( );
__declspec(implementation_key(752)) void IAcadDimAligned::PutSubUnitsFactor ( double factor );
__declspec(implementation_key(753)) _bstr_t IAcadDimAligned::GetAltSubUnitsSuffix ( );
__declspec(implementation_key(754)) void IAcadDimAligned::PutAltSubUnitsSuffix ( _bstr_t suffix );
__declspec(implementation_key(755)) double IAcadDimAligned::GetAltSubUnitsFactor ( );
__declspec(implementation_key(756)) void IAcadDimAligned::PutAltSubUnitsFactor ( double factor );
__declspec(implementation_key(757)) _variant_t IAcadDimAngular::GetExtLine1StartPoint ( );
__declspec(implementation_key(758)) void IAcadDimAngular::PutExtLine1StartPoint ( const _variant_t & xLine1Point );
__declspec(implementation_key(759)) _variant_t IAcadDimAngular::GetExtLine1EndPoint ( );
__declspec(implementation_key(760)) void IAcadDimAngular::PutExtLine1EndPoint ( const _variant_t & xLine1Point );
__declspec(implementation_key(761)) _variant_t IAcadDimAngular::GetExtLine2StartPoint ( );
__declspec(implementation_key(762)) void IAcadDimAngular::PutExtLine2StartPoint ( const _variant_t & xLine2Point );
__declspec(implementation_key(763)) _variant_t IAcadDimAngular::GetExtLine2EndPoint ( );
__declspec(implementation_key(764)) void IAcadDimAngular::PutExtLine2EndPoint ( const _variant_t & xLine2Point );
__declspec(implementation_key(765)) enum AcAngleUnits IAcadDimAngular::GetAngleFormat ( );
__declspec(implementation_key(766)) void IAcadDimAngular::PutAngleFormat ( enum AcAngleUnits format );
__declspec(implementation_key(767)) ACAD_COLOR IAcadDimAngular::GetDimensionLineColor ( );
__declspec(implementation_key(768)) void IAcadDimAngular::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(769)) ACAD_COLOR IAcadDimAngular::GetExtensionLineColor ( );
__declspec(implementation_key(770)) void IAcadDimAngular::PutExtensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(771)) double IAcadDimAngular::GetExtensionLineExtend ( );
__declspec(implementation_key(772)) void IAcadDimAngular::PutExtensionLineExtend ( double extend );
__declspec(implementation_key(773)) enum AcDimFit IAcadDimAngular::GetFit ( );
__declspec(implementation_key(774)) void IAcadDimAngular::PutFit ( enum AcDimFit fittype );
__declspec(implementation_key(775)) enum AcDimHorizontalJustification IAcadDimAngular::GetHorizontalTextPosition ( );
__declspec(implementation_key(776)) void IAcadDimAngular::PutHorizontalTextPosition ( enum AcDimHorizontalJustification Type );
__declspec(implementation_key(777)) ACAD_LWEIGHT IAcadDimAngular::GetExtensionLineWeight ( );
__declspec(implementation_key(778)) void IAcadDimAngular::PutExtensionLineWeight ( ACAD_LWEIGHT lweight );
__declspec(implementation_key(779)) VARIANT_BOOL IAcadDimAngular::GetDimLine1Suppress ( );
__declspec(implementation_key(780)) void IAcadDimAngular::PutDimLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(781)) VARIANT_BOOL IAcadDimAngular::GetDimLine2Suppress ( );
__declspec(implementation_key(782)) void IAcadDimAngular::PutDimLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(783)) VARIANT_BOOL IAcadDimAngular::GetExtLine1Suppress ( );
__declspec(implementation_key(784)) void IAcadDimAngular::PutExtLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(785)) VARIANT_BOOL IAcadDimAngular::GetExtLine2Suppress ( );
__declspec(implementation_key(786)) void IAcadDimAngular::PutExtLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(787)) VARIANT_BOOL IAcadDimAngular::GetDimLineInside ( );
__declspec(implementation_key(788)) void IAcadDimAngular::PutDimLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(789)) VARIANT_BOOL IAcadDimAngular::GetTextInsideAlign ( );
__declspec(implementation_key(790)) void IAcadDimAngular::PutTextInsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(791)) VARIANT_BOOL IAcadDimAngular::GetTextInside ( );
__declspec(implementation_key(792)) void IAcadDimAngular::PutTextInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(793)) VARIANT_BOOL IAcadDimAngular::GetForceLineInside ( );
__declspec(implementation_key(794)) void IAcadDimAngular::PutForceLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(795)) VARIANT_BOOL IAcadDimAngular::GetTextOutsideAlign ( );
__declspec(implementation_key(796)) void IAcadDimAngular::PutTextOutsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(797)) enum AcDimPrecision IAcadDimAngular::GetTextPrecision ( );
__declspec(implementation_key(798)) void IAcadDimAngular::PutTextPrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(799)) double IAcadDimAngular::GetExtensionLineOffset ( );
__declspec(implementation_key(800)) void IAcadDimAngular::PutExtensionLineOffset ( double Offset );
__declspec(implementation_key(801)) ACAD_LWEIGHT IAcadDimAngular::GetDimensionLineWeight ( );
__declspec(implementation_key(802)) void IAcadDimAngular::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(803)) double IAcadDimAngular::GetArrowheadSize ( );
__declspec(implementation_key(804)) void IAcadDimAngular::PutArrowheadSize ( double size );
__declspec(implementation_key(805)) enum AcDimArrowheadType IAcadDimAngular::GetArrowhead1Type ( );
__declspec(implementation_key(806)) void IAcadDimAngular::PutArrowhead1Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(807)) enum AcDimArrowheadType IAcadDimAngular::GetArrowhead2Type ( );
__declspec(implementation_key(808)) void IAcadDimAngular::PutArrowhead2Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(809)) ACAD_ANGLE IAcadDimAngular::GetMeasurement ( );
__declspec(implementation_key(810)) _bstr_t IAcadDimAngular::GetArrowhead1Block ( );
__declspec(implementation_key(811)) void IAcadDimAngular::PutArrowhead1Block ( _bstr_t BlockName );
__declspec(implementation_key(812)) _bstr_t IAcadDimAngular::GetArrowhead2Block ( );
__declspec(implementation_key(813)) void IAcadDimAngular::PutArrowhead2Block ( _bstr_t BlockName );
__declspec(implementation_key(814)) _bstr_t IAcadDimAngular::GetDimensionLinetype ( );
__declspec(implementation_key(815)) void IAcadDimAngular::PutDimensionLinetype ( _bstr_t Linetype );
__declspec(implementation_key(816)) _bstr_t IAcadDimAngular::GetExtLine1Linetype ( );
__declspec(implementation_key(817)) void IAcadDimAngular::PutExtLine1Linetype ( _bstr_t Linetype );
__declspec(implementation_key(818)) _bstr_t IAcadDimAngular::GetExtLine2Linetype ( );
__declspec(implementation_key(819)) void IAcadDimAngular::PutExtLine2Linetype ( _bstr_t Linetype );
__declspec(implementation_key(820)) VARIANT_BOOL IAcadDimAngular::GetExtLineFixedLenSuppress ( );
__declspec(implementation_key(821)) void IAcadDimAngular::PutExtLineFixedLenSuppress ( VARIANT_BOOL bFixedLen );
__declspec(implementation_key(822)) double IAcadDimAngular::GetExtLineFixedLen ( );
__declspec(implementation_key(823)) void IAcadDimAngular::PutExtLineFixedLen ( double FixedLen );
__declspec(implementation_key(824)) VARIANT_BOOL IAcadDimAngular::GetDimConstrForm ( );
__declspec(implementation_key(825)) void IAcadDimAngular::PutDimConstrForm ( VARIANT_BOOL bIsDynamic );
__declspec(implementation_key(826)) VARIANT_BOOL IAcadDimAngular::GetDimConstrReference ( );
__declspec(implementation_key(827)) void IAcadDimAngular::PutDimConstrReference ( VARIANT_BOOL bIsReference );
__declspec(implementation_key(828)) _bstr_t IAcadDimAngular::GetDimConstrName ( );
__declspec(implementation_key(829)) void IAcadDimAngular::PutDimConstrName ( _bstr_t bstrName );
__declspec(implementation_key(830)) _bstr_t IAcadDimAngular::GetDimConstrExpression ( );
__declspec(implementation_key(831)) void IAcadDimAngular::PutDimConstrExpression ( _bstr_t bstrExpression );
__declspec(implementation_key(832)) _bstr_t IAcadDimAngular::GetDimConstrValue ( );
__declspec(implementation_key(833)) void IAcadDimAngular::PutDimConstrValue ( _bstr_t Value );
__declspec(implementation_key(834)) _bstr_t IAcadDimAngular::GetDimConstrDesc ( );
__declspec(implementation_key(835)) void IAcadDimAngular::PutDimConstrDesc ( _bstr_t bstrDescription );
__declspec(implementation_key(836)) void IAcadDimDiametric::PutLeaderLength ( double _arg1 );
__declspec(implementation_key(837)) VARIANT_BOOL IAcadDimDiametric::GetAltUnits ( );
__declspec(implementation_key(838)) void IAcadDimDiametric::PutAltUnits ( VARIANT_BOOL bAlternate );
__declspec(implementation_key(839)) enum AcDimPrecision IAcadDimDiametric::GetAltUnitsPrecision ( );
__declspec(implementation_key(840)) void IAcadDimDiametric::PutAltUnitsPrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(841)) ACAD_NOUNITS IAcadDimDiametric::GetAltUnitsScale ( );
__declspec(implementation_key(842)) void IAcadDimDiametric::PutAltUnitsScale ( ACAD_NOUNITS scale );
__declspec(implementation_key(843)) double IAcadDimDiametric::GetAltRoundDistance ( );
__declspec(implementation_key(844)) void IAcadDimDiametric::PutAltRoundDistance ( double Distance );
__declspec(implementation_key(845)) enum AcDimPrecision IAcadDimDiametric::GetAltTolerancePrecision ( );
__declspec(implementation_key(846)) void IAcadDimDiametric::PutAltTolerancePrecision ( enum AcDimPrecision Distance );
__declspec(implementation_key(847)) enum AcDimUnits IAcadDimDiametric::GetAltUnitsFormat ( );
__declspec(implementation_key(848)) void IAcadDimDiametric::PutAltUnitsFormat ( enum AcDimUnits Units );
__declspec(implementation_key(849)) _bstr_t IAcadDimDiametric::GetAltTextPrefix ( );
__declspec(implementation_key(850)) void IAcadDimDiametric::PutAltTextPrefix ( _bstr_t prefix );
__declspec(implementation_key(851)) _bstr_t IAcadDimDiametric::GetAltTextSuffix ( );
__declspec(implementation_key(852)) void IAcadDimDiametric::PutAltTextSuffix ( _bstr_t prefix );
__declspec(implementation_key(853)) ACAD_COLOR IAcadDimDiametric::GetDimensionLineColor ( );
__declspec(implementation_key(854)) void IAcadDimDiametric::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(855)) enum AcDimPrecision IAcadDimDiametric::GetPrimaryUnitsPrecision ( );
__declspec(implementation_key(856)) void IAcadDimDiametric::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec );
__declspec(implementation_key(857)) enum AcDimFractionType IAcadDimDiametric::GetFractionFormat ( );
__declspec(implementation_key(858)) void IAcadDimDiametric::PutFractionFormat ( enum AcDimFractionType Type );
__declspec(implementation_key(859)) enum AcDimFit IAcadDimDiametric::GetFit ( );
__declspec(implementation_key(860)) void IAcadDimDiametric::PutFit ( enum AcDimFit fittype );
__declspec(implementation_key(861)) ACAD_NOUNITS IAcadDimDiametric::GetLinearScaleFactor ( );
__declspec(implementation_key(862)) void IAcadDimDiametric::PutLinearScaleFactor ( ACAD_NOUNITS Type );
__declspec(implementation_key(863)) enum AcDimLUnits IAcadDimDiametric::GetUnitsFormat ( );
__declspec(implementation_key(864)) void IAcadDimDiametric::PutUnitsFormat ( enum AcDimLUnits format );
__declspec(implementation_key(865)) double IAcadDimDiametric::GetRoundDistance ( );
__declspec(implementation_key(866)) void IAcadDimDiametric::PutRoundDistance ( double Distance );
__declspec(implementation_key(867)) VARIANT_BOOL IAcadDimDiametric::GetDimLine1Suppress ( );
__declspec(implementation_key(868)) void IAcadDimDiametric::PutDimLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(869)) VARIANT_BOOL IAcadDimDiametric::GetDimLine2Suppress ( );
__declspec(implementation_key(870)) void IAcadDimDiametric::PutDimLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(871)) VARIANT_BOOL IAcadDimDiametric::GetTextInsideAlign ( );
__declspec(implementation_key(872)) void IAcadDimDiametric::PutTextInsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(873)) VARIANT_BOOL IAcadDimDiametric::GetTextInside ( );
__declspec(implementation_key(874)) void IAcadDimDiametric::PutTextInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(875)) VARIANT_BOOL IAcadDimDiametric::GetForceLineInside ( );
__declspec(implementation_key(876)) void IAcadDimDiametric::PutForceLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(877)) VARIANT_BOOL IAcadDimDiametric::GetTextOutsideAlign ( );
__declspec(implementation_key(878)) void IAcadDimDiametric::PutTextOutsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(879)) enum AcDimCenterType IAcadDimDiametric::GetCenterType ( );
__declspec(implementation_key(880)) void IAcadDimDiametric::PutCenterType ( enum AcDimCenterType Type );
__declspec(implementation_key(881)) double IAcadDimDiametric::GetCenterMarkSize ( );
__declspec(implementation_key(882)) void IAcadDimDiametric::PutCenterMarkSize ( double Type );
__declspec(implementation_key(883)) VARIANT_BOOL IAcadDimDiametric::GetAltSuppressLeadingZeros ( );
__declspec(implementation_key(884)) void IAcadDimDiametric::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(885)) VARIANT_BOOL IAcadDimDiametric::GetAltSuppressTrailingZeros ( );
__declspec(implementation_key(886)) void IAcadDimDiametric::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(887)) VARIANT_BOOL IAcadDimDiametric::GetAltSuppressZeroFeet ( );
__declspec(implementation_key(888)) void IAcadDimDiametric::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(889)) VARIANT_BOOL IAcadDimDiametric::GetAltSuppressZeroInches ( );
__declspec(implementation_key(890)) void IAcadDimDiametric::PutAltSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(891)) VARIANT_BOOL IAcadDimDiametric::GetAltToleranceSuppressLeadingZeros ( );
__declspec(implementation_key(892)) void IAcadDimDiametric::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(893)) VARIANT_BOOL IAcadDimDiametric::GetAltToleranceSuppressTrailingZeros ( );
__declspec(implementation_key(894)) void IAcadDimDiametric::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(895)) VARIANT_BOOL IAcadDimDiametric::GetAltToleranceSuppressZeroFeet ( );
__declspec(implementation_key(896)) void IAcadDimDiametric::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(897)) VARIANT_BOOL IAcadDimDiametric::GetAltToleranceSuppressZeroInches ( );
__declspec(implementation_key(898)) void IAcadDimDiametric::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(899)) VARIANT_BOOL IAcadDimDiametric::GetSuppressZeroFeet ( );
__declspec(implementation_key(900)) void IAcadDimDiametric::PutSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(901)) VARIANT_BOOL IAcadDimDiametric::GetSuppressZeroInches ( );
__declspec(implementation_key(902)) void IAcadDimDiametric::PutSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(903)) VARIANT_BOOL IAcadDimDiametric::GetToleranceSuppressZeroFeet ( );
__declspec(implementation_key(904)) void IAcadDimDiametric::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(905)) VARIANT_BOOL IAcadDimDiametric::GetToleranceSuppressZeroInches ( );
__declspec(implementation_key(906)) void IAcadDimDiametric::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(907)) ACAD_LWEIGHT IAcadDimDiametric::GetDimensionLineWeight ( );
__declspec(implementation_key(908)) void IAcadDimDiametric::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(909)) double IAcadDimDiametric::GetArrowheadSize ( );
__declspec(implementation_key(910)) void IAcadDimDiametric::PutArrowheadSize ( double size );
__declspec(implementation_key(911)) enum AcDimArrowheadType IAcadDimDiametric::GetArrowhead1Type ( );
__declspec(implementation_key(912)) void IAcadDimDiametric::PutArrowhead1Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(913)) enum AcDimArrowheadType IAcadDimDiametric::GetArrowhead2Type ( );
__declspec(implementation_key(914)) void IAcadDimDiametric::PutArrowhead2Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(915)) double IAcadDimDiametric::GetMeasurement ( );
__declspec(implementation_key(916)) _bstr_t IAcadDimDiametric::GetArrowhead1Block ( );
__declspec(implementation_key(917)) void IAcadDimDiametric::PutArrowhead1Block ( _bstr_t BlockName );
__declspec(implementation_key(918)) _bstr_t IAcadDimDiametric::GetArrowhead2Block ( );
__declspec(implementation_key(919)) void IAcadDimDiametric::PutArrowhead2Block ( _bstr_t BlockName );
__declspec(implementation_key(920)) _bstr_t IAcadDimDiametric::GetDimensionLinetype ( );
__declspec(implementation_key(921)) void IAcadDimDiametric::PutDimensionLinetype ( _bstr_t Linetype );
__declspec(implementation_key(922)) VARIANT_BOOL IAcadDimDiametric::GetDimConstrForm ( );
__declspec(implementation_key(923)) void IAcadDimDiametric::PutDimConstrForm ( VARIANT_BOOL bIsDynamic );
__declspec(implementation_key(924)) VARIANT_BOOL IAcadDimDiametric::GetDimConstrReference ( );
__declspec(implementation_key(925)) void IAcadDimDiametric::PutDimConstrReference ( VARIANT_BOOL bIsReference );
__declspec(implementation_key(926)) _bstr_t IAcadDimDiametric::GetDimConstrName ( );
__declspec(implementation_key(927)) void IAcadDimDiametric::PutDimConstrName ( _bstr_t bstrName );
__declspec(implementation_key(928)) _bstr_t IAcadDimDiametric::GetDimConstrExpression ( );
__declspec(implementation_key(929)) void IAcadDimDiametric::PutDimConstrExpression ( _bstr_t bstrExpression );
__declspec(implementation_key(930)) _bstr_t IAcadDimDiametric::GetDimConstrValue ( );
__declspec(implementation_key(931)) void IAcadDimDiametric::PutDimConstrValue ( _bstr_t Value );
__declspec(implementation_key(932)) _bstr_t IAcadDimDiametric::GetDimConstrDesc ( );
__declspec(implementation_key(933)) void IAcadDimDiametric::PutDimConstrDesc ( _bstr_t bstrDescription );
__declspec(implementation_key(934)) VARIANT_BOOL IAcadDimRotated::GetAltUnits ( );
__declspec(implementation_key(935)) void IAcadDimRotated::PutAltUnits ( VARIANT_BOOL bAlternate );
__declspec(implementation_key(936)) enum AcDimPrecision IAcadDimRotated::GetAltUnitsPrecision ( );
__declspec(implementation_key(937)) void IAcadDimRotated::PutAltUnitsPrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(938)) ACAD_NOUNITS IAcadDimRotated::GetAltUnitsScale ( );
__declspec(implementation_key(939)) void IAcadDimRotated::PutAltUnitsScale ( ACAD_NOUNITS scale );
__declspec(implementation_key(940)) double IAcadDimRotated::GetAltRoundDistance ( );
__declspec(implementation_key(941)) void IAcadDimRotated::PutAltRoundDistance ( double Distance );
__declspec(implementation_key(942)) enum AcDimPrecision IAcadDimRotated::GetAltTolerancePrecision ( );
__declspec(implementation_key(943)) void IAcadDimRotated::PutAltTolerancePrecision ( enum AcDimPrecision Distance );
__declspec(implementation_key(944)) enum AcDimUnits IAcadDimRotated::GetAltUnitsFormat ( );
__declspec(implementation_key(945)) void IAcadDimRotated::PutAltUnitsFormat ( enum AcDimUnits Units );
__declspec(implementation_key(946)) _bstr_t IAcadDimRotated::GetAltTextPrefix ( );
__declspec(implementation_key(947)) void IAcadDimRotated::PutAltTextPrefix ( _bstr_t prefix );
__declspec(implementation_key(948)) _bstr_t IAcadDimRotated::GetAltTextSuffix ( );
__declspec(implementation_key(949)) void IAcadDimRotated::PutAltTextSuffix ( _bstr_t prefix );
__declspec(implementation_key(950)) ACAD_COLOR IAcadDimRotated::GetDimensionLineColor ( );
__declspec(implementation_key(951)) void IAcadDimRotated::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(952)) ACAD_COLOR IAcadDimRotated::GetExtensionLineColor ( );
__declspec(implementation_key(953)) void IAcadDimRotated::PutExtensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(954)) enum AcDimPrecision IAcadDimRotated::GetPrimaryUnitsPrecision ( );
__declspec(implementation_key(955)) void IAcadDimRotated::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec );
__declspec(implementation_key(956)) double IAcadDimRotated::GetDimensionLineExtend ( );
__declspec(implementation_key(957)) void IAcadDimRotated::PutDimensionLineExtend ( double extend );
__declspec(implementation_key(958)) double IAcadDimRotated::GetExtensionLineExtend ( );
__declspec(implementation_key(959)) void IAcadDimRotated::PutExtensionLineExtend ( double extend );
__declspec(implementation_key(960)) enum AcDimFit IAcadDimRotated::GetFit ( );
__declspec(implementation_key(961)) void IAcadDimRotated::PutFit ( enum AcDimFit fittype );
__declspec(implementation_key(962)) enum AcDimFractionType IAcadDimRotated::GetFractionFormat ( );
__declspec(implementation_key(963)) void IAcadDimRotated::PutFractionFormat ( enum AcDimFractionType Type );
__declspec(implementation_key(964)) enum AcDimHorizontalJustification IAcadDimRotated::GetHorizontalTextPosition ( );
__declspec(implementation_key(965)) void IAcadDimRotated::PutHorizontalTextPosition ( enum AcDimHorizontalJustification Type );
__declspec(implementation_key(966)) ACAD_NOUNITS IAcadDimRotated::GetLinearScaleFactor ( );
__declspec(implementation_key(967)) void IAcadDimRotated::PutLinearScaleFactor ( ACAD_NOUNITS Type );
__declspec(implementation_key(968)) enum AcDimLUnits IAcadDimRotated::GetUnitsFormat ( );
__declspec(implementation_key(969)) void IAcadDimRotated::PutUnitsFormat ( enum AcDimLUnits format );
__declspec(implementation_key(970)) ACAD_LWEIGHT IAcadDimRotated::GetExtensionLineWeight ( );
__declspec(implementation_key(971)) void IAcadDimRotated::PutExtensionLineWeight ( ACAD_LWEIGHT lweight );
__declspec(implementation_key(972)) double IAcadDimRotated::GetRoundDistance ( );
__declspec(implementation_key(973)) void IAcadDimRotated::PutRoundDistance ( double Distance );
__declspec(implementation_key(974)) VARIANT_BOOL IAcadDimRotated::GetDimLine1Suppress ( );
__declspec(implementation_key(975)) void IAcadDimRotated::PutDimLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(976)) VARIANT_BOOL IAcadDimRotated::GetDimLine2Suppress ( );
__declspec(implementation_key(977)) void IAcadDimRotated::PutDimLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(978)) VARIANT_BOOL IAcadDimRotated::GetExtLine1Suppress ( );
__declspec(implementation_key(979)) void IAcadDimRotated::PutExtLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(980)) VARIANT_BOOL IAcadDimRotated::GetExtLine2Suppress ( );
__declspec(implementation_key(981)) void IAcadDimRotated::PutExtLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(982)) VARIANT_BOOL IAcadDimRotated::GetDimLineInside ( );
__declspec(implementation_key(983)) void IAcadDimRotated::PutDimLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(984)) VARIANT_BOOL IAcadDimRotated::GetTextInsideAlign ( );
__declspec(implementation_key(985)) void IAcadDimRotated::PutTextInsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(986)) VARIANT_BOOL IAcadDimRotated::GetTextInside ( );
__declspec(implementation_key(987)) void IAcadDimRotated::PutTextInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(988)) VARIANT_BOOL IAcadDimRotated::GetForceLineInside ( );
__declspec(implementation_key(989)) void IAcadDimRotated::PutForceLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(990)) VARIANT_BOOL IAcadDimRotated::GetTextOutsideAlign ( );
__declspec(implementation_key(991)) void IAcadDimRotated::PutTextOutsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(992)) double IAcadDimRotated::GetExtensionLineOffset ( );
__declspec(implementation_key(993)) void IAcadDimRotated::PutExtensionLineOffset ( double Offset );
__declspec(implementation_key(994)) VARIANT_BOOL IAcadDimRotated::GetAltSuppressLeadingZeros ( );
__declspec(implementation_key(995)) void IAcadDimRotated::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(996)) VARIANT_BOOL IAcadDimRotated::GetAltSuppressTrailingZeros ( );
__declspec(implementation_key(997)) void IAcadDimRotated::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(998)) VARIANT_BOOL IAcadDimRotated::GetAltSuppressZeroFeet ( );
__declspec(implementation_key(999)) void IAcadDimRotated::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(1000)) VARIANT_BOOL IAcadDimRotated::GetAltSuppressZeroInches ( );
__declspec(implementation_key(1001)) void IAcadDimRotated::PutAltSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(1002)) VARIANT_BOOL IAcadDimRotated::GetAltToleranceSuppressLeadingZeros ( );
__declspec(implementation_key(1003)) void IAcadDimRotated::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(1004)) VARIANT_BOOL IAcadDimRotated::GetAltToleranceSuppressTrailingZeros ( );
__declspec(implementation_key(1005)) void IAcadDimRotated::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(1006)) VARIANT_BOOL IAcadDimRotated::GetAltToleranceSuppressZeroFeet ( );
__declspec(implementation_key(1007)) void IAcadDimRotated::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(1008)) VARIANT_BOOL IAcadDimRotated::GetAltToleranceSuppressZeroInches ( );
__declspec(implementation_key(1009)) void IAcadDimRotated::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(1010)) VARIANT_BOOL IAcadDimRotated::GetSuppressZeroFeet ( );
__declspec(implementation_key(1011)) void IAcadDimRotated::PutSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(1012)) VARIANT_BOOL IAcadDimRotated::GetSuppressZeroInches ( );
__declspec(implementation_key(1013)) void IAcadDimRotated::PutSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(1014)) VARIANT_BOOL IAcadDimRotated::GetToleranceSuppressZeroFeet ( );
__declspec(implementation_key(1015)) void IAcadDimRotated::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(1016)) VARIANT_BOOL IAcadDimRotated::GetToleranceSuppressZeroInches ( );
__declspec(implementation_key(1017)) void IAcadDimRotated::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(1018)) ACAD_LWEIGHT IAcadDimRotated::GetDimensionLineWeight ( );
__declspec(implementation_key(1019)) void IAcadDimRotated::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(1020)) double IAcadDimRotated::GetArrowheadSize ( );
__declspec(implementation_key(1021)) void IAcadDimRotated::PutArrowheadSize ( double size );
__declspec(implementation_key(1022)) enum AcDimArrowheadType IAcadDimRotated::GetArrowhead1Type ( );
__declspec(implementation_key(1023)) void IAcadDimRotated::PutArrowhead1Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(1024)) enum AcDimArrowheadType IAcadDimRotated::GetArrowhead2Type ( );
__declspec(implementation_key(1025)) void IAcadDimRotated::PutArrowhead2Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(1026)) double IAcadDimRotated::GetMeasurement ( );
__declspec(implementation_key(1027)) _bstr_t IAcadDimRotated::GetArrowhead1Block ( );
__declspec(implementation_key(1028)) void IAcadDimRotated::PutArrowhead1Block ( _bstr_t BlockName );
__declspec(implementation_key(1029)) _bstr_t IAcadDimRotated::GetArrowhead2Block ( );
__declspec(implementation_key(1030)) void IAcadDimRotated::PutArrowhead2Block ( _bstr_t BlockName );
__declspec(implementation_key(1031)) _bstr_t IAcadDimRotated::GetDimensionLinetype ( );
__declspec(implementation_key(1032)) void IAcadDimRotated::PutDimensionLinetype ( _bstr_t Linetype );
__declspec(implementation_key(1033)) _bstr_t IAcadDimRotated::GetExtLine1Linetype ( );
__declspec(implementation_key(1034)) void IAcadDimRotated::PutExtLine1Linetype ( _bstr_t Linetype );
__declspec(implementation_key(1035)) _bstr_t IAcadDimRotated::GetExtLine2Linetype ( );
__declspec(implementation_key(1036)) void IAcadDimRotated::PutExtLine2Linetype ( _bstr_t Linetype );
__declspec(implementation_key(1037)) VARIANT_BOOL IAcadDimRotated::GetExtLineFixedLenSuppress ( );
__declspec(implementation_key(1038)) void IAcadDimRotated::PutExtLineFixedLenSuppress ( VARIANT_BOOL bFixedLen );
__declspec(implementation_key(1039)) double IAcadDimRotated::GetExtLineFixedLen ( );
__declspec(implementation_key(1040)) void IAcadDimRotated::PutExtLineFixedLen ( double FixedLen );
__declspec(implementation_key(1041)) VARIANT_BOOL IAcadDimRotated::GetDimConstrForm ( );
__declspec(implementation_key(1042)) void IAcadDimRotated::PutDimConstrForm ( VARIANT_BOOL bIsDynamic );
__declspec(implementation_key(1043)) VARIANT_BOOL IAcadDimRotated::GetDimConstrReference ( );
__declspec(implementation_key(1044)) void IAcadDimRotated::PutDimConstrReference ( VARIANT_BOOL bIsReference );
__declspec(implementation_key(1045)) _bstr_t IAcadDimRotated::GetDimConstrName ( );
__declspec(implementation_key(1046)) void IAcadDimRotated::PutDimConstrName ( _bstr_t bstrName );
__declspec(implementation_key(1047)) _bstr_t IAcadDimRotated::GetDimConstrExpression ( );
__declspec(implementation_key(1048)) void IAcadDimRotated::PutDimConstrExpression ( _bstr_t bstrExpression );
__declspec(implementation_key(1049)) _bstr_t IAcadDimRotated::GetDimConstrValue ( );
__declspec(implementation_key(1050)) void IAcadDimRotated::PutDimConstrValue ( _bstr_t Value );
__declspec(implementation_key(1051)) _bstr_t IAcadDimRotated::GetDimConstrDesc ( );
__declspec(implementation_key(1052)) void IAcadDimRotated::PutDimConstrDesc ( _bstr_t bstrDescription );
__declspec(implementation_key(1053)) _bstr_t IAcadDimRotated::GetSubUnitsSuffix ( );
__declspec(implementation_key(1054)) void IAcadDimRotated::PutSubUnitsSuffix ( _bstr_t suffix );
__declspec(implementation_key(1055)) double IAcadDimRotated::GetSubUnitsFactor ( );
__declspec(implementation_key(1056)) void IAcadDimRotated::PutSubUnitsFactor ( double factor );
__declspec(implementation_key(1057)) _bstr_t IAcadDimRotated::GetAltSubUnitsSuffix ( );
__declspec(implementation_key(1058)) void IAcadDimRotated::PutAltSubUnitsSuffix ( _bstr_t suffix );
__declspec(implementation_key(1059)) double IAcadDimRotated::GetAltSubUnitsFactor ( );
__declspec(implementation_key(1060)) void IAcadDimRotated::PutAltSubUnitsFactor ( double factor );
__declspec(implementation_key(1061)) VARIANT_BOOL IAcadDimOrdinate::GetAltUnits ( );
__declspec(implementation_key(1062)) void IAcadDimOrdinate::PutAltUnits ( VARIANT_BOOL bAlternate );
__declspec(implementation_key(1063)) enum AcDimPrecision IAcadDimOrdinate::GetAltUnitsPrecision ( );
__declspec(implementation_key(1064)) void IAcadDimOrdinate::PutAltUnitsPrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(1065)) ACAD_NOUNITS IAcadDimOrdinate::GetAltUnitsScale ( );
__declspec(implementation_key(1066)) void IAcadDimOrdinate::PutAltUnitsScale ( ACAD_NOUNITS scale );
__declspec(implementation_key(1067)) double IAcadDimOrdinate::GetAltRoundDistance ( );
__declspec(implementation_key(1068)) void IAcadDimOrdinate::PutAltRoundDistance ( double Distance );
__declspec(implementation_key(1069)) enum AcDimPrecision IAcadDimOrdinate::GetAltTolerancePrecision ( );
__declspec(implementation_key(1070)) void IAcadDimOrdinate::PutAltTolerancePrecision ( enum AcDimPrecision Distance );
__declspec(implementation_key(1071)) enum AcDimUnits IAcadDimOrdinate::GetAltUnitsFormat ( );
__declspec(implementation_key(1072)) void IAcadDimOrdinate::PutAltUnitsFormat ( enum AcDimUnits Units );
__declspec(implementation_key(1073)) _bstr_t IAcadDimOrdinate::GetAltTextPrefix ( );
__declspec(implementation_key(1074)) void IAcadDimOrdinate::PutAltTextPrefix ( _bstr_t prefix );
__declspec(implementation_key(1075)) _bstr_t IAcadDimOrdinate::GetAltTextSuffix ( );
__declspec(implementation_key(1076)) void IAcadDimOrdinate::PutAltTextSuffix ( _bstr_t prefix );
__declspec(implementation_key(1077)) ACAD_COLOR IAcadDimOrdinate::GetExtensionLineColor ( );
__declspec(implementation_key(1078)) void IAcadDimOrdinate::PutExtensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(1079)) enum AcDimPrecision IAcadDimOrdinate::GetPrimaryUnitsPrecision ( );
__declspec(implementation_key(1080)) void IAcadDimOrdinate::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec );
__declspec(implementation_key(1081)) enum AcDimFractionType IAcadDimOrdinate::GetFractionFormat ( );
__declspec(implementation_key(1082)) void IAcadDimOrdinate::PutFractionFormat ( enum AcDimFractionType Type );
__declspec(implementation_key(1083)) ACAD_NOUNITS IAcadDimOrdinate::GetLinearScaleFactor ( );
__declspec(implementation_key(1084)) void IAcadDimOrdinate::PutLinearScaleFactor ( ACAD_NOUNITS Type );
__declspec(implementation_key(1085)) enum AcDimLUnits IAcadDimOrdinate::GetUnitsFormat ( );
__declspec(implementation_key(1086)) void IAcadDimOrdinate::PutUnitsFormat ( enum AcDimLUnits format );
__declspec(implementation_key(1087)) ACAD_LWEIGHT IAcadDimOrdinate::GetExtensionLineWeight ( );
__declspec(implementation_key(1088)) void IAcadDimOrdinate::PutExtensionLineWeight ( ACAD_LWEIGHT lweight );
__declspec(implementation_key(1089)) double IAcadDimOrdinate::GetRoundDistance ( );
__declspec(implementation_key(1090)) void IAcadDimOrdinate::PutRoundDistance ( double Distance );
__declspec(implementation_key(1091)) double IAcadDimOrdinate::GetExtensionLineOffset ( );
__declspec(implementation_key(1092)) void IAcadDimOrdinate::PutExtensionLineOffset ( double Offset );
__declspec(implementation_key(1093)) VARIANT_BOOL IAcadDimOrdinate::GetAltSuppressLeadingZeros ( );
__declspec(implementation_key(1094)) void IAcadDimOrdinate::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(1095)) VARIANT_BOOL IAcadDimOrdinate::GetAltSuppressTrailingZeros ( );
__declspec(implementation_key(1096)) void IAcadDimOrdinate::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(1097)) VARIANT_BOOL IAcadDimOrdinate::GetAltSuppressZeroFeet ( );
__declspec(implementation_key(1098)) void IAcadDimOrdinate::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(1099)) VARIANT_BOOL IAcadDimOrdinate::GetAltSuppressZeroInches ( );
__declspec(implementation_key(1100)) void IAcadDimOrdinate::PutAltSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(1101)) VARIANT_BOOL IAcadDimOrdinate::GetAltToleranceSuppressLeadingZeros ( );
__declspec(implementation_key(1102)) void IAcadDimOrdinate::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(1103)) VARIANT_BOOL IAcadDimOrdinate::GetAltToleranceSuppressTrailingZeros ( );
__declspec(implementation_key(1104)) void IAcadDimOrdinate::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(1105)) VARIANT_BOOL IAcadDimOrdinate::GetAltToleranceSuppressZeroFeet ( );
__declspec(implementation_key(1106)) void IAcadDimOrdinate::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(1107)) VARIANT_BOOL IAcadDimOrdinate::GetAltToleranceSuppressZeroInches ( );
__declspec(implementation_key(1108)) void IAcadDimOrdinate::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(1109)) VARIANT_BOOL IAcadDimOrdinate::GetSuppressZeroFeet ( );
__declspec(implementation_key(1110)) void IAcadDimOrdinate::PutSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(1111)) VARIANT_BOOL IAcadDimOrdinate::GetSuppressZeroInches ( );
__declspec(implementation_key(1112)) void IAcadDimOrdinate::PutSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(1113)) VARIANT_BOOL IAcadDimOrdinate::GetToleranceSuppressZeroFeet ( );
__declspec(implementation_key(1114)) void IAcadDimOrdinate::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(1115)) VARIANT_BOOL IAcadDimOrdinate::GetToleranceSuppressZeroInches ( );
__declspec(implementation_key(1116)) void IAcadDimOrdinate::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(1117)) double IAcadDimOrdinate::GetArrowheadSize ( );
__declspec(implementation_key(1118)) void IAcadDimOrdinate::PutArrowheadSize ( double size );
__declspec(implementation_key(1119)) double IAcadDimOrdinate::GetMeasurement ( );
__declspec(implementation_key(1120)) VARIANT_BOOL IAcadDimOrdinate::GetExtLineFixedLenSuppress ( );
__declspec(implementation_key(1121)) void IAcadDimOrdinate::PutExtLineFixedLenSuppress ( VARIANT_BOOL bFixedLen );
__declspec(implementation_key(1122)) double IAcadDimOrdinate::GetExtLineFixedLen ( );
__declspec(implementation_key(1123)) void IAcadDimOrdinate::PutExtLineFixedLen ( double FixedLen );
__declspec(implementation_key(1124)) _bstr_t IAcadDimOrdinate::GetSubUnitsSuffix ( );
__declspec(implementation_key(1125)) void IAcadDimOrdinate::PutSubUnitsSuffix ( _bstr_t suffix );
__declspec(implementation_key(1126)) double IAcadDimOrdinate::GetSubUnitsFactor ( );
__declspec(implementation_key(1127)) void IAcadDimOrdinate::PutSubUnitsFactor ( double factor );
__declspec(implementation_key(1128)) _bstr_t IAcadDimOrdinate::GetAltSubUnitsSuffix ( );
__declspec(implementation_key(1129)) void IAcadDimOrdinate::PutAltSubUnitsSuffix ( _bstr_t suffix );
__declspec(implementation_key(1130)) double IAcadDimOrdinate::GetAltSubUnitsFactor ( );
__declspec(implementation_key(1131)) void IAcadDimOrdinate::PutAltSubUnitsFactor ( double factor );
__declspec(implementation_key(1132)) void IAcadDimRadial::PutLeaderLength ( double _arg1 );
__declspec(implementation_key(1133)) VARIANT_BOOL IAcadDimRadial::GetAltUnits ( );
__declspec(implementation_key(1134)) void IAcadDimRadial::PutAltUnits ( VARIANT_BOOL bAlternate );
__declspec(implementation_key(1135)) enum AcDimPrecision IAcadDimRadial::GetAltUnitsPrecision ( );
__declspec(implementation_key(1136)) void IAcadDimRadial::PutAltUnitsPrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(1137)) ACAD_NOUNITS IAcadDimRadial::GetAltUnitsScale ( );
__declspec(implementation_key(1138)) void IAcadDimRadial::PutAltUnitsScale ( ACAD_NOUNITS scale );
__declspec(implementation_key(1139)) double IAcadDimRadial::GetAltRoundDistance ( );
__declspec(implementation_key(1140)) void IAcadDimRadial::PutAltRoundDistance ( double Distance );
__declspec(implementation_key(1141)) enum AcDimPrecision IAcadDimRadial::GetAltTolerancePrecision ( );
__declspec(implementation_key(1142)) void IAcadDimRadial::PutAltTolerancePrecision ( enum AcDimPrecision Distance );
__declspec(implementation_key(1143)) enum AcDimUnits IAcadDimRadial::GetAltUnitsFormat ( );
__declspec(implementation_key(1144)) void IAcadDimRadial::PutAltUnitsFormat ( enum AcDimUnits Units );
__declspec(implementation_key(1145)) _bstr_t IAcadDimRadial::GetAltTextPrefix ( );
__declspec(implementation_key(1146)) void IAcadDimRadial::PutAltTextPrefix ( _bstr_t prefix );
__declspec(implementation_key(1147)) _bstr_t IAcadDimRadial::GetAltTextSuffix ( );
__declspec(implementation_key(1148)) void IAcadDimRadial::PutAltTextSuffix ( _bstr_t prefix );
__declspec(implementation_key(1149)) enum AcDimCenterType IAcadDimRadial::GetCenterType ( );
__declspec(implementation_key(1150)) void IAcadDimRadial::PutCenterType ( enum AcDimCenterType Type );
__declspec(implementation_key(1151)) double IAcadDimRadial::GetCenterMarkSize ( );
__declspec(implementation_key(1152)) void IAcadDimRadial::PutCenterMarkSize ( double Type );
__declspec(implementation_key(1153)) ACAD_COLOR IAcadDimRadial::GetDimensionLineColor ( );
__declspec(implementation_key(1154)) void IAcadDimRadial::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(1155)) enum AcDimPrecision IAcadDimRadial::GetPrimaryUnitsPrecision ( );
__declspec(implementation_key(1156)) void IAcadDimRadial::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec );
__declspec(implementation_key(1157)) enum AcDimFractionType IAcadDimRadial::GetFractionFormat ( );
__declspec(implementation_key(1158)) void IAcadDimRadial::PutFractionFormat ( enum AcDimFractionType Type );
__declspec(implementation_key(1159)) enum AcDimFit IAcadDimRadial::GetFit ( );
__declspec(implementation_key(1160)) void IAcadDimRadial::PutFit ( enum AcDimFit fittype );
__declspec(implementation_key(1161)) ACAD_NOUNITS IAcadDimRadial::GetLinearScaleFactor ( );
__declspec(implementation_key(1162)) void IAcadDimRadial::PutLinearScaleFactor ( ACAD_NOUNITS Type );
__declspec(implementation_key(1163)) enum AcDimLUnits IAcadDimRadial::GetUnitsFormat ( );
__declspec(implementation_key(1164)) void IAcadDimRadial::PutUnitsFormat ( enum AcDimLUnits format );
__declspec(implementation_key(1165)) double IAcadDimRadial::GetRoundDistance ( );
__declspec(implementation_key(1166)) void IAcadDimRadial::PutRoundDistance ( double Distance );
__declspec(implementation_key(1167)) VARIANT_BOOL IAcadDimRadial::GetDimLineSuppress ( );
__declspec(implementation_key(1168)) void IAcadDimRadial::PutDimLineSuppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(1169)) VARIANT_BOOL IAcadDimRadial::GetTextInsideAlign ( );
__declspec(implementation_key(1170)) void IAcadDimRadial::PutTextInsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(1171)) VARIANT_BOOL IAcadDimRadial::GetTextInside ( );
__declspec(implementation_key(1172)) void IAcadDimRadial::PutTextInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(1173)) VARIANT_BOOL IAcadDimRadial::GetForceLineInside ( );
__declspec(implementation_key(1174)) void IAcadDimRadial::PutForceLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(1175)) VARIANT_BOOL IAcadDimRadial::GetTextOutsideAlign ( );
__declspec(implementation_key(1176)) void IAcadDimRadial::PutTextOutsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(1177)) VARIANT_BOOL IAcadDimRadial::GetAltSuppressLeadingZeros ( );
__declspec(implementation_key(1178)) void IAcadDimRadial::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(1179)) VARIANT_BOOL IAcadDimRadial::GetAltSuppressTrailingZeros ( );
__declspec(implementation_key(1180)) void IAcadDimRadial::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(1181)) VARIANT_BOOL IAcadDimRadial::GetAltSuppressZeroFeet ( );
__declspec(implementation_key(1182)) void IAcadDimRadial::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(1183)) VARIANT_BOOL IAcadDimRadial::GetAltSuppressZeroInches ( );
__declspec(implementation_key(1184)) void IAcadDimRadial::PutAltSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(1185)) VARIANT_BOOL IAcadDimRadial::GetAltToleranceSuppressLeadingZeros ( );
__declspec(implementation_key(1186)) void IAcadDimRadial::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(1187)) VARIANT_BOOL IAcadDimRadial::GetAltToleranceSuppressTrailingZeros ( );
__declspec(implementation_key(1188)) void IAcadDimRadial::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(1189)) VARIANT_BOOL IAcadDimRadial::GetAltToleranceSuppressZeroFeet ( );
__declspec(implementation_key(1190)) void IAcadDimRadial::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(1191)) VARIANT_BOOL IAcadDimRadial::GetAltToleranceSuppressZeroInches ( );
__declspec(implementation_key(1192)) void IAcadDimRadial::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(1193)) VARIANT_BOOL IAcadDimRadial::GetSuppressZeroFeet ( );
__declspec(implementation_key(1194)) void IAcadDimRadial::PutSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(1195)) VARIANT_BOOL IAcadDimRadial::GetSuppressZeroInches ( );
__declspec(implementation_key(1196)) void IAcadDimRadial::PutSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(1197)) VARIANT_BOOL IAcadDimRadial::GetToleranceSuppressZeroFeet ( );
__declspec(implementation_key(1198)) void IAcadDimRadial::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(1199)) VARIANT_BOOL IAcadDimRadial::GetToleranceSuppressZeroInches ( );
__declspec(implementation_key(1200)) void IAcadDimRadial::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(1201)) ACAD_LWEIGHT IAcadDimRadial::GetDimensionLineWeight ( );
__declspec(implementation_key(1202)) void IAcadDimRadial::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(1203)) double IAcadDimRadial::GetArrowheadSize ( );
__declspec(implementation_key(1204)) void IAcadDimRadial::PutArrowheadSize ( double size );
__declspec(implementation_key(1205)) enum AcDimArrowheadType IAcadDimRadial::GetArrowheadType ( );
__declspec(implementation_key(1206)) void IAcadDimRadial::PutArrowheadType ( enum AcDimArrowheadType Type );
__declspec(implementation_key(1207)) double IAcadDimRadial::GetMeasurement ( );
__declspec(implementation_key(1208)) _bstr_t IAcadDimRadial::GetArrowheadBlock ( );
__declspec(implementation_key(1209)) void IAcadDimRadial::PutArrowheadBlock ( _bstr_t BlockName );
__declspec(implementation_key(1210)) _bstr_t IAcadDimRadial::GetDimensionLinetype ( );
__declspec(implementation_key(1211)) void IAcadDimRadial::PutDimensionLinetype ( _bstr_t Linetype );
__declspec(implementation_key(1212)) VARIANT_BOOL IAcadDimRadial::GetDimConstrForm ( );
__declspec(implementation_key(1213)) void IAcadDimRadial::PutDimConstrForm ( VARIANT_BOOL bIsDynamic );
__declspec(implementation_key(1214)) VARIANT_BOOL IAcadDimRadial::GetDimConstrReference ( );
__declspec(implementation_key(1215)) void IAcadDimRadial::PutDimConstrReference ( VARIANT_BOOL bIsReference );
__declspec(implementation_key(1216)) _bstr_t IAcadDimRadial::GetDimConstrName ( );
__declspec(implementation_key(1217)) void IAcadDimRadial::PutDimConstrName ( _bstr_t bstrName );
__declspec(implementation_key(1218)) _bstr_t IAcadDimRadial::GetDimConstrExpression ( );
__declspec(implementation_key(1219)) void IAcadDimRadial::PutDimConstrExpression ( _bstr_t bstrExpression );
__declspec(implementation_key(1220)) _bstr_t IAcadDimRadial::GetDimConstrValue ( );
__declspec(implementation_key(1221)) void IAcadDimRadial::PutDimConstrValue ( _bstr_t Value );
__declspec(implementation_key(1222)) _bstr_t IAcadDimRadial::GetDimConstrDesc ( );
__declspec(implementation_key(1223)) void IAcadDimRadial::PutDimConstrDesc ( _bstr_t bstrDescription );
__declspec(implementation_key(1224)) _variant_t IAcadEllipse::GetStartPoint ( );
__declspec(implementation_key(1225)) _variant_t IAcadEllipse::GetCenter ( );
__declspec(implementation_key(1226)) void IAcadEllipse::PutCenter ( const _variant_t & Center );
__declspec(implementation_key(1227)) _variant_t IAcadEllipse::GetEndPoint ( );
__declspec(implementation_key(1228)) double IAcadEllipse::GetMajorRadius ( );
__declspec(implementation_key(1229)) void IAcadEllipse::PutMajorRadius ( double MajorRadius );
__declspec(implementation_key(1230)) double IAcadEllipse::GetMinorRadius ( );
__declspec(implementation_key(1231)) void IAcadEllipse::PutMinorRadius ( double MinorRadius );
__declspec(implementation_key(1232)) double IAcadEllipse::GetRadiusRatio ( );
__declspec(implementation_key(1233)) void IAcadEllipse::PutRadiusRatio ( double RadiusRatio );
__declspec(implementation_key(1234)) ACAD_ANGLE IAcadEllipse::GetStartAngle ( );
__declspec(implementation_key(1235)) void IAcadEllipse::PutStartAngle ( ACAD_ANGLE StartAngle );
__declspec(implementation_key(1236)) ACAD_ANGLE IAcadEllipse::GetEndAngle ( );
__declspec(implementation_key(1237)) void IAcadEllipse::PutEndAngle ( ACAD_ANGLE EndAngle );
__declspec(implementation_key(1238)) double IAcadEllipse::GetStartParameter ( );
__declspec(implementation_key(1239)) void IAcadEllipse::PutStartParameter ( double StartParameter );
__declspec(implementation_key(1240)) double IAcadEllipse::GetEndParameter ( );
__declspec(implementation_key(1241)) void IAcadEllipse::PutEndParameter ( double EndParameter );
__declspec(implementation_key(1242)) _variant_t IAcadEllipse::GetMajorAxis ( );
__declspec(implementation_key(1243)) void IAcadEllipse::PutMajorAxis ( const _variant_t & MajorAxis );
__declspec(implementation_key(1244)) _variant_t IAcadEllipse::GetMinorAxis ( );
__declspec(implementation_key(1245)) _variant_t IAcadEllipse::GetNormal ( );
__declspec(implementation_key(1246)) void IAcadEllipse::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1247)) double IAcadEllipse::GetArea ( );
__declspec(implementation_key(1248)) _variant_t IAcadEllipse::Offset ( double Distance );
__declspec(implementation_key(1249)) _variant_t IAcadLeader::GetCoordinates ( );
__declspec(implementation_key(1250)) void IAcadLeader::PutCoordinates ( const _variant_t & Coordinates );
__declspec(implementation_key(1251)) _variant_t IAcadLeader::GetNormal ( );
__declspec(implementation_key(1252)) _bstr_t IAcadLeader::GetStyleName ( );
__declspec(implementation_key(1253)) void IAcadLeader::PutStyleName ( _bstr_t bstrName );
__declspec(implementation_key(1254)) enum AcLeaderType IAcadLeader::GetType ( );
__declspec(implementation_key(1255)) void IAcadLeader::PutType ( enum AcLeaderType Type );
__declspec(implementation_key(1256)) HRESULT IAcadLeader::Evaluate ( );
__declspec(implementation_key(1257)) _variant_t IAcadLeader::GetCoordinate ( int Index );
__declspec(implementation_key(1258)) void IAcadLeader::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(1259)) IAcadEntityPtr IAcadLeader::GetAnnotation ( );
__declspec(implementation_key(1260)) void IAcadLeader::PutAnnotation ( struct IAcadEntity * pVal );
__declspec(implementation_key(1261)) double IAcadLeader::GetArrowheadSize ( );
__declspec(implementation_key(1262)) void IAcadLeader::PutArrowheadSize ( double size );
__declspec(implementation_key(1263)) enum AcDimArrowheadType IAcadLeader::GetArrowheadType ( );
__declspec(implementation_key(1264)) void IAcadLeader::PutArrowheadType ( enum AcDimArrowheadType Type );
__declspec(implementation_key(1265)) ACAD_COLOR IAcadLeader::GetDimensionLineColor ( );
__declspec(implementation_key(1266)) void IAcadLeader::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(1267)) ACAD_LWEIGHT IAcadLeader::GetDimensionLineWeight ( );
__declspec(implementation_key(1268)) void IAcadLeader::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(1269)) ACAD_NOUNITS IAcadLeader::GetScaleFactor ( );
__declspec(implementation_key(1270)) void IAcadLeader::PutScaleFactor ( ACAD_NOUNITS factor );
__declspec(implementation_key(1271)) enum AcDimVerticalJustification IAcadLeader::GetVerticalTextPosition ( );
__declspec(implementation_key(1272)) void IAcadLeader::PutVerticalTextPosition ( enum AcDimVerticalJustification Type );
__declspec(implementation_key(1273)) double IAcadLeader::GetTextGap ( );
__declspec(implementation_key(1274)) void IAcadLeader::PutTextGap ( double Offset );
__declspec(implementation_key(1275)) _bstr_t IAcadLeader::GetArrowheadBlock ( );
__declspec(implementation_key(1276)) void IAcadLeader::PutArrowheadBlock ( _bstr_t BlockName );
__declspec(implementation_key(1277)) _bstr_t IAcadMText::GetTextString ( );
__declspec(implementation_key(1278)) void IAcadMText::PutTextString ( _bstr_t bstrText );
__declspec(implementation_key(1279)) _bstr_t IAcadMText::GetStyleName ( );
__declspec(implementation_key(1280)) void IAcadMText::PutStyleName ( _bstr_t bstrName );
__declspec(implementation_key(1281)) enum AcAttachmentPoint IAcadMText::GetAttachmentPoint ( );
__declspec(implementation_key(1282)) void IAcadMText::PutAttachmentPoint ( enum AcAttachmentPoint attPoint );
__declspec(implementation_key(1283)) enum AcDrawingDirection IAcadMText::GetDrawingDirection ( );
__declspec(implementation_key(1284)) void IAcadMText::PutDrawingDirection ( enum AcDrawingDirection drawDir );
__declspec(implementation_key(1285)) double IAcadMText::GetWidth ( );
__declspec(implementation_key(1286)) void IAcadMText::PutWidth ( double Width );
__declspec(implementation_key(1287)) double IAcadMText::GetHeight ( );
__declspec(implementation_key(1288)) void IAcadMText::PutHeight ( double Height );
__declspec(implementation_key(1289)) ACAD_ANGLE IAcadMText::GetRotation ( );
__declspec(implementation_key(1290)) void IAcadMText::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(1291)) _variant_t IAcadMText::GetInsertionPoint ( );
__declspec(implementation_key(1292)) void IAcadMText::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(1293)) _variant_t IAcadMText::GetNormal ( );
__declspec(implementation_key(1294)) void IAcadMText::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1295)) double IAcadMText::GetLineSpacingFactor ( );
__declspec(implementation_key(1296)) void IAcadMText::PutLineSpacingFactor ( double factor );
__declspec(implementation_key(1297)) enum AcLineSpacingStyle IAcadMText::GetLineSpacingStyle ( );
__declspec(implementation_key(1298)) void IAcadMText::PutLineSpacingStyle ( enum AcLineSpacingStyle style );
__declspec(implementation_key(1299)) double IAcadMText::GetLineSpacingDistance ( );
__declspec(implementation_key(1300)) void IAcadMText::PutLineSpacingDistance ( double Value );
__declspec(implementation_key(1301)) VARIANT_BOOL IAcadMText::GetBackgroundFill ( );
__declspec(implementation_key(1302)) void IAcadMText::PutBackgroundFill ( VARIANT_BOOL bUseBackgroundFill );
__declspec(implementation_key(1303)) _bstr_t IAcadMText::FieldCode ( );
__declspec(implementation_key(1304)) _variant_t IAcadPoint::GetCoordinates ( );
__declspec(implementation_key(1305)) void IAcadPoint::PutCoordinates ( const _variant_t & Coordinates );
__declspec(implementation_key(1306)) _variant_t IAcadPoint::GetNormal ( );
__declspec(implementation_key(1307)) void IAcadPoint::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1308)) double IAcadPoint::GetThickness ( );
__declspec(implementation_key(1309)) void IAcadPoint::PutThickness ( double Thickness );
__declspec(implementation_key(1310)) _variant_t IAcadLWPolyline::GetCoordinates ( );
__declspec(implementation_key(1311)) void IAcadLWPolyline::PutCoordinates ( const _variant_t & Coordinates );
__declspec(implementation_key(1312)) _variant_t IAcadLWPolyline::GetNormal ( );
__declspec(implementation_key(1313)) void IAcadLWPolyline::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1314)) double IAcadLWPolyline::GetThickness ( );
__declspec(implementation_key(1315)) void IAcadLWPolyline::PutThickness ( double Thickness );
__declspec(implementation_key(1316)) HRESULT IAcadLWPolyline::AddVertex ( int Index, const _variant_t & vertex );
__declspec(implementation_key(1317)) _variant_t IAcadLWPolyline::Explode ( );
__declspec(implementation_key(1318)) double IAcadLWPolyline::GetBulge ( int Index );
__declspec(implementation_key(1319)) HRESULT IAcadLWPolyline::SetBulge ( int Index, double bulge );
__declspec(implementation_key(1320)) HRESULT IAcadLWPolyline::GetWidth ( int Index, double * StartWidth, double * EndWidth );
__declspec(implementation_key(1321)) HRESULT IAcadLWPolyline::SetWidth ( int Index, double StartWidth, double EndWidth );
__declspec(implementation_key(1322)) double IAcadLWPolyline::GetConstantWidth ( );
__declspec(implementation_key(1323)) void IAcadLWPolyline::PutConstantWidth ( double Width );
__declspec(implementation_key(1324)) _variant_t IAcadLWPolyline::Offset ( double Distance );
__declspec(implementation_key(1325)) double IAcadLWPolyline::GetElevation ( );
__declspec(implementation_key(1326)) void IAcadLWPolyline::PutElevation ( double Elevation );
__declspec(implementation_key(1327)) double IAcadLWPolyline::GetArea ( );
__declspec(implementation_key(1328)) _variant_t IAcadLWPolyline::GetCoordinate ( int Index );
__declspec(implementation_key(1329)) void IAcadLWPolyline::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(1330)) VARIANT_BOOL IAcadLWPolyline::GetClosed ( );
__declspec(implementation_key(1331)) void IAcadLWPolyline::PutClosed ( VARIANT_BOOL fClose );
__declspec(implementation_key(1332)) VARIANT_BOOL IAcadLWPolyline::GetLinetypeGeneration ( );
__declspec(implementation_key(1333)) void IAcadLWPolyline::PutLinetypeGeneration ( VARIANT_BOOL bLinetypeGen );
__declspec(implementation_key(1334)) double IAcadLWPolyline::GetLength ( );
__declspec(implementation_key(1335)) _variant_t IAcadPolyline::GetCoordinates ( );
__declspec(implementation_key(1336)) void IAcadPolyline::PutCoordinates ( const _variant_t & Coordinates );
__declspec(implementation_key(1337)) _variant_t IAcadPolyline::GetNormal ( );
__declspec(implementation_key(1338)) void IAcadPolyline::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1339)) double IAcadPolyline::GetThickness ( );
__declspec(implementation_key(1340)) void IAcadPolyline::PutThickness ( double Thickness );
__declspec(implementation_key(1341)) HRESULT IAcadPolyline::AppendVertex ( const _variant_t & vertex );
__declspec(implementation_key(1342)) _variant_t IAcadPolyline::Explode ( );
__declspec(implementation_key(1343)) double IAcadPolyline::GetBulge ( int Index );
__declspec(implementation_key(1344)) HRESULT IAcadPolyline::SetBulge ( int Index, double bulge );
__declspec(implementation_key(1345)) HRESULT IAcadPolyline::GetWidth ( int Index, double * StartWidth, double * EndWidth );
__declspec(implementation_key(1346)) HRESULT IAcadPolyline::SetWidth ( int Index, double StartWidth, double EndWidth );
__declspec(implementation_key(1347)) double IAcadPolyline::GetConstantWidth ( );
__declspec(implementation_key(1348)) void IAcadPolyline::PutConstantWidth ( double Width );
__declspec(implementation_key(1349)) _variant_t IAcadPolyline::Offset ( double Distance );
__declspec(implementation_key(1350)) double IAcadPolyline::GetElevation ( );
__declspec(implementation_key(1351)) void IAcadPolyline::PutElevation ( double Elevation );
__declspec(implementation_key(1352)) enum AcPolylineType IAcadPolyline::GetType ( );
__declspec(implementation_key(1353)) void IAcadPolyline::PutType ( enum AcPolylineType Type );
__declspec(implementation_key(1354)) VARIANT_BOOL IAcadPolyline::GetClosed ( );
__declspec(implementation_key(1355)) void IAcadPolyline::PutClosed ( VARIANT_BOOL fClose );
__declspec(implementation_key(1356)) VARIANT_BOOL IAcadPolyline::GetLinetypeGeneration ( );
__declspec(implementation_key(1357)) void IAcadPolyline::PutLinetypeGeneration ( VARIANT_BOOL bLinetypeGen );
__declspec(implementation_key(1358)) double IAcadPolyline::GetArea ( );
__declspec(implementation_key(1359)) _variant_t IAcadPolyline::GetCoordinate ( int Index );
__declspec(implementation_key(1360)) void IAcadPolyline::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(1361)) double IAcadPolyline::GetLength ( );
__declspec(implementation_key(1362)) _variant_t IAcadRay::GetBasePoint ( );
__declspec(implementation_key(1363)) void IAcadRay::PutBasePoint ( const _variant_t & BasePoint );
__declspec(implementation_key(1364)) _variant_t IAcadRay::GetSecondPoint ( );
__declspec(implementation_key(1365)) void IAcadRay::PutSecondPoint ( const _variant_t & SecondPoint );
__declspec(implementation_key(1366)) _variant_t IAcadRay::GetDirectionVector ( );
__declspec(implementation_key(1367)) void IAcadRay::PutDirectionVector ( const _variant_t & dirVector );
__declspec(implementation_key(1368)) _variant_t IAcadShape::GetInsertionPoint ( );
__declspec(implementation_key(1369)) void IAcadShape::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(1370)) _bstr_t IAcadShape::GetName ( );
__declspec(implementation_key(1371)) void IAcadShape::PutName ( _bstr_t bstrName );
__declspec(implementation_key(1372)) double IAcadShape::GetHeight ( );
__declspec(implementation_key(1373)) void IAcadShape::PutHeight ( double Height );
__declspec(implementation_key(1374)) ACAD_ANGLE IAcadShape::GetRotation ( );
__declspec(implementation_key(1375)) void IAcadShape::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(1376)) ACAD_NOUNITS IAcadShape::GetScaleFactor ( );
__declspec(implementation_key(1377)) void IAcadShape::PutScaleFactor ( ACAD_NOUNITS scalFactor );
__declspec(implementation_key(1378)) ACAD_ANGLE IAcadShape::GetObliqueAngle ( );
__declspec(implementation_key(1379)) void IAcadShape::PutObliqueAngle ( ACAD_ANGLE obliAngle );
__declspec(implementation_key(1380)) _variant_t IAcadShape::GetNormal ( );
__declspec(implementation_key(1381)) void IAcadShape::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1382)) double IAcadShape::GetThickness ( );
__declspec(implementation_key(1383)) void IAcadShape::PutThickness ( double Thickness );
__declspec(implementation_key(1384)) _variant_t IAcadSolid::GetCoordinates ( );
__declspec(implementation_key(1385)) void IAcadSolid::PutCoordinates ( const _variant_t & corners );
__declspec(implementation_key(1386)) _variant_t IAcadSolid::GetNormal ( );
__declspec(implementation_key(1387)) void IAcadSolid::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1388)) double IAcadSolid::GetThickness ( );
__declspec(implementation_key(1389)) void IAcadSolid::PutThickness ( double Thickness );
__declspec(implementation_key(1390)) _variant_t IAcadSolid::GetCoordinate ( int Index );
__declspec(implementation_key(1391)) void IAcadSolid::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(1392)) long IAcadSpline::GetNumberOfControlPoints ( );
__declspec(implementation_key(1393)) _variant_t IAcadSpline::GetControlPoints ( );
__declspec(implementation_key(1394)) void IAcadSpline::PutControlPoints ( const _variant_t & controlPoint );
__declspec(implementation_key(1395)) long IAcadSpline::GetNumberOfFitPoints ( );
__declspec(implementation_key(1396)) _variant_t IAcadSpline::GetFitPoints ( );
__declspec(implementation_key(1397)) void IAcadSpline::PutFitPoints ( const _variant_t & fitPoint );
__declspec(implementation_key(1398)) long IAcadSpline::GetDegree ( );
__declspec(implementation_key(1399)) VARIANT_BOOL IAcadSpline::GetClosed ( );
__declspec(implementation_key(1400)) VARIANT_BOOL IAcadSpline::GetIsPlanar ( );
__declspec(implementation_key(1401)) VARIANT_BOOL IAcadSpline::GetIsRational ( );
__declspec(implementation_key(1402)) VARIANT_BOOL IAcadSpline::GetIsPeriodic ( );
__declspec(implementation_key(1403)) _variant_t IAcadSpline::GetStartTangent ( );
__declspec(implementation_key(1404)) void IAcadSpline::PutStartTangent ( const _variant_t & StartTangent );
__declspec(implementation_key(1405)) _variant_t IAcadSpline::GetEndTangent ( );
__declspec(implementation_key(1406)) void IAcadSpline::PutEndTangent ( const _variant_t & EndTangent );
__declspec(implementation_key(1407)) double IAcadSpline::GetFitTolerance ( );
__declspec(implementation_key(1408)) void IAcadSpline::PutFitTolerance ( double fitTol );
__declspec(implementation_key(1409)) double IAcadSpline::GetArea ( );
__declspec(implementation_key(1410)) HRESULT IAcadSpline::SetControlPoint ( int Index, const _variant_t & controlPoint );
__declspec(implementation_key(1411)) _variant_t IAcadSpline::GetControlPoint ( int Index );
__declspec(implementation_key(1412)) HRESULT IAcadSpline::SetFitPoint ( int Index, const _variant_t & fitPoint );
__declspec(implementation_key(1413)) _variant_t IAcadSpline::GetFitPoint ( int Index );
__declspec(implementation_key(1414)) HRESULT IAcadSpline::SetWeight ( int Index, double weight );
__declspec(implementation_key(1415)) double IAcadSpline::GetWeight ( int Index );
__declspec(implementation_key(1416)) HRESULT IAcadSpline::AddFitPoint ( int Index, const _variant_t & fitPoint );
__declspec(implementation_key(1417)) HRESULT IAcadSpline::DeleteFitPoint ( int Index );
__declspec(implementation_key(1418)) HRESULT IAcadSpline::ElevateOrder ( int Order );
__declspec(implementation_key(1419)) _variant_t IAcadSpline::Offset ( double Distance );
__declspec(implementation_key(1420)) HRESULT IAcadSpline::PurgeFitData ( );
__declspec(implementation_key(1421)) HRESULT IAcadSpline::Reverse ( );
__declspec(implementation_key(1422)) _variant_t IAcadSpline::GetKnots ( );
__declspec(implementation_key(1423)) void IAcadSpline::PutKnots ( const _variant_t & KnotValues );
__declspec(implementation_key(1424)) _variant_t IAcadSpline::GetWeights ( );
__declspec(implementation_key(1425)) void IAcadSpline::PutWeights ( const _variant_t & WeightValues );
__declspec(implementation_key(1426)) enum AcSplineKnotParameterizationType IAcadSpline::GetKnotParameterization ( );
__declspec(implementation_key(1427)) void IAcadSpline::PutKnotParameterization ( enum AcSplineKnotParameterizationType knotParamVal );
__declspec(implementation_key(1428)) enum AcSplineFrameType IAcadSpline::GetSplineFrame ( );
__declspec(implementation_key(1429)) void IAcadSpline::PutSplineFrame ( enum AcSplineFrameType show );
__declspec(implementation_key(1430)) enum AcSplineMethodType IAcadSpline::GetSplineMethod ( );
__declspec(implementation_key(1431)) void IAcadSpline::PutSplineMethod ( enum AcSplineMethodType method );
__declspec(implementation_key(1432)) void IAcadSpline::PutDegree2 ( long Degree );
__declspec(implementation_key(1433)) long IAcadSpline::GetDegree2 ( );
__declspec(implementation_key(1434)) void IAcadSpline::PutClosed2 ( VARIANT_BOOL fClose );
__declspec(implementation_key(1435)) VARIANT_BOOL IAcadSpline::GetClosed2 ( );
__declspec(implementation_key(1436)) _bstr_t IAcadText::GetTextString ( );
__declspec(implementation_key(1437)) void IAcadText::PutTextString ( _bstr_t bstrText );
__declspec(implementation_key(1438)) _bstr_t IAcadText::GetStyleName ( );
__declspec(implementation_key(1439)) void IAcadText::PutStyleName ( _bstr_t bstrName );
__declspec(implementation_key(1440)) enum AcAlignment IAcadText::GetAlignment ( );
__declspec(implementation_key(1441)) void IAcadText::PutAlignment ( enum AcAlignment align );
__declspec(implementation_key(1442)) enum AcHorizontalAlignment IAcadText::GetHorizontalAlignment ( );
__declspec(implementation_key(1443)) void IAcadText::PutHorizontalAlignment ( enum AcHorizontalAlignment horizAlign );
__declspec(implementation_key(1444)) enum AcVerticalAlignment IAcadText::GetVerticalAlignment ( );
__declspec(implementation_key(1445)) void IAcadText::PutVerticalAlignment ( enum AcVerticalAlignment vertiAlign );
__declspec(implementation_key(1446)) double IAcadText::GetHeight ( );
__declspec(implementation_key(1447)) void IAcadText::PutHeight ( double Height );
__declspec(implementation_key(1448)) ACAD_ANGLE IAcadText::GetRotation ( );
__declspec(implementation_key(1449)) void IAcadText::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(1450)) ACAD_NOUNITS IAcadText::GetScaleFactor ( );
__declspec(implementation_key(1451)) void IAcadText::PutScaleFactor ( ACAD_NOUNITS scalFactor );
__declspec(implementation_key(1452)) ACAD_ANGLE IAcadText::GetObliqueAngle ( );
__declspec(implementation_key(1453)) void IAcadText::PutObliqueAngle ( ACAD_ANGLE obliAngle );
__declspec(implementation_key(1454)) _variant_t IAcadText::GetTextAlignmentPoint ( );
__declspec(implementation_key(1455)) void IAcadText::PutTextAlignmentPoint ( const _variant_t & alignPoint );
__declspec(implementation_key(1456)) _variant_t IAcadText::GetInsertionPoint ( );
__declspec(implementation_key(1457)) void IAcadText::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(1458)) _variant_t IAcadText::GetNormal ( );
__declspec(implementation_key(1459)) void IAcadText::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1460)) long IAcadText::GetTextGenerationFlag ( );
__declspec(implementation_key(1461)) void IAcadText::PutTextGenerationFlag ( long textGenFlag );
__declspec(implementation_key(1462)) double IAcadText::GetThickness ( );
__declspec(implementation_key(1463)) void IAcadText::PutThickness ( double Thickness );
__declspec(implementation_key(1464)) VARIANT_BOOL IAcadText::GetUpsideDown ( );
__declspec(implementation_key(1465)) void IAcadText::PutUpsideDown ( VARIANT_BOOL UpsideDown );
__declspec(implementation_key(1466)) VARIANT_BOOL IAcadText::GetBackward ( );
__declspec(implementation_key(1467)) void IAcadText::PutBackward ( VARIANT_BOOL Backward );
__declspec(implementation_key(1468)) _bstr_t IAcadText::FieldCode ( );
__declspec(implementation_key(1469)) _variant_t IAcadTolerance::GetDirectionVector ( );
__declspec(implementation_key(1470)) void IAcadTolerance::PutDirectionVector ( const _variant_t & dirVector );
__declspec(implementation_key(1471)) _variant_t IAcadTolerance::GetInsertionPoint ( );
__declspec(implementation_key(1472)) void IAcadTolerance::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(1473)) _variant_t IAcadTolerance::GetNormal ( );
__declspec(implementation_key(1474)) void IAcadTolerance::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1475)) _bstr_t IAcadTolerance::GetStyleName ( );
__declspec(implementation_key(1476)) void IAcadTolerance::PutStyleName ( _bstr_t bstrName );
__declspec(implementation_key(1477)) ACAD_COLOR IAcadTolerance::GetTextColor ( );
__declspec(implementation_key(1478)) void IAcadTolerance::PutTextColor ( ACAD_COLOR color );
__declspec(implementation_key(1479)) _bstr_t IAcadTolerance::GetTextString ( );
__declspec(implementation_key(1480)) void IAcadTolerance::PutTextString ( _bstr_t bstrText );
__declspec(implementation_key(1481)) _bstr_t IAcadTolerance::GetTextStyle ( );
__declspec(implementation_key(1482)) void IAcadTolerance::PutTextStyle ( _bstr_t style );
__declspec(implementation_key(1483)) double IAcadTolerance::GetTextHeight ( );
__declspec(implementation_key(1484)) void IAcadTolerance::PutTextHeight ( double Height );
__declspec(implementation_key(1485)) ACAD_NOUNITS IAcadTolerance::GetScaleFactor ( );
__declspec(implementation_key(1486)) void IAcadTolerance::PutScaleFactor ( ACAD_NOUNITS factor );
__declspec(implementation_key(1487)) ACAD_COLOR IAcadTolerance::GetDimensionLineColor ( );
__declspec(implementation_key(1488)) void IAcadTolerance::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(1489)) _variant_t IAcadTrace::GetCoordinates ( );
__declspec(implementation_key(1490)) void IAcadTrace::PutCoordinates ( const _variant_t & corners );
__declspec(implementation_key(1491)) _variant_t IAcadTrace::GetNormal ( );
__declspec(implementation_key(1492)) void IAcadTrace::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1493)) double IAcadTrace::GetThickness ( );
__declspec(implementation_key(1494)) void IAcadTrace::PutThickness ( double Thickness );
__declspec(implementation_key(1495)) _variant_t IAcadTrace::GetCoordinate ( int Index );
__declspec(implementation_key(1496)) void IAcadTrace::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(1497)) _variant_t IAcadXline::GetBasePoint ( );
__declspec(implementation_key(1498)) void IAcadXline::PutBasePoint ( const _variant_t & BasePoint );
__declspec(implementation_key(1499)) _variant_t IAcadXline::GetSecondPoint ( );
__declspec(implementation_key(1500)) void IAcadXline::PutSecondPoint ( const _variant_t & SecondPoint );
__declspec(implementation_key(1501)) _variant_t IAcadXline::GetDirectionVector ( );
__declspec(implementation_key(1502)) void IAcadXline::PutDirectionVector ( const _variant_t & dirVector );
__declspec(implementation_key(1503)) _variant_t IAcadXline::Offset ( double Distance );
__declspec(implementation_key(1504)) _variant_t IAcadBlockReference::GetInsertionPoint ( );
__declspec(implementation_key(1505)) void IAcadBlockReference::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(1506)) _bstr_t IAcadBlockReference::GetName ( );
__declspec(implementation_key(1507)) void IAcadBlockReference::PutName ( _bstr_t bstrName );
__declspec(implementation_key(1508)) _variant_t IAcadBlockReference::GetNormal ( );
__declspec(implementation_key(1509)) void IAcadBlockReference::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1510)) ACAD_ANGLE IAcadBlockReference::GetRotation ( );
__declspec(implementation_key(1511)) void IAcadBlockReference::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(1512)) ACAD_NOUNITS IAcadBlockReference::GetXScaleFactor ( );
__declspec(implementation_key(1513)) void IAcadBlockReference::PutXScaleFactor ( ACAD_NOUNITS ScaleFactor );
__declspec(implementation_key(1514)) ACAD_NOUNITS IAcadBlockReference::GetYScaleFactor ( );
__declspec(implementation_key(1515)) void IAcadBlockReference::PutYScaleFactor ( ACAD_NOUNITS ScaleFactor );
__declspec(implementation_key(1516)) ACAD_NOUNITS IAcadBlockReference::GetZScaleFactor ( );
__declspec(implementation_key(1517)) void IAcadBlockReference::PutZScaleFactor ( ACAD_NOUNITS ScaleFactor );
__declspec(implementation_key(1518)) _variant_t IAcadBlockReference::Explode ( );
__declspec(implementation_key(1519)) _variant_t IAcadBlockReference::GetAttributes ( );
__declspec(implementation_key(1520)) _variant_t IAcadBlockReference::GetConstantAttributes ( );
__declspec(implementation_key(1521)) VARIANT_BOOL IAcadBlockReference::GetHasAttributes ( );
__declspec(implementation_key(1522)) _bstr_t IAcadBlockReference::GetEffectiveName ( );
__declspec(implementation_key(1523)) VARIANT_BOOL IAcadBlockReference::GetIsDynamicBlock ( );
__declspec(implementation_key(1524)) _variant_t IAcadBlockReference::GetDynamicBlockProperties ( );
__declspec(implementation_key(1525)) HRESULT IAcadBlockReference::ResetBlock ( );
__declspec(implementation_key(1526)) HRESULT IAcadBlockReference::ConvertToAnonymousBlock ( );
__declspec(implementation_key(1527)) HRESULT IAcadBlockReference::ConvertToStaticBlock ( _bstr_t newBlockName );
__declspec(implementation_key(1528)) ACAD_NOUNITS IAcadBlockReference::GetXEffectiveScaleFactor ( );
__declspec(implementation_key(1529)) void IAcadBlockReference::PutXEffectiveScaleFactor ( ACAD_NOUNITS ScaleFactor );
__declspec(implementation_key(1530)) ACAD_NOUNITS IAcadBlockReference::GetYEffectiveScaleFactor ( );
__declspec(implementation_key(1531)) void IAcadBlockReference::PutYEffectiveScaleFactor ( ACAD_NOUNITS ScaleFactor );
__declspec(implementation_key(1532)) ACAD_NOUNITS IAcadBlockReference::GetZEffectiveScaleFactor ( );
__declspec(implementation_key(1533)) void IAcadBlockReference::PutZEffectiveScaleFactor ( ACAD_NOUNITS ScaleFactor );
__declspec(implementation_key(1534)) _bstr_t IAcadBlockReference::GetInsUnits ( );
__declspec(implementation_key(1535)) double IAcadBlockReference::GetInsUnitsFactor ( );
__declspec(implementation_key(1536)) _variant_t IAcadHatch::GetNormal ( );
__declspec(implementation_key(1537)) void IAcadHatch::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1538)) long IAcadHatch::GetNumberOfLoops ( );
__declspec(implementation_key(1539)) enum AcPatternType IAcadHatch::GetPatternType ( );
__declspec(implementation_key(1540)) _bstr_t IAcadHatch::GetPatternName ( );
__declspec(implementation_key(1541)) ACAD_ANGLE IAcadHatch::GetPatternAngle ( );
__declspec(implementation_key(1542)) void IAcadHatch::PutPatternAngle ( ACAD_ANGLE PatternAngle );
__declspec(implementation_key(1543)) ACAD_NOUNITS IAcadHatch::GetPatternScale ( );
__declspec(implementation_key(1544)) void IAcadHatch::PutPatternScale ( ACAD_NOUNITS PatternScale );
__declspec(implementation_key(1545)) double IAcadHatch::GetPatternSpace ( );
__declspec(implementation_key(1546)) void IAcadHatch::PutPatternSpace ( double PatternSpace );
__declspec(implementation_key(1547)) enum AcISOPenWidth IAcadHatch::GetISOPenWidth ( );
__declspec(implementation_key(1548)) void IAcadHatch::PutISOPenWidth ( enum AcISOPenWidth penWidth );
__declspec(implementation_key(1549)) VARIANT_BOOL IAcadHatch::GetPatternDouble ( );
__declspec(implementation_key(1550)) void IAcadHatch::PutPatternDouble ( VARIANT_BOOL bDouble );
__declspec(implementation_key(1551)) double IAcadHatch::GetElevation ( );
__declspec(implementation_key(1552)) void IAcadHatch::PutElevation ( double Elevation );
__declspec(implementation_key(1553)) VARIANT_BOOL IAcadHatch::GetAssociativeHatch ( );
__declspec(implementation_key(1554)) void IAcadHatch::PutAssociativeHatch ( VARIANT_BOOL fAssoc );
__declspec(implementation_key(1555)) enum AcHatchStyle IAcadHatch::GetHatchStyle ( );
__declspec(implementation_key(1556)) void IAcadHatch::PutHatchStyle ( enum AcHatchStyle HatchStyle );
__declspec(implementation_key(1557)) HRESULT IAcadHatch::SetPattern ( int PatternType, _bstr_t PatternName );
__declspec(implementation_key(1558)) HRESULT IAcadHatch::AppendOuterLoop ( const _variant_t & ObjectArray );
__declspec(implementation_key(1559)) HRESULT IAcadHatch::AppendInnerLoop ( const _variant_t & ObjectArray );
__declspec(implementation_key(1560)) HRESULT IAcadHatch::InsertLoopAt ( int Index, enum AcLoopType LoopType, const _variant_t & ObjectArray );
__declspec(implementation_key(1561)) HRESULT IAcadHatch::GetLoopAt ( int Index, VARIANT * ObjectArray );
__declspec(implementation_key(1562)) HRESULT IAcadHatch::Evaluate ( );
__declspec(implementation_key(1563)) IAcadAcCmColorPtr IAcadHatch::GetGradientColor1 ( );
__declspec(implementation_key(1564)) void IAcadHatch::PutGradientColor1 ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(1565)) IAcadAcCmColorPtr IAcadHatch::GetGradientColor2 ( );
__declspec(implementation_key(1566)) void IAcadHatch::PutGradientColor2 ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(1567)) ACAD_ANGLE IAcadHatch::GetGradientAngle ( );
__declspec(implementation_key(1568)) void IAcadHatch::PutGradientAngle ( ACAD_ANGLE GradientAngle );
__declspec(implementation_key(1569)) VARIANT_BOOL IAcadHatch::GetGradientCentered ( );
__declspec(implementation_key(1570)) void IAcadHatch::PutGradientCentered ( VARIANT_BOOL fCentered );
__declspec(implementation_key(1571)) _bstr_t IAcadHatch::GetGradientName ( );
__declspec(implementation_key(1572)) void IAcadHatch::PutGradientName ( _bstr_t bstrName );
__declspec(implementation_key(1573)) enum AcHatchObjectType IAcadHatch::GetHatchObjectType ( );
__declspec(implementation_key(1574)) void IAcadHatch::PutHatchObjectType ( enum AcHatchObjectType hatchType );
__declspec(implementation_key(1575)) double IAcadHatch::GetArea ( );
__declspec(implementation_key(1576)) _variant_t IAcadHatch::GetOrigin ( );
__declspec(implementation_key(1577)) void IAcadHatch::PutOrigin ( const _variant_t & Origin );
__declspec(implementation_key(1578)) IAcadAcCmColorPtr IAcadHatch::GetBackgroundColor ( );
__declspec(implementation_key(1579)) void IAcadHatch::PutBackgroundColor ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(1580)) long IAcadRasterImage::GetBrightness ( );
__declspec(implementation_key(1581)) void IAcadRasterImage::PutBrightness ( long Brightness );
__declspec(implementation_key(1582)) long IAcadRasterImage::GetContrast ( );
__declspec(implementation_key(1583)) void IAcadRasterImage::PutContrast ( long Contrast );
__declspec(implementation_key(1584)) long IAcadRasterImage::GetFade ( );
__declspec(implementation_key(1585)) void IAcadRasterImage::PutFade ( long Fade );
__declspec(implementation_key(1586)) _variant_t IAcadRasterImage::GetOrigin ( );
__declspec(implementation_key(1587)) void IAcadRasterImage::PutOrigin ( const _variant_t & Origin );
__declspec(implementation_key(1588)) ACAD_ANGLE IAcadRasterImage::GetRotation ( );
__declspec(implementation_key(1589)) void IAcadRasterImage::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(1590)) double IAcadRasterImage::GetImageWidth ( );
__declspec(implementation_key(1591)) void IAcadRasterImage::PutImageWidth ( double Width );
__declspec(implementation_key(1592)) double IAcadRasterImage::GetImageHeight ( );
__declspec(implementation_key(1593)) void IAcadRasterImage::PutImageHeight ( double Height );
__declspec(implementation_key(1594)) _bstr_t IAcadRasterImage::GetName ( );
__declspec(implementation_key(1595)) void IAcadRasterImage::PutName ( _bstr_t Name );
__declspec(implementation_key(1596)) void IAcadRasterImage::PutImageFile ( _bstr_t imageFileName );
__declspec(implementation_key(1597)) _bstr_t IAcadRasterImage::GetImageFile ( );
__declspec(implementation_key(1598)) VARIANT_BOOL IAcadRasterImage::GetImageVisibility ( );
__declspec(implementation_key(1599)) void IAcadRasterImage::PutImageVisibility ( VARIANT_BOOL fVisible );
__declspec(implementation_key(1600)) VARIANT_BOOL IAcadRasterImage::GetClippingEnabled ( );
__declspec(implementation_key(1601)) void IAcadRasterImage::PutClippingEnabled ( VARIANT_BOOL kClip );
__declspec(implementation_key(1602)) VARIANT_BOOL IAcadRasterImage::Gettransparency ( );
__declspec(implementation_key(1603)) void IAcadRasterImage::Puttransparency ( VARIANT_BOOL bTransp );
__declspec(implementation_key(1604)) HRESULT IAcadRasterImage::ClipBoundary ( const _variant_t & boundry );
__declspec(implementation_key(1605)) double IAcadRasterImage::GetHeight ( );
__declspec(implementation_key(1606)) double IAcadRasterImage::GetWidth ( );
__declspec(implementation_key(1607)) VARIANT_BOOL IAcadRasterImage::GetShowRotation ( );
__declspec(implementation_key(1608)) void IAcadRasterImage::PutShowRotation ( VARIANT_BOOL bShow );
__declspec(implementation_key(1609)) ACAD_NOUNITS IAcadRasterImage::GetScaleFactor ( );
__declspec(implementation_key(1610)) void IAcadRasterImage::PutScaleFactor ( ACAD_NOUNITS ScaleFactor );
__declspec(implementation_key(1611)) _variant_t IAcadLine::GetStartPoint ( );
__declspec(implementation_key(1612)) void IAcadLine::PutStartPoint ( const _variant_t & StartPoint );
__declspec(implementation_key(1613)) _variant_t IAcadLine::GetEndPoint ( );
__declspec(implementation_key(1614)) void IAcadLine::PutEndPoint ( const _variant_t & EndPoint );
__declspec(implementation_key(1615)) _variant_t IAcadLine::GetNormal ( );
__declspec(implementation_key(1616)) void IAcadLine::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(1617)) double IAcadLine::GetThickness ( );
__declspec(implementation_key(1618)) void IAcadLine::PutThickness ( double Thickness );
__declspec(implementation_key(1619)) _variant_t IAcadLine::Offset ( double Distance );
__declspec(implementation_key(1620)) _variant_t IAcadLine::GetDelta ( );
__declspec(implementation_key(1621)) double IAcadLine::GetLength ( );
__declspec(implementation_key(1622)) ACAD_ANGLE IAcadLine::GetAngle ( );
__declspec(implementation_key(1623)) _bstr_t IAcadPlotConfiguration::GetName ( );
__declspec(implementation_key(1624)) void IAcadPlotConfiguration::PutName ( _bstr_t pName );
__declspec(implementation_key(1625)) _bstr_t IAcadPlotConfiguration::GetConfigName ( );
__declspec(implementation_key(1626)) void IAcadPlotConfiguration::PutConfigName ( _bstr_t pName );
__declspec(implementation_key(1627)) _bstr_t IAcadPlotConfiguration::GetCanonicalMediaName ( );
__declspec(implementation_key(1628)) void IAcadPlotConfiguration::PutCanonicalMediaName ( _bstr_t pName );
__declspec(implementation_key(1629)) enum AcPlotPaperUnits IAcadPlotConfiguration::GetPaperUnits ( );
__declspec(implementation_key(1630)) void IAcadPlotConfiguration::PutPaperUnits ( enum AcPlotPaperUnits pPaperUnits );
__declspec(implementation_key(1631)) VARIANT_BOOL IAcadPlotConfiguration::GetPlotViewportBorders ( );
__declspec(implementation_key(1632)) void IAcadPlotConfiguration::PutPlotViewportBorders ( VARIANT_BOOL pViewportBorders );
__declspec(implementation_key(1633)) VARIANT_BOOL IAcadPlotConfiguration::GetShowPlotStyles ( );
__declspec(implementation_key(1634)) void IAcadPlotConfiguration::PutShowPlotStyles ( VARIANT_BOOL pStyles );
__declspec(implementation_key(1635)) enum AcPlotRotation IAcadPlotConfiguration::GetPlotRotation ( );
__declspec(implementation_key(1636)) void IAcadPlotConfiguration::PutPlotRotation ( enum AcPlotRotation pRotation );
__declspec(implementation_key(1637)) VARIANT_BOOL IAcadPlotConfiguration::GetCenterPlot ( );
__declspec(implementation_key(1638)) void IAcadPlotConfiguration::PutCenterPlot ( VARIANT_BOOL pCentered );
__declspec(implementation_key(1639)) VARIANT_BOOL IAcadPlotConfiguration::GetPlotHidden ( );
__declspec(implementation_key(1640)) void IAcadPlotConfiguration::PutPlotHidden ( VARIANT_BOOL pHidden );
__declspec(implementation_key(1641)) enum AcPlotType IAcadPlotConfiguration::GetPlotType ( );
__declspec(implementation_key(1642)) void IAcadPlotConfiguration::PutPlotType ( enum AcPlotType pType );
__declspec(implementation_key(1643)) _bstr_t IAcadPlotConfiguration::GetViewToPlot ( );
__declspec(implementation_key(1644)) void IAcadPlotConfiguration::PutViewToPlot ( _bstr_t pName );
__declspec(implementation_key(1645)) VARIANT_BOOL IAcadPlotConfiguration::GetUseStandardScale ( );
__declspec(implementation_key(1646)) void IAcadPlotConfiguration::PutUseStandardScale ( VARIANT_BOOL pUseStdScale );
__declspec(implementation_key(1647)) enum AcPlotScale IAcadPlotConfiguration::GetStandardScale ( );
__declspec(implementation_key(1648)) void IAcadPlotConfiguration::PutStandardScale ( enum AcPlotScale pStdScale );
__declspec(implementation_key(1649)) HRESULT IAcadPlotConfiguration::GetCustomScale ( double * Numerator, double * Denominator );
__declspec(implementation_key(1650)) HRESULT IAcadPlotConfiguration::SetCustomScale ( double Numerator, double Denominator );
__declspec(implementation_key(1651)) VARIANT_BOOL IAcadPlotConfiguration::GetScaleLineweights ( );
__declspec(implementation_key(1652)) void IAcadPlotConfiguration::PutScaleLineweights ( VARIANT_BOOL pScale );
__declspec(implementation_key(1653)) VARIANT_BOOL IAcadPlotConfiguration::GetPlotWithLineweights ( );
__declspec(implementation_key(1654)) void IAcadPlotConfiguration::PutPlotWithLineweights ( VARIANT_BOOL pPlot );
__declspec(implementation_key(1655)) VARIANT_BOOL IAcadPlotConfiguration::GetPlotViewportsFirst ( );
__declspec(implementation_key(1656)) void IAcadPlotConfiguration::PutPlotViewportsFirst ( VARIANT_BOOL pViewportsFirst );
__declspec(implementation_key(1657)) _bstr_t IAcadPlotConfiguration::GetStyleSheet ( );
__declspec(implementation_key(1658)) void IAcadPlotConfiguration::PutStyleSheet ( _bstr_t pName );
__declspec(implementation_key(1659)) HRESULT IAcadPlotConfiguration::GetPaperMargins ( VARIANT * LowerLeft, VARIANT * UpperRight );
__declspec(implementation_key(1660)) HRESULT IAcadPlotConfiguration::GetPaperSize ( double * Width, double * Height );
__declspec(implementation_key(1661)) _variant_t IAcadPlotConfiguration::GetPlotOrigin ( );
__declspec(implementation_key(1662)) void IAcadPlotConfiguration::PutPlotOrigin ( const _variant_t & pOrigin );
__declspec(implementation_key(1663)) HRESULT IAcadPlotConfiguration::GetWindowToPlot ( VARIANT * LowerLeft, VARIANT * UpperRight );
__declspec(implementation_key(1664)) HRESULT IAcadPlotConfiguration::SetWindowToPlot ( const _variant_t & LowerLeft, const _variant_t & UpperRight );
__declspec(implementation_key(1665)) VARIANT_BOOL IAcadPlotConfiguration::GetPlotWithPlotStyles ( );
__declspec(implementation_key(1666)) void IAcadPlotConfiguration::PutPlotWithPlotStyles ( VARIANT_BOOL pStyles );
__declspec(implementation_key(1667)) VARIANT_BOOL IAcadPlotConfiguration::GetModelType ( );
__declspec(implementation_key(1668)) HRESULT IAcadPlotConfiguration::CopyFrom ( struct IAcadPlotConfiguration * pPlotConfig );
__declspec(implementation_key(1669)) _variant_t IAcadPlotConfiguration::GetCanonicalMediaNames ( );
__declspec(implementation_key(1670)) _variant_t IAcadPlotConfiguration::GetPlotDeviceNames ( );
__declspec(implementation_key(1671)) _variant_t IAcadPlotConfiguration::GetPlotStyleTableNames ( );
__declspec(implementation_key(1672)) HRESULT IAcadPlotConfiguration::RefreshPlotDeviceInfo ( );
__declspec(implementation_key(1673)) _bstr_t IAcadPlotConfiguration::GetLocaleMediaName ( _bstr_t Name );
__declspec(implementation_key(1674)) void IAcadMInsertBlock::PutColumns ( long NumColumns );
__declspec(implementation_key(1675)) long IAcadMInsertBlock::GetColumns ( );
__declspec(implementation_key(1676)) void IAcadMInsertBlock::PutColumnSpacing ( double Spacing );
__declspec(implementation_key(1677)) double IAcadMInsertBlock::GetColumnSpacing ( );
__declspec(implementation_key(1678)) void IAcadMInsertBlock::PutRows ( long NumRows );
__declspec(implementation_key(1679)) long IAcadMInsertBlock::GetRows ( );
__declspec(implementation_key(1680)) void IAcadMInsertBlock::PutRowSpacing ( double Spacing );
__declspec(implementation_key(1681)) double IAcadMInsertBlock::GetRowSpacing ( );
__declspec(implementation_key(1682)) void IAcadPolyfaceMesh::PutCoordinates ( const _variant_t & Vertices );
__declspec(implementation_key(1683)) _variant_t IAcadPolyfaceMesh::GetCoordinates ( );
__declspec(implementation_key(1684)) _variant_t IAcadPolyfaceMesh::GetCoordinate ( int Index );
__declspec(implementation_key(1685)) void IAcadPolyfaceMesh::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(1686)) long IAcadPolyfaceMesh::GetNumberOfVertices ( );
__declspec(implementation_key(1687)) long IAcadPolyfaceMesh::GetNumberOfFaces ( );
__declspec(implementation_key(1688)) void IAcadPolyfaceMesh::PutFaces ( const _variant_t & _arg1 );
__declspec(implementation_key(1689)) _bstr_t IAcadMLine::GetStyleName ( );
__declspec(implementation_key(1690)) _variant_t IAcadMLine::GetCoordinates ( );
__declspec(implementation_key(1691)) void IAcadMLine::PutCoordinates ( const _variant_t & Vertices );
__declspec(implementation_key(1692)) enum AcMLineJustification IAcadMLine::GetJustification ( );
__declspec(implementation_key(1693)) void IAcadMLine::PutJustification ( enum AcMLineJustification Justification );
__declspec(implementation_key(1694)) double IAcadMLine::GetMLineScale ( );
__declspec(implementation_key(1695)) void IAcadMLine::PutMLineScale ( double scale );
__declspec(implementation_key(1696)) _variant_t IAcadDim3PointAngular::GetExtLine1EndPoint ( );
__declspec(implementation_key(1697)) void IAcadDim3PointAngular::PutExtLine1EndPoint ( const _variant_t & xLine1Point );
__declspec(implementation_key(1698)) _variant_t IAcadDim3PointAngular::GetExtLine2EndPoint ( );
__declspec(implementation_key(1699)) void IAcadDim3PointAngular::PutExtLine2EndPoint ( const _variant_t & xLine2Point );
__declspec(implementation_key(1700)) _variant_t IAcadDim3PointAngular::GetAngleVertex ( );
__declspec(implementation_key(1701)) void IAcadDim3PointAngular::PutAngleVertex ( const _variant_t & AngleVertex );
__declspec(implementation_key(1702)) enum AcDimPrecision IAcadDim3PointAngular::GetTextPrecision ( );
__declspec(implementation_key(1703)) void IAcadDim3PointAngular::PutTextPrecision ( enum AcDimPrecision AngleVertex );
__declspec(implementation_key(1704)) enum AcAngleUnits IAcadDim3PointAngular::GetAngleFormat ( );
__declspec(implementation_key(1705)) void IAcadDim3PointAngular::PutAngleFormat ( enum AcAngleUnits format );
__declspec(implementation_key(1706)) ACAD_COLOR IAcadDim3PointAngular::GetDimensionLineColor ( );
__declspec(implementation_key(1707)) void IAcadDim3PointAngular::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(1708)) ACAD_COLOR IAcadDim3PointAngular::GetExtensionLineColor ( );
__declspec(implementation_key(1709)) void IAcadDim3PointAngular::PutExtensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(1710)) double IAcadDim3PointAngular::GetExtensionLineExtend ( );
__declspec(implementation_key(1711)) void IAcadDim3PointAngular::PutExtensionLineExtend ( double extend );
__declspec(implementation_key(1712)) enum AcDimFit IAcadDim3PointAngular::GetFit ( );
__declspec(implementation_key(1713)) void IAcadDim3PointAngular::PutFit ( enum AcDimFit fittype );
__declspec(implementation_key(1714)) enum AcDimHorizontalJustification IAcadDim3PointAngular::GetHorizontalTextPosition ( );
__declspec(implementation_key(1715)) void IAcadDim3PointAngular::PutHorizontalTextPosition ( enum AcDimHorizontalJustification Type );
__declspec(implementation_key(1716)) ACAD_LWEIGHT IAcadDim3PointAngular::GetExtensionLineWeight ( );
__declspec(implementation_key(1717)) void IAcadDim3PointAngular::PutExtensionLineWeight ( ACAD_LWEIGHT lweight );
__declspec(implementation_key(1718)) VARIANT_BOOL IAcadDim3PointAngular::GetDimLine1Suppress ( );
__declspec(implementation_key(1719)) void IAcadDim3PointAngular::PutDimLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(1720)) VARIANT_BOOL IAcadDim3PointAngular::GetDimLine2Suppress ( );
__declspec(implementation_key(1721)) void IAcadDim3PointAngular::PutDimLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(1722)) VARIANT_BOOL IAcadDim3PointAngular::GetExtLine1Suppress ( );
__declspec(implementation_key(1723)) void IAcadDim3PointAngular::PutExtLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(1724)) VARIANT_BOOL IAcadDim3PointAngular::GetExtLine2Suppress ( );
__declspec(implementation_key(1725)) void IAcadDim3PointAngular::PutExtLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(1726)) VARIANT_BOOL IAcadDim3PointAngular::GetDimLineInside ( );
__declspec(implementation_key(1727)) void IAcadDim3PointAngular::PutDimLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(1728)) VARIANT_BOOL IAcadDim3PointAngular::GetTextInsideAlign ( );
__declspec(implementation_key(1729)) void IAcadDim3PointAngular::PutTextInsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(1730)) VARIANT_BOOL IAcadDim3PointAngular::GetTextInside ( );
__declspec(implementation_key(1731)) void IAcadDim3PointAngular::PutTextInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(1732)) VARIANT_BOOL IAcadDim3PointAngular::GetForceLineInside ( );
__declspec(implementation_key(1733)) void IAcadDim3PointAngular::PutForceLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(1734)) VARIANT_BOOL IAcadDim3PointAngular::GetTextOutsideAlign ( );
__declspec(implementation_key(1735)) void IAcadDim3PointAngular::PutTextOutsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(1736)) double IAcadDim3PointAngular::GetExtensionLineOffset ( );
__declspec(implementation_key(1737)) void IAcadDim3PointAngular::PutExtensionLineOffset ( double Offset );
__declspec(implementation_key(1738)) ACAD_LWEIGHT IAcadDim3PointAngular::GetDimensionLineWeight ( );
__declspec(implementation_key(1739)) void IAcadDim3PointAngular::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(1740)) double IAcadDim3PointAngular::GetArrowheadSize ( );
__declspec(implementation_key(1741)) void IAcadDim3PointAngular::PutArrowheadSize ( double size );
__declspec(implementation_key(1742)) enum AcDimArrowheadType IAcadDim3PointAngular::GetArrowhead1Type ( );
__declspec(implementation_key(1743)) void IAcadDim3PointAngular::PutArrowhead1Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(1744)) enum AcDimArrowheadType IAcadDim3PointAngular::GetArrowhead2Type ( );
__declspec(implementation_key(1745)) void IAcadDim3PointAngular::PutArrowhead2Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(1746)) ACAD_ANGLE IAcadDim3PointAngular::GetMeasurement ( );
__declspec(implementation_key(1747)) _bstr_t IAcadDim3PointAngular::GetArrowhead1Block ( );
__declspec(implementation_key(1748)) void IAcadDim3PointAngular::PutArrowhead1Block ( _bstr_t BlockName );
__declspec(implementation_key(1749)) _bstr_t IAcadDim3PointAngular::GetArrowhead2Block ( );
__declspec(implementation_key(1750)) void IAcadDim3PointAngular::PutArrowhead2Block ( _bstr_t BlockName );
__declspec(implementation_key(1751)) _bstr_t IAcadDim3PointAngular::GetDimensionLinetype ( );
__declspec(implementation_key(1752)) void IAcadDim3PointAngular::PutDimensionLinetype ( _bstr_t Linetype );
__declspec(implementation_key(1753)) _bstr_t IAcadDim3PointAngular::GetExtLine1Linetype ( );
__declspec(implementation_key(1754)) void IAcadDim3PointAngular::PutExtLine1Linetype ( _bstr_t Linetype );
__declspec(implementation_key(1755)) _bstr_t IAcadDim3PointAngular::GetExtLine2Linetype ( );
__declspec(implementation_key(1756)) void IAcadDim3PointAngular::PutExtLine2Linetype ( _bstr_t Linetype );
__declspec(implementation_key(1757)) VARIANT_BOOL IAcadDim3PointAngular::GetExtLineFixedLenSuppress ( );
__declspec(implementation_key(1758)) void IAcadDim3PointAngular::PutExtLineFixedLenSuppress ( VARIANT_BOOL bFixedLen );
__declspec(implementation_key(1759)) double IAcadDim3PointAngular::GetExtLineFixedLen ( );
__declspec(implementation_key(1760)) void IAcadDim3PointAngular::PutExtLineFixedLen ( double FixedLen );
__declspec(implementation_key(1761)) VARIANT_BOOL IAcadDim3PointAngular::GetDimConstrForm ( );
__declspec(implementation_key(1762)) void IAcadDim3PointAngular::PutDimConstrForm ( VARIANT_BOOL bIsDynamic );
__declspec(implementation_key(1763)) VARIANT_BOOL IAcadDim3PointAngular::GetDimConstrReference ( );
__declspec(implementation_key(1764)) void IAcadDim3PointAngular::PutDimConstrReference ( VARIANT_BOOL bIsReference );
__declspec(implementation_key(1765)) _bstr_t IAcadDim3PointAngular::GetDimConstrName ( );
__declspec(implementation_key(1766)) void IAcadDim3PointAngular::PutDimConstrName ( _bstr_t bstrName );
__declspec(implementation_key(1767)) _bstr_t IAcadDim3PointAngular::GetDimConstrExpression ( );
__declspec(implementation_key(1768)) void IAcadDim3PointAngular::PutDimConstrExpression ( _bstr_t bstrExpression );
__declspec(implementation_key(1769)) _bstr_t IAcadDim3PointAngular::GetDimConstrValue ( );
__declspec(implementation_key(1770)) void IAcadDim3PointAngular::PutDimConstrValue ( _bstr_t Value );
__declspec(implementation_key(1771)) _bstr_t IAcadDim3PointAngular::GetDimConstrDesc ( );
__declspec(implementation_key(1772)) void IAcadDim3PointAngular::PutDimConstrDesc ( _bstr_t bstrDescription );
__declspec(implementation_key(1773)) _bstr_t IAcadExternalReference::GetPath ( );
__declspec(implementation_key(1774)) void IAcadExternalReference::PutPath ( _bstr_t bstrName );
__declspec(implementation_key(1775)) _bstr_t IAcadTable::GetStyleName ( );
__declspec(implementation_key(1776)) void IAcadTable::PutStyleName ( _bstr_t bstrName );
__declspec(implementation_key(1777)) int IAcadTable::GetRows ( );
__declspec(implementation_key(1778)) void IAcadTable::PutRows ( int pRows );
__declspec(implementation_key(1779)) int IAcadTable::GetColumns ( );
__declspec(implementation_key(1780)) void IAcadTable::PutColumns ( int pColumns );
__declspec(implementation_key(1781)) enum AcTableDirection IAcadTable::GetFlowDirection ( );
__declspec(implementation_key(1782)) void IAcadTable::PutFlowDirection ( enum AcTableDirection pFlow );
__declspec(implementation_key(1783)) double IAcadTable::GetWidth ( );
__declspec(implementation_key(1784)) void IAcadTable::PutWidth ( double pWidth );
__declspec(implementation_key(1785)) double IAcadTable::GetHeight ( );
__declspec(implementation_key(1786)) void IAcadTable::PutHeight ( double pHeight );
__declspec(implementation_key(1787)) double IAcadTable::GetVertCellMargin ( );
__declspec(implementation_key(1788)) void IAcadTable::PutVertCellMargin ( double pGap );
__declspec(implementation_key(1789)) double IAcadTable::GetHorzCellMargin ( );
__declspec(implementation_key(1790)) void IAcadTable::PutHorzCellMargin ( double pGap );
__declspec(implementation_key(1791)) _variant_t IAcadTable::GetInsertionPoint ( );
__declspec(implementation_key(1792)) void IAcadTable::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(1793)) double IAcadTable::GetColumnWidth ( int col );
__declspec(implementation_key(1794)) HRESULT IAcadTable::SetColumnWidth ( int col, double Width );
__declspec(implementation_key(1795)) void IAcadTable::PutColumnWidth ( double _arg1 );
__declspec(implementation_key(1796)) double IAcadTable::GetRowHeight ( int row );
__declspec(implementation_key(1797)) HRESULT IAcadTable::SetRowHeight ( int row, double Height );
__declspec(implementation_key(1798)) void IAcadTable::PutRowHeight ( double _arg1 );
__declspec(implementation_key(1799)) double IAcadTable::GetMinimumColumnWidth ( int col );
__declspec(implementation_key(1800)) double IAcadTable::GetMinimumRowHeight ( int row );
__declspec(implementation_key(1801)) double IAcadTable::GetMinimumTableWidth ( );
__declspec(implementation_key(1802)) double IAcadTable::GetMinimumTableHeight ( );
__declspec(implementation_key(1803)) _variant_t IAcadTable::GetDirection ( );
__declspec(implementation_key(1804)) void IAcadTable::PutDirection ( const _variant_t & DirectionVector );
__declspec(implementation_key(1805)) VARIANT_BOOL IAcadTable::GetTitleSuppressed ( );
__declspec(implementation_key(1806)) void IAcadTable::PutTitleSuppressed ( VARIANT_BOOL bValue );
__declspec(implementation_key(1807)) VARIANT_BOOL IAcadTable::GetHeaderSuppressed ( );
__declspec(implementation_key(1808)) void IAcadTable::PutHeaderSuppressed ( VARIANT_BOOL bValue );
__declspec(implementation_key(1809)) enum AcCellAlignment IAcadTable::GetAlignment ( enum AcRowType rowType );
__declspec(implementation_key(1810)) HRESULT IAcadTable::SetAlignment ( int rowTypes, enum AcCellAlignment cellAlignment );
__declspec(implementation_key(1811)) VARIANT_BOOL IAcadTable::GetBackgroundColorNone ( enum AcRowType rowType );
__declspec(implementation_key(1812)) HRESULT IAcadTable::SetBackgroundColorNone ( int rowTypes, VARIANT_BOOL * bValue );
__declspec(implementation_key(1813)) IAcadAcCmColorPtr IAcadTable::GetBackgroundColor ( enum AcRowType rowType );
__declspec(implementation_key(1814)) HRESULT IAcadTable::SetBackgroundColor ( int rowTypes, struct IAcadAcCmColor * pColor );
__declspec(implementation_key(1815)) IAcadAcCmColorPtr IAcadTable::GetContentColor ( enum AcRowType rowType );
__declspec(implementation_key(1816)) HRESULT IAcadTable::SetContentColor ( int rowTypes, struct IAcadAcCmColor * pColor );
__declspec(implementation_key(1817)) _bstr_t IAcadTable::GetTextStyle ( enum AcRowType rowType );
__declspec(implementation_key(1818)) HRESULT IAcadTable::SetTextStyle ( int rowTypes, _bstr_t bstrName );
__declspec(implementation_key(1819)) double IAcadTable::GetTextHeight ( enum AcRowType rowType );
__declspec(implementation_key(1820)) HRESULT IAcadTable::SetTextHeight ( int rowTypes, double TextHeight );
__declspec(implementation_key(1821)) ACAD_LWEIGHT IAcadTable::GetGridLineWeight ( enum AcGridLineType gridLineType, enum AcRowType rowType );
__declspec(implementation_key(1822)) HRESULT IAcadTable::SetGridLineWeight ( int gridLineTypes, int rowTypes, ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(1823)) IAcadAcCmColorPtr IAcadTable::GetGridColor ( enum AcGridLineType gridLineType, enum AcRowType rowType );
__declspec(implementation_key(1824)) HRESULT IAcadTable::SetGridColor ( int gridLineTypes, int rowTypes, struct IAcadAcCmColor * pColor );
__declspec(implementation_key(1825)) VARIANT_BOOL IAcadTable::GetGridVisibility ( enum AcGridLineType gridLineType, enum AcRowType rowType );
__declspec(implementation_key(1826)) HRESULT IAcadTable::SetGridVisibility ( int gridLineTypes, int rowTypes, VARIANT_BOOL bValue );
__declspec(implementation_key(1827)) _variant_t IAcadTable::GetTableStyleOverrides ( );
__declspec(implementation_key(1828)) HRESULT IAcadTable::ClearTableStyleOverrides ( int flag );
__declspec(implementation_key(1829)) enum AcCellType IAcadTable::GetCellType ( int row, int col );
__declspec(implementation_key(1830)) HRESULT IAcadTable::SetCellType ( int row, int col, enum AcCellType CellType );
__declspec(implementation_key(1831)) _variant_t IAcadTable::GetCellExtents ( int row, int col, VARIANT_BOOL bOuterCell );
__declspec(implementation_key(1832)) _variant_t IAcadTable::GetAttachmentPoint ( int row, int col );
__declspec(implementation_key(1833)) enum AcCellAlignment IAcadTable::GetCellAlignment ( int row, int col );
__declspec(implementation_key(1834)) HRESULT IAcadTable::SetCellAlignment ( int row, int col, enum AcCellAlignment cellAlignment );
__declspec(implementation_key(1835)) VARIANT_BOOL IAcadTable::GetCellBackgroundColorNone ( int row, int col );
__declspec(implementation_key(1836)) HRESULT IAcadTable::SetCellBackgroundColorNone ( int row, int col, VARIANT_BOOL * bValue );
__declspec(implementation_key(1837)) IAcadAcCmColorPtr IAcadTable::GetCellBackgroundColor ( int row, int col );
__declspec(implementation_key(1838)) HRESULT IAcadTable::SetCellBackgroundColor ( int row, int col, struct IAcadAcCmColor * pColor );
__declspec(implementation_key(1839)) IAcadAcCmColorPtr IAcadTable::GetCellContentColor ( int row, int col );
__declspec(implementation_key(1840)) HRESULT IAcadTable::SetCellContentColor ( int row, int col, struct IAcadAcCmColor * pColor );
__declspec(implementation_key(1841)) _variant_t IAcadTable::GetCellStyleOverrides ( int row, int col );
__declspec(implementation_key(1842)) HRESULT IAcadTable::DeleteCellContent ( int row, int col );
__declspec(implementation_key(1843)) enum AcRowType IAcadTable::GetRowType ( int row );
__declspec(implementation_key(1844)) _bstr_t IAcadTable::GetText ( int row, int col );
__declspec(implementation_key(1845)) HRESULT IAcadTable::SetText ( int row, int col, _bstr_t pStr );
__declspec(implementation_key(1846)) _bstr_t IAcadTable::GetCellTextStyle ( int row, int col );
__declspec(implementation_key(1847)) HRESULT IAcadTable::SetCellTextStyle ( int row, int col, _bstr_t bstrName );
__declspec(implementation_key(1848)) double IAcadTable::GetCellTextHeight ( int row, int col );
__declspec(implementation_key(1849)) HRESULT IAcadTable::SetCellTextHeight ( int row, int col, double TextHeight );
__declspec(implementation_key(1850)) enum AcRotationAngle IAcadTable::GetTextRotation ( int row, int col );
__declspec(implementation_key(1851)) HRESULT IAcadTable::SetTextRotation ( int row, int col, enum AcRotationAngle TextRotation );
__declspec(implementation_key(1852)) VARIANT_BOOL IAcadTable::GetAutoScale ( int row, int col );
__declspec(implementation_key(1853)) HRESULT IAcadTable::SetAutoScale ( int row, int col, VARIANT_BOOL * bValue );
__declspec(implementation_key(1854)) LONG_PTR IAcadTable::GetBlockTableRecordId ( int row, int col );
__declspec(implementation_key(1855)) HRESULT IAcadTable::SetBlockTableRecordId ( int row, int col, LONG_PTR blkId, VARIANT_BOOL bAutoFit );
__declspec(implementation_key(1856)) double IAcadTable::GetBlockScale ( int row, int col );
__declspec(implementation_key(1857)) HRESULT IAcadTable::SetBlockScale ( int row, int col, double blkScale );
__declspec(implementation_key(1858)) double IAcadTable::GetBlockRotation ( int row, int col );
__declspec(implementation_key(1859)) HRESULT IAcadTable::SetBlockRotation ( int row, int col, double blkRotation );
__declspec(implementation_key(1860)) _bstr_t IAcadTable::GetBlockAttributeValue ( int row, int col, LONG_PTR attdefId );
__declspec(implementation_key(1861)) HRESULT IAcadTable::SetBlockAttributeValue ( int row, int col, LONG_PTR attdefId, _bstr_t bstrValue );
__declspec(implementation_key(1862)) ACAD_LWEIGHT IAcadTable::GetCellGridLineWeight ( int row, int col, enum AcCellEdgeMask edge );
__declspec(implementation_key(1863)) HRESULT IAcadTable::SetCellGridLineWeight ( int row, int col, int edges, ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(1864)) IAcadAcCmColorPtr IAcadTable::GetCellGridColor ( int row, int col, enum AcCellEdgeMask edge );
__declspec(implementation_key(1865)) HRESULT IAcadTable::SetCellGridColor ( int row, int col, int edges, struct IAcadAcCmColor * pColor );
__declspec(implementation_key(1866)) VARIANT_BOOL IAcadTable::GetCellGridVisibility ( int row, int col, enum AcCellEdgeMask edge );
__declspec(implementation_key(1867)) HRESULT IAcadTable::SetCellGridVisibility ( int row, int col, int edges, VARIANT_BOOL bValue );
__declspec(implementation_key(1868)) HRESULT IAcadTable::InsertColumns ( int col, double Width, int cols );
__declspec(implementation_key(1869)) HRESULT IAcadTable::DeleteColumns ( int col, int cols );
__declspec(implementation_key(1870)) HRESULT IAcadTable::InsertRows ( int row, double Height, int Rows );
__declspec(implementation_key(1871)) HRESULT IAcadTable::DeleteRows ( int row, int Rows );
__declspec(implementation_key(1872)) HRESULT IAcadTable::MergeCells ( int minRow, int maxRow, int minCol, int maxCol );
__declspec(implementation_key(1873)) HRESULT IAcadTable::UnmergeCells ( int minRow, int maxRow, int minCol, int maxCol );
__declspec(implementation_key(1874)) VARIANT_BOOL IAcadTable::IsMergedCell ( int row, int col, int * minRow, int * maxRow, int * minCol, int * maxCol );
__declspec(implementation_key(1875)) LONG_PTR IAcadTable::GetFieldId ( int row, int col );
__declspec(implementation_key(1876)) HRESULT IAcadTable::SetFieldId ( int row, int col, LONG_PTR fieldId );
__declspec(implementation_key(1877)) HRESULT IAcadTable::GenerateLayout ( );
__declspec(implementation_key(1878)) HRESULT IAcadTable::RecomputeTableBlock ( VARIANT_BOOL bForceUpdate );
__declspec(implementation_key(1879)) VARIANT_BOOL IAcadTable::HitTest ( const _variant_t & wpt, const _variant_t & wviewVec, int * resultRowIndex, int * resultColumnIndex );
__declspec(implementation_key(1880)) HRESULT IAcadTable::Select ( const _variant_t & wpt, const _variant_t & wvwVec, const _variant_t & wvwxVec, double wxaper, double wyaper, VARIANT_BOOL allowOutside, int * resultRowIndex, int * resultColumnIndex );
__declspec(implementation_key(1881)) HRESULT IAcadTable::SelectSubRegion ( const _variant_t & wpt1, const _variant_t & wpt2, const _variant_t & wvwVec, const _variant_t & wvwxVec, enum AcSelectType seltype, VARIANT_BOOL bIncludeCurrentSelection, int * rowMin, int * rowMax, int * colMin, int * colMax );
__declspec(implementation_key(1882)) HRESULT IAcadTable::ReselectSubRegion ( );
__declspec(implementation_key(1883)) HRESULT IAcadTable::GetSubSelection ( int * rowMin, int * rowMax, int * colMin, int * colMax );
__declspec(implementation_key(1884)) HRESULT IAcadTable::SetSubSelection ( int rowMin, int rowMax, int colMin, int colMax );
__declspec(implementation_key(1885)) HRESULT IAcadTable::ClearSubSelection ( );
__declspec(implementation_key(1886)) VARIANT_BOOL IAcadTable::GetHasSubSelection ( );
__declspec(implementation_key(1887)) VARIANT_BOOL IAcadTable::GetRegenerateTableSuppressed ( );
__declspec(implementation_key(1888)) void IAcadTable::PutRegenerateTableSuppressed ( VARIANT_BOOL bValue );
__declspec(implementation_key(1889)) HRESULT IAcadTable::GetDataType ( enum AcRowType rowType, enum AcValueDataType * pDataType, enum AcValueUnitType * pUnitType );
__declspec(implementation_key(1890)) HRESULT IAcadTable::SetDataType ( int rowTypes, enum AcValueDataType dataType, enum AcValueUnitType unitType );
__declspec(implementation_key(1891)) _bstr_t IAcadTable::GetFormat ( enum AcRowType rowType );
__declspec(implementation_key(1892)) HRESULT IAcadTable::SetFormat ( int rowTypes, _bstr_t pFormat );
__declspec(implementation_key(1893)) HRESULT IAcadTable::FormatValue ( int row, int col, enum AcFormatOption nOption, BSTR * pVal );
__declspec(implementation_key(1894)) HRESULT IAcadTable::GetCellDataType ( int row, int col, enum AcValueDataType * pDataType, enum AcValueUnitType * pUnitType );
__declspec(implementation_key(1895)) HRESULT IAcadTable::SetCellDataType ( int row, int col, enum AcValueDataType dataType, enum AcValueUnitType unitType );
__declspec(implementation_key(1896)) _bstr_t IAcadTable::GetCellFormat ( int row, int col );
__declspec(implementation_key(1897)) HRESULT IAcadTable::SetCellFormat ( int row, int col, _bstr_t pFormat );
__declspec(implementation_key(1898)) _variant_t IAcadTable::GetCellValue ( int row, int col );
__declspec(implementation_key(1899)) HRESULT IAcadTable::SetCellValue ( int row, int col, const _variant_t & val );
__declspec(implementation_key(1900)) HRESULT IAcadTable::SetCellValueFromText ( int row, int col, _bstr_t val, enum AcParseOption nOption );
__declspec(implementation_key(1901)) HRESULT IAcadTable::ResetCellValue ( int row, int col );
__declspec(implementation_key(1902)) VARIANT_BOOL IAcadTable::IsEmpty ( int nRow, int nCol );
__declspec(implementation_key(1903)) int IAcadTable::CreateContent ( int nRow, int nCol, int nIndex );
__declspec(implementation_key(1904)) HRESULT IAcadTable::MoveContent ( int nRow, int nCol, int nFromIndex, int nToIndex );
__declspec(implementation_key(1905)) HRESULT IAcadTable::DeleteContent ( int nRow, int nCol );
__declspec(implementation_key(1906)) _variant_t IAcadTable::GetValue ( int nRow, int nCol, int nContent );
__declspec(implementation_key(1907)) HRESULT IAcadTable::SetValue ( int nRow, int nCol, int nContent, const _variant_t & acValue );
__declspec(implementation_key(1908)) HRESULT IAcadTable::SetValueFromText ( int nRow, int nCol, int nContent, _bstr_t szText, enum AcParseOption nOption );
__declspec(implementation_key(1909)) _bstr_t IAcadTable::GetDataFormat ( int nRow, int nCol, int nContent );
__declspec(implementation_key(1910)) HRESULT IAcadTable::SetDataFormat ( int nRow, int nCol, int nContent, _bstr_t szFormat );
__declspec(implementation_key(1911)) _bstr_t IAcadTable::GetTextString ( int nRow, int nCol, int nContent );
__declspec(implementation_key(1912)) HRESULT IAcadTable::SetTextString ( int nRow, int nCol, int nContent, _bstr_t Text );
__declspec(implementation_key(1913)) LONG_PTR IAcadTable::GetFieldId2 ( int nRow, int nCol, int nContent );
__declspec(implementation_key(1914)) HRESULT IAcadTable::SetFieldId2 ( int nRow, int nCol, int nContent, LONG_PTR acDbObjectId, enum AcCellOption nflag );
__declspec(implementation_key(1915)) LONG_PTR IAcadTable::GetBlockTableRecordId2 ( int nRow, int nCol, int nContent );
__declspec(implementation_key(1916)) HRESULT IAcadTable::SetBlockTableRecordId2 ( int nRow, int nCol, int nContent, LONG_PTR blkId, VARIANT_BOOL autoFit );
__declspec(implementation_key(1917)) _bstr_t IAcadTable::GetBlockAttributeValue2 ( int nRow, int nCol, int nContent, LONG_PTR blkId );
__declspec(implementation_key(1918)) HRESULT IAcadTable::SetBlockAttributeValue2 ( int nRow, int nCol, int nContent, LONG_PTR blkId, _bstr_t Value );
__declspec(implementation_key(1919)) HRESULT IAcadTable::GetCustomData ( int nRow, int nCol, _bstr_t szKey, VARIANT * pData );
__declspec(implementation_key(1920)) HRESULT IAcadTable::SetCustomData ( int nRow, int nCol, _bstr_t szKey, const _variant_t & data );
__declspec(implementation_key(1921)) _bstr_t IAcadTable::GetCellStyle ( int nRow, int nCol );
__declspec(implementation_key(1922)) HRESULT IAcadTable::SetCellStyle ( int nRow, int nCol, _bstr_t szCellStyle );
__declspec(implementation_key(1923)) IAcadAcCmColorPtr IAcadTable::GetContentColor2 ( int nRow, int nCol, int nContent );
__declspec(implementation_key(1924)) HRESULT IAcadTable::SetContentColor2 ( int nRow, int nCol, int nContent, struct IAcadAcCmColor * pColor );
__declspec(implementation_key(1925)) HRESULT IAcadTable::GetDataType2 ( int nRow, int nCol, int nContent, enum AcValueDataType * pDataType, enum AcValueUnitType * pUnitType );
__declspec(implementation_key(1926)) HRESULT IAcadTable::SetDataType2 ( int nRow, int nCol, int nContent, enum AcValueDataType dataType, enum AcValueUnitType unitType );
__declspec(implementation_key(1927)) _bstr_t IAcadTable::GetTextStyle2 ( int nRow, int nCol, int nContent );
__declspec(implementation_key(1928)) HRESULT IAcadTable::SetTextStyle2 ( int nRow, int nCol, int nContent, _bstr_t bstrStyleName );
__declspec(implementation_key(1929)) double IAcadTable::GetTextHeight2 ( int nRow, int nCol, int nContent );
__declspec(implementation_key(1930)) HRESULT IAcadTable::SetTextHeight2 ( int nRow, int nCol, int nContent, double Height );
__declspec(implementation_key(1931)) double IAcadTable::GetRotation ( int nRow, int nCol, int nContent );
__declspec(implementation_key(1932)) HRESULT IAcadTable::SetRotation ( int nRow, int nCol, int nContent, double Value );
__declspec(implementation_key(1933)) VARIANT_BOOL IAcadTable::GetAutoScale2 ( int nRow, int nCol, int nContent );
__declspec(implementation_key(1934)) HRESULT IAcadTable::SetAutoScale2 ( int nRow, int nCol, int nContent, VARIANT_BOOL bAutoFit );
__declspec(implementation_key(1935)) double IAcadTable::GetScale ( int nRow, int nCol, int nContent );
__declspec(implementation_key(1936)) HRESULT IAcadTable::SetScale ( int nRow, int nCol, int nContent, double scale );
__declspec(implementation_key(1937)) HRESULT IAcadTable::RemoveAllOverrides ( int nRow, int nCol );
__declspec(implementation_key(1938)) ACAD_LWEIGHT IAcadTable::GetGridLineWeight2 ( int nRow, int nCol, enum AcGridLineType nGridLineType );
__declspec(implementation_key(1939)) HRESULT IAcadTable::SetGridLineWeight2 ( int nRow, int nCol, enum AcGridLineType nGridLineType, ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(1940)) LONG_PTR IAcadTable::GetGridLinetype ( int nRow, int nCol, enum AcGridLineType nGridLineType );
__declspec(implementation_key(1941)) HRESULT IAcadTable::SetGridLinetype ( int nRow, int nCol, enum AcGridLineType nGridLineType, LONG_PTR idLinetype );
__declspec(implementation_key(1942)) IAcadAcCmColorPtr IAcadTable::GetGridColor2 ( int nRow, int nCol, enum AcGridLineType nGridLineType );
__declspec(implementation_key(1943)) HRESULT IAcadTable::SetGridColor2 ( int nRow, int nCol, enum AcGridLineType nGridLineType, struct IAcadAcCmColor * pColor );
__declspec(implementation_key(1944)) VARIANT_BOOL IAcadTable::GetGridVisibility2 ( int nRow, int nCol, enum AcGridLineType nGridLineType );
__declspec(implementation_key(1945)) HRESULT IAcadTable::SetGridVisibility2 ( int nRow, int nCol, enum AcGridLineType nGridLineType, VARIANT_BOOL bVisible );
__declspec(implementation_key(1946)) double IAcadTable::GetGridDoubleLineSpacing ( int nRow, int nCol, enum AcGridLineType nGridLineType );
__declspec(implementation_key(1947)) HRESULT IAcadTable::SetGridDoubleLineSpacing ( int nRow, int nCol, enum AcGridLineType nGridLineType, double fSpacing );
__declspec(implementation_key(1948)) void IAcadTable::PutEnableBreak ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1949)) double IAcadTable::GetBreakHeight ( int nIndex );
__declspec(implementation_key(1950)) HRESULT IAcadTable::SetBreakHeight ( int nIndex, double Height );
__declspec(implementation_key(1951)) enum AcCellContentType IAcadTable::GetContentType ( int nRow, int nCol );
__declspec(implementation_key(1952)) double IAcadTable::GetMargin ( int nRow, int nCol, enum AcCellMargin nMargin );
__declspec(implementation_key(1953)) HRESULT IAcadTable::SetMargin ( int nRow, int nCol, enum AcCellMargin nMargins, double fMargin );
__declspec(implementation_key(1954)) enum AcCellContentLayout IAcadTable::GetContentLayout ( int row, int col );
__declspec(implementation_key(1955)) HRESULT IAcadTable::SetContentLayout ( int row, int col, enum AcCellContentLayout nLayout );
__declspec(implementation_key(1956)) enum AcCellProperty IAcadTable::GetOverride ( int nRow, int nCol, int nContent );
__declspec(implementation_key(1957)) HRESULT IAcadTable::SetOverride ( int nRow, int nCol, int nContent, enum AcCellProperty nProp );
__declspec(implementation_key(1958)) enum AcGridLineStyle IAcadTable::GetGridLineStyle ( int nRow, int nCol, enum AcGridLineType nGridLineType );
__declspec(implementation_key(1959)) HRESULT IAcadTable::SetGridLineStyle ( int nRow, int nCol, enum AcGridLineType nGridLineTypes, enum AcGridLineStyle nLineStyle );
__declspec(implementation_key(1960)) HRESULT IAcadTable::InsertRowsAndInherit ( int nIndex, int nInheritFrom, int nNumRows );
__declspec(implementation_key(1961)) HRESULT IAcadTable::InsertColumnsAndInherit ( int col, int nInheritFrom, int nNumCols );
__declspec(implementation_key(1962)) VARIANT_BOOL IAcadTable::GetHasFormula ( int nRow, int nCol, int nContent );
__declspec(implementation_key(1963)) _bstr_t IAcadTable::GetFormula ( int nRow, int nCol, int nContent );
__declspec(implementation_key(1964)) HRESULT IAcadTable::SetFormula ( int nRow, int nCol, int nContent, _bstr_t pszFormula );
__declspec(implementation_key(1965)) VARIANT_BOOL IAcadTable::IsContentEditable ( int nRow, int nCol );
__declspec(implementation_key(1966)) VARIANT_BOOL IAcadTable::IsFormatEditable ( int nRow, int nCol );
__declspec(implementation_key(1967)) enum AcCellState IAcadTable::GetCellState ( int nRow, int nCol );
__declspec(implementation_key(1968)) HRESULT IAcadTable::SetCellState ( int nRow, int nCol, enum AcCellState nLock );
__declspec(implementation_key(1969)) HRESULT IAcadTable::EnableMergeAll ( int nRow, int nCol, VARIANT_BOOL bEnable );
__declspec(implementation_key(1970)) VARIANT_BOOL IAcadTable::IsMergeAllEnabled ( int nRow, int nCol );
__declspec(implementation_key(1971)) VARIANT_BOOL IAcadTable::GetBreaksEnabled ( );
__declspec(implementation_key(1972)) void IAcadTable::PutBreaksEnabled ( VARIANT_BOOL bEnabled );
__declspec(implementation_key(1973)) VARIANT_BOOL IAcadTable::GetRepeatTopLabels ( );
__declspec(implementation_key(1974)) void IAcadTable::PutRepeatTopLabels ( VARIANT_BOOL bEnabled );
__declspec(implementation_key(1975)) VARIANT_BOOL IAcadTable::GetRepeatBottomLabels ( );
__declspec(implementation_key(1976)) void IAcadTable::PutRepeatBottomLabels ( VARIANT_BOOL bEnabled );
__declspec(implementation_key(1977)) enum AcTableFlowDirection IAcadTable::GetTableBreakFlowDirection ( );
__declspec(implementation_key(1978)) void IAcadTable::PutTableBreakFlowDirection ( enum AcTableFlowDirection pDir );
__declspec(implementation_key(1979)) VARIANT_BOOL IAcadTable::GetAllowManualPositions ( );
__declspec(implementation_key(1980)) void IAcadTable::PutAllowManualPositions ( VARIANT_BOOL bEnabled );
__declspec(implementation_key(1981)) VARIANT_BOOL IAcadTable::GetAllowManualHeights ( );
__declspec(implementation_key(1982)) void IAcadTable::PutAllowManualHeights ( VARIANT_BOOL bEnabled );
__declspec(implementation_key(1983)) double IAcadTable::GetTableBreakHeight ( );
__declspec(implementation_key(1984)) void IAcadTable::PutTableBreakHeight ( double pHeight );
__declspec(implementation_key(1985)) double IAcadTable::GetBreakSpacing ( );
__declspec(implementation_key(1986)) void IAcadTable::PutBreakSpacing ( double pSpacing );
__declspec(implementation_key(1987)) _bstr_t IAcadTable::GetColumnName ( int nIndex );
__declspec(implementation_key(1988)) HRESULT IAcadTable::SetColumnName ( int nIndex, _bstr_t Name );
__declspec(implementation_key(1989)) HRESULT IAcadTable::SetToolTip ( int nRow, int nCol, _bstr_t tip );
__declspec(implementation_key(1990)) VARIANT_BOOL IAcadDimArcLength::GetAltUnits ( );
__declspec(implementation_key(1991)) void IAcadDimArcLength::PutAltUnits ( VARIANT_BOOL bAlternate );
__declspec(implementation_key(1992)) enum AcDimPrecision IAcadDimArcLength::GetAltUnitsPrecision ( );
__declspec(implementation_key(1993)) void IAcadDimArcLength::PutAltUnitsPrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(1994)) ACAD_NOUNITS IAcadDimArcLength::GetAltUnitsScale ( );
__declspec(implementation_key(1995)) void IAcadDimArcLength::PutAltUnitsScale ( ACAD_NOUNITS scale );
__declspec(implementation_key(1996)) double IAcadDimArcLength::GetAltRoundDistance ( );
__declspec(implementation_key(1997)) void IAcadDimArcLength::PutAltRoundDistance ( double Distance );
__declspec(implementation_key(1998)) enum AcDimPrecision IAcadDimArcLength::GetAltTolerancePrecision ( );
__declspec(implementation_key(1999)) void IAcadDimArcLength::PutAltTolerancePrecision ( enum AcDimPrecision Distance );
__declspec(implementation_key(2000)) enum AcDimUnits IAcadDimArcLength::GetAltUnitsFormat ( );
__declspec(implementation_key(2001)) void IAcadDimArcLength::PutAltUnitsFormat ( enum AcDimUnits Units );
__declspec(implementation_key(2002)) _bstr_t IAcadDimArcLength::GetAltTextPrefix ( );
__declspec(implementation_key(2003)) void IAcadDimArcLength::PutAltTextPrefix ( _bstr_t prefix );
__declspec(implementation_key(2004)) _bstr_t IAcadDimArcLength::GetAltTextSuffix ( );
__declspec(implementation_key(2005)) void IAcadDimArcLength::PutAltTextSuffix ( _bstr_t prefix );
__declspec(implementation_key(2006)) ACAD_COLOR IAcadDimArcLength::GetDimensionLineColor ( );
__declspec(implementation_key(2007)) void IAcadDimArcLength::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(2008)) ACAD_COLOR IAcadDimArcLength::GetExtensionLineColor ( );
__declspec(implementation_key(2009)) void IAcadDimArcLength::PutExtensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(2010)) enum AcDimPrecision IAcadDimArcLength::GetPrimaryUnitsPrecision ( );
__declspec(implementation_key(2011)) void IAcadDimArcLength::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec );
__declspec(implementation_key(2012)) double IAcadDimArcLength::GetDimensionLineExtend ( );
__declspec(implementation_key(2013)) void IAcadDimArcLength::PutDimensionLineExtend ( double extend );
__declspec(implementation_key(2014)) double IAcadDimArcLength::GetExtensionLineExtend ( );
__declspec(implementation_key(2015)) void IAcadDimArcLength::PutExtensionLineExtend ( double extend );
__declspec(implementation_key(2016)) enum AcDimFit IAcadDimArcLength::GetFit ( );
__declspec(implementation_key(2017)) void IAcadDimArcLength::PutFit ( enum AcDimFit fittype );
__declspec(implementation_key(2018)) enum AcDimFractionType IAcadDimArcLength::GetFractionFormat ( );
__declspec(implementation_key(2019)) void IAcadDimArcLength::PutFractionFormat ( enum AcDimFractionType Type );
__declspec(implementation_key(2020)) enum AcDimHorizontalJustification IAcadDimArcLength::GetHorizontalTextPosition ( );
__declspec(implementation_key(2021)) void IAcadDimArcLength::PutHorizontalTextPosition ( enum AcDimHorizontalJustification Type );
__declspec(implementation_key(2022)) ACAD_NOUNITS IAcadDimArcLength::GetLinearScaleFactor ( );
__declspec(implementation_key(2023)) void IAcadDimArcLength::PutLinearScaleFactor ( ACAD_NOUNITS Type );
__declspec(implementation_key(2024)) enum AcDimLUnits IAcadDimArcLength::GetUnitsFormat ( );
__declspec(implementation_key(2025)) void IAcadDimArcLength::PutUnitsFormat ( enum AcDimLUnits format );
__declspec(implementation_key(2026)) ACAD_LWEIGHT IAcadDimArcLength::GetExtensionLineWeight ( );
__declspec(implementation_key(2027)) void IAcadDimArcLength::PutExtensionLineWeight ( ACAD_LWEIGHT lweight );
__declspec(implementation_key(2028)) double IAcadDimArcLength::GetRoundDistance ( );
__declspec(implementation_key(2029)) void IAcadDimArcLength::PutRoundDistance ( double Distance );
__declspec(implementation_key(2030)) VARIANT_BOOL IAcadDimArcLength::GetDimLine1Suppress ( );
__declspec(implementation_key(2031)) void IAcadDimArcLength::PutDimLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(2032)) VARIANT_BOOL IAcadDimArcLength::GetDimLine2Suppress ( );
__declspec(implementation_key(2033)) void IAcadDimArcLength::PutDimLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(2034)) VARIANT_BOOL IAcadDimArcLength::GetExtLine1Suppress ( );
__declspec(implementation_key(2035)) void IAcadDimArcLength::PutExtLine1Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(2036)) VARIANT_BOOL IAcadDimArcLength::GetExtLine2Suppress ( );
__declspec(implementation_key(2037)) void IAcadDimArcLength::PutExtLine2Suppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(2038)) VARIANT_BOOL IAcadDimArcLength::GetDimLineInside ( );
__declspec(implementation_key(2039)) void IAcadDimArcLength::PutDimLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(2040)) VARIANT_BOOL IAcadDimArcLength::GetTextInsideAlign ( );
__declspec(implementation_key(2041)) void IAcadDimArcLength::PutTextInsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(2042)) VARIANT_BOOL IAcadDimArcLength::GetTextInside ( );
__declspec(implementation_key(2043)) void IAcadDimArcLength::PutTextInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(2044)) VARIANT_BOOL IAcadDimArcLength::GetForceLineInside ( );
__declspec(implementation_key(2045)) void IAcadDimArcLength::PutForceLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(2046)) VARIANT_BOOL IAcadDimArcLength::GetTextOutsideAlign ( );
__declspec(implementation_key(2047)) void IAcadDimArcLength::PutTextOutsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(2048)) double IAcadDimArcLength::GetExtensionLineOffset ( );
__declspec(implementation_key(2049)) void IAcadDimArcLength::PutExtensionLineOffset ( double Offset );
__declspec(implementation_key(2050)) VARIANT_BOOL IAcadDimArcLength::GetAltSuppressLeadingZeros ( );
__declspec(implementation_key(2051)) void IAcadDimArcLength::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(2052)) VARIANT_BOOL IAcadDimArcLength::GetAltSuppressTrailingZeros ( );
__declspec(implementation_key(2053)) void IAcadDimArcLength::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(2054)) VARIANT_BOOL IAcadDimArcLength::GetAltSuppressZeroFeet ( );
__declspec(implementation_key(2055)) void IAcadDimArcLength::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(2056)) VARIANT_BOOL IAcadDimArcLength::GetAltSuppressZeroInches ( );
__declspec(implementation_key(2057)) void IAcadDimArcLength::PutAltSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(2058)) VARIANT_BOOL IAcadDimArcLength::GetAltToleranceSuppressLeadingZeros ( );
__declspec(implementation_key(2059)) void IAcadDimArcLength::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(2060)) VARIANT_BOOL IAcadDimArcLength::GetAltToleranceSuppressTrailingZeros ( );
__declspec(implementation_key(2061)) void IAcadDimArcLength::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(2062)) VARIANT_BOOL IAcadDimArcLength::GetAltToleranceSuppressZeroFeet ( );
__declspec(implementation_key(2063)) void IAcadDimArcLength::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(2064)) VARIANT_BOOL IAcadDimArcLength::GetAltToleranceSuppressZeroInches ( );
__declspec(implementation_key(2065)) void IAcadDimArcLength::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(2066)) VARIANT_BOOL IAcadDimArcLength::GetSuppressZeroFeet ( );
__declspec(implementation_key(2067)) void IAcadDimArcLength::PutSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(2068)) VARIANT_BOOL IAcadDimArcLength::GetSuppressZeroInches ( );
__declspec(implementation_key(2069)) void IAcadDimArcLength::PutSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(2070)) VARIANT_BOOL IAcadDimArcLength::GetToleranceSuppressZeroFeet ( );
__declspec(implementation_key(2071)) void IAcadDimArcLength::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(2072)) VARIANT_BOOL IAcadDimArcLength::GetToleranceSuppressZeroInches ( );
__declspec(implementation_key(2073)) void IAcadDimArcLength::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(2074)) ACAD_LWEIGHT IAcadDimArcLength::GetDimensionLineWeight ( );
__declspec(implementation_key(2075)) void IAcadDimArcLength::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(2076)) double IAcadDimArcLength::GetArrowheadSize ( );
__declspec(implementation_key(2077)) void IAcadDimArcLength::PutArrowheadSize ( double size );
__declspec(implementation_key(2078)) enum AcDimArrowheadType IAcadDimArcLength::GetArrowhead1Type ( );
__declspec(implementation_key(2079)) void IAcadDimArcLength::PutArrowhead1Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(2080)) enum AcDimArrowheadType IAcadDimArcLength::GetArrowhead2Type ( );
__declspec(implementation_key(2081)) void IAcadDimArcLength::PutArrowhead2Type ( enum AcDimArrowheadType Type );
__declspec(implementation_key(2082)) double IAcadDimArcLength::GetMeasurement ( );
__declspec(implementation_key(2083)) _bstr_t IAcadDimArcLength::GetArrowhead1Block ( );
__declspec(implementation_key(2084)) void IAcadDimArcLength::PutArrowhead1Block ( _bstr_t BlockName );
__declspec(implementation_key(2085)) _bstr_t IAcadDimArcLength::GetArrowhead2Block ( );
__declspec(implementation_key(2086)) void IAcadDimArcLength::PutArrowhead2Block ( _bstr_t BlockName );
__declspec(implementation_key(2087)) _variant_t IAcadDimArcLength::GetArcPoint ( );
__declspec(implementation_key(2088)) void IAcadDimArcLength::PutArcPoint ( const _variant_t & pVal );
__declspec(implementation_key(2089)) _variant_t IAcadDimArcLength::GetExtLine1Point ( );
__declspec(implementation_key(2090)) void IAcadDimArcLength::PutExtLine1Point ( const _variant_t & pVal );
__declspec(implementation_key(2091)) _variant_t IAcadDimArcLength::GetExtLine2Point ( );
__declspec(implementation_key(2092)) void IAcadDimArcLength::PutExtLine2Point ( const _variant_t & pVal );
__declspec(implementation_key(2093)) _variant_t IAcadDimArcLength::GetCenterPoint ( );
__declspec(implementation_key(2094)) void IAcadDimArcLength::PutCenterPoint ( const _variant_t & pVal );
__declspec(implementation_key(2095)) _variant_t IAcadDimArcLength::GetLeader1Point ( );
__declspec(implementation_key(2096)) void IAcadDimArcLength::PutLeader1Point ( const _variant_t & pVal );
__declspec(implementation_key(2097)) _variant_t IAcadDimArcLength::GetLeader2Point ( );
__declspec(implementation_key(2098)) void IAcadDimArcLength::PutLeader2Point ( const _variant_t & pVal );
__declspec(implementation_key(2099)) VARIANT_BOOL IAcadDimArcLength::GetIsPartial ( );
__declspec(implementation_key(2100)) void IAcadDimArcLength::PutIsPartial ( VARIANT_BOOL pVal );
__declspec(implementation_key(2101)) double IAcadDimArcLength::GetArcStartParam ( );
__declspec(implementation_key(2102)) void IAcadDimArcLength::PutArcStartParam ( double pVal );
__declspec(implementation_key(2103)) double IAcadDimArcLength::GetArcEndParam ( );
__declspec(implementation_key(2104)) void IAcadDimArcLength::PutArcEndParam ( double pVal );
__declspec(implementation_key(2105)) VARIANT_BOOL IAcadDimArcLength::GetHasLeader ( );
__declspec(implementation_key(2106)) void IAcadDimArcLength::PutHasLeader ( VARIANT_BOOL pVal );
__declspec(implementation_key(2107)) enum AcDimArcLengthSymbol IAcadDimArcLength::GetSymbolPosition ( );
__declspec(implementation_key(2108)) void IAcadDimArcLength::PutSymbolPosition ( enum AcDimArcLengthSymbol Position );
__declspec(implementation_key(2109)) _bstr_t IAcadDimArcLength::GetDimensionLinetype ( );
__declspec(implementation_key(2110)) void IAcadDimArcLength::PutDimensionLinetype ( _bstr_t Linetype );
__declspec(implementation_key(2111)) _bstr_t IAcadDimArcLength::GetExtLine1Linetype ( );
__declspec(implementation_key(2112)) void IAcadDimArcLength::PutExtLine1Linetype ( _bstr_t Linetype );
__declspec(implementation_key(2113)) _bstr_t IAcadDimArcLength::GetExtLine2Linetype ( );
__declspec(implementation_key(2114)) void IAcadDimArcLength::PutExtLine2Linetype ( _bstr_t Linetype );
__declspec(implementation_key(2115)) VARIANT_BOOL IAcadDimArcLength::GetExtLineFixedLenSuppress ( );
__declspec(implementation_key(2116)) void IAcadDimArcLength::PutExtLineFixedLenSuppress ( VARIANT_BOOL bFixedLen );
__declspec(implementation_key(2117)) double IAcadDimArcLength::GetExtLineFixedLen ( );
__declspec(implementation_key(2118)) void IAcadDimArcLength::PutExtLineFixedLen ( double FixedLen );
__declspec(implementation_key(2119)) _bstr_t IAcadDimArcLength::GetSubUnitsSuffix ( );
__declspec(implementation_key(2120)) void IAcadDimArcLength::PutSubUnitsSuffix ( _bstr_t suffix );
__declspec(implementation_key(2121)) double IAcadDimArcLength::GetSubUnitsFactor ( );
__declspec(implementation_key(2122)) void IAcadDimArcLength::PutSubUnitsFactor ( double factor );
__declspec(implementation_key(2123)) _bstr_t IAcadDimArcLength::GetAltSubUnitsSuffix ( );
__declspec(implementation_key(2124)) void IAcadDimArcLength::PutAltSubUnitsSuffix ( _bstr_t suffix );
__declspec(implementation_key(2125)) double IAcadDimArcLength::GetAltSubUnitsFactor ( );
__declspec(implementation_key(2126)) void IAcadDimArcLength::PutAltSubUnitsFactor ( double factor );
__declspec(implementation_key(2127)) VARIANT_BOOL IAcadDimRadialLarge::GetAltUnits ( );
__declspec(implementation_key(2128)) void IAcadDimRadialLarge::PutAltUnits ( VARIANT_BOOL bAlternate );
__declspec(implementation_key(2129)) enum AcDimPrecision IAcadDimRadialLarge::GetAltUnitsPrecision ( );
__declspec(implementation_key(2130)) void IAcadDimRadialLarge::PutAltUnitsPrecision ( enum AcDimPrecision precision );
__declspec(implementation_key(2131)) ACAD_NOUNITS IAcadDimRadialLarge::GetAltUnitsScale ( );
__declspec(implementation_key(2132)) void IAcadDimRadialLarge::PutAltUnitsScale ( ACAD_NOUNITS scale );
__declspec(implementation_key(2133)) double IAcadDimRadialLarge::GetAltRoundDistance ( );
__declspec(implementation_key(2134)) void IAcadDimRadialLarge::PutAltRoundDistance ( double Distance );
__declspec(implementation_key(2135)) enum AcDimPrecision IAcadDimRadialLarge::GetAltTolerancePrecision ( );
__declspec(implementation_key(2136)) void IAcadDimRadialLarge::PutAltTolerancePrecision ( enum AcDimPrecision Distance );
__declspec(implementation_key(2137)) enum AcDimUnits IAcadDimRadialLarge::GetAltUnitsFormat ( );
__declspec(implementation_key(2138)) void IAcadDimRadialLarge::PutAltUnitsFormat ( enum AcDimUnits Units );
__declspec(implementation_key(2139)) _bstr_t IAcadDimRadialLarge::GetAltTextPrefix ( );
__declspec(implementation_key(2140)) void IAcadDimRadialLarge::PutAltTextPrefix ( _bstr_t prefix );
__declspec(implementation_key(2141)) _bstr_t IAcadDimRadialLarge::GetAltTextSuffix ( );
__declspec(implementation_key(2142)) void IAcadDimRadialLarge::PutAltTextSuffix ( _bstr_t prefix );
__declspec(implementation_key(2143)) enum AcDimCenterType IAcadDimRadialLarge::GetCenterType ( );
__declspec(implementation_key(2144)) void IAcadDimRadialLarge::PutCenterType ( enum AcDimCenterType Type );
__declspec(implementation_key(2145)) double IAcadDimRadialLarge::GetCenterMarkSize ( );
__declspec(implementation_key(2146)) void IAcadDimRadialLarge::PutCenterMarkSize ( double Type );
__declspec(implementation_key(2147)) ACAD_COLOR IAcadDimRadialLarge::GetDimensionLineColor ( );
__declspec(implementation_key(2148)) void IAcadDimRadialLarge::PutDimensionLineColor ( ACAD_COLOR Type );
__declspec(implementation_key(2149)) enum AcDimPrecision IAcadDimRadialLarge::GetPrimaryUnitsPrecision ( );
__declspec(implementation_key(2150)) void IAcadDimRadialLarge::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec );
__declspec(implementation_key(2151)) enum AcDimFractionType IAcadDimRadialLarge::GetFractionFormat ( );
__declspec(implementation_key(2152)) void IAcadDimRadialLarge::PutFractionFormat ( enum AcDimFractionType Type );
__declspec(implementation_key(2153)) enum AcDimFit IAcadDimRadialLarge::GetFit ( );
__declspec(implementation_key(2154)) void IAcadDimRadialLarge::PutFit ( enum AcDimFit fittype );
__declspec(implementation_key(2155)) ACAD_NOUNITS IAcadDimRadialLarge::GetLinearScaleFactor ( );
__declspec(implementation_key(2156)) void IAcadDimRadialLarge::PutLinearScaleFactor ( ACAD_NOUNITS Type );
__declspec(implementation_key(2157)) enum AcDimLUnits IAcadDimRadialLarge::GetUnitsFormat ( );
__declspec(implementation_key(2158)) void IAcadDimRadialLarge::PutUnitsFormat ( enum AcDimLUnits format );
__declspec(implementation_key(2159)) double IAcadDimRadialLarge::GetRoundDistance ( );
__declspec(implementation_key(2160)) void IAcadDimRadialLarge::PutRoundDistance ( double Distance );
__declspec(implementation_key(2161)) VARIANT_BOOL IAcadDimRadialLarge::GetDimLineSuppress ( );
__declspec(implementation_key(2162)) void IAcadDimRadialLarge::PutDimLineSuppress ( VARIANT_BOOL bSuppress );
__declspec(implementation_key(2163)) VARIANT_BOOL IAcadDimRadialLarge::GetTextInsideAlign ( );
__declspec(implementation_key(2164)) void IAcadDimRadialLarge::PutTextInsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(2165)) VARIANT_BOOL IAcadDimRadialLarge::GetTextInside ( );
__declspec(implementation_key(2166)) void IAcadDimRadialLarge::PutTextInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(2167)) VARIANT_BOOL IAcadDimRadialLarge::GetForceLineInside ( );
__declspec(implementation_key(2168)) void IAcadDimRadialLarge::PutForceLineInside ( VARIANT_BOOL bInside );
__declspec(implementation_key(2169)) VARIANT_BOOL IAcadDimRadialLarge::GetTextOutsideAlign ( );
__declspec(implementation_key(2170)) void IAcadDimRadialLarge::PutTextOutsideAlign ( VARIANT_BOOL bInside );
__declspec(implementation_key(2171)) VARIANT_BOOL IAcadDimRadialLarge::GetAltSuppressLeadingZeros ( );
__declspec(implementation_key(2172)) void IAcadDimRadialLarge::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(2173)) VARIANT_BOOL IAcadDimRadialLarge::GetAltSuppressTrailingZeros ( );
__declspec(implementation_key(2174)) void IAcadDimRadialLarge::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(2175)) VARIANT_BOOL IAcadDimRadialLarge::GetAltSuppressZeroFeet ( );
__declspec(implementation_key(2176)) void IAcadDimRadialLarge::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(2177)) VARIANT_BOOL IAcadDimRadialLarge::GetAltSuppressZeroInches ( );
__declspec(implementation_key(2178)) void IAcadDimRadialLarge::PutAltSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(2179)) VARIANT_BOOL IAcadDimRadialLarge::GetAltToleranceSuppressLeadingZeros ( );
__declspec(implementation_key(2180)) void IAcadDimRadialLarge::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(2181)) VARIANT_BOOL IAcadDimRadialLarge::GetAltToleranceSuppressTrailingZeros ( );
__declspec(implementation_key(2182)) void IAcadDimRadialLarge::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal );
__declspec(implementation_key(2183)) VARIANT_BOOL IAcadDimRadialLarge::GetAltToleranceSuppressZeroFeet ( );
__declspec(implementation_key(2184)) void IAcadDimRadialLarge::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(2185)) VARIANT_BOOL IAcadDimRadialLarge::GetAltToleranceSuppressZeroInches ( );
__declspec(implementation_key(2186)) void IAcadDimRadialLarge::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(2187)) VARIANT_BOOL IAcadDimRadialLarge::GetSuppressZeroFeet ( );
__declspec(implementation_key(2188)) void IAcadDimRadialLarge::PutSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(2189)) VARIANT_BOOL IAcadDimRadialLarge::GetSuppressZeroInches ( );
__declspec(implementation_key(2190)) void IAcadDimRadialLarge::PutSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(2191)) VARIANT_BOOL IAcadDimRadialLarge::GetToleranceSuppressZeroFeet ( );
__declspec(implementation_key(2192)) void IAcadDimRadialLarge::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal );
__declspec(implementation_key(2193)) VARIANT_BOOL IAcadDimRadialLarge::GetToleranceSuppressZeroInches ( );
__declspec(implementation_key(2194)) void IAcadDimRadialLarge::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal );
__declspec(implementation_key(2195)) ACAD_LWEIGHT IAcadDimRadialLarge::GetDimensionLineWeight ( );
__declspec(implementation_key(2196)) void IAcadDimRadialLarge::PutDimensionLineWeight ( ACAD_LWEIGHT weight );
__declspec(implementation_key(2197)) double IAcadDimRadialLarge::GetArrowheadSize ( );
__declspec(implementation_key(2198)) void IAcadDimRadialLarge::PutArrowheadSize ( double size );
__declspec(implementation_key(2199)) enum AcDimArrowheadType IAcadDimRadialLarge::GetArrowheadType ( );
__declspec(implementation_key(2200)) void IAcadDimRadialLarge::PutArrowheadType ( enum AcDimArrowheadType Type );
__declspec(implementation_key(2201)) double IAcadDimRadialLarge::GetMeasurement ( );
__declspec(implementation_key(2202)) _bstr_t IAcadDimRadialLarge::GetArrowheadBlock ( );
__declspec(implementation_key(2203)) void IAcadDimRadialLarge::PutArrowheadBlock ( _bstr_t BlockName );
__declspec(implementation_key(2204)) _variant_t IAcadDimRadialLarge::GetOverrideCenter ( );
__declspec(implementation_key(2205)) void IAcadDimRadialLarge::PutOverrideCenter ( const _variant_t & overrideCenterPos );
__declspec(implementation_key(2206)) _variant_t IAcadDimRadialLarge::GetJogLocation ( );
__declspec(implementation_key(2207)) void IAcadDimRadialLarge::PutJogLocation ( const _variant_t & jogPos );
__declspec(implementation_key(2208)) ACAD_ANGLE IAcadDimRadialLarge::GetJogAngle ( );
__declspec(implementation_key(2209)) void IAcadDimRadialLarge::PutJogAngle ( ACAD_ANGLE JogAngle );
__declspec(implementation_key(2210)) _variant_t IAcadDimRadialLarge::GetCenter ( );
__declspec(implementation_key(2211)) void IAcadDimRadialLarge::PutCenter ( const _variant_t & pVar );
__declspec(implementation_key(2212)) _variant_t IAcadDimRadialLarge::GetChordPoint ( );
__declspec(implementation_key(2213)) void IAcadDimRadialLarge::PutChordPoint ( const _variant_t & pVal );
__declspec(implementation_key(2214)) _bstr_t IAcadDimRadialLarge::GetDimensionLinetype ( );
__declspec(implementation_key(2215)) void IAcadDimRadialLarge::PutDimensionLinetype ( _bstr_t Linetype );
__declspec(implementation_key(2216)) enum AcSectionType IAcadSectionSettings::GetCurrentSectionType ( );
__declspec(implementation_key(2217)) void IAcadSectionSettings::PutCurrentSectionType ( enum AcSectionType pVal );
__declspec(implementation_key(2218)) IAcadSectionTypeSettingsPtr IAcadSectionSettings::GetSectionTypeSettings ( enum AcSectionType secType );
__declspec(implementation_key(2219)) _bstr_t IAcadSection::GetName ( );
__declspec(implementation_key(2220)) void IAcadSection::PutName ( _bstr_t pbstrName );
__declspec(implementation_key(2221)) enum AcSectionState IAcadSection::GetState ( );
__declspec(implementation_key(2222)) void IAcadSection::PutState ( enum AcSectionState pVal );
__declspec(implementation_key(2223)) _variant_t IAcadSection::GetViewingDirection ( );
__declspec(implementation_key(2224)) void IAcadSection::PutViewingDirection ( const _variant_t & pVal );
__declspec(implementation_key(2225)) _variant_t IAcadSection::GetVerticalDirection ( );
__declspec(implementation_key(2226)) void IAcadSection::PutVerticalDirection ( const _variant_t & pVal );
__declspec(implementation_key(2227)) _variant_t IAcadSection::GetNormal ( );
__declspec(implementation_key(2228)) VARIANT_BOOL IAcadSection::GetLiveSectionEnabled ( );
__declspec(implementation_key(2229)) void IAcadSection::PutLiveSectionEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(2230)) int IAcadSection::GetIndicatorTransparency ( );
__declspec(implementation_key(2231)) void IAcadSection::PutIndicatorTransparency ( int pVal );
__declspec(implementation_key(2232)) IAcadAcCmColorPtr IAcadSection::GetIndicatorFillColor ( );
__declspec(implementation_key(2233)) void IAcadSection::PutIndicatorFillColor ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(2234)) double IAcadSection::GetElevation ( );
__declspec(implementation_key(2235)) void IAcadSection::PutElevation ( double pVal );
__declspec(implementation_key(2236)) double IAcadSection::GetTopHeight ( );
__declspec(implementation_key(2237)) void IAcadSection::PutTopHeight ( double pVal );
__declspec(implementation_key(2238)) double IAcadSection::GetBottomHeight ( );
__declspec(implementation_key(2239)) void IAcadSection::PutBottomHeight ( double pVal );
__declspec(implementation_key(2240)) int IAcadSection::GetNumVertices ( );
__declspec(implementation_key(2241)) _variant_t IAcadSection::GetVertices ( );
__declspec(implementation_key(2242)) void IAcadSection::PutVertices ( const _variant_t & pVal );
__declspec(implementation_key(2243)) _variant_t IAcadSection::GetCoordinate ( int Index );
__declspec(implementation_key(2244)) void IAcadSection::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(2245)) HRESULT IAcadSection::AddVertex ( int nIndex, const _variant_t & val );
__declspec(implementation_key(2246)) HRESULT IAcadSection::RemoveVertex ( int nIndex );
__declspec(implementation_key(2247)) HRESULT IAcadSection::HitTest ( const _variant_t & varPtHit, VARIANT_BOOL * pHit, int * pSegmentIndex, VARIANT * pPtOnSegment, enum AcSectionSubItem * pSubItem );
__declspec(implementation_key(2248)) HRESULT IAcadSection::CreateJog ( const _variant_t & varPt );
__declspec(implementation_key(2249)) IAcadSectionSettingsPtr IAcadSection::GetSettings ( );
__declspec(implementation_key(2250)) HRESULT IAcadSection::GenerateSectionGeometry ( struct IAcadEntity * pEntity, VARIANT * pIntersectionBoundaryObjs, VARIANT * pIntersectionFillObjs, VARIANT * pBackgroudnObjs, VARIANT * pForegroudObjs, VARIANT * pCurveTangencyObjs );
__declspec(implementation_key(2251)) double IAcadMLeader::GetScaleFactor ( );
__declspec(implementation_key(2252)) void IAcadMLeader::PutScaleFactor ( double scale );
__declspec(implementation_key(2253)) enum AcMLeaderType IAcadMLeader::GetLeaderType ( );
__declspec(implementation_key(2254)) void IAcadMLeader::PutLeaderType ( enum AcMLeaderType Type );
__declspec(implementation_key(2255)) IAcadAcCmColorPtr IAcadMLeader::GetLeaderLineColor ( );
__declspec(implementation_key(2256)) void IAcadMLeader::PutLeaderLineColor ( struct IAcadAcCmColor * Type );
__declspec(implementation_key(2257)) ACAD_LTYPE IAcadMLeader::GetLeaderLinetype ( );
__declspec(implementation_key(2258)) void IAcadMLeader::PutLeaderLinetype ( ACAD_LTYPE Linetype );
__declspec(implementation_key(2259)) ACAD_LWEIGHT IAcadMLeader::GetLeaderLineWeight ( );
__declspec(implementation_key(2260)) void IAcadMLeader::PutLeaderLineWeight ( ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(2261)) enum AcDimArrowheadType IAcadMLeader::GetArrowheadType ( );
__declspec(implementation_key(2262)) void IAcadMLeader::PutArrowheadType ( enum AcDimArrowheadType BlockName );
__declspec(implementation_key(2263)) double IAcadMLeader::GetArrowheadSize ( );
__declspec(implementation_key(2264)) void IAcadMLeader::PutArrowheadSize ( double size );
__declspec(implementation_key(2265)) VARIANT_BOOL IAcadMLeader::GetDogLegged ( );
__declspec(implementation_key(2266)) void IAcadMLeader::PutDogLegged ( VARIANT_BOOL val );
__declspec(implementation_key(2267)) double IAcadMLeader::GetDoglegLength ( );
__declspec(implementation_key(2268)) void IAcadMLeader::PutDoglegLength ( double DoglegLength );
__declspec(implementation_key(2269)) _bstr_t IAcadMLeader::GetContentBlockName ( );
__declspec(implementation_key(2270)) void IAcadMLeader::PutContentBlockName ( _bstr_t BlockName );
__declspec(implementation_key(2271)) enum AcBlockConnectionType IAcadMLeader::GetBlockConnectionType ( );
__declspec(implementation_key(2272)) void IAcadMLeader::PutBlockConnectionType ( enum AcBlockConnectionType Type );
__declspec(implementation_key(2273)) ACAD_NOUNITS IAcadMLeader::GetBlockScale ( );
__declspec(implementation_key(2274)) void IAcadMLeader::PutBlockScale ( ACAD_NOUNITS factor );
__declspec(implementation_key(2275)) _bstr_t IAcadMLeader::GetTextString ( );
__declspec(implementation_key(2276)) void IAcadMLeader::PutTextString ( _bstr_t bstrText );
__declspec(implementation_key(2277)) _bstr_t IAcadMLeader::GetTextStyleName ( );
__declspec(implementation_key(2278)) void IAcadMLeader::PutTextStyleName ( _bstr_t bstrName );
__declspec(implementation_key(2279)) enum AcAttachmentPoint IAcadMLeader::GetTextJustify ( );
__declspec(implementation_key(2280)) void IAcadMLeader::PutTextJustify ( enum AcAttachmentPoint attPoint );
__declspec(implementation_key(2281)) enum AcDrawingDirection IAcadMLeader::GetTextDirection ( );
__declspec(implementation_key(2282)) void IAcadMLeader::PutTextDirection ( enum AcDrawingDirection drawDir );
__declspec(implementation_key(2283)) double IAcadMLeader::GetTextWidth ( );
__declspec(implementation_key(2284)) void IAcadMLeader::PutTextWidth ( double Width );
__declspec(implementation_key(2285)) double IAcadMLeader::GetTextHeight ( );
__declspec(implementation_key(2286)) void IAcadMLeader::PutTextHeight ( double Height );
__declspec(implementation_key(2287)) ACAD_ANGLE IAcadMLeader::GetTextRotation ( );
__declspec(implementation_key(2288)) void IAcadMLeader::PutTextRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(2289)) double IAcadMLeader::GetTextLineSpacingFactor ( );
__declspec(implementation_key(2290)) void IAcadMLeader::PutTextLineSpacingFactor ( double factor );
__declspec(implementation_key(2291)) double IAcadMLeader::GetTextLineSpacingDistance ( );
__declspec(implementation_key(2292)) void IAcadMLeader::PutTextLineSpacingDistance ( double Value );
__declspec(implementation_key(2293)) enum AcLineSpacingStyle IAcadMLeader::GetTextLineSpacingStyle ( );
__declspec(implementation_key(2294)) void IAcadMLeader::PutTextLineSpacingStyle ( enum AcLineSpacingStyle style );
__declspec(implementation_key(2295)) VARIANT_BOOL IAcadMLeader::GetTextBackgroundFill ( );
__declspec(implementation_key(2296)) void IAcadMLeader::PutTextBackgroundFill ( VARIANT_BOOL bUseBackgroundFill );
__declspec(implementation_key(2297)) enum AcTextAttachmentDirection IAcadMLeader::GetTextAttachmentDirection ( );
__declspec(implementation_key(2298)) void IAcadMLeader::PutTextAttachmentDirection ( enum AcTextAttachmentDirection dir );
__declspec(implementation_key(2299)) enum AcTextAttachmentType IAcadMLeader::GetTextLeftAttachmentType ( );
__declspec(implementation_key(2300)) void IAcadMLeader::PutTextLeftAttachmentType ( enum AcTextAttachmentType Type );
__declspec(implementation_key(2301)) enum AcTextAttachmentType IAcadMLeader::GetTextRightAttachmentType ( );
__declspec(implementation_key(2302)) void IAcadMLeader::PutTextRightAttachmentType ( enum AcTextAttachmentType Type );
__declspec(implementation_key(2303)) enum AcVerticalTextAttachmentType IAcadMLeader::GetTextTopAttachmentType ( );
__declspec(implementation_key(2304)) void IAcadMLeader::PutTextTopAttachmentType ( enum AcVerticalTextAttachmentType Type );
__declspec(implementation_key(2305)) enum AcVerticalTextAttachmentType IAcadMLeader::GetTextBottomAttachmentType ( );
__declspec(implementation_key(2306)) void IAcadMLeader::PutTextBottomAttachmentType ( enum AcVerticalTextAttachmentType Type );
__declspec(implementation_key(2307)) double IAcadMLeader::GetLandingGap ( );
__declspec(implementation_key(2308)) void IAcadMLeader::PutLandingGap ( double gap );
__declspec(implementation_key(2309)) _bstr_t IAcadMLeader::GetArrowheadBlock ( );
__declspec(implementation_key(2310)) void IAcadMLeader::PutArrowheadBlock ( _bstr_t BlockName );
__declspec(implementation_key(2311)) enum AcPredefBlockType IAcadMLeader::GetContentBlockType ( );
__declspec(implementation_key(2312)) void IAcadMLeader::PutContentBlockType ( enum AcPredefBlockType Type );
__declspec(implementation_key(2313)) int IAcadMLeader::GetLeaderCount ( );
__declspec(implementation_key(2314)) int IAcadMLeader::AddLeader ( );
__declspec(implementation_key(2315)) HRESULT IAcadMLeader::RemoveLeader ( int leaderIndex );
__declspec(implementation_key(2316)) int IAcadMLeader::AddLeaderLine ( int leaderIndex, const _variant_t & pointArray );
__declspec(implementation_key(2317)) int IAcadMLeader::AddLeaderLineEx ( const _variant_t & pointArray );
__declspec(implementation_key(2318)) HRESULT IAcadMLeader::RemoveLeaderLine ( int leaderLineIndex );
__declspec(implementation_key(2319)) HRESULT IAcadMLeader::SetLeaderLineVertices ( int leaderLineIndex, const _variant_t & pointArray );
__declspec(implementation_key(2320)) _variant_t IAcadMLeader::GetLeaderLineVertices ( int leaderLineIndex );
__declspec(implementation_key(2321)) void IAcadMLeader::PutContentType ( enum AcMLeaderContentType Type );
__declspec(implementation_key(2322)) enum AcMLeaderContentType IAcadMLeader::GetContentType ( );
__declspec(implementation_key(2323)) int IAcadMLeader::GetLeaderIndex ( int leaderLineIndex );
__declspec(implementation_key(2324)) _variant_t IAcadMLeader::GetLeaderLineIndexes ( int leaderIndex );
__declspec(implementation_key(2325)) int IAcadMLeader::GetVertexCount ( int leaderLineIndex );
__declspec(implementation_key(2326)) VARIANT_BOOL IAcadMLeader::GetTextFrameDisplay ( );
__declspec(implementation_key(2327)) void IAcadMLeader::PutTextFrameDisplay ( VARIANT_BOOL pVal );
__declspec(implementation_key(2328)) _bstr_t IAcadMLeader::GetStyleName ( );
__declspec(implementation_key(2329)) void IAcadMLeader::PutStyleName ( _bstr_t Name );
__declspec(implementation_key(2330)) _variant_t IAcadMLeader::GetDoglegDirection ( int leaderIndex );
__declspec(implementation_key(2331)) HRESULT IAcadMLeader::SetDoglegDirection ( int leaderIndex, const _variant_t & dirVec );
__declspec(implementation_key(2332)) _bstr_t IAcadMLeader::GetBlockAttributeValue ( LONG_PTR attdefId );
__declspec(implementation_key(2333)) HRESULT IAcadMLeader::SetBlockAttributeValue ( LONG_PTR attdefId, _bstr_t Value );
__declspec(implementation_key(2334)) _variant_t IAcadView::GetCenter ( );
__declspec(implementation_key(2335)) void IAcadView::PutCenter ( const _variant_t & Center );
__declspec(implementation_key(2336)) double IAcadView::GetHeight ( );
__declspec(implementation_key(2337)) void IAcadView::PutHeight ( double Height );
__declspec(implementation_key(2338)) double IAcadView::GetWidth ( );
__declspec(implementation_key(2339)) void IAcadView::PutWidth ( double Width );
__declspec(implementation_key(2340)) _variant_t IAcadView::GetTarget ( );
__declspec(implementation_key(2341)) void IAcadView::PutTarget ( const _variant_t & targetPoint );
__declspec(implementation_key(2342)) _variant_t IAcadView::GetDirection ( );
__declspec(implementation_key(2343)) void IAcadView::PutDirection ( const _variant_t & dirVec );
__declspec(implementation_key(2344)) _bstr_t IAcadView::GetName ( );
__declspec(implementation_key(2345)) void IAcadView::PutName ( _bstr_t bstrName );
__declspec(implementation_key(2346)) _bstr_t IAcadView::GetCategoryName ( );
__declspec(implementation_key(2347)) void IAcadView::PutCategoryName ( _bstr_t category );
__declspec(implementation_key(2348)) LONG_PTR IAcadView::GetLayoutId ( );
__declspec(implementation_key(2349)) void IAcadView::PutLayoutId ( LONG_PTR ObjectID );
__declspec(implementation_key(2350)) _bstr_t IAcadView::GetLayerState ( );
__declspec(implementation_key(2351)) void IAcadView::PutLayerState ( _bstr_t LayerState );
__declspec(implementation_key(2352)) VARIANT_BOOL IAcadView::GetHasVpAssociation ( );
__declspec(implementation_key(2353)) void IAcadView::PutHasVpAssociation ( VARIANT_BOOL bVpAssoc );
__declspec(implementation_key(2354)) _variant_t IAcadPViewport::GetCenter ( );
__declspec(implementation_key(2355)) void IAcadPViewport::PutCenter ( const _variant_t & CenterPoint );
__declspec(implementation_key(2356)) _variant_t IAcadPViewport::GetDirection ( );
__declspec(implementation_key(2357)) void IAcadPViewport::PutDirection ( const _variant_t & dirVector );
__declspec(implementation_key(2358)) VARIANT_BOOL IAcadPViewport::GetGridOn ( );
__declspec(implementation_key(2359)) void IAcadPViewport::PutGridOn ( VARIANT_BOOL bGridOn );
__declspec(implementation_key(2360)) double IAcadPViewport::GetHeight ( );
__declspec(implementation_key(2361)) void IAcadPViewport::PutHeight ( double Height );
__declspec(implementation_key(2362)) double IAcadPViewport::GetWidth ( );
__declspec(implementation_key(2363)) void IAcadPViewport::PutWidth ( double Width );
__declspec(implementation_key(2364)) VARIANT_BOOL IAcadPViewport::GetViewportOn ( );
__declspec(implementation_key(2365)) void IAcadPViewport::PutViewportOn ( VARIANT_BOOL bOn );
__declspec(implementation_key(2366)) VARIANT_BOOL IAcadPViewport::GetClipped ( );
__declspec(implementation_key(2367)) VARIANT_BOOL IAcadPViewport::GetDisplayLocked ( );
__declspec(implementation_key(2368)) void IAcadPViewport::PutDisplayLocked ( VARIANT_BOOL bLocked );
__declspec(implementation_key(2369)) enum AcViewportScale IAcadPViewport::GetStandardScale ( );
__declspec(implementation_key(2370)) void IAcadPViewport::PutStandardScale ( enum AcViewportScale scale );
__declspec(implementation_key(2371)) double IAcadPViewport::GetCustomScale ( );
__declspec(implementation_key(2372)) void IAcadPViewport::PutCustomScale ( double scale );
__declspec(implementation_key(2373)) _bstr_t IAcadPViewport::GetStyleSheet ( );
__declspec(implementation_key(2374)) void IAcadPViewport::PutStyleSheet ( _bstr_t pName );
__declspec(implementation_key(2375)) VARIANT_BOOL IAcadPViewport::GetUCSPerViewport ( );
__declspec(implementation_key(2376)) void IAcadPViewport::PutUCSPerViewport ( VARIANT_BOOL UCSSaved );
__declspec(implementation_key(2377)) _variant_t IAcadPViewport::GetSnapBasePoint ( );
__declspec(implementation_key(2378)) void IAcadPViewport::PutSnapBasePoint ( const _variant_t & lowLeft );
__declspec(implementation_key(2379)) VARIANT_BOOL IAcadPViewport::GetSnapOn ( );
__declspec(implementation_key(2380)) void IAcadPViewport::PutSnapOn ( VARIANT_BOOL bSnapOn );
__declspec(implementation_key(2381)) double IAcadPViewport::GetSnapRotationAngle ( );
__declspec(implementation_key(2382)) void IAcadPViewport::PutSnapRotationAngle ( double Angle );
__declspec(implementation_key(2383)) VARIANT_BOOL IAcadPViewport::GetUCSIconOn ( );
__declspec(implementation_key(2384)) void IAcadPViewport::PutUCSIconOn ( VARIANT_BOOL bIconOn );
__declspec(implementation_key(2385)) VARIANT_BOOL IAcadPViewport::GetUCSIconAtOrigin ( );
__declspec(implementation_key(2386)) void IAcadPViewport::PutUCSIconAtOrigin ( VARIANT_BOOL bIconAtOrigin );
__declspec(implementation_key(2387)) HRESULT IAcadPViewport::GetGridSpacing ( double * XSpacing, double * YSpacing );
__declspec(implementation_key(2388)) HRESULT IAcadPViewport::SetGridSpacing ( double XSpacing, double YSpacing );
__declspec(implementation_key(2389)) HRESULT IAcadPViewport::GetSnapSpacing ( double * XSpacing, double * YSpacing );
__declspec(implementation_key(2390)) HRESULT IAcadPViewport::SetSnapSpacing ( double XSpacing, double YSpacing );
__declspec(implementation_key(2391)) HRESULT IAcadPViewport::Display ( VARIANT_BOOL bStatus );
__declspec(implementation_key(2392)) ACAD_ANGLE IAcadPViewport::GetTwistAngle ( );
__declspec(implementation_key(2393)) void IAcadPViewport::PutTwistAngle ( ACAD_ANGLE Angle );
__declspec(implementation_key(2394)) double IAcadPViewport::GetLensLength ( );
__declspec(implementation_key(2395)) void IAcadPViewport::PutLensLength ( double Length );
__declspec(implementation_key(2396)) VARIANT_BOOL IAcadPViewport::GetRemoveHiddenLines ( );
__declspec(implementation_key(2397)) void IAcadPViewport::PutRemoveHiddenLines ( VARIANT_BOOL bRemoval );
__declspec(implementation_key(2398)) _variant_t IAcadPViewport::GetTarget ( );
__declspec(implementation_key(2399)) void IAcadPViewport::PutTarget ( const _variant_t & targetPoint );
__declspec(implementation_key(2400)) long IAcadPViewport::GetArcSmoothness ( );
__declspec(implementation_key(2401)) void IAcadPViewport::PutArcSmoothness ( long arcSmooth );
__declspec(implementation_key(2402)) int IAcadPViewport::GetVisualStyle ( );
__declspec(implementation_key(2403)) void IAcadPViewport::PutVisualStyle ( int pVisualStyleIndex );
__declspec(implementation_key(2404)) int IAcadPViewport::GetShadePlot ( );
__declspec(implementation_key(2405)) void IAcadPViewport::PutShadePlot ( int pShadePlotIndex );
__declspec(implementation_key(2406)) IAcadViewPtr IAcadPViewport::GetModelView ( );
__declspec(implementation_key(2407)) void IAcadPViewport::PutModelView ( struct IAcadView * View );
__declspec(implementation_key(2408)) IAcadViewPtr IAcadPViewport::GetSheetView ( );
__declspec(implementation_key(2409)) void IAcadPViewport::PutSheetView ( struct IAcadView * View );
__declspec(implementation_key(2410)) LONG_PTR IAcadPViewport::GetLabelBlockId ( );
__declspec(implementation_key(2411)) void IAcadPViewport::PutLabelBlockId ( LONG_PTR * ObjectID );
__declspec(implementation_key(2412)) VARIANT_BOOL IAcadPViewport::GetHasSheetView ( );
__declspec(implementation_key(2413)) HRESULT IAcadPViewport::SyncModelView ( );
__declspec(implementation_key(2414)) int IAcadPViewport::GetStandardScale2 ( );
__declspec(implementation_key(2415)) void IAcadPViewport::PutStandardScale2 ( int scale );
__declspec(implementation_key(2416)) VARIANT_BOOL IAcadPViewport::GetLayerPropertyOverrides ( );
__declspec(implementation_key(2417)) IAcadEntityPtr IAcadGroup::Item ( const _variant_t & Index );
__declspec(implementation_key(2418)) IUnknownPtr IAcadGroup::Get_NewEnum ( );
__declspec(implementation_key(2419)) long IAcadGroup::GetCount ( );
__declspec(implementation_key(2420)) void IAcadGroup::PutTrueColor ( struct IAcadAcCmColor * _arg1 );
__declspec(implementation_key(2421)) void IAcadGroup::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(2422)) void IAcadGroup::PutLinetype ( _bstr_t _arg1 );
__declspec(implementation_key(2423)) void IAcadGroup::PutLinetypeScale ( ACAD_NOUNITS _arg1 );
__declspec(implementation_key(2424)) void IAcadGroup::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2425)) HRESULT IAcadGroup::Highlight ( VARIANT_BOOL HighlightFlag );
__declspec(implementation_key(2426)) void IAcadGroup::PutPlotStyleName ( _bstr_t _arg1 );
__declspec(implementation_key(2427)) void IAcadGroup::PutLineweight ( ACAD_LWEIGHT _arg1 );
__declspec(implementation_key(2428)) _bstr_t IAcadGroup::GetName ( );
__declspec(implementation_key(2429)) void IAcadGroup::PutName ( _bstr_t pVal );
__declspec(implementation_key(2430)) HRESULT IAcadGroup::AppendItems ( const _variant_t & Objects );
__declspec(implementation_key(2431)) HRESULT IAcadGroup::RemoveItems ( const _variant_t & Objects );
__declspec(implementation_key(2432)) HRESULT IAcadGroup::Update ( );
__declspec(implementation_key(2433)) void IAcadGroup::PutMaterial ( _bstr_t _arg1 );
__declspec(implementation_key(2434)) void IAcadGroup::Putcolor ( enum AcColor _arg1 );
__declspec(implementation_key(2435)) IAcadGroupPtr IAcadGroups::Item ( const _variant_t & Index );
__declspec(implementation_key(2436)) long IAcadGroups::GetCount ( );
__declspec(implementation_key(2437)) IUnknownPtr IAcadGroups::Get_NewEnum ( );
__declspec(implementation_key(2438)) IAcadGroupPtr IAcadGroups::Add ( _bstr_t Name );
__declspec(implementation_key(2439)) _bstr_t IAcadDimStyle::GetName ( );
__declspec(implementation_key(2440)) void IAcadDimStyle::PutName ( _bstr_t bstrName );
__declspec(implementation_key(2441)) HRESULT IAcadDimStyle::CopyFrom ( IDispatch * StyleSource );
__declspec(implementation_key(2442)) IAcadDimStylePtr IAcadDimStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(2443)) long IAcadDimStyles::GetCount ( );
__declspec(implementation_key(2444)) IUnknownPtr IAcadDimStyles::Get_NewEnum ( );
__declspec(implementation_key(2445)) IAcadDimStylePtr IAcadDimStyles::Add ( _bstr_t Name );
__declspec(implementation_key(2446)) enum AcColor IAcadLayer::Getcolor ( );
__declspec(implementation_key(2447)) void IAcadLayer::Putcolor ( enum AcColor color );
__declspec(implementation_key(2448)) IAcadAcCmColorPtr IAcadLayer::GetTrueColor ( );
__declspec(implementation_key(2449)) void IAcadLayer::PutTrueColor ( struct IAcadAcCmColor * pColor );
__declspec(implementation_key(2450)) VARIANT_BOOL IAcadLayer::GetFreeze ( );
__declspec(implementation_key(2451)) void IAcadLayer::PutFreeze ( VARIANT_BOOL bFreeze );
__declspec(implementation_key(2452)) VARIANT_BOOL IAcadLayer::GetLayerOn ( );
__declspec(implementation_key(2453)) void IAcadLayer::PutLayerOn ( VARIANT_BOOL bOn );
__declspec(implementation_key(2454)) _bstr_t IAcadLayer::GetLinetype ( );
__declspec(implementation_key(2455)) void IAcadLayer::PutLinetype ( _bstr_t Linetype );
__declspec(implementation_key(2456)) VARIANT_BOOL IAcadLayer::GetLock ( );
__declspec(implementation_key(2457)) void IAcadLayer::PutLock ( VARIANT_BOOL Block );
__declspec(implementation_key(2458)) _bstr_t IAcadLayer::GetName ( );
__declspec(implementation_key(2459)) void IAcadLayer::PutName ( _bstr_t bstrName );
__declspec(implementation_key(2460)) VARIANT_BOOL IAcadLayer::GetPlottable ( );
__declspec(implementation_key(2461)) void IAcadLayer::PutPlottable ( VARIANT_BOOL bPlottable );
__declspec(implementation_key(2462)) VARIANT_BOOL IAcadLayer::GetViewportDefault ( );
__declspec(implementation_key(2463)) void IAcadLayer::PutViewportDefault ( VARIANT_BOOL bDefault );
__declspec(implementation_key(2464)) _bstr_t IAcadLayer::GetPlotStyleName ( );
__declspec(implementation_key(2465)) void IAcadLayer::PutPlotStyleName ( _bstr_t plotStyle );
__declspec(implementation_key(2466)) ACAD_LWEIGHT IAcadLayer::GetLineweight ( );
__declspec(implementation_key(2467)) void IAcadLayer::PutLineweight ( ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(2468)) _bstr_t IAcadLayer::GetDescription ( );
__declspec(implementation_key(2469)) void IAcadLayer::PutDescription ( _bstr_t Description );
__declspec(implementation_key(2470)) VARIANT_BOOL IAcadLayer::GetUsed ( );
__declspec(implementation_key(2471)) _bstr_t IAcadLayer::GetMaterial ( );
__declspec(implementation_key(2472)) void IAcadLayer::PutMaterial ( _bstr_t Material );
__declspec(implementation_key(2473)) IAcadLayerPtr IAcadLayers::Item ( const _variant_t & Index );
__declspec(implementation_key(2474)) long IAcadLayers::GetCount ( );
__declspec(implementation_key(2475)) IUnknownPtr IAcadLayers::Get_NewEnum ( );
__declspec(implementation_key(2476)) IAcadLayerPtr IAcadLayers::Add ( _bstr_t Name );
__declspec(implementation_key(2477)) HRESULT IAcadLayers::GenerateUsageData ( );
__declspec(implementation_key(2478)) _bstr_t IAcadLineType::GetDescription ( );
__declspec(implementation_key(2479)) void IAcadLineType::PutDescription ( _bstr_t bstrDes );
__declspec(implementation_key(2480)) _bstr_t IAcadLineType::GetName ( );
__declspec(implementation_key(2481)) void IAcadLineType::PutName ( _bstr_t bstrName );
__declspec(implementation_key(2482)) IAcadLineTypePtr IAcadLineTypes::Item ( const _variant_t & Index );
__declspec(implementation_key(2483)) long IAcadLineTypes::GetCount ( );
__declspec(implementation_key(2484)) IUnknownPtr IAcadLineTypes::Get_NewEnum ( );
__declspec(implementation_key(2485)) IAcadLineTypePtr IAcadLineTypes::Add ( _bstr_t Name );
__declspec(implementation_key(2486)) HRESULT IAcadLineTypes::Load ( _bstr_t Name, _bstr_t FileName );
__declspec(implementation_key(2487)) _bstr_t IAcadXRecord::GetName ( );
__declspec(implementation_key(2488)) void IAcadXRecord::PutName ( _bstr_t bstrName );
__declspec(implementation_key(2489)) HRESULT IAcadXRecord::GetXRecordData ( VARIANT * XRecordDataType, VARIANT * XRecordDataValue );
__declspec(implementation_key(2490)) HRESULT IAcadXRecord::SetXRecordData ( const _variant_t & XRecordDataType, const _variant_t & XRecordDataValue );
__declspec(implementation_key(2491)) VARIANT_BOOL IAcadXRecord::GetTranslateIDs ( );
__declspec(implementation_key(2492)) void IAcadXRecord::PutTranslateIDs ( VARIANT_BOOL xlateIds );
__declspec(implementation_key(2493)) _bstr_t IAcadDictionary::GetName ( );
__declspec(implementation_key(2494)) void IAcadDictionary::PutName ( _bstr_t pVal );
__declspec(implementation_key(2495)) IAcadObjectPtr IAcadDictionary::AddObject ( _bstr_t Keyword, _bstr_t ObjectName );
__declspec(implementation_key(2496)) _bstr_t IAcadDictionary::GetName ( struct IAcadObject * Object );
__declspec(implementation_key(2497)) IAcadObjectPtr IAcadDictionary::GetObject ( _bstr_t Name );
__declspec(implementation_key(2498)) IAcadObjectPtr IAcadDictionary::Remove ( _bstr_t Name );
__declspec(implementation_key(2499)) HRESULT IAcadDictionary::Rename ( _bstr_t OldName, _bstr_t NewName );
__declspec(implementation_key(2500)) HRESULT IAcadDictionary::Replace ( _bstr_t OldName, struct IAcadObject * pObj );
__declspec(implementation_key(2501)) IAcadObjectPtr IAcadDictionary::Item ( const _variant_t & Index );
__declspec(implementation_key(2502)) IUnknownPtr IAcadDictionary::Get_NewEnum ( );
__declspec(implementation_key(2503)) long IAcadDictionary::GetCount ( );
__declspec(implementation_key(2504)) IAcadXRecordPtr IAcadDictionary::AddXRecord ( _bstr_t Keyword );
__declspec(implementation_key(2505)) IAcadObjectPtr IAcadDictionaries::Item ( const _variant_t & Index );
__declspec(implementation_key(2506)) long IAcadDictionaries::GetCount ( );
__declspec(implementation_key(2507)) IUnknownPtr IAcadDictionaries::Get_NewEnum ( );
__declspec(implementation_key(2508)) IAcadDictionaryPtr IAcadDictionaries::Add ( _bstr_t Name );
__declspec(implementation_key(2509)) _bstr_t IAcadRegisteredApplication::GetName ( );
__declspec(implementation_key(2510)) void IAcadRegisteredApplication::PutName ( _bstr_t bstrName );
__declspec(implementation_key(2511)) IAcadRegisteredApplicationPtr IAcadRegisteredApplications::Item ( const _variant_t & Index );
__declspec(implementation_key(2512)) long IAcadRegisteredApplications::GetCount ( );
__declspec(implementation_key(2513)) IUnknownPtr IAcadRegisteredApplications::Get_NewEnum ( );
__declspec(implementation_key(2514)) IAcadRegisteredApplicationPtr IAcadRegisteredApplications::Add ( _bstr_t Name );
__declspec(implementation_key(2515)) _bstr_t IAcadTextStyle::GetBigFontFile ( );
__declspec(implementation_key(2516)) void IAcadTextStyle::PutBigFontFile ( _bstr_t fontFile );
__declspec(implementation_key(2517)) _bstr_t IAcadTextStyle::GetfontFile ( );
__declspec(implementation_key(2518)) void IAcadTextStyle::PutfontFile ( _bstr_t fontFile );
__declspec(implementation_key(2519)) double IAcadTextStyle::GetHeight ( );
__declspec(implementation_key(2520)) void IAcadTextStyle::PutHeight ( double Height );
__declspec(implementation_key(2521)) double IAcadTextStyle::GetLastHeight ( );
__declspec(implementation_key(2522)) void IAcadTextStyle::PutLastHeight ( double Height );
__declspec(implementation_key(2523)) _bstr_t IAcadTextStyle::GetName ( );
__declspec(implementation_key(2524)) ACAD_ANGLE IAcadTextStyle::GetObliqueAngle ( );
__declspec(implementation_key(2525)) void IAcadTextStyle::PutObliqueAngle ( ACAD_ANGLE obliAngle );
__declspec(implementation_key(2526)) long IAcadTextStyle::GetTextGenerationFlag ( );
__declspec(implementation_key(2527)) void IAcadTextStyle::PutTextGenerationFlag ( long textGenFlag );
__declspec(implementation_key(2528)) double IAcadTextStyle::GetWidth ( );
__declspec(implementation_key(2529)) void IAcadTextStyle::PutWidth ( double Width );
__declspec(implementation_key(2530)) HRESULT IAcadTextStyle::GetFont ( BSTR * TypeFace, VARIANT_BOOL * Bold, VARIANT_BOOL * Italic, long * Charset, long * PitchAndFamily );
__declspec(implementation_key(2531)) HRESULT IAcadTextStyle::SetFont ( _bstr_t TypeFace, VARIANT_BOOL Bold, VARIANT_BOOL Italic, long Charset, long PitchAndFamily );
__declspec(implementation_key(2532)) IAcadTextStylePtr IAcadTextStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(2533)) long IAcadTextStyles::GetCount ( );
__declspec(implementation_key(2534)) IUnknownPtr IAcadTextStyles::Get_NewEnum ( );
__declspec(implementation_key(2535)) IAcadTextStylePtr IAcadTextStyles::Add ( _bstr_t Name );
__declspec(implementation_key(2536)) _bstr_t IAcadUCS::GetName ( );
__declspec(implementation_key(2537)) void IAcadUCS::PutName ( _bstr_t bstrName );
__declspec(implementation_key(2538)) _variant_t IAcadUCS::GetOrigin ( );
__declspec(implementation_key(2539)) void IAcadUCS::PutOrigin ( const _variant_t & Origin );
__declspec(implementation_key(2540)) _variant_t IAcadUCS::GetXVector ( );
__declspec(implementation_key(2541)) void IAcadUCS::PutXVector ( const _variant_t & XVector );
__declspec(implementation_key(2542)) _variant_t IAcadUCS::GetYVector ( );
__declspec(implementation_key(2543)) void IAcadUCS::PutYVector ( const _variant_t & YVector );
__declspec(implementation_key(2544)) _variant_t IAcadUCS::GetUCSMatrix ( );
__declspec(implementation_key(2545)) IAcadUCSPtr IAcadUCSs::Item ( const _variant_t & Index );
__declspec(implementation_key(2546)) long IAcadUCSs::GetCount ( );
__declspec(implementation_key(2547)) IUnknownPtr IAcadUCSs::Get_NewEnum ( );
__declspec(implementation_key(2548)) IAcadUCSPtr IAcadUCSs::Add ( const _variant_t & Origin, const _variant_t & XAxisPoint, const _variant_t & YAxisPoint, _bstr_t Name );
__declspec(implementation_key(2549)) IAcadViewPtr IAcadViews::Item ( const _variant_t & Index );
__declspec(implementation_key(2550)) long IAcadViews::GetCount ( );
__declspec(implementation_key(2551)) IUnknownPtr IAcadViews::Get_NewEnum ( );
__declspec(implementation_key(2552)) IAcadViewPtr IAcadViews::Add ( _bstr_t Name );
__declspec(implementation_key(2553)) _variant_t IAcadViewport::GetCenter ( );
__declspec(implementation_key(2554)) void IAcadViewport::PutCenter ( const _variant_t & Center );
__declspec(implementation_key(2555)) double IAcadViewport::GetHeight ( );
__declspec(implementation_key(2556)) void IAcadViewport::PutHeight ( double Height );
__declspec(implementation_key(2557)) double IAcadViewport::GetWidth ( );
__declspec(implementation_key(2558)) void IAcadViewport::PutWidth ( double Width );
__declspec(implementation_key(2559)) _variant_t IAcadViewport::GetTarget ( );
__declspec(implementation_key(2560)) void IAcadViewport::PutTarget ( const _variant_t & targetPoint );
__declspec(implementation_key(2561)) _variant_t IAcadViewport::GetDirection ( );
__declspec(implementation_key(2562)) void IAcadViewport::PutDirection ( const _variant_t & dirVec );
__declspec(implementation_key(2563)) _bstr_t IAcadViewport::GetName ( );
__declspec(implementation_key(2564)) void IAcadViewport::PutName ( _bstr_t bstrName );
__declspec(implementation_key(2565)) VARIANT_BOOL IAcadViewport::GetGridOn ( );
__declspec(implementation_key(2566)) void IAcadViewport::PutGridOn ( VARIANT_BOOL bGridOn );
__declspec(implementation_key(2567)) VARIANT_BOOL IAcadViewport::GetOrthoOn ( );
__declspec(implementation_key(2568)) void IAcadViewport::PutOrthoOn ( VARIANT_BOOL bOrthoOn );
__declspec(implementation_key(2569)) _variant_t IAcadViewport::GetSnapBasePoint ( );
__declspec(implementation_key(2570)) void IAcadViewport::PutSnapBasePoint ( const _variant_t & lowLeft );
__declspec(implementation_key(2571)) VARIANT_BOOL IAcadViewport::GetSnapOn ( );
__declspec(implementation_key(2572)) void IAcadViewport::PutSnapOn ( VARIANT_BOOL bSnapOn );
__declspec(implementation_key(2573)) ACAD_ANGLE IAcadViewport::GetSnapRotationAngle ( );
__declspec(implementation_key(2574)) void IAcadViewport::PutSnapRotationAngle ( ACAD_ANGLE Angle );
__declspec(implementation_key(2575)) VARIANT_BOOL IAcadViewport::GetUCSIconOn ( );
__declspec(implementation_key(2576)) void IAcadViewport::PutUCSIconOn ( VARIANT_BOOL bIconOn );
__declspec(implementation_key(2577)) VARIANT_BOOL IAcadViewport::GetUCSIconAtOrigin ( );
__declspec(implementation_key(2578)) void IAcadViewport::PutUCSIconAtOrigin ( VARIANT_BOOL bIconAtOrigin );
__declspec(implementation_key(2579)) _variant_t IAcadViewport::GetLowerLeftCorner ( );
__declspec(implementation_key(2580)) _variant_t IAcadViewport::GetUpperRightCorner ( );
__declspec(implementation_key(2581)) HRESULT IAcadViewport::Split ( enum AcViewportSplitType NumWins );
__declspec(implementation_key(2582)) HRESULT IAcadViewport::GetGridSpacing ( double * XSpacing, double * YSpacing );
__declspec(implementation_key(2583)) HRESULT IAcadViewport::SetGridSpacing ( double XSpacing, double YSpacing );
__declspec(implementation_key(2584)) HRESULT IAcadViewport::GetSnapSpacing ( double * XSpacing, double * YSpacing );
__declspec(implementation_key(2585)) HRESULT IAcadViewport::SetSnapSpacing ( double XSpacing, double YSpacing );
__declspec(implementation_key(2586)) HRESULT IAcadViewport::SetView ( struct IAcadView * View );
__declspec(implementation_key(2587)) long IAcadViewport::GetArcSmoothness ( );
__declspec(implementation_key(2588)) void IAcadViewport::PutArcSmoothness ( long arcSmooth );
__declspec(implementation_key(2589)) IAcadViewportPtr IAcadViewports::Item ( const _variant_t & Index );
__declspec(implementation_key(2590)) long IAcadViewports::GetCount ( );
__declspec(implementation_key(2591)) IUnknownPtr IAcadViewports::Get_NewEnum ( );
__declspec(implementation_key(2592)) IAcadViewportPtr IAcadViewports::Add ( _bstr_t Name );
__declspec(implementation_key(2593)) HRESULT IAcadViewports::DeleteConfiguration ( _bstr_t Name );
__declspec(implementation_key(2594)) IAcadPlotConfigurationPtr IAcadPlotConfigurations::Item ( const _variant_t & Index );
__declspec(implementation_key(2595)) long IAcadPlotConfigurations::GetCount ( );
__declspec(implementation_key(2596)) IUnknownPtr IAcadPlotConfigurations::Get_NewEnum ( );
__declspec(implementation_key(2597)) IAcadPlotConfigurationPtr IAcadPlotConfigurations::Add ( _bstr_t Name, const _variant_t & ModelType );
__declspec(implementation_key(2598)) IAcadSectionPtr IAcadSectionManager::Item ( const _variant_t & Index );
__declspec(implementation_key(2599)) IUnknownPtr IAcadSectionManager::Get_NewEnum ( );
__declspec(implementation_key(2600)) long IAcadSectionManager::GetCount ( );
__declspec(implementation_key(2601)) IAcadSectionPtr IAcadSectionManager::GetLiveSection ( );
__declspec(implementation_key(2602)) _bstr_t IAcadSectionManager::GetUniqueSectionName ( _bstr_t pBaseName );
__declspec(implementation_key(2603)) _bstr_t IAcadMaterial::GetDescription ( );
__declspec(implementation_key(2604)) void IAcadMaterial::PutDescription ( _bstr_t bstrDes );
__declspec(implementation_key(2605)) _bstr_t IAcadMaterial::GetName ( );
__declspec(implementation_key(2606)) void IAcadMaterial::PutName ( _bstr_t bstrName );
__declspec(implementation_key(2607)) IAcadMaterialPtr IAcadMaterials::Item ( const _variant_t & Index );
__declspec(implementation_key(2608)) long IAcadMaterials::GetCount ( );
__declspec(implementation_key(2609)) IUnknownPtr IAcadMaterials::Get_NewEnum ( );
__declspec(implementation_key(2610)) IAcadMaterialPtr IAcadMaterials::Add ( _bstr_t Name );
__declspec(implementation_key(2611)) HRESULT IAcadObjectEvents::Modified ( struct IAcadObject * pObject );
__declspec(implementation_key(2612)) _bstr_t IAcadTableStyle::GetName ( );
__declspec(implementation_key(2613)) void IAcadTableStyle::PutName ( _bstr_t bstrValue );
__declspec(implementation_key(2614)) _bstr_t IAcadTableStyle::GetDescription ( );
__declspec(implementation_key(2615)) void IAcadTableStyle::PutDescription ( _bstr_t bstr );
__declspec(implementation_key(2616)) long IAcadTableStyle::GetBitFlags ( );
__declspec(implementation_key(2617)) void IAcadTableStyle::PutBitFlags ( long bitFlag );
__declspec(implementation_key(2618)) enum AcTableDirection IAcadTableStyle::GetFlowDirection ( );
__declspec(implementation_key(2619)) void IAcadTableStyle::PutFlowDirection ( enum AcTableDirection pFlow );
__declspec(implementation_key(2620)) double IAcadTableStyle::GetHorzCellMargin ( );
__declspec(implementation_key(2621)) void IAcadTableStyle::PutHorzCellMargin ( double dHorzCellMargin );
__declspec(implementation_key(2622)) double IAcadTableStyle::GetVertCellMargin ( );
__declspec(implementation_key(2623)) void IAcadTableStyle::PutVertCellMargin ( double dVertCellMargin );
__declspec(implementation_key(2624)) VARIANT_BOOL IAcadTableStyle::GetTitleSuppressed ( );
__declspec(implementation_key(2625)) void IAcadTableStyle::PutTitleSuppressed ( VARIANT_BOOL bValue );
__declspec(implementation_key(2626)) VARIANT_BOOL IAcadTableStyle::GetHeaderSuppressed ( );
__declspec(implementation_key(2627)) void IAcadTableStyle::PutHeaderSuppressed ( VARIANT_BOOL bValue );
__declspec(implementation_key(2628)) _bstr_t IAcadTableStyle::GetTextStyle ( enum AcRowType rowType );
__declspec(implementation_key(2629)) HRESULT IAcadTableStyle::SetTextStyle ( int rowTypes, _bstr_t bstrName );
__declspec(implementation_key(2630)) double IAcadTableStyle::GetTextHeight ( enum AcRowType rowType );
__declspec(implementation_key(2631)) HRESULT IAcadTableStyle::SetTextHeight ( int rowTypes, double TextHeight );
__declspec(implementation_key(2632)) enum AcCellAlignment IAcadTableStyle::GetAlignment ( enum AcRowType rowType );
__declspec(implementation_key(2633)) HRESULT IAcadTableStyle::SetAlignment ( int rowTypes, enum AcCellAlignment cellAlignment );
__declspec(implementation_key(2634)) IAcadAcCmColorPtr IAcadTableStyle::GetColor ( enum AcRowType rowType );
__declspec(implementation_key(2635)) HRESULT IAcadTableStyle::SetColor ( int rowTypes, struct IAcadAcCmColor * pColor );
__declspec(implementation_key(2636)) IAcadAcCmColorPtr IAcadTableStyle::GetBackgroundColor ( enum AcRowType rowType );
__declspec(implementation_key(2637)) HRESULT IAcadTableStyle::SetBackgroundColor ( int rowTypes, struct IAcadAcCmColor * pColor );
__declspec(implementation_key(2638)) VARIANT_BOOL IAcadTableStyle::GetBackgroundColorNone ( enum AcRowType rowType );
__declspec(implementation_key(2639)) HRESULT IAcadTableStyle::SetBackgroundColorNone ( int rowTypes, VARIANT_BOOL * bValue );
__declspec(implementation_key(2640)) ACAD_LWEIGHT IAcadTableStyle::GetGridLineWeight ( enum AcGridLineType gridLineType, enum AcRowType rowType );
__declspec(implementation_key(2641)) HRESULT IAcadTableStyle::SetGridLineWeight ( int gridLineTypes, int rowTypes, ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(2642)) IAcadAcCmColorPtr IAcadTableStyle::GetGridColor ( enum AcGridLineType gridLineType, enum AcRowType rowType );
__declspec(implementation_key(2643)) HRESULT IAcadTableStyle::SetGridColor ( int gridLineTypes, int rowTypes, struct IAcadAcCmColor * pColor );
__declspec(implementation_key(2644)) VARIANT_BOOL IAcadTableStyle::GetGridVisibility ( enum AcGridLineType gridLineType, enum AcRowType rowType );
__declspec(implementation_key(2645)) HRESULT IAcadTableStyle::SetGridVisibility ( int gridLineTypes, int rowTypes, VARIANT_BOOL bValue );
__declspec(implementation_key(2646)) HRESULT IAcadTableStyle::GetDataType ( enum AcRowType rowType, enum AcValueDataType * pDataType, enum AcValueUnitType * pUnitType );
__declspec(implementation_key(2647)) HRESULT IAcadTableStyle::SetDataType ( int rowTypes, enum AcValueDataType nDataType, enum AcValueUnitType nUnitType );
__declspec(implementation_key(2648)) _bstr_t IAcadTableStyle::GetFormat ( enum AcRowType rowType );
__declspec(implementation_key(2649)) HRESULT IAcadTableStyle::SetFormat ( int rowTypes, _bstr_t val );
__declspec(implementation_key(2650)) HRESULT IAcadTableStyle::CreateCellStyle ( _bstr_t bstrCellStyle );
__declspec(implementation_key(2651)) HRESULT IAcadTableStyle::CreateCellStyleFromStyle ( _bstr_t bstrCellStyle, _bstr_t bstrSourceCellStyle );
__declspec(implementation_key(2652)) HRESULT IAcadTableStyle::RenameCellStyle ( _bstr_t bstrOldName, _bstr_t bstrNewName );
__declspec(implementation_key(2653)) HRESULT IAcadTableStyle::DeleteCellStyle ( _bstr_t bstrCellStyle );
__declspec(implementation_key(2654)) _bstr_t IAcadTableStyle::GetUniqueCellStyleName ( _bstr_t pszBaseName );
__declspec(implementation_key(2655)) VARIANT_BOOL IAcadTableStyle::GetIsCellStyleInUse ( _bstr_t pszCellStyle );
__declspec(implementation_key(2656)) long IAcadTableStyle::GetNumCellStyles ( );
__declspec(implementation_key(2657)) HRESULT IAcadTableStyle::GetCellStyles ( VARIANT * cellStylesArray );
__declspec(implementation_key(2658)) LONG_PTR IAcadTableStyle::GetTextStyleId ( _bstr_t bstrCellStyle );
__declspec(implementation_key(2659)) HRESULT IAcadTableStyle::SetTextStyleId ( _bstr_t bstrCellStyle, LONG_PTR val );
__declspec(implementation_key(2660)) double IAcadTableStyle::GetTextHeight2 ( _bstr_t bstrCellStyle );
__declspec(implementation_key(2661)) HRESULT IAcadTableStyle::SetTextHeight2 ( _bstr_t bstrCellStyle, double Height );
__declspec(implementation_key(2662)) enum AcCellAlignment IAcadTableStyle::GetAlignment2 ( _bstr_t bstrCellStyle );
__declspec(implementation_key(2663)) HRESULT IAcadTableStyle::SetAlignment2 ( _bstr_t bstrCellStyle, enum AcCellAlignment cellAlignment );
__declspec(implementation_key(2664)) IAcadAcCmColorPtr IAcadTableStyle::GetColor2 ( _bstr_t bstrCellStyle );
__declspec(implementation_key(2665)) HRESULT IAcadTableStyle::SetColor2 ( _bstr_t bstrCellStyle, struct IAcadAcCmColor * color );
__declspec(implementation_key(2666)) IAcadAcCmColorPtr IAcadTableStyle::GetBackgroundColor2 ( _bstr_t bstrCellStyle );
__declspec(implementation_key(2667)) HRESULT IAcadTableStyle::SetBackgroundColor2 ( _bstr_t bstrCellStyle, struct IAcadAcCmColor * color );
__declspec(implementation_key(2668)) HRESULT IAcadTableStyle::GetDataType2 ( _bstr_t bstrCellStyle, enum AcValueDataType * pDataType, enum AcValueUnitType * pUnitType );
__declspec(implementation_key(2669)) HRESULT IAcadTableStyle::SetDataType2 ( _bstr_t bstrCellStyle, enum AcValueDataType nDataType, enum AcValueUnitType nUnitType );
__declspec(implementation_key(2670)) HRESULT IAcadTableStyle::GetFormat2 ( _bstr_t bstrCellStyle, BSTR * pbstrFormat );
__declspec(implementation_key(2671)) HRESULT IAcadTableStyle::SetFormat2 ( _bstr_t bstrCellStyle, _bstr_t bstrFormat );
__declspec(implementation_key(2672)) int IAcadTableStyle::GetCellClass ( _bstr_t bstrCellStyle );
__declspec(implementation_key(2673)) HRESULT IAcadTableStyle::SetCellClass ( _bstr_t bstrCellStyle, int cellClass );
__declspec(implementation_key(2674)) double IAcadTableStyle::GetRotation ( _bstr_t bstrCellStyle );
__declspec(implementation_key(2675)) HRESULT IAcadTableStyle::SetRotation ( _bstr_t bstrCellStyle, double Rotation );
__declspec(implementation_key(2676)) VARIANT_BOOL IAcadTableStyle::GetIsMergeAllEnabled ( _bstr_t bstrCellStyle );
__declspec(implementation_key(2677)) HRESULT IAcadTableStyle::EnableMergeAll ( _bstr_t bstrCellStyle, VARIANT_BOOL bEnable );
__declspec(implementation_key(2678)) ACAD_LWEIGHT IAcadTableStyle::GetGridLineWeight2 ( _bstr_t bstrCellStyle, enum AcGridLineType gridLineType );
__declspec(implementation_key(2679)) HRESULT IAcadTableStyle::SetGridLineWeight2 ( _bstr_t bstrCellStyle, enum AcGridLineType gridLineTypes, ACAD_LWEIGHT Lineweight );
__declspec(implementation_key(2680)) IAcadAcCmColorPtr IAcadTableStyle::GetGridColor2 ( _bstr_t bstrCellStyle, enum AcGridLineType gridLineType );
__declspec(implementation_key(2681)) HRESULT IAcadTableStyle::SetGridColor2 ( _bstr_t bstrCellStyle, enum AcGridLineType gridLineTypes, struct IAcadAcCmColor * pColor );
__declspec(implementation_key(2682)) VARIANT_BOOL IAcadTableStyle::GetGridVisibility2 ( _bstr_t bstrCellStyle, enum AcGridLineType gridLineType );
__declspec(implementation_key(2683)) HRESULT IAcadTableStyle::SetGridVisibility2 ( _bstr_t bstrCellStyle, enum AcGridLineType gridLineTypes, VARIANT_BOOL bValue );
__declspec(implementation_key(2684)) LONG_PTR IAcadTableStyle::GetTemplateId ( );
__declspec(implementation_key(2685)) void IAcadTableStyle::PutTemplateId ( LONG_PTR pVal );
__declspec(implementation_key(2686)) HRESULT IAcadTableStyle::SetTemplateId ( LONG_PTR val, enum AcMergeCellStyleOption option );
__declspec(implementation_key(2687)) _bstr_t IAcadMLeaderStyle::GetName ( );
__declspec(implementation_key(2688)) void IAcadMLeaderStyle::PutName ( _bstr_t Name );
__declspec(implementation_key(2689)) _bstr_t IAcadMLeaderStyle::GetDescription ( );
__declspec(implementation_key(2690)) void IAcadMLeaderStyle::PutDescription ( _bstr_t Description );
__declspec(implementation_key(2691)) long IAcadMLeaderStyle::GetBitFlags ( );
__declspec(implementation_key(2692)) void IAcadMLeaderStyle::PutBitFlags ( long bitFlag );
__declspec(implementation_key(2693)) enum AcMLeaderContentType IAcadMLeaderStyle::GetContentType ( );
__declspec(implementation_key(2694)) void IAcadMLeaderStyle::PutContentType ( enum AcMLeaderContentType Type );
__declspec(implementation_key(2695)) enum AcDrawMLeaderOrderType IAcadMLeaderStyle::GetDrawMLeaderOrderType ( );
__declspec(implementation_key(2696)) void IAcadMLeaderStyle::PutDrawMLeaderOrderType ( enum AcDrawMLeaderOrderType Type );
__declspec(implementation_key(2697)) enum AcDrawLeaderOrderType IAcadMLeaderStyle::GetDrawLeaderOrderType ( );
__declspec(implementation_key(2698)) void IAcadMLeaderStyle::PutDrawLeaderOrderType ( enum AcDrawLeaderOrderType Type );
__declspec(implementation_key(2699)) int IAcadMLeaderStyle::GetMaxLeaderSegmentsPoints ( );
__declspec(implementation_key(2700)) void IAcadMLeaderStyle::PutMaxLeaderSegmentsPoints ( int number );
__declspec(implementation_key(2701)) enum AcSegmentAngleType IAcadMLeaderStyle::GetFirstSegmentAngleConstraint ( );
__declspec(implementation_key(2702)) void IAcadMLeaderStyle::PutFirstSegmentAngleConstraint ( enum AcSegmentAngleType constraint );
__declspec(implementation_key(2703)) enum AcSegmentAngleType IAcadMLeaderStyle::GetSecondSegmentAngleConstraint ( );
__declspec(implementation_key(2704)) void IAcadMLeaderStyle::PutSecondSegmentAngleConstraint ( enum AcSegmentAngleType constraint );
__declspec(implementation_key(2705)) enum AcMLeaderType IAcadMLeaderStyle::GetLeaderLinetype ( );
__declspec(implementation_key(2706)) void IAcadMLeaderStyle::PutLeaderLinetype ( enum AcMLeaderType Type );
__declspec(implementation_key(2707)) IAcadAcCmColorPtr IAcadMLeaderStyle::GetLeaderLineColor ( );
__declspec(implementation_key(2708)) void IAcadMLeaderStyle::PutLeaderLineColor ( struct IAcadAcCmColor * color );
__declspec(implementation_key(2709)) ACAD_LTYPE IAcadMLeaderStyle::GetLeaderLineTypeId ( );
__declspec(implementation_key(2710)) void IAcadMLeaderStyle::PutLeaderLineTypeId ( ACAD_LTYPE Type );
__declspec(implementation_key(2711)) enum AcLineWeight IAcadMLeaderStyle::GetLeaderLineWeight ( );
__declspec(implementation_key(2712)) void IAcadMLeaderStyle::PutLeaderLineWeight ( enum AcLineWeight weight );
__declspec(implementation_key(2713)) VARIANT_BOOL IAcadMLeaderStyle::GetEnableLanding ( );
__declspec(implementation_key(2714)) void IAcadMLeaderStyle::PutEnableLanding ( VARIANT_BOOL enabled );
__declspec(implementation_key(2715)) double IAcadMLeaderStyle::GetLandingGap ( );
__declspec(implementation_key(2716)) void IAcadMLeaderStyle::PutLandingGap ( double LandingGap );
__declspec(implementation_key(2717)) VARIANT_BOOL IAcadMLeaderStyle::GetEnableDogleg ( );
__declspec(implementation_key(2718)) void IAcadMLeaderStyle::PutEnableDogleg ( VARIANT_BOOL enabled );
__declspec(implementation_key(2719)) double IAcadMLeaderStyle::GetDoglegLength ( );
__declspec(implementation_key(2720)) void IAcadMLeaderStyle::PutDoglegLength ( double DoglegLength );
__declspec(implementation_key(2721)) _bstr_t IAcadMLeaderStyle::GetArrowSymbol ( );
__declspec(implementation_key(2722)) void IAcadMLeaderStyle::PutArrowSymbol ( _bstr_t Name );
__declspec(implementation_key(2723)) double IAcadMLeaderStyle::GetArrowSize ( );
__declspec(implementation_key(2724)) void IAcadMLeaderStyle::PutArrowSize ( double size );
__declspec(implementation_key(2725)) _bstr_t IAcadMLeaderStyle::GetTextStyle ( );
__declspec(implementation_key(2726)) void IAcadMLeaderStyle::PutTextStyle ( _bstr_t Name );
__declspec(implementation_key(2727)) enum AcTextAttachmentDirection IAcadMLeaderStyle::GetTextAttachmentDirection ( );
__declspec(implementation_key(2728)) void IAcadMLeaderStyle::PutTextAttachmentDirection ( enum AcTextAttachmentDirection dir );
__declspec(implementation_key(2729)) enum AcTextAttachmentType IAcadMLeaderStyle::GetTextLeftAttachmentType ( );
__declspec(implementation_key(2730)) void IAcadMLeaderStyle::PutTextLeftAttachmentType ( enum AcTextAttachmentType Type );
__declspec(implementation_key(2731)) enum AcTextAttachmentType IAcadMLeaderStyle::GetTextRightAttachmentType ( );
__declspec(implementation_key(2732)) void IAcadMLeaderStyle::PutTextRightAttachmentType ( enum AcTextAttachmentType Type );
__declspec(implementation_key(2733)) enum AcVerticalTextAttachmentType IAcadMLeaderStyle::GetTextTopAttachmentType ( );
__declspec(implementation_key(2734)) void IAcadMLeaderStyle::PutTextTopAttachmentType ( enum AcVerticalTextAttachmentType Type );
__declspec(implementation_key(2735)) enum AcVerticalTextAttachmentType IAcadMLeaderStyle::GetTextBottomAttachmentType ( );
__declspec(implementation_key(2736)) void IAcadMLeaderStyle::PutTextBottomAttachmentType ( enum AcVerticalTextAttachmentType Type );
__declspec(implementation_key(2737)) IAcadAcCmColorPtr IAcadMLeaderStyle::GetTextColor ( );
__declspec(implementation_key(2738)) void IAcadMLeaderStyle::PutTextColor ( struct IAcadAcCmColor * color );
__declspec(implementation_key(2739)) double IAcadMLeaderStyle::GetTextHeight ( );
__declspec(implementation_key(2740)) void IAcadMLeaderStyle::PutTextHeight ( double Height );
__declspec(implementation_key(2741)) VARIANT_BOOL IAcadMLeaderStyle::GetEnableFrameText ( );
__declspec(implementation_key(2742)) void IAcadMLeaderStyle::PutEnableFrameText ( VARIANT_BOOL enabled );
__declspec(implementation_key(2743)) double IAcadMLeaderStyle::GetAlignSpace ( );
__declspec(implementation_key(2744)) void IAcadMLeaderStyle::PutAlignSpace ( double AlignSpace );
__declspec(implementation_key(2745)) _bstr_t IAcadMLeaderStyle::GetBlock ( );
__declspec(implementation_key(2746)) void IAcadMLeaderStyle::PutBlock ( _bstr_t Name );
__declspec(implementation_key(2747)) IAcadAcCmColorPtr IAcadMLeaderStyle::GetBlockColor ( );
__declspec(implementation_key(2748)) void IAcadMLeaderStyle::PutBlockColor ( struct IAcadAcCmColor * color );
__declspec(implementation_key(2749)) VARIANT_BOOL IAcadMLeaderStyle::GetEnableBlockScale ( );
__declspec(implementation_key(2750)) void IAcadMLeaderStyle::PutEnableBlockScale ( VARIANT_BOOL enabled );
__declspec(implementation_key(2751)) double IAcadMLeaderStyle::GetBlockScale ( );
__declspec(implementation_key(2752)) void IAcadMLeaderStyle::PutBlockScale ( double ScaleFactor );
__declspec(implementation_key(2753)) VARIANT_BOOL IAcadMLeaderStyle::GetEnableBlockRotation ( );
__declspec(implementation_key(2754)) void IAcadMLeaderStyle::PutEnableBlockRotation ( VARIANT_BOOL enabled );
__declspec(implementation_key(2755)) double IAcadMLeaderStyle::GetBlockRotation ( );
__declspec(implementation_key(2756)) void IAcadMLeaderStyle::PutBlockRotation ( double Rotation );
__declspec(implementation_key(2757)) enum AcBlockConnectionType IAcadMLeaderStyle::GetBlockConnectionType ( );
__declspec(implementation_key(2758)) void IAcadMLeaderStyle::PutBlockConnectionType ( enum AcBlockConnectionType Type );
__declspec(implementation_key(2759)) double IAcadMLeaderStyle::GetScaleFactor ( );
__declspec(implementation_key(2760)) void IAcadMLeaderStyle::PutScaleFactor ( double scale );
__declspec(implementation_key(2761)) VARIANT_BOOL IAcadMLeaderStyle::GetOverwritePropChanged ( );
__declspec(implementation_key(2762)) VARIANT_BOOL IAcadMLeaderStyle::GetAnnotative ( );
__declspec(implementation_key(2763)) void IAcadMLeaderStyle::PutAnnotative ( VARIANT_BOOL Annotative );
__declspec(implementation_key(2764)) double IAcadMLeaderStyle::GetBreakSize ( );
__declspec(implementation_key(2765)) void IAcadMLeaderStyle::PutBreakSize ( double size );
__declspec(implementation_key(2766)) _bstr_t IAcadMLeaderStyle::GetTextString ( );
__declspec(implementation_key(2767)) void IAcadMLeaderStyle::PutTextString ( _bstr_t Text );
__declspec(implementation_key(2768)) enum AcTextAngleType IAcadMLeaderStyle::GetTextAngleType ( );
__declspec(implementation_key(2769)) void IAcadMLeaderStyle::PutTextAngleType ( enum AcTextAngleType Type );
__declspec(implementation_key(2770)) enum AcTextAlignmentType IAcadMLeaderStyle::GetTextAlignmentType ( );
__declspec(implementation_key(2771)) void IAcadMLeaderStyle::PutTextAlignmentType ( enum AcTextAlignmentType Type );
__declspec(implementation_key(2772)) double IAcadAttributeReference::GetHeight ( );
__declspec(implementation_key(2773)) void IAcadAttributeReference::PutHeight ( double Height );
__declspec(implementation_key(2774)) enum AcHorizontalAlignment IAcadAttributeReference::GetHorizontalAlignment ( );
__declspec(implementation_key(2775)) void IAcadAttributeReference::PutHorizontalAlignment ( enum AcHorizontalAlignment horizAlign );
__declspec(implementation_key(2776)) _variant_t IAcadAttributeReference::GetInsertionPoint ( );
__declspec(implementation_key(2777)) void IAcadAttributeReference::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(2778)) _variant_t IAcadAttributeReference::GetNormal ( );
__declspec(implementation_key(2779)) void IAcadAttributeReference::PutNormal ( const _variant_t & Normal );
__declspec(implementation_key(2780)) ACAD_ANGLE IAcadAttributeReference::GetObliqueAngle ( );
__declspec(implementation_key(2781)) void IAcadAttributeReference::PutObliqueAngle ( ACAD_ANGLE obliAngle );
__declspec(implementation_key(2782)) ACAD_ANGLE IAcadAttributeReference::GetRotation ( );
__declspec(implementation_key(2783)) void IAcadAttributeReference::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(2784)) ACAD_NOUNITS IAcadAttributeReference::GetScaleFactor ( );
__declspec(implementation_key(2785)) void IAcadAttributeReference::PutScaleFactor ( ACAD_NOUNITS scalFactor );
__declspec(implementation_key(2786)) _bstr_t IAcadAttributeReference::GetStyleName ( );
__declspec(implementation_key(2787)) void IAcadAttributeReference::PutStyleName ( _bstr_t Name );
__declspec(implementation_key(2788)) _bstr_t IAcadAttributeReference::GetTagString ( );
__declspec(implementation_key(2789)) void IAcadAttributeReference::PutTagString ( _bstr_t bstrTag );
__declspec(implementation_key(2790)) _variant_t IAcadAttributeReference::GetTextAlignmentPoint ( );
__declspec(implementation_key(2791)) void IAcadAttributeReference::PutTextAlignmentPoint ( const _variant_t & alignPoint );
__declspec(implementation_key(2792)) long IAcadAttributeReference::GetTextGenerationFlag ( );
__declspec(implementation_key(2793)) void IAcadAttributeReference::PutTextGenerationFlag ( long textGenFlag );
__declspec(implementation_key(2794)) _bstr_t IAcadAttributeReference::GetTextString ( );
__declspec(implementation_key(2795)) void IAcadAttributeReference::PutTextString ( _bstr_t bstrText );
__declspec(implementation_key(2796)) double IAcadAttributeReference::GetThickness ( );
__declspec(implementation_key(2797)) void IAcadAttributeReference::PutThickness ( double Thickness );
__declspec(implementation_key(2798)) enum AcVerticalAlignment IAcadAttributeReference::GetVerticalAlignment ( );
__declspec(implementation_key(2799)) void IAcadAttributeReference::PutVerticalAlignment ( enum AcVerticalAlignment vertiAlign );
__declspec(implementation_key(2800)) long IAcadAttributeReference::GetFieldLength ( );
__declspec(implementation_key(2801)) void IAcadAttributeReference::PutFieldLength ( long fieldLen );
__declspec(implementation_key(2802)) enum AcAlignment IAcadAttributeReference::GetAlignment ( );
__declspec(implementation_key(2803)) void IAcadAttributeReference::PutAlignment ( enum AcAlignment align );
__declspec(implementation_key(2804)) VARIANT_BOOL IAcadAttributeReference::GetUpsideDown ( );
__declspec(implementation_key(2805)) void IAcadAttributeReference::PutUpsideDown ( VARIANT_BOOL bUpsideDown );
__declspec(implementation_key(2806)) VARIANT_BOOL IAcadAttributeReference::GetBackward ( );
__declspec(implementation_key(2807)) void IAcadAttributeReference::PutBackward ( VARIANT_BOOL bBackward );
__declspec(implementation_key(2808)) VARIANT_BOOL IAcadAttributeReference::GetInvisible ( );
__declspec(implementation_key(2809)) void IAcadAttributeReference::PutInvisible ( VARIANT_BOOL bInvisible );
__declspec(implementation_key(2810)) VARIANT_BOOL IAcadAttributeReference::GetConstant ( );
__declspec(implementation_key(2811)) VARIANT_BOOL IAcadAttributeReference::GetLockPosition ( );
__declspec(implementation_key(2812)) VARIANT_BOOL IAcadAttributeReference::GetMTextAttribute ( );
__declspec(implementation_key(2813)) void IAcadAttributeReference::PutMTextAttribute ( VARIANT_BOOL bMTextAttribute );
__declspec(implementation_key(2814)) _bstr_t IAcadAttributeReference::GetMTextAttributeContent ( );
__declspec(implementation_key(2815)) void IAcadAttributeReference::PutMTextAttributeContent ( _bstr_t content );
__declspec(implementation_key(2816)) HRESULT IAcadAttributeReference::UpdateMTextAttribute ( );
__declspec(implementation_key(2817)) double IAcadAttributeReference::GetMTextBoundaryWidth ( );
__declspec(implementation_key(2818)) void IAcadAttributeReference::PutMTextBoundaryWidth ( double boundaryWidth );
__declspec(implementation_key(2819)) enum AcDrawingDirection IAcadAttributeReference::GetMTextDrawingDirection ( );
__declspec(implementation_key(2820)) void IAcadAttributeReference::PutMTextDrawingDirection ( enum AcDrawingDirection drawDir );
__declspec(implementation_key(2821)) _variant_t IAcadOle::GetInsertionPoint ( );
__declspec(implementation_key(2822)) void IAcadOle::PutInsertionPoint ( const _variant_t & insPoint );
__declspec(implementation_key(2823)) ACAD_ANGLE IAcadOle::GetRotation ( );
__declspec(implementation_key(2824)) void IAcadOle::PutRotation ( ACAD_ANGLE rot );
__declspec(implementation_key(2825)) double IAcadOle::GetWidth ( );
__declspec(implementation_key(2826)) void IAcadOle::PutWidth ( double Width );
__declspec(implementation_key(2827)) double IAcadOle::GetHeight ( );
__declspec(implementation_key(2828)) void IAcadOle::PutHeight ( double Height );
__declspec(implementation_key(2829)) double IAcadOle::GetScaleWidth ( );
__declspec(implementation_key(2830)) void IAcadOle::PutScaleWidth ( double swidth );
__declspec(implementation_key(2831)) double IAcadOle::GetScaleHeight ( );
__declspec(implementation_key(2832)) void IAcadOle::PutScaleHeight ( double sheight );
__declspec(implementation_key(2833)) VARIANT_BOOL IAcadOle::GetLockAspectRatio ( );
__declspec(implementation_key(2834)) void IAcadOle::PutLockAspectRatio ( VARIANT_BOOL aspect );
__declspec(implementation_key(2835)) enum AcOleType IAcadOle::GetOleItemType ( );
__declspec(implementation_key(2836)) void IAcadOle::PutOleItemType ( enum AcOleType pType );
__declspec(implementation_key(2837)) enum AcOlePlotQuality IAcadOle::GetOlePlotQuality ( );
__declspec(implementation_key(2838)) void IAcadOle::PutOlePlotQuality ( enum AcOlePlotQuality pPQuality );
__declspec(implementation_key(2839)) _bstr_t IAcadOle::GetOleSourceApp ( );
__declspec(implementation_key(2840)) void IAcadOle::PutOleSourceApp ( _bstr_t srcApp );
__declspec(implementation_key(2841)) _variant_t IAcadHelix::GetPosition ( );
__declspec(implementation_key(2842)) void IAcadHelix::PutPosition ( const _variant_t & StartPoint );
__declspec(implementation_key(2843)) enum AcHelixConstrainType IAcadHelix::GetConstrain ( );
__declspec(implementation_key(2844)) void IAcadHelix::PutConstrain ( enum AcHelixConstrainType constrainType );
__declspec(implementation_key(2845)) double IAcadHelix::GetHeight ( );
__declspec(implementation_key(2846)) void IAcadHelix::PutHeight ( double Length );
__declspec(implementation_key(2847)) ACAD_NOUNITS IAcadHelix::GetTurns ( );
__declspec(implementation_key(2848)) void IAcadHelix::PutTurns ( ACAD_NOUNITS Turns );
__declspec(implementation_key(2849)) double IAcadHelix::GetTurnHeight ( );
__declspec(implementation_key(2850)) void IAcadHelix::PutTurnHeight ( double Distance );
__declspec(implementation_key(2851)) double IAcadHelix::GetBaseRadius ( );
__declspec(implementation_key(2852)) void IAcadHelix::PutBaseRadius ( double Radius );
__declspec(implementation_key(2853)) double IAcadHelix::GetTopRadius ( );
__declspec(implementation_key(2854)) void IAcadHelix::PutTopRadius ( double Radius );
__declspec(implementation_key(2855)) enum AcHelixTwistType IAcadHelix::GetTwist ( );
__declspec(implementation_key(2856)) void IAcadHelix::PutTwist ( enum AcHelixTwistType twistType );
__declspec(implementation_key(2857)) ACAD_ANGLE IAcadHelix::GetTurnSlope ( );
__declspec(implementation_key(2858)) double IAcadHelix::GetTotalLength ( );
__declspec(implementation_key(2859)) _bstr_t IAcadSurface::GetSurfaceType ( );
__declspec(implementation_key(2860)) long IAcadSurface::GetUIsolineDensity ( );
__declspec(implementation_key(2861)) void IAcadSurface::PutUIsolineDensity ( long density );
__declspec(implementation_key(2862)) long IAcadSurface::GetVIsolineDensity ( );
__declspec(implementation_key(2863)) void IAcadSurface::PutVIsolineDensity ( long density );
__declspec(implementation_key(2864)) enum AcWireframeType IAcadSurface::GetWireframeType ( );
__declspec(implementation_key(2865)) void IAcadSurface::PutWireframeType ( enum AcWireframeType Type );
__declspec(implementation_key(2866)) int IAcadSurface::GetMaintainAssociativity ( );
__declspec(implementation_key(2867)) void IAcadSurface::PutMaintainAssociativity ( int maintainAssoc );
__declspec(implementation_key(2868)) VARIANT_BOOL IAcadSurface::GetShowAssociativity ( );
__declspec(implementation_key(2869)) void IAcadSurface::PutShowAssociativity ( VARIANT_BOOL bEnabled );
__declspec(implementation_key(2870)) _variant_t IAcadSurface::GetEdgeExtensionDistances ( );
__declspec(implementation_key(2871)) void IAcadSurface::PutEdgeExtensionDistances ( const _variant_t & extDistances );
__declspec(implementation_key(2872)) _variant_t IAcadSurface::GetSurfTrimAssociativity ( );
__declspec(implementation_key(2873)) void IAcadSurface::PutSurfTrimAssociativity ( const _variant_t & associative );
__declspec(implementation_key(2874)) double IAcadExtrudedSurface::GetHeight ( );
__declspec(implementation_key(2875)) void IAcadExtrudedSurface::PutHeight ( double Height );
__declspec(implementation_key(2876)) ACAD_ANGLE IAcadExtrudedSurface::GetTaperAngle ( );
__declspec(implementation_key(2877)) void IAcadExtrudedSurface::PutTaperAngle ( ACAD_ANGLE TaperAngle );
__declspec(implementation_key(2878)) _variant_t IAcadExtrudedSurface::GetDirection ( );
__declspec(implementation_key(2879)) ACAD_ANGLE IAcadRevolvedSurface::GetRevolutionAngle ( );
__declspec(implementation_key(2880)) void IAcadRevolvedSurface::PutRevolutionAngle ( ACAD_ANGLE revAngle );
__declspec(implementation_key(2881)) _variant_t IAcadRevolvedSurface::GetAxisPosition ( );
__declspec(implementation_key(2882)) void IAcadRevolvedSurface::PutAxisPosition ( const _variant_t & AxisPosition );
__declspec(implementation_key(2883)) _variant_t IAcadRevolvedSurface::GetAxisDirection ( );
__declspec(implementation_key(2884)) ACAD_ANGLE IAcadSweptSurface::GetProfileRotation ( );
__declspec(implementation_key(2885)) void IAcadSweptSurface::PutProfileRotation ( ACAD_ANGLE profileRotationAngle );
__declspec(implementation_key(2886)) VARIANT_BOOL IAcadSweptSurface::GetBank ( );
__declspec(implementation_key(2887)) void IAcadSweptSurface::PutBank ( VARIANT_BOOL bBank );
__declspec(implementation_key(2888)) ACAD_ANGLE IAcadSweptSurface::GetTwist ( );
__declspec(implementation_key(2889)) void IAcadSweptSurface::PutTwist ( ACAD_ANGLE TwistAngle );
__declspec(implementation_key(2890)) double IAcadSweptSurface::Getscale ( );
__declspec(implementation_key(2891)) void IAcadSweptSurface::Putscale ( double scale );
__declspec(implementation_key(2892)) double IAcadSweptSurface::GetLength ( );
__declspec(implementation_key(2893)) long IAcadLoftedSurface::GetNumCrossSections ( );
__declspec(implementation_key(2894)) long IAcadLoftedSurface::GetNumGuidePaths ( );
__declspec(implementation_key(2895)) enum AcLoftedSurfaceNormalType IAcadLoftedSurface::GetSurfaceNormals ( );
__declspec(implementation_key(2896)) void IAcadLoftedSurface::PutSurfaceNormals ( enum AcLoftedSurfaceNormalType surfaceNormal );
__declspec(implementation_key(2897)) ACAD_ANGLE IAcadLoftedSurface::GetStartDraftAngle ( );
__declspec(implementation_key(2898)) void IAcadLoftedSurface::PutStartDraftAngle ( ACAD_ANGLE StartDraftAngle );
__declspec(implementation_key(2899)) double IAcadLoftedSurface::GetStartDraftMagnitude ( );
__declspec(implementation_key(2900)) void IAcadLoftedSurface::PutStartDraftMagnitude ( double startDraftMag );
__declspec(implementation_key(2901)) ACAD_ANGLE IAcadLoftedSurface::GetEndDraftAngle ( );
__declspec(implementation_key(2902)) void IAcadLoftedSurface::PutEndDraftAngle ( ACAD_ANGLE EndDraftAngle );
__declspec(implementation_key(2903)) double IAcadLoftedSurface::GetEndDraftMagnitude ( );
__declspec(implementation_key(2904)) void IAcadLoftedSurface::PutEndDraftMagnitude ( double endDraftMag );
__declspec(implementation_key(2905)) VARIANT_BOOL IAcadLoftedSurface::GetClosed ( );
__declspec(implementation_key(2906)) void IAcadLoftedSurface::PutClosed ( VARIANT_BOOL bClosed );
__declspec(implementation_key(2907)) double IAcadLoftedSurface::GetStartSmoothMagnitude ( );
__declspec(implementation_key(2908)) void IAcadLoftedSurface::PutStartSmoothMagnitude ( double startSmoothMag );
__declspec(implementation_key(2909)) double IAcadLoftedSurface::GetEndSmoothMagnitude ( );
__declspec(implementation_key(2910)) void IAcadLoftedSurface::PutEndSmoothMagnitude ( double endSmoothMag );
__declspec(implementation_key(2911)) int IAcadLoftedSurface::GetStartSmoothContinuity ( );
__declspec(implementation_key(2912)) void IAcadLoftedSurface::PutStartSmoothContinuity ( int StartSmoothContinuity );
__declspec(implementation_key(2913)) int IAcadLoftedSurface::GetEndSmoothContinuity ( );
__declspec(implementation_key(2914)) void IAcadLoftedSurface::PutEndSmoothContinuity ( int EndSmoothContinuity );
__declspec(implementation_key(2915)) VARIANT_BOOL IAcadLoftedSurface::GetPeriodic ( );
__declspec(implementation_key(2916)) void IAcadLoftedSurface::PutPeriodic ( VARIANT_BOOL bPeriodic );
__declspec(implementation_key(2917)) enum AcSectionState2 IAcadSection2::GetState2 ( );
__declspec(implementation_key(2918)) void IAcadSection2::PutState2 ( enum AcSectionState2 pVal );
__declspec(implementation_key(2919)) double IAcadSection2::GetSliceDepth ( );
__declspec(implementation_key(2920)) void IAcadSection2::PutSliceDepth ( double pVal );
__declspec(implementation_key(2921)) double IAcadSection2::GetSectionPlaneOffset ( );
__declspec(implementation_key(2922)) void IAcadSection2::PutSectionPlaneOffset ( double pVal );
__declspec(implementation_key(2923)) long IAcadUnderlay::GetContrast ( );
__declspec(implementation_key(2924)) void IAcadUnderlay::PutContrast ( long Contrast );
__declspec(implementation_key(2925)) long IAcadUnderlay::GetFade ( );
__declspec(implementation_key(2926)) void IAcadUnderlay::PutFade ( long Fade );
__declspec(implementation_key(2927)) _variant_t IAcadUnderlay::GetPosition ( );
__declspec(implementation_key(2928)) void IAcadUnderlay::PutPosition ( const _variant_t & pos );
__declspec(implementation_key(2929)) ACAD_ANGLE IAcadUnderlay::GetRotation ( );
__declspec(implementation_key(2930)) void IAcadUnderlay::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(2931)) double IAcadUnderlay::GetWidth ( );
__declspec(implementation_key(2932)) void IAcadUnderlay::PutWidth ( double Width );
__declspec(implementation_key(2933)) double IAcadUnderlay::GetHeight ( );
__declspec(implementation_key(2934)) void IAcadUnderlay::PutHeight ( double Height );
__declspec(implementation_key(2935)) _bstr_t IAcadUnderlay::GetUnderlayName ( );
__declspec(implementation_key(2936)) void IAcadUnderlay::PutUnderlayName ( _bstr_t Name );
__declspec(implementation_key(2937)) void IAcadUnderlay::PutItemName ( _bstr_t sheetName );
__declspec(implementation_key(2938)) _bstr_t IAcadUnderlay::GetItemName ( );
__declspec(implementation_key(2939)) VARIANT_BOOL IAcadUnderlay::GetMonochrome ( );
__declspec(implementation_key(2940)) void IAcadUnderlay::PutMonochrome ( VARIANT_BOOL bMono );
__declspec(implementation_key(2941)) VARIANT_BOOL IAcadUnderlay::GetAdjustForBackground ( );
__declspec(implementation_key(2942)) void IAcadUnderlay::PutAdjustForBackground ( VARIANT_BOOL Value );
__declspec(implementation_key(2943)) HRESULT IAcadUnderlay::ClipBoundary ( const _variant_t & boundry );
__declspec(implementation_key(2944)) ACAD_NOUNITS IAcadUnderlay::GetScaleFactor ( );
__declspec(implementation_key(2945)) void IAcadUnderlay::PutScaleFactor ( ACAD_NOUNITS ScaleFactor );
__declspec(implementation_key(2946)) _bstr_t IAcadUnderlay::GetFile ( );
__declspec(implementation_key(2947)) void IAcadUnderlay::PutFile ( _bstr_t Name );
__declspec(implementation_key(2948)) VARIANT_BOOL IAcadUnderlay::GetUnderlayVisibility ( );
__declspec(implementation_key(2949)) void IAcadUnderlay::PutUnderlayVisibility ( VARIANT_BOOL fVisible );
__declspec(implementation_key(2950)) VARIANT_BOOL IAcadUnderlay::GetClippingEnabled ( );
__declspec(implementation_key(2951)) void IAcadUnderlay::PutClippingEnabled ( VARIANT_BOOL kClip );
__declspec(implementation_key(2952)) enum AcUnderlayLayerOverrideType IAcadUnderlay::GetUnderlayLayerOverrideApplied ( );
__declspec(implementation_key(2953)) void IAcadUnderlay::PutUnderlayLayerOverrideApplied ( enum AcUnderlayLayerOverrideType bOverride );
__declspec(implementation_key(2954)) _bstr_t IAcadDwfUnderlay::GetDWFFormat ( );
__declspec(implementation_key(2955)) void IAcadDwfUnderlay::PutDWFFormat ( _bstr_t Name );
__declspec(implementation_key(2956)) int IAcadSubDMesh::GetSmoothness ( );
__declspec(implementation_key(2957)) void IAcadSubDMesh::PutSmoothness ( int level );
__declspec(implementation_key(2958)) _variant_t IAcadSubDMesh::GetCoordinates ( );
__declspec(implementation_key(2959)) void IAcadSubDMesh::PutCoordinates ( const _variant_t & corners );
__declspec(implementation_key(2960)) _variant_t IAcadSubDMesh::GetCoordinate ( int Index );
__declspec(implementation_key(2961)) void IAcadSubDMesh::PutCoordinate ( int Index, const _variant_t & pVal );
__declspec(implementation_key(2962)) int IAcadSubDMesh::GetVertexCount ( );
__declspec(implementation_key(2963)) int IAcadSubDMesh::GetFaceCount ( );
__declspec(implementation_key(2964)) VARIANT_BOOL IAcadNurbSurface::GetCvHullDisplay ( );
__declspec(implementation_key(2965)) void IAcadNurbSurface::PutCvHullDisplay ( VARIANT_BOOL Display );
__declspec(implementation_key(2966)) _variant_t IAcadGeoPositionMarker::GetPosition ( );
__declspec(implementation_key(2967)) void IAcadGeoPositionMarker::PutPosition ( const _variant_t & Position );
__declspec(implementation_key(2968)) _bstr_t IAcadGeoPositionMarker::GetTextString ( );
__declspec(implementation_key(2969)) void IAcadGeoPositionMarker::PutTextString ( _bstr_t bstrText );
__declspec(implementation_key(2970)) _bstr_t IAcadGeoPositionMarker::GetTextStyleName ( );
__declspec(implementation_key(2971)) void IAcadGeoPositionMarker::PutTextStyleName ( _bstr_t bstrName );
__declspec(implementation_key(2972)) enum AcAttachmentPoint IAcadGeoPositionMarker::GetTextJustify ( );
__declspec(implementation_key(2973)) void IAcadGeoPositionMarker::PutTextJustify ( enum AcAttachmentPoint attPoint );
__declspec(implementation_key(2974)) enum AcDrawingDirection IAcadGeoPositionMarker::GetDrawingDirection ( );
__declspec(implementation_key(2975)) void IAcadGeoPositionMarker::PutDrawingDirection ( enum AcDrawingDirection drawDir );
__declspec(implementation_key(2976)) double IAcadGeoPositionMarker::GetTextWidth ( );
__declspec(implementation_key(2977)) void IAcadGeoPositionMarker::PutTextWidth ( double Width );
__declspec(implementation_key(2978)) double IAcadGeoPositionMarker::GetHeight ( );
__declspec(implementation_key(2979)) void IAcadGeoPositionMarker::PutHeight ( double Height );
__declspec(implementation_key(2980)) ACAD_ANGLE IAcadGeoPositionMarker::GetRotation ( );
__declspec(implementation_key(2981)) void IAcadGeoPositionMarker::PutRotation ( ACAD_ANGLE rotAngle );
__declspec(implementation_key(2982)) double IAcadGeoPositionMarker::GetLineSpacingFactor ( );
__declspec(implementation_key(2983)) void IAcadGeoPositionMarker::PutLineSpacingFactor ( double factor );
__declspec(implementation_key(2984)) double IAcadGeoPositionMarker::GetLineSpacingDistance ( );
__declspec(implementation_key(2985)) void IAcadGeoPositionMarker::PutLineSpacingDistance ( double Value );
__declspec(implementation_key(2986)) enum AcLineSpacingStyle IAcadGeoPositionMarker::GetLineSpacingStyle ( );
__declspec(implementation_key(2987)) void IAcadGeoPositionMarker::PutLineSpacingStyle ( enum AcLineSpacingStyle style );
__declspec(implementation_key(2988)) VARIANT_BOOL IAcadGeoPositionMarker::GetBackgroundFill ( );
__declspec(implementation_key(2989)) void IAcadGeoPositionMarker::PutBackgroundFill ( VARIANT_BOOL bUseBackgroundFill );
__declspec(implementation_key(2990)) double IAcadGeoPositionMarker::GetLandingGap ( );
__declspec(implementation_key(2991)) void IAcadGeoPositionMarker::PutLandingGap ( double gap );
__declspec(implementation_key(2992)) double IAcadGeoPositionMarker::GetRadius ( );
__declspec(implementation_key(2993)) void IAcadGeoPositionMarker::PutRadius ( double gap );
__declspec(implementation_key(2994)) VARIANT_BOOL IAcadGeoPositionMarker::GetTextFrameDisplay ( );
__declspec(implementation_key(2995)) void IAcadGeoPositionMarker::PutTextFrameDisplay ( VARIANT_BOOL pVal );
__declspec(implementation_key(2996)) _bstr_t IAcadGeoPositionMarker::GetLatitude ( );
__declspec(implementation_key(2997)) void IAcadGeoPositionMarker::PutLatitude ( _bstr_t Latitude );
__declspec(implementation_key(2998)) _bstr_t IAcadGeoPositionMarker::GetLongitude ( );
__declspec(implementation_key(2999)) void IAcadGeoPositionMarker::PutLongitude ( _bstr_t Longitude );
__declspec(implementation_key(3000)) double IAcadGeoPositionMarker::GetAltitude ( );
__declspec(implementation_key(3001)) void IAcadGeoPositionMarker::PutAltitude ( double Altitude );
__declspec(implementation_key(3002)) _bstr_t IAcadGeoPositionMarker::GetNotes ( );
__declspec(implementation_key(3003)) void IAcadGeoPositionMarker::PutNotes ( _bstr_t Notes );
__declspec(implementation_key(3004)) long IAcadGeomapImage::GetGeoImageBrightness ( );
__declspec(implementation_key(3005)) void IAcadGeomapImage::PutGeoImageBrightness ( long Brightness );
__declspec(implementation_key(3006)) long IAcadGeomapImage::GetGeoImageContrast ( );
__declspec(implementation_key(3007)) void IAcadGeomapImage::PutGeoImageContrast ( long Contrast );
__declspec(implementation_key(3008)) long IAcadGeomapImage::GetGeoImageFade ( );
__declspec(implementation_key(3009)) void IAcadGeomapImage::PutGeoImageFade ( long Fade );
__declspec(implementation_key(3010)) _variant_t IAcadGeomapImage::GetGeoImagePosition ( );
__declspec(implementation_key(3011)) double IAcadGeomapImage::GetGeoImageWidth ( );
__declspec(implementation_key(3012)) double IAcadGeomapImage::GetGeoImageHeight ( );
__declspec(implementation_key(3013)) enum AcPointCloudColorType IAcadPointCloud::GetUseEntityColor ( );
__declspec(implementation_key(3014)) void IAcadPointCloud::PutUseEntityColor ( enum AcPointCloudColorType val );
__declspec(implementation_key(3015)) VARIANT_BOOL IAcadPointCloud::GetShowIntensity ( );
__declspec(implementation_key(3016)) void IAcadPointCloud::PutShowIntensity ( VARIANT_BOOL val );
__declspec(implementation_key(3017)) enum AcPointCloudIntensityStyle IAcadPointCloud::GetIntensityColorScheme ( );
__declspec(implementation_key(3018)) void IAcadPointCloud::PutIntensityColorScheme ( enum AcPointCloudIntensityStyle val );
__declspec(implementation_key(3019)) _variant_t IAcadPointCloud::GetInsertionPoint ( );
__declspec(implementation_key(3020)) void IAcadPointCloud::PutInsertionPoint ( const _variant_t & EndPoint );
__declspec(implementation_key(3021)) ACAD_ANGLE IAcadPointCloud::GetRotation ( );
__declspec(implementation_key(3022)) void IAcadPointCloud::PutRotation ( ACAD_ANGLE val );
__declspec(implementation_key(3023)) ACAD_DISTANCE IAcadPointCloud::GetWidth ( );
__declspec(implementation_key(3024)) void IAcadPointCloud::PutWidth ( ACAD_DISTANCE val );
__declspec(implementation_key(3025)) ACAD_DISTANCE IAcadPointCloud::GetLength ( );
__declspec(implementation_key(3026)) void IAcadPointCloud::PutLength ( ACAD_DISTANCE val );
__declspec(implementation_key(3027)) ACAD_DISTANCE IAcadPointCloud::GetHeight ( );
__declspec(implementation_key(3028)) void IAcadPointCloud::PutHeight ( ACAD_DISTANCE val );
__declspec(implementation_key(3029)) ACAD_NOUNITS IAcadPointCloud::Getscale ( );
__declspec(implementation_key(3030)) void IAcadPointCloud::Putscale ( ACAD_NOUNITS val );
__declspec(implementation_key(3031)) _bstr_t IAcadPointCloud::GetName ( );
__declspec(implementation_key(3032)) _bstr_t IAcadPointCloud::GetPath ( );
__declspec(implementation_key(3033)) VARIANT_BOOL IAcadPointCloud::GetShowClipped ( );
__declspec(implementation_key(3034)) void IAcadPointCloud::PutShowClipped ( VARIANT_BOOL val );
__declspec(implementation_key(3035)) VARIANT_BOOL IAcadPointCloud::GetLocked ( );
__declspec(implementation_key(3036)) void IAcadPointCloud::PutLocked ( VARIANT_BOOL val );
__declspec(implementation_key(3037)) enum AcPointCloudStylizationType IAcadPointCloud::GetStylization ( );
__declspec(implementation_key(3038)) void IAcadPointCloud::PutStylization ( enum AcPointCloudStylizationType val );
__declspec(implementation_key(3039)) _bstr_t IAcadPointCloud::GetUnit ( );
__declspec(implementation_key(3040)) ACAD_NOUNITS IAcadPointCloud::GetUnitFactor ( );
__declspec(implementation_key(3041)) enum AcPointCloudExStylizationType IAcadPointCloudEx::GetStylization ( );
__declspec(implementation_key(3042)) void IAcadPointCloudEx::PutStylization ( enum AcPointCloudExStylizationType val );
__declspec(implementation_key(3043)) _bstr_t IAcadPointCloudEx::GetColorScheme ( );
__declspec(implementation_key(3044)) void IAcadPointCloudEx::PutColorScheme ( int val );
__declspec(implementation_key(3045)) _variant_t IAcadPointCloudEx::GetInsertionPoint ( );
__declspec(implementation_key(3046)) void IAcadPointCloudEx::PutInsertionPoint ( const _variant_t & EndPoint );
__declspec(implementation_key(3047)) ACAD_ANGLE IAcadPointCloudEx::GetRotation ( );
__declspec(implementation_key(3048)) void IAcadPointCloudEx::PutRotation ( ACAD_ANGLE val );
__declspec(implementation_key(3049)) ACAD_NOUNITS IAcadPointCloudEx::Getscale ( );
__declspec(implementation_key(3050)) void IAcadPointCloudEx::Putscale ( ACAD_NOUNITS val );
__declspec(implementation_key(3051)) _bstr_t IAcadPointCloudEx::GetName ( );
__declspec(implementation_key(3052)) void IAcadPointCloudEx::PutName ( _bstr_t val );
__declspec(implementation_key(3053)) _bstr_t IAcadPointCloudEx::GetPath ( );
__declspec(implementation_key(3054)) VARIANT_BOOL IAcadPointCloudEx::GetShowCropped ( );
__declspec(implementation_key(3055)) void IAcadPointCloudEx::PutShowCropped ( VARIANT_BOOL val );
__declspec(implementation_key(3056)) VARIANT_BOOL IAcadPointCloudEx::GetLocked ( );
__declspec(implementation_key(3057)) void IAcadPointCloudEx::PutLocked ( VARIANT_BOOL val );
__declspec(implementation_key(3058)) VARIANT_BOOL IAcadPointCloudEx::GetGeolocate ( );
__declspec(implementation_key(3059)) void IAcadPointCloudEx::PutGeolocate ( VARIANT_BOOL val );
__declspec(implementation_key(3060)) _bstr_t IAcadPointCloudEx::GetUnit ( );
__declspec(implementation_key(3061)) ACAD_NOUNITS IAcadPointCloudEx::GetUnitFactor ( );
__declspec(implementation_key(3062)) _bstr_t IAcadPointCloudEx2::GetSegmentation ( );
__declspec(implementation_key(3063)) IAcadModelSpacePtr IAcadDatabase::GetModelSpace ( );
__declspec(implementation_key(3064)) IAcadPaperSpacePtr IAcadDatabase::GetPaperSpace ( );
__declspec(implementation_key(3065)) IAcadBlocksPtr IAcadDatabase::GetBlocks ( );
__declspec(implementation_key(3066)) _variant_t IAcadDatabase::CopyObjects ( const _variant_t & Objects, const _variant_t & Owner, VARIANT * IdPairs );
__declspec(implementation_key(3067)) IAcadGroupsPtr IAcadDatabase::GetGroups ( );
__declspec(implementation_key(3068)) IAcadDimStylesPtr IAcadDatabase::GetDimStyles ( );
__declspec(implementation_key(3069)) IAcadLayersPtr IAcadDatabase::GetLayers ( );
__declspec(implementation_key(3070)) IAcadLineTypesPtr IAcadDatabase::GetLinetypes ( );
__declspec(implementation_key(3071)) IAcadDictionariesPtr IAcadDatabase::GetDictionaries ( );
__declspec(implementation_key(3072)) IAcadRegisteredApplicationsPtr IAcadDatabase::GetRegisteredApplications ( );
__declspec(implementation_key(3073)) IAcadTextStylesPtr IAcadDatabase::GetTextStyles ( );
__declspec(implementation_key(3074)) IAcadUCSsPtr IAcadDatabase::GetUserCoordinateSystems ( );
__declspec(implementation_key(3075)) IAcadViewsPtr IAcadDatabase::GetViews ( );
__declspec(implementation_key(3076)) IAcadViewportsPtr IAcadDatabase::GetViewports ( );
__declspec(implementation_key(3077)) double IAcadDatabase::GetElevationModelSpace ( );
__declspec(implementation_key(3078)) void IAcadDatabase::PutElevationModelSpace ( double Elevation );
__declspec(implementation_key(3079)) double IAcadDatabase::GetElevationPaperSpace ( );
__declspec(implementation_key(3080)) void IAcadDatabase::PutElevationPaperSpace ( double Elevation );
__declspec(implementation_key(3081)) _variant_t IAcadDatabase::GetLimits ( );
__declspec(implementation_key(3082)) void IAcadDatabase::PutLimits ( const _variant_t & Limits );
__declspec(implementation_key(3083)) IDispatchPtr IAcadDatabase::HandleToObject ( _bstr_t Handle );
__declspec(implementation_key(3084)) IDispatchPtr IAcadDatabase::ObjectIdToObject ( LONG_PTR ObjectID );
__declspec(implementation_key(3085)) IAcadLayoutsPtr IAcadDatabase::GetLayouts ( );
__declspec(implementation_key(3086)) IAcadPlotConfigurationsPtr IAcadDatabase::GetPlotConfigurations ( );
__declspec(implementation_key(3087)) IAcadDatabasePreferencesPtr IAcadDatabase::GetPreferences ( );
__declspec(implementation_key(3088)) IAcadSummaryInfoPtr IAcadDatabase::GetSummaryInfo ( );
__declspec(implementation_key(3089)) IAcadSectionManagerPtr IAcadDatabase::GetSectionManager ( );
__declspec(implementation_key(3090)) IAcadMaterialsPtr IAcadDatabase::GetMaterials ( );
__declspec(implementation_key(3091)) HRESULT IAcadLayerStateManager::SetDatabase ( struct IAcadDatabase * iHostDb );
__declspec(implementation_key(3092)) void IAcadLayerStateManager::PutMask ( _bstr_t bsName, enum AcLayerStateMask eMask );
__declspec(implementation_key(3093)) enum AcLayerStateMask IAcadLayerStateManager::GetMask ( _bstr_t bsName );
__declspec(implementation_key(3094)) HRESULT IAcadLayerStateManager::Save ( _bstr_t bsName, enum AcLayerStateMask eMask );
__declspec(implementation_key(3095)) HRESULT IAcadLayerStateManager::Restore ( _bstr_t bsName );
__declspec(implementation_key(3096)) HRESULT IAcadLayerStateManager::Delete ( _bstr_t bsName );
__declspec(implementation_key(3097)) HRESULT IAcadLayerStateManager::Rename ( _bstr_t bsName, _bstr_t bsNewName );
__declspec(implementation_key(3098)) HRESULT IAcadLayerStateManager::Import ( _bstr_t bsFilename );
__declspec(implementation_key(3099)) HRESULT IAcadLayerStateManager::Export ( _bstr_t bsName, _bstr_t bsFilename );
__declspec(implementation_key(3100)) IAcadEntityPtr IAcadBlock::Item ( const _variant_t & Index );
__declspec(implementation_key(3101)) IUnknownPtr IAcadBlock::Get_NewEnum ( );
__declspec(implementation_key(3102)) long IAcadBlock::GetCount ( );
__declspec(implementation_key(3103)) _bstr_t IAcadBlock::GetName ( );
__declspec(implementation_key(3104)) void IAcadBlock::PutName ( _bstr_t bstrName );
__declspec(implementation_key(3105)) _variant_t IAcadBlock::GetOrigin ( );
__declspec(implementation_key(3106)) void IAcadBlock::PutOrigin ( const _variant_t & Origin );
__declspec(implementation_key(3107)) IDispatchPtr IAcadBlock::AddCustomObject ( _bstr_t ClassName );
__declspec(implementation_key(3108)) IAcad3DFacePtr IAcadBlock::Add3DFace ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3, const _variant_t & Point4 );
__declspec(implementation_key(3109)) IAcadPolygonMeshPtr IAcadBlock::Add3DMesh ( int M, int N, const _variant_t & PointsMatrix );
__declspec(implementation_key(3110)) IAcad3DPolylinePtr IAcadBlock::Add3DPoly ( const _variant_t & PointsArray );
__declspec(implementation_key(3111)) IAcadArcPtr IAcadBlock::AddArc ( const _variant_t & Center, double Radius, double StartAngle, double EndAngle );
__declspec(implementation_key(3112)) IAcadAttributePtr IAcadBlock::AddAttribute ( double Height, enum AcAttributeMode Mode, _bstr_t Prompt, const _variant_t & InsertionPoint, _bstr_t Tag, _bstr_t Value );
__declspec(implementation_key(3113)) IAcad3DSolidPtr IAcadBlock::AddBox ( const _variant_t & Origin, double Length, double Width, double Height );
__declspec(implementation_key(3114)) IAcadCirclePtr IAcadBlock::AddCircle ( const _variant_t & Center, double Radius );
__declspec(implementation_key(3115)) IAcad3DSolidPtr IAcadBlock::AddCone ( const _variant_t & Center, double BaseRadius, double Height );
__declspec(implementation_key(3116)) IAcad3DSolidPtr IAcadBlock::AddCylinder ( const _variant_t & Center, double Radius, double Height );
__declspec(implementation_key(3117)) IAcadDimAlignedPtr IAcadBlock::AddDimAligned ( const _variant_t & ExtLine1Point, const _variant_t & ExtLine2Point, const _variant_t & TextPosition );
__declspec(implementation_key(3118)) IAcadDimAngularPtr IAcadBlock::AddDimAngular ( const _variant_t & AngleVertex, const _variant_t & FirstEndPoint, const _variant_t & SecondEndPoint, const _variant_t & TextPoint );
__declspec(implementation_key(3119)) IAcadDimDiametricPtr IAcadBlock::AddDimDiametric ( const _variant_t & ChordPoint, const _variant_t & FarChordPoint, double LeaderLength );
__declspec(implementation_key(3120)) IAcadDimRotatedPtr IAcadBlock::AddDimRotated ( const _variant_t & ExtLine1Point, const _variant_t & ExtLine2Point, const _variant_t & DimLineLocation, double RotationAngle );
__declspec(implementation_key(3121)) IAcadDimOrdinatePtr IAcadBlock::AddDimOrdinate ( const _variant_t & DefinitionPoint, const _variant_t & LeaderEndPoint, int UseXAxis );
__declspec(implementation_key(3122)) IAcadDimRadialPtr IAcadBlock::AddDimRadial ( const _variant_t & Center, const _variant_t & ChordPoint, double LeaderLength );
__declspec(implementation_key(3123)) IAcadEllipsePtr IAcadBlock::AddEllipse ( const _variant_t & Center, const _variant_t & MajorAxis, double RadiusRatio );
__declspec(implementation_key(3124)) IAcad3DSolidPtr IAcadBlock::AddEllipticalCone ( const _variant_t & Center, double MajorRadius, double MinorRadius, double Height );
__declspec(implementation_key(3125)) IAcad3DSolidPtr IAcadBlock::AddEllipticalCylinder ( const _variant_t & Center, double MajorRadius, double MinorRadius, double Height );
__declspec(implementation_key(3126)) IAcad3DSolidPtr IAcadBlock::AddExtrudedSolid ( struct IAcadRegion * Profile, double Height, double TaperAngle );
__declspec(implementation_key(3127)) IAcad3DSolidPtr IAcadBlock::AddExtrudedSolidAlongPath ( struct IAcadRegion * Profile, IDispatch * Path );
__declspec(implementation_key(3128)) IAcadLeaderPtr IAcadBlock::AddLeader ( const _variant_t & PointsArray, struct IAcadEntity * Annotation, enum AcLeaderType Type );
__declspec(implementation_key(3129)) IAcadMTextPtr IAcadBlock::AddMText ( const _variant_t & InsertionPoint, double Width, _bstr_t Text );
__declspec(implementation_key(3130)) IAcadPointPtr IAcadBlock::AddPoint ( const _variant_t & Point );
__declspec(implementation_key(3131)) IAcadLWPolylinePtr IAcadBlock::AddLightWeightPolyline ( const _variant_t & VerticesList );
__declspec(implementation_key(3132)) IAcadPolylinePtr IAcadBlock::AddPolyline ( const _variant_t & VerticesList );
__declspec(implementation_key(3133)) IAcadRayPtr IAcadBlock::AddRay ( const _variant_t & Point1, const _variant_t & Point2 );
__declspec(implementation_key(3134)) _variant_t IAcadBlock::AddRegion ( const _variant_t & ObjectList );
__declspec(implementation_key(3135)) IAcad3DSolidPtr IAcadBlock::AddRevolvedSolid ( struct IAcadRegion * Profile, const _variant_t & AxisPoint, const _variant_t & AxisDir, double Angle );
__declspec(implementation_key(3136)) IAcadShapePtr IAcadBlock::AddShape ( _bstr_t Name, const _variant_t & InsertionPoint, double ScaleFactor, double RotationAngle );
__declspec(implementation_key(3137)) IAcadSolidPtr IAcadBlock::AddSolid ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3, const _variant_t & Point4 );
__declspec(implementation_key(3138)) IAcad3DSolidPtr IAcadBlock::AddSphere ( const _variant_t & Center, double Radius );
__declspec(implementation_key(3139)) IAcadSplinePtr IAcadBlock::AddSpline ( const _variant_t & PointsArray, const _variant_t & StartTangent, const _variant_t & EndTangent );
__declspec(implementation_key(3140)) IAcadTextPtr IAcadBlock::AddText ( _bstr_t TextString, const _variant_t & InsertionPoint, double Height );
__declspec(implementation_key(3141)) IAcadTolerancePtr IAcadBlock::AddTolerance ( _bstr_t Text, const _variant_t & InsertionPoint, const _variant_t & Direction );
__declspec(implementation_key(3142)) IAcad3DSolidPtr IAcadBlock::AddTorus ( const _variant_t & Center, double TorusRadius, double TubeRadius );
__declspec(implementation_key(3143)) IAcadTracePtr IAcadBlock::AddTrace ( const _variant_t & PointsArray );
__declspec(implementation_key(3144)) IAcad3DSolidPtr IAcadBlock::AddWedge ( const _variant_t & Center, double Length, double Width, double Height );
__declspec(implementation_key(3145)) IAcadXlinePtr IAcadBlock::AddXline ( const _variant_t & Point1, const _variant_t & Point2 );
__declspec(implementation_key(3146)) IAcadBlockReferencePtr IAcadBlock::InsertBlock ( const _variant_t & InsertionPoint, _bstr_t Name, double Xscale, double Yscale, double Zscale, double Rotation, const _variant_t & Password );
__declspec(implementation_key(3147)) IAcadHatchPtr IAcadBlock::AddHatch ( int PatternType, _bstr_t PatternName, VARIANT_BOOL Associativity, const _variant_t & HatchObjectType );
__declspec(implementation_key(3148)) IAcadRasterImagePtr IAcadBlock::AddRaster ( _bstr_t imageFileName, const _variant_t & InsertionPoint, double ScaleFactor, double RotationAngle );
__declspec(implementation_key(3149)) IAcadLinePtr IAcadBlock::AddLine ( const _variant_t & StartPoint, const _variant_t & EndPoint );
__declspec(implementation_key(3150)) VARIANT_BOOL IAcadBlock::GetIsLayout ( );
__declspec(implementation_key(3151)) IAcadLayoutPtr IAcadBlock::GetLayout ( );
__declspec(implementation_key(3152)) VARIANT_BOOL IAcadBlock::GetIsXRef ( );
__declspec(implementation_key(3153)) IAcadMInsertBlockPtr IAcadBlock::AddMInsertBlock ( const _variant_t & InsertionPoint, _bstr_t Name, double Xscale, double Yscale, double Zscale, double Rotation, long NumRows, long NumColumns, long RowSpacing, long ColumnSpacing, const _variant_t & Password );
__declspec(implementation_key(3154)) IAcadPolyfaceMeshPtr IAcadBlock::AddPolyfaceMesh ( const _variant_t & VertexList, const _variant_t & FaceList );
__declspec(implementation_key(3155)) IAcadMLinePtr IAcadBlock::AddMLine ( const _variant_t & VertexList );
__declspec(implementation_key(3156)) IAcadDim3PointAngularPtr IAcadBlock::AddDim3PointAngular ( const _variant_t & AngleVertex, const _variant_t & FirstEndPoint, const _variant_t & SecondEndPoint, const _variant_t & TextPoint );
__declspec(implementation_key(3157)) IAcadDatabasePtr IAcadBlock::GetXRefDatabase ( );
__declspec(implementation_key(3158)) IAcadExternalReferencePtr IAcadBlock::AttachExternalReference ( _bstr_t PathName, _bstr_t Name, const _variant_t & InsertionPoint, double Xscale, double Yscale, double Zscale, double Rotation, VARIANT_BOOL bOverlay, const _variant_t & Password );
__declspec(implementation_key(3159)) HRESULT IAcadBlock::Unload ( );
__declspec(implementation_key(3160)) HRESULT IAcadBlock::Reload ( );
__declspec(implementation_key(3161)) HRESULT IAcadBlock::Bind ( VARIANT_BOOL bPrefixName );
__declspec(implementation_key(3162)) HRESULT IAcadBlock::Detach ( );
__declspec(implementation_key(3163)) IAcadTablePtr IAcadBlock::AddTable ( const _variant_t & InsertionPoint, int NumRows, int NumColumns, double RowHeight, double ColWidth );
__declspec(implementation_key(3164)) _bstr_t IAcadBlock::GetPath ( );
__declspec(implementation_key(3165)) void IAcadBlock::PutPath ( _bstr_t bstrName );
__declspec(implementation_key(3166)) _bstr_t IAcadBlock::GetComments ( );
__declspec(implementation_key(3167)) void IAcadBlock::PutComments ( _bstr_t bstrName );
__declspec(implementation_key(3168)) enum AcInsertUnits IAcadBlock::GetUnits ( );
__declspec(implementation_key(3169)) void IAcadBlock::PutUnits ( enum AcInsertUnits pIU );
__declspec(implementation_key(3170)) VARIANT_BOOL IAcadBlock::GetExplodable ( );
__declspec(implementation_key(3171)) void IAcadBlock::PutExplodable ( VARIANT_BOOL bExplodable );
__declspec(implementation_key(3172)) enum AcBlockScaling IAcadBlock::GetBlockScaling ( );
__declspec(implementation_key(3173)) void IAcadBlock::PutBlockScaling ( enum AcBlockScaling pBS );
__declspec(implementation_key(3174)) VARIANT_BOOL IAcadBlock::GetIsDynamicBlock ( );
__declspec(implementation_key(3175)) IAcadDimArcLengthPtr IAcadBlock::AddDimArc ( const _variant_t & ArcCenter, const _variant_t & FirstEndPoint, const _variant_t & SecondEndPoint, const _variant_t & ArcPoint );
__declspec(implementation_key(3176)) IAcadDimRadialLargePtr IAcadBlock::AddDimRadialLarge ( const _variant_t & Center, const _variant_t & ChordPoint, const _variant_t & OverrideCenter, const _variant_t & JogPoint, double JogAngle );
__declspec(implementation_key(3177)) IAcadSectionPtr IAcadBlock::AddSection ( const _variant_t & FromPoint, const _variant_t & ToPoint, const _variant_t & planeVector );
__declspec(implementation_key(3178)) IAcadMLeaderPtr IAcadBlock::AddMLeader ( const _variant_t & PointsArray, int * leaderLineIndex );
__declspec(implementation_key(3179)) IAcadBlockPtr IAcadLayout::GetBlock ( );
__declspec(implementation_key(3180)) long IAcadLayout::GetTabOrder ( );
__declspec(implementation_key(3181)) void IAcadLayout::PutTabOrder ( long pOrder );
__declspec(implementation_key(3182)) IAcadPViewportPtr IAcadPaperSpace::AddPViewport ( const _variant_t & Center, double Width, double Height );
__declspec(implementation_key(3183)) IAcadBlockPtr IAcadBlocks::Item ( const _variant_t & Index );
__declspec(implementation_key(3184)) long IAcadBlocks::GetCount ( );
__declspec(implementation_key(3185)) IUnknownPtr IAcadBlocks::Get_NewEnum ( );
__declspec(implementation_key(3186)) IAcadBlockPtr IAcadBlocks::Add ( const _variant_t & InsertionPoint, _bstr_t Name );
__declspec(implementation_key(3187)) IAcadLayoutPtr IAcadLayouts::Item ( const _variant_t & Index );
__declspec(implementation_key(3188)) long IAcadLayouts::GetCount ( );
__declspec(implementation_key(3189)) IUnknownPtr IAcadLayouts::Get_NewEnum ( );
__declspec(implementation_key(3190)) IAcadLayoutPtr IAcadLayouts::Add ( _bstr_t Name );
__declspec(implementation_key(3191)) HRESULT IAcadSortentsTable::MoveToBottom ( const _variant_t & Objects );
__declspec(implementation_key(3192)) HRESULT IAcadSortentsTable::MoveToTop ( const _variant_t & Objects );
__declspec(implementation_key(3193)) HRESULT IAcadSortentsTable::MoveBelow ( const _variant_t & Objects, struct IAcadEntity * Target );
__declspec(implementation_key(3194)) HRESULT IAcadSortentsTable::MoveAbove ( const _variant_t & Objects, struct IAcadEntity * Target );
__declspec(implementation_key(3195)) HRESULT IAcadSortentsTable::SwapOrder ( struct IAcadEntity * Object1, struct IAcadEntity * Object2 );
__declspec(implementation_key(3196)) IAcadBlockPtr IAcadSortentsTable::Block ( );
__declspec(implementation_key(3197)) HRESULT IAcadSortentsTable::GetFullDrawOrder ( VARIANT * Objects, VARIANT_BOOL honorSortentsSysvar );
__declspec(implementation_key(3198)) HRESULT IAcadSortentsTable::GetRelativeDrawOrder ( VARIANT * Objects, VARIANT_BOOL honorSortentsSysvar );
__declspec(implementation_key(3199)) HRESULT IAcadSortentsTable::SetRelativeDrawOrder ( const _variant_t & Objects );
__declspec(implementation_key(3200)) IAcadPlotPtr IAcadDocument::GetPlot ( );
__declspec(implementation_key(3201)) IAcadLayerPtr IAcadDocument::GetActiveLayer ( );
__declspec(implementation_key(3202)) void IAcadDocument::PutActiveLayer ( struct IAcadLayer * pActLayer );
__declspec(implementation_key(3203)) IAcadLineTypePtr IAcadDocument::GetActiveLinetype ( );
__declspec(implementation_key(3204)) void IAcadDocument::PutActiveLinetype ( struct IAcadLineType * pActLinetype );
__declspec(implementation_key(3205)) IAcadDimStylePtr IAcadDocument::GetActiveDimStyle ( );
__declspec(implementation_key(3206)) void IAcadDocument::PutActiveDimStyle ( struct IAcadDimStyle * pActDimStyle );
__declspec(implementation_key(3207)) IAcadTextStylePtr IAcadDocument::GetActiveTextStyle ( );
__declspec(implementation_key(3208)) void IAcadDocument::PutActiveTextStyle ( struct IAcadTextStyle * pActTextStyle );
__declspec(implementation_key(3209)) IAcadUCSPtr IAcadDocument::GetActiveUCS ( );
__declspec(implementation_key(3210)) void IAcadDocument::PutActiveUCS ( struct IAcadUCS * pActUCS );
__declspec(implementation_key(3211)) IAcadViewportPtr IAcadDocument::GetActiveViewport ( );
__declspec(implementation_key(3212)) void IAcadDocument::PutActiveViewport ( struct IAcadViewport * pActView );
__declspec(implementation_key(3213)) IAcadPViewportPtr IAcadDocument::GetActivePViewport ( );
__declspec(implementation_key(3214)) void IAcadDocument::PutActivePViewport ( struct IAcadPViewport * pActView );
__declspec(implementation_key(3215)) enum AcActiveSpace IAcadDocument::GetActiveSpace ( );
__declspec(implementation_key(3216)) void IAcadDocument::PutActiveSpace ( enum AcActiveSpace ActSpace );
__declspec(implementation_key(3217)) IAcadSelectionSetsPtr IAcadDocument::GetSelectionSets ( );
__declspec(implementation_key(3218)) IAcadSelectionSetPtr IAcadDocument::GetActiveSelectionSet ( );
__declspec(implementation_key(3219)) _bstr_t IAcadDocument::GetFullName ( );
__declspec(implementation_key(3220)) _bstr_t IAcadDocument::GetName ( );
__declspec(implementation_key(3221)) _bstr_t IAcadDocument::GetPath ( );
__declspec(implementation_key(3222)) VARIANT_BOOL IAcadDocument::GetObjectSnapMode ( );
__declspec(implementation_key(3223)) void IAcadDocument::PutObjectSnapMode ( VARIANT_BOOL fSnapMode );
__declspec(implementation_key(3224)) VARIANT_BOOL IAcadDocument::GetReadOnly ( );
__declspec(implementation_key(3225)) VARIANT_BOOL IAcadDocument::GetSaved ( );
__declspec(implementation_key(3226)) VARIANT_BOOL IAcadDocument::GetMSpace ( );
__declspec(implementation_key(3227)) void IAcadDocument::PutMSpace ( VARIANT_BOOL Mode );
__declspec(implementation_key(3228)) IAcadUtilityPtr IAcadDocument::GetUtility ( );
__declspec(implementation_key(3229)) IAcadDocumentPtr IAcadDocument::Open ( _bstr_t FullName, const _variant_t & Password );
__declspec(implementation_key(3230)) HRESULT IAcadDocument::AuditInfo ( VARIANT_BOOL FixErr );
__declspec(implementation_key(3231)) IDispatchPtr IAcadDocument::Import ( _bstr_t FileName, const _variant_t & InsertionPoint, double ScaleFactor );
__declspec(implementation_key(3232)) HRESULT IAcadDocument::Export ( _bstr_t FileName, _bstr_t Extension, struct IAcadSelectionSet * SelectionSet );
__declspec(implementation_key(3233)) IAcadDocumentPtr IAcadDocument::New ( _bstr_t TemplateFileName );
__declspec(implementation_key(3234)) HRESULT IAcadDocument::Save ( );
__declspec(implementation_key(3235)) HRESULT IAcadDocument::SaveAs ( _bstr_t FullFileName, const _variant_t & SaveAsType, const _variant_t & vSecurityParams );
__declspec(implementation_key(3236)) HRESULT IAcadDocument::Wblock ( _bstr_t FileName, struct IAcadSelectionSet * SelectionSet );
__declspec(implementation_key(3237)) HRESULT IAcadDocument::PurgeAll ( );
__declspec(implementation_key(3238)) _variant_t IAcadDocument::GetVariable ( _bstr_t Name );
__declspec(implementation_key(3239)) HRESULT IAcadDocument::SetVariable ( _bstr_t Name, const _variant_t & Value );
__declspec(implementation_key(3240)) HRESULT IAcadDocument::LoadShapeFile ( _bstr_t FullName );
__declspec(implementation_key(3241)) HRESULT IAcadDocument::Regen ( enum AcRegenType WhichViewports );
__declspec(implementation_key(3242)) IAcadSelectionSetPtr IAcadDocument::GetPickfirstSelectionSet ( );
__declspec(implementation_key(3243)) VARIANT_BOOL IAcadDocument::GetActive ( );
__declspec(implementation_key(3244)) HRESULT IAcadDocument::Activate ( );
__declspec(implementation_key(3245)) HRESULT IAcadDocument::Close ( const _variant_t & SaveChanges, const _variant_t & FileName );
__declspec(implementation_key(3246)) void IAcadDocument::PutWindowState ( enum AcWindowState pWinState );
__declspec(implementation_key(3247)) enum AcWindowState IAcadDocument::GetWindowState ( );
__declspec(implementation_key(3248)) void IAcadDocument::PutWidth ( int pWidth );
__declspec(implementation_key(3249)) int IAcadDocument::GetWidth ( );
__declspec(implementation_key(3250)) void IAcadDocument::PutHeight ( int pHeight );
__declspec(implementation_key(3251)) int IAcadDocument::GetHeight ( );
__declspec(implementation_key(3252)) void IAcadDocument::PutActiveLayout ( struct IAcadLayout * pLayout );
__declspec(implementation_key(3253)) IAcadLayoutPtr IAcadDocument::GetActiveLayout ( );
__declspec(implementation_key(3254)) HRESULT IAcadDocument::SendCommand ( _bstr_t Command );
__declspec(implementation_key(3255)) LONG_PTR IAcadDocument::GetHWND ( );
__declspec(implementation_key(3256)) _bstr_t IAcadDocument::GetWindowTitle ( );
__declspec(implementation_key(3257)) IAcadApplicationPtr IAcadDocument::GetApplication ( );
__declspec(implementation_key(3258)) IAcadDatabasePtr IAcadDocument::GetDatabase ( );
__declspec(implementation_key(3259)) HRESULT IAcadDocument::StartUndoMark ( );
__declspec(implementation_key(3260)) HRESULT IAcadDocument::EndUndoMark ( );
__declspec(implementation_key(3261)) IAcadMaterialPtr IAcadDocument::GetActiveMaterial ( );
__declspec(implementation_key(3262)) void IAcadDocument::PutActiveMaterial ( struct IAcadMaterial * pActMaterial );
__declspec(implementation_key(3263)) HRESULT IAcadDocument::PostCommand ( _bstr_t Command );
__declspec(implementation_key(3264)) IAcadApplicationPtr IAcadPlot::GetApplication ( );
__declspec(implementation_key(3265)) VARIANT_BOOL IAcadPlot::GetQuietErrorMode ( );
__declspec(implementation_key(3266)) void IAcadPlot::PutQuietErrorMode ( VARIANT_BOOL bErrorMode );
__declspec(implementation_key(3267)) long IAcadPlot::GetNumberOfCopies ( );
__declspec(implementation_key(3268)) void IAcadPlot::PutNumberOfCopies ( long numCopies );
__declspec(implementation_key(3269)) VARIANT_BOOL IAcadPlot::GetBatchPlotProgress ( );
__declspec(implementation_key(3270)) void IAcadPlot::PutBatchPlotProgress ( VARIANT_BOOL bProgressStatus );
__declspec(implementation_key(3271)) HRESULT IAcadPlot::DisplayPlotPreview ( enum AcPreviewMode Preview );
__declspec(implementation_key(3272)) VARIANT_BOOL IAcadPlot::PlotToFile ( _bstr_t plotFile, const _variant_t & plotConfig );
__declspec(implementation_key(3273)) VARIANT_BOOL IAcadPlot::PlotToDevice ( const _variant_t & plotConfig );
__declspec(implementation_key(3274)) HRESULT IAcadPlot::SetLayoutsToPlot ( const _variant_t & layoutList );
__declspec(implementation_key(3275)) HRESULT IAcadPlot::StartBatchMode ( long entryCount );
__declspec(implementation_key(3276)) VARIANT_BOOL IAcadApplication::GetVisible ( );
__declspec(implementation_key(3277)) void IAcadApplication::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(3278)) _bstr_t IAcadApplication::GetName ( );
__declspec(implementation_key(3279)) _bstr_t IAcadApplication::GetCaption ( );
__declspec(implementation_key(3280)) IAcadApplicationPtr IAcadApplication::GetApplication ( );
__declspec(implementation_key(3281)) IAcadDocumentPtr IAcadApplication::GetActiveDocument ( );
__declspec(implementation_key(3282)) void IAcadApplication::PutActiveDocument ( struct IAcadDocument * pActiveDoc );
__declspec(implementation_key(3283)) _bstr_t IAcadApplication::GetFullName ( );
__declspec(implementation_key(3284)) int IAcadApplication::GetHeight ( );
__declspec(implementation_key(3285)) void IAcadApplication::PutHeight ( int Height );
__declspec(implementation_key(3286)) int IAcadApplication::GetWindowLeft ( );
__declspec(implementation_key(3287)) void IAcadApplication::PutWindowLeft ( int left );
__declspec(implementation_key(3288)) _bstr_t IAcadApplication::GetPath ( );
__declspec(implementation_key(3289)) long IAcadApplication::GetLocaleId ( );
__declspec(implementation_key(3290)) int IAcadApplication::GetWindowTop ( );
__declspec(implementation_key(3291)) void IAcadApplication::PutWindowTop ( int top );
__declspec(implementation_key(3292)) _bstr_t IAcadApplication::GetVersion ( );
__declspec(implementation_key(3293)) int IAcadApplication::GetWidth ( );
__declspec(implementation_key(3294)) void IAcadApplication::PutWidth ( int Width );
__declspec(implementation_key(3295)) IAcadPreferencesPtr IAcadApplication::GetPreferences ( );
__declspec(implementation_key(3296)) VARIANT_BOOL IAcadApplication::GetStatusId ( IDispatch * VportObj );
__declspec(implementation_key(3297)) _variant_t IAcadApplication::ListArx ( );
__declspec(implementation_key(3298)) HRESULT IAcadApplication::LoadArx ( _bstr_t Name );
__declspec(implementation_key(3299)) IDispatchPtr IAcadApplication::GetInterfaceObject ( _bstr_t ProgID );
__declspec(implementation_key(3300)) HRESULT IAcadApplication::UnloadArx ( _bstr_t Name );
__declspec(implementation_key(3301)) HRESULT IAcadApplication::Update ( );
__declspec(implementation_key(3302)) HRESULT IAcadApplication::Quit ( );
__declspec(implementation_key(3303)) HRESULT IAcadApplication::Zoom ( int Type, VARIANT * vParams );
__declspec(implementation_key(3304)) IDispatchPtr IAcadApplication::GetVBE ( );
__declspec(implementation_key(3305)) IAcadMenuGroupsPtr IAcadApplication::GetMenuGroups ( );
__declspec(implementation_key(3306)) IAcadMenuBarPtr IAcadApplication::GetMenuBar ( );
__declspec(implementation_key(3307)) HRESULT IAcadApplication::LoadDVB ( _bstr_t Name );
__declspec(implementation_key(3308)) HRESULT IAcadApplication::UnloadDVB ( _bstr_t Name );
__declspec(implementation_key(3309)) IAcadDocumentsPtr IAcadApplication::GetDocuments ( );
__declspec(implementation_key(3310)) HRESULT IAcadApplication::Eval ( _bstr_t Expression );
__declspec(implementation_key(3311)) enum AcWindowState IAcadApplication::GetWindowState ( );
__declspec(implementation_key(3312)) void IAcadApplication::PutWindowState ( enum AcWindowState eWinState );
__declspec(implementation_key(3313)) HRESULT IAcadApplication::RunMacro ( _bstr_t MacroPath );
__declspec(implementation_key(3314)) HRESULT IAcadApplication::ZoomExtents ( );
__declspec(implementation_key(3315)) HRESULT IAcadApplication::ZoomAll ( );
__declspec(implementation_key(3316)) HRESULT IAcadApplication::ZoomCenter ( const _variant_t & Center, double Magnify );
__declspec(implementation_key(3317)) HRESULT IAcadApplication::ZoomScaled ( double scale, enum AcZoomScaleType ScaleType );
__declspec(implementation_key(3318)) HRESULT IAcadApplication::ZoomWindow ( const _variant_t & LowerLeft, const _variant_t & UpperRight );
__declspec(implementation_key(3319)) HRESULT IAcadApplication::ZoomPickWindow ( );
__declspec(implementation_key(3320)) IAcadStatePtr IAcadApplication::GetAcadState ( );
__declspec(implementation_key(3321)) HRESULT IAcadApplication::ZoomPrevious ( );
__declspec(implementation_key(3322)) LONG_PTR IAcadApplication::GetHWND ( );
__declspec(implementation_key(3323)) IAcadApplicationPtr IAcadPreferencesFiles::GetApplication ( );
__declspec(implementation_key(3324)) void IAcadPreferencesFiles::PutSupportPath ( _bstr_t orient );
__declspec(implementation_key(3325)) _bstr_t IAcadPreferencesFiles::GetSupportPath ( );
__declspec(implementation_key(3326)) void IAcadPreferencesFiles::PutDriversPath ( _bstr_t Path );
__declspec(implementation_key(3327)) _bstr_t IAcadPreferencesFiles::GetDriversPath ( );
__declspec(implementation_key(3328)) void IAcadPreferencesFiles::PutMenuFile ( _bstr_t Path );
__declspec(implementation_key(3329)) _bstr_t IAcadPreferencesFiles::GetMenuFile ( );
__declspec(implementation_key(3330)) void IAcadPreferencesFiles::PutEnterpriseMenuFile ( _bstr_t Path );
__declspec(implementation_key(3331)) _bstr_t IAcadPreferencesFiles::GetEnterpriseMenuFile ( );
__declspec(implementation_key(3332)) void IAcadPreferencesFiles::PutCustomIconPath ( _bstr_t Path );
__declspec(implementation_key(3333)) _bstr_t IAcadPreferencesFiles::GetCustomIconPath ( );
__declspec(implementation_key(3334)) void IAcadPreferencesFiles::PutHelpFilePath ( _bstr_t Path );
__declspec(implementation_key(3335)) _bstr_t IAcadPreferencesFiles::GetHelpFilePath ( );
__declspec(implementation_key(3336)) void IAcadPreferencesFiles::PutDefaultInternetURL ( _bstr_t Path );
__declspec(implementation_key(3337)) _bstr_t IAcadPreferencesFiles::GetDefaultInternetURL ( );
__declspec(implementation_key(3338)) _bstr_t IAcadPreferencesFiles::GetConfigFile ( );
__declspec(implementation_key(3339)) _bstr_t IAcadPreferencesFiles::GetLicenseServer ( );
__declspec(implementation_key(3340)) void IAcadPreferencesFiles::PutTextEditor ( _bstr_t Path );
__declspec(implementation_key(3341)) _bstr_t IAcadPreferencesFiles::GetTextEditor ( );
__declspec(implementation_key(3342)) void IAcadPreferencesFiles::PutMainDictionary ( _bstr_t Path );
__declspec(implementation_key(3343)) _bstr_t IAcadPreferencesFiles::GetMainDictionary ( );
__declspec(implementation_key(3344)) void IAcadPreferencesFiles::PutCustomDictionary ( _bstr_t Path );
__declspec(implementation_key(3345)) _bstr_t IAcadPreferencesFiles::GetCustomDictionary ( );
__declspec(implementation_key(3346)) void IAcadPreferencesFiles::PutAltFontFile ( _bstr_t fontFile );
__declspec(implementation_key(3347)) _bstr_t IAcadPreferencesFiles::GetAltFontFile ( );
__declspec(implementation_key(3348)) void IAcadPreferencesFiles::PutFontFileMap ( _bstr_t Path );
__declspec(implementation_key(3349)) _bstr_t IAcadPreferencesFiles::GetFontFileMap ( );
__declspec(implementation_key(3350)) void IAcadPreferencesFiles::PutPrintFile ( _bstr_t Path );
__declspec(implementation_key(3351)) _bstr_t IAcadPreferencesFiles::GetPrintFile ( );
__declspec(implementation_key(3352)) void IAcadPreferencesFiles::PutPrintSpoolExecutable ( _bstr_t Path );
__declspec(implementation_key(3353)) _bstr_t IAcadPreferencesFiles::GetPrintSpoolExecutable ( );
__declspec(implementation_key(3354)) void IAcadPreferencesFiles::PutPostScriptPrologFile ( _bstr_t Path );
__declspec(implementation_key(3355)) _bstr_t IAcadPreferencesFiles::GetPostScriptPrologFile ( );
__declspec(implementation_key(3356)) void IAcadPreferencesFiles::PutPrintSpoolerPath ( _bstr_t Path );
__declspec(implementation_key(3357)) _bstr_t IAcadPreferencesFiles::GetPrintSpoolerPath ( );
__declspec(implementation_key(3358)) void IAcadPreferencesFiles::PutAutoSavePath ( _bstr_t AutoSavePath );
__declspec(implementation_key(3359)) _bstr_t IAcadPreferencesFiles::GetAutoSavePath ( );
__declspec(implementation_key(3360)) void IAcadPreferencesFiles::PutTemplateDwgPath ( _bstr_t Path );
__declspec(implementation_key(3361)) _bstr_t IAcadPreferencesFiles::GetTemplateDwgPath ( );
__declspec(implementation_key(3362)) void IAcadPreferencesFiles::PutLogFilePath ( _bstr_t Path );
__declspec(implementation_key(3363)) _bstr_t IAcadPreferencesFiles::GetLogFilePath ( );
__declspec(implementation_key(3364)) void IAcadPreferencesFiles::PutTempFilePath ( _bstr_t Path );
__declspec(implementation_key(3365)) _bstr_t IAcadPreferencesFiles::GetTempFilePath ( );
__declspec(implementation_key(3366)) void IAcadPreferencesFiles::PutTempXrefPath ( _bstr_t Path );
__declspec(implementation_key(3367)) _bstr_t IAcadPreferencesFiles::GetTempXrefPath ( );
__declspec(implementation_key(3368)) void IAcadPreferencesFiles::PutTextureMapPath ( _bstr_t Path );
__declspec(implementation_key(3369)) _bstr_t IAcadPreferencesFiles::GetTextureMapPath ( );
__declspec(implementation_key(3370)) void IAcadPreferencesFiles::PutAltTabletMenuFile ( _bstr_t MenuFile );
__declspec(implementation_key(3371)) _bstr_t IAcadPreferencesFiles::GetAltTabletMenuFile ( );
__declspec(implementation_key(3372)) HRESULT IAcadPreferencesFiles::SetProjectFilePath ( _bstr_t ProjectName, _bstr_t ProjectFilePath );
__declspec(implementation_key(3373)) _bstr_t IAcadPreferencesFiles::GetProjectFilePath ( _bstr_t ProjectName );
__declspec(implementation_key(3374)) void IAcadPreferencesFiles::PutPrinterConfigPath ( _bstr_t Path );
__declspec(implementation_key(3375)) _bstr_t IAcadPreferencesFiles::GetPrinterConfigPath ( );
__declspec(implementation_key(3376)) void IAcadPreferencesFiles::PutPrinterDescPath ( _bstr_t Path );
__declspec(implementation_key(3377)) _bstr_t IAcadPreferencesFiles::GetPrinterDescPath ( );
__declspec(implementation_key(3378)) void IAcadPreferencesFiles::PutPrinterStyleSheetPath ( _bstr_t Path );
__declspec(implementation_key(3379)) _bstr_t IAcadPreferencesFiles::GetPrinterStyleSheetPath ( );
__declspec(implementation_key(3380)) void IAcadPreferencesFiles::PutWorkspacePath ( _bstr_t Path );
__declspec(implementation_key(3381)) _bstr_t IAcadPreferencesFiles::GetWorkspacePath ( );
__declspec(implementation_key(3382)) void IAcadPreferencesFiles::PutObjectARXPath ( _bstr_t Path );
__declspec(implementation_key(3383)) _bstr_t IAcadPreferencesFiles::GetObjectARXPath ( );
__declspec(implementation_key(3384)) void IAcadPreferencesFiles::PutColorBookPath ( _bstr_t Path );
__declspec(implementation_key(3385)) _bstr_t IAcadPreferencesFiles::GetColorBookPath ( );
__declspec(implementation_key(3386)) void IAcadPreferencesFiles::PutToolPalettePath ( _bstr_t Path );
__declspec(implementation_key(3387)) _bstr_t IAcadPreferencesFiles::GetToolPalettePath ( );
__declspec(implementation_key(3388)) void IAcadPreferencesFiles::PutQNewTemplateFile ( _bstr_t templateFile );
__declspec(implementation_key(3389)) _bstr_t IAcadPreferencesFiles::GetQNewTemplateFile ( );
__declspec(implementation_key(3390)) void IAcadPreferencesFiles::PutPlotLogFilePath ( _bstr_t templateFile );
__declspec(implementation_key(3391)) _bstr_t IAcadPreferencesFiles::GetPlotLogFilePath ( );
__declspec(implementation_key(3392)) void IAcadPreferencesFiles::PutPageSetupOverridesTemplateFile ( _bstr_t templateFile );
__declspec(implementation_key(3393)) _bstr_t IAcadPreferencesFiles::GetPageSetupOverridesTemplateFile ( );
__declspec(implementation_key(3394)) void IAcadPreferencesFiles::PutActiveInvProject ( _bstr_t Path );
__declspec(implementation_key(3395)) _bstr_t IAcadPreferencesFiles::GetActiveInvProject ( );
__declspec(implementation_key(3396)) IAcadApplicationPtr IAcadPreferencesDisplay::GetApplication ( );
__declspec(implementation_key(3397)) void IAcadPreferencesDisplay::PutLayoutDisplayMargins ( VARIANT_BOOL Path );
__declspec(implementation_key(3398)) VARIANT_BOOL IAcadPreferencesDisplay::GetLayoutDisplayMargins ( );
__declspec(implementation_key(3399)) void IAcadPreferencesDisplay::PutLayoutDisplayPaper ( VARIANT_BOOL Path );
__declspec(implementation_key(3400)) VARIANT_BOOL IAcadPreferencesDisplay::GetLayoutDisplayPaper ( );
__declspec(implementation_key(3401)) void IAcadPreferencesDisplay::PutLayoutDisplayPaperShadow ( VARIANT_BOOL Path );
__declspec(implementation_key(3402)) VARIANT_BOOL IAcadPreferencesDisplay::GetLayoutDisplayPaperShadow ( );
__declspec(implementation_key(3403)) void IAcadPreferencesDisplay::PutLayoutShowPlotSetup ( VARIANT_BOOL Path );
__declspec(implementation_key(3404)) VARIANT_BOOL IAcadPreferencesDisplay::GetLayoutShowPlotSetup ( );
__declspec(implementation_key(3405)) void IAcadPreferencesDisplay::PutLayoutCreateViewport ( VARIANT_BOOL Path );
__declspec(implementation_key(3406)) VARIANT_BOOL IAcadPreferencesDisplay::GetLayoutCreateViewport ( );
__declspec(implementation_key(3407)) void IAcadPreferencesDisplay::PutDisplayScrollBars ( VARIANT_BOOL Path );
__declspec(implementation_key(3408)) VARIANT_BOOL IAcadPreferencesDisplay::GetDisplayScrollBars ( );
__declspec(implementation_key(3409)) void IAcadPreferencesDisplay::PutDisplayScreenMenu ( VARIANT_BOOL Path );
__declspec(implementation_key(3410)) VARIANT_BOOL IAcadPreferencesDisplay::GetDisplayScreenMenu ( );
__declspec(implementation_key(3411)) void IAcadPreferencesDisplay::PutCursorSize ( int Path );
__declspec(implementation_key(3412)) int IAcadPreferencesDisplay::GetCursorSize ( );
__declspec(implementation_key(3413)) void IAcadPreferencesDisplay::PutDockedVisibleLines ( int Path );
__declspec(implementation_key(3414)) int IAcadPreferencesDisplay::GetDockedVisibleLines ( );
__declspec(implementation_key(3415)) void IAcadPreferencesDisplay::PutShowRasterImage ( VARIANT_BOOL Path );
__declspec(implementation_key(3416)) VARIANT_BOOL IAcadPreferencesDisplay::GetShowRasterImage ( );
__declspec(implementation_key(3417)) void IAcadPreferencesDisplay::PutGraphicsWinModelBackgrndColor ( OLE_COLOR color );
__declspec(implementation_key(3418)) OLE_COLOR IAcadPreferencesDisplay::GetGraphicsWinModelBackgrndColor ( );
__declspec(implementation_key(3419)) void IAcadPreferencesDisplay::PutModelCrosshairColor ( OLE_COLOR crossHairColor );
__declspec(implementation_key(3420)) OLE_COLOR IAcadPreferencesDisplay::GetModelCrosshairColor ( );
__declspec(implementation_key(3421)) void IAcadPreferencesDisplay::PutGraphicsWinLayoutBackgrndColor ( OLE_COLOR color );
__declspec(implementation_key(3422)) OLE_COLOR IAcadPreferencesDisplay::GetGraphicsWinLayoutBackgrndColor ( );
__declspec(implementation_key(3423)) void IAcadPreferencesDisplay::PutTextWinBackgrndColor ( OLE_COLOR Path );
__declspec(implementation_key(3424)) OLE_COLOR IAcadPreferencesDisplay::GetTextWinBackgrndColor ( );
__declspec(implementation_key(3425)) void IAcadPreferencesDisplay::PutTextWinTextColor ( OLE_COLOR Path );
__declspec(implementation_key(3426)) OLE_COLOR IAcadPreferencesDisplay::GetTextWinTextColor ( );
__declspec(implementation_key(3427)) void IAcadPreferencesDisplay::PutLayoutCrosshairColor ( OLE_COLOR crossHairColor );
__declspec(implementation_key(3428)) OLE_COLOR IAcadPreferencesDisplay::GetLayoutCrosshairColor ( );
__declspec(implementation_key(3429)) void IAcadPreferencesDisplay::PutAutoTrackingVecColor ( OLE_COLOR AutoTrackingVecColor );
__declspec(implementation_key(3430)) OLE_COLOR IAcadPreferencesDisplay::GetAutoTrackingVecColor ( );
__declspec(implementation_key(3431)) void IAcadPreferencesDisplay::PutTextFont ( _bstr_t Path );
__declspec(implementation_key(3432)) _bstr_t IAcadPreferencesDisplay::GetTextFont ( );
__declspec(implementation_key(3433)) void IAcadPreferencesDisplay::PutTextFontStyle ( enum AcTextFontStyle Path );
__declspec(implementation_key(3434)) enum AcTextFontStyle IAcadPreferencesDisplay::GetTextFontStyle ( );
__declspec(implementation_key(3435)) void IAcadPreferencesDisplay::PutTextFontSize ( int Path );
__declspec(implementation_key(3436)) int IAcadPreferencesDisplay::GetTextFontSize ( );
__declspec(implementation_key(3437)) void IAcadPreferencesDisplay::PutHistoryLines ( int Path );
__declspec(implementation_key(3438)) int IAcadPreferencesDisplay::GetHistoryLines ( );
__declspec(implementation_key(3439)) void IAcadPreferencesDisplay::PutMaxAutoCADWindow ( VARIANT_BOOL Path );
__declspec(implementation_key(3440)) VARIANT_BOOL IAcadPreferencesDisplay::GetMaxAutoCADWindow ( );
__declspec(implementation_key(3441)) void IAcadPreferencesDisplay::PutDisplayLayoutTabs ( VARIANT_BOOL Path );
__declspec(implementation_key(3442)) VARIANT_BOOL IAcadPreferencesDisplay::GetDisplayLayoutTabs ( );
__declspec(implementation_key(3443)) void IAcadPreferencesDisplay::PutImageFrameHighlight ( VARIANT_BOOL Path );
__declspec(implementation_key(3444)) VARIANT_BOOL IAcadPreferencesDisplay::GetImageFrameHighlight ( );
__declspec(implementation_key(3445)) void IAcadPreferencesDisplay::PutTrueColorImages ( VARIANT_BOOL Path );
__declspec(implementation_key(3446)) VARIANT_BOOL IAcadPreferencesDisplay::GetTrueColorImages ( );
__declspec(implementation_key(3447)) void IAcadPreferencesDisplay::PutXRefFadeIntensity ( long Path );
__declspec(implementation_key(3448)) long IAcadPreferencesDisplay::GetXRefFadeIntensity ( );
__declspec(implementation_key(3449)) IAcadApplicationPtr IAcadPreferencesOpenSave::GetApplication ( );
__declspec(implementation_key(3450)) void IAcadPreferencesOpenSave::PutSavePreviewThumbnail ( VARIANT_BOOL Path );
__declspec(implementation_key(3451)) VARIANT_BOOL IAcadPreferencesOpenSave::GetSavePreviewThumbnail ( );
__declspec(implementation_key(3452)) void IAcadPreferencesOpenSave::PutIncrementalSavePercent ( int Path );
__declspec(implementation_key(3453)) int IAcadPreferencesOpenSave::GetIncrementalSavePercent ( );
__declspec(implementation_key(3454)) void IAcadPreferencesOpenSave::PutAutoSaveInterval ( int Path );
__declspec(implementation_key(3455)) int IAcadPreferencesOpenSave::GetAutoSaveInterval ( );
__declspec(implementation_key(3456)) void IAcadPreferencesOpenSave::PutCreateBackup ( VARIANT_BOOL CreateBackup );
__declspec(implementation_key(3457)) VARIANT_BOOL IAcadPreferencesOpenSave::GetCreateBackup ( );
__declspec(implementation_key(3458)) void IAcadPreferencesOpenSave::PutFullCRCValidation ( VARIANT_BOOL Path );
__declspec(implementation_key(3459)) VARIANT_BOOL IAcadPreferencesOpenSave::GetFullCRCValidation ( );
__declspec(implementation_key(3460)) void IAcadPreferencesOpenSave::PutLogFileOn ( VARIANT_BOOL Path );
__declspec(implementation_key(3461)) VARIANT_BOOL IAcadPreferencesOpenSave::GetLogFileOn ( );
__declspec(implementation_key(3462)) void IAcadPreferencesOpenSave::PutTempFileExtension ( _bstr_t Path );
__declspec(implementation_key(3463)) _bstr_t IAcadPreferencesOpenSave::GetTempFileExtension ( );
__declspec(implementation_key(3464)) void IAcadPreferencesOpenSave::PutXrefDemandLoad ( enum AcXRefDemandLoad Path );
__declspec(implementation_key(3465)) enum AcXRefDemandLoad IAcadPreferencesOpenSave::GetXrefDemandLoad ( );
__declspec(implementation_key(3466)) void IAcadPreferencesOpenSave::PutDemandLoadARXApp ( enum AcARXDemandLoad Path );
__declspec(implementation_key(3467)) enum AcARXDemandLoad IAcadPreferencesOpenSave::GetDemandLoadARXApp ( );
__declspec(implementation_key(3468)) void IAcadPreferencesOpenSave::PutProxyImage ( enum AcProxyImage Path );
__declspec(implementation_key(3469)) enum AcProxyImage IAcadPreferencesOpenSave::GetProxyImage ( );
__declspec(implementation_key(3470)) void IAcadPreferencesOpenSave::PutShowProxyDialogBox ( VARIANT_BOOL Path );
__declspec(implementation_key(3471)) VARIANT_BOOL IAcadPreferencesOpenSave::GetShowProxyDialogBox ( );
__declspec(implementation_key(3472)) void IAcadPreferencesOpenSave::PutAutoAudit ( VARIANT_BOOL bAudit );
__declspec(implementation_key(3473)) VARIANT_BOOL IAcadPreferencesOpenSave::GetAutoAudit ( );
__declspec(implementation_key(3474)) void IAcadPreferencesOpenSave::PutSaveAsType ( enum AcSaveAsType Path );
__declspec(implementation_key(3475)) enum AcSaveAsType IAcadPreferencesOpenSave::GetSaveAsType ( );
__declspec(implementation_key(3476)) long IAcadPreferencesOpenSave::GetMRUNumber ( );
__declspec(implementation_key(3477)) IAcadApplicationPtr IAcadPreferencesOutput::GetApplication ( );
__declspec(implementation_key(3478)) void IAcadPreferencesOutput::PutDefaultOutputDevice ( _bstr_t Path );
__declspec(implementation_key(3479)) _bstr_t IAcadPreferencesOutput::GetDefaultOutputDevice ( );
__declspec(implementation_key(3480)) void IAcadPreferencesOutput::PutPrinterSpoolAlert ( enum AcPrinterSpoolAlert Path );
__declspec(implementation_key(3481)) enum AcPrinterSpoolAlert IAcadPreferencesOutput::GetPrinterSpoolAlert ( );
__declspec(implementation_key(3482)) void IAcadPreferencesOutput::PutPrinterPaperSizeAlert ( VARIANT_BOOL Path );
__declspec(implementation_key(3483)) VARIANT_BOOL IAcadPreferencesOutput::GetPrinterPaperSizeAlert ( );
__declspec(implementation_key(3484)) void IAcadPreferencesOutput::PutPlotLegacy ( VARIANT_BOOL Path );
__declspec(implementation_key(3485)) VARIANT_BOOL IAcadPreferencesOutput::GetPlotLegacy ( );
__declspec(implementation_key(3486)) void IAcadPreferencesOutput::PutOLEQuality ( enum AcOleQuality Path );
__declspec(implementation_key(3487)) enum AcOleQuality IAcadPreferencesOutput::GetOLEQuality ( );
__declspec(implementation_key(3488)) void IAcadPreferencesOutput::PutUseLastPlotSettings ( VARIANT_BOOL Path );
__declspec(implementation_key(3489)) VARIANT_BOOL IAcadPreferencesOutput::GetUseLastPlotSettings ( );
__declspec(implementation_key(3490)) void IAcadPreferencesOutput::PutPlotPolicy ( enum AcPlotPolicy Path );
__declspec(implementation_key(3491)) enum AcPlotPolicy IAcadPreferencesOutput::GetPlotPolicy ( );
__declspec(implementation_key(3492)) void IAcadPreferencesOutput::PutDefaultPlotStyleTable ( _bstr_t Path );
__declspec(implementation_key(3493)) _bstr_t IAcadPreferencesOutput::GetDefaultPlotStyleTable ( );
__declspec(implementation_key(3494)) void IAcadPreferencesOutput::PutDefaultPlotStyleForObjects ( _bstr_t Path );
__declspec(implementation_key(3495)) _bstr_t IAcadPreferencesOutput::GetDefaultPlotStyleForObjects ( );
__declspec(implementation_key(3496)) void IAcadPreferencesOutput::PutDefaultPlotStyleForLayer ( _bstr_t Path );
__declspec(implementation_key(3497)) _bstr_t IAcadPreferencesOutput::GetDefaultPlotStyleForLayer ( );
__declspec(implementation_key(3498)) void IAcadPreferencesOutput::PutContinuousPlotLog ( VARIANT_BOOL Path );
__declspec(implementation_key(3499)) VARIANT_BOOL IAcadPreferencesOutput::GetContinuousPlotLog ( );
__declspec(implementation_key(3500)) void IAcadPreferencesOutput::PutAutomaticPlotLog ( VARIANT_BOOL Path );
__declspec(implementation_key(3501)) VARIANT_BOOL IAcadPreferencesOutput::GetAutomaticPlotLog ( );
__declspec(implementation_key(3502)) void IAcadPreferencesOutput::PutDefaultPlotToFilePath ( _bstr_t Path );
__declspec(implementation_key(3503)) _bstr_t IAcadPreferencesOutput::GetDefaultPlotToFilePath ( );
__declspec(implementation_key(3504)) IAcadApplicationPtr IAcadPreferencesSystem::GetApplication ( );
__declspec(implementation_key(3505)) void IAcadPreferencesSystem::PutSingleDocumentMode ( VARIANT_BOOL Path );
__declspec(implementation_key(3506)) VARIANT_BOOL IAcadPreferencesSystem::GetSingleDocumentMode ( );
__declspec(implementation_key(3507)) void IAcadPreferencesSystem::PutDisplayOLEScale ( VARIANT_BOOL Path );
__declspec(implementation_key(3508)) VARIANT_BOOL IAcadPreferencesSystem::GetDisplayOLEScale ( );
__declspec(implementation_key(3509)) void IAcadPreferencesSystem::PutStoreSQLIndex ( VARIANT_BOOL Path );
__declspec(implementation_key(3510)) VARIANT_BOOL IAcadPreferencesSystem::GetStoreSQLIndex ( );
__declspec(implementation_key(3511)) void IAcadPreferencesSystem::PutTablesReadOnly ( VARIANT_BOOL Path );
__declspec(implementation_key(3512)) VARIANT_BOOL IAcadPreferencesSystem::GetTablesReadOnly ( );
__declspec(implementation_key(3513)) void IAcadPreferencesSystem::PutEnableStartupDialog ( VARIANT_BOOL Path );
__declspec(implementation_key(3514)) VARIANT_BOOL IAcadPreferencesSystem::GetEnableStartupDialog ( );
__declspec(implementation_key(3515)) void IAcadPreferencesSystem::PutBeepOnError ( VARIANT_BOOL BeepOnError );
__declspec(implementation_key(3516)) VARIANT_BOOL IAcadPreferencesSystem::GetBeepOnError ( );
__declspec(implementation_key(3517)) void IAcadPreferencesSystem::PutShowWarningMessages ( VARIANT_BOOL Path );
__declspec(implementation_key(3518)) VARIANT_BOOL IAcadPreferencesSystem::GetShowWarningMessages ( );
__declspec(implementation_key(3519)) void IAcadPreferencesSystem::PutLoadAcadLspInAllDocuments ( VARIANT_BOOL pALID );
__declspec(implementation_key(3520)) VARIANT_BOOL IAcadPreferencesSystem::GetLoadAcadLspInAllDocuments ( );
__declspec(implementation_key(3521)) IAcadApplicationPtr IAcadPreferencesUser::GetApplication ( );
__declspec(implementation_key(3522)) void IAcadPreferencesUser::PutKeyboardAccelerator ( enum AcKeyboardAccelerator Path );
__declspec(implementation_key(3523)) enum AcKeyboardAccelerator IAcadPreferencesUser::GetKeyboardAccelerator ( );
__declspec(implementation_key(3524)) void IAcadPreferencesUser::PutKeyboardPriority ( enum AcKeyboardPriority Path );
__declspec(implementation_key(3525)) enum AcKeyboardPriority IAcadPreferencesUser::GetKeyboardPriority ( );
__declspec(implementation_key(3526)) void IAcadPreferencesUser::PutHyperlinkDisplayCursor ( VARIANT_BOOL Path );
__declspec(implementation_key(3527)) VARIANT_BOOL IAcadPreferencesUser::GetHyperlinkDisplayCursor ( );
__declspec(implementation_key(3528)) void IAcadPreferencesUser::PutADCInsertUnitsDefaultSource ( enum AcInsertUnits pIU );
__declspec(implementation_key(3529)) enum AcInsertUnits IAcadPreferencesUser::GetADCInsertUnitsDefaultSource ( );
__declspec(implementation_key(3530)) void IAcadPreferencesUser::PutADCInsertUnitsDefaultTarget ( enum AcInsertUnits pSUunits );
__declspec(implementation_key(3531)) enum AcInsertUnits IAcadPreferencesUser::GetADCInsertUnitsDefaultTarget ( );
__declspec(implementation_key(3532)) void IAcadPreferencesUser::PutShortCutMenuDisplay ( VARIANT_BOOL pSCM );
__declspec(implementation_key(3533)) VARIANT_BOOL IAcadPreferencesUser::GetShortCutMenuDisplay ( );
__declspec(implementation_key(3534)) void IAcadPreferencesUser::PutSCMDefaultMode ( enum AcDrawingAreaSCMDefault pSCM );
__declspec(implementation_key(3535)) enum AcDrawingAreaSCMDefault IAcadPreferencesUser::GetSCMDefaultMode ( );
__declspec(implementation_key(3536)) void IAcadPreferencesUser::PutSCMEditMode ( enum AcDrawingAreaSCMEdit pSCM );
__declspec(implementation_key(3537)) enum AcDrawingAreaSCMEdit IAcadPreferencesUser::GetSCMEditMode ( );
__declspec(implementation_key(3538)) void IAcadPreferencesUser::PutSCMCommandMode ( enum AcDrawingAreaSCMCommand pSCM );
__declspec(implementation_key(3539)) enum AcDrawingAreaSCMCommand IAcadPreferencesUser::GetSCMCommandMode ( );
__declspec(implementation_key(3540)) void IAcadPreferencesUser::PutSCMTimeMode ( VARIANT_BOOL time );
__declspec(implementation_key(3541)) VARIANT_BOOL IAcadPreferencesUser::GetSCMTimeMode ( );
__declspec(implementation_key(3542)) void IAcadPreferencesUser::PutSCMTimeValue ( int time );
__declspec(implementation_key(3543)) int IAcadPreferencesUser::GetSCMTimeValue ( );
__declspec(implementation_key(3544)) IAcadApplicationPtr IAcadPreferencesDrafting::GetApplication ( );
__declspec(implementation_key(3545)) void IAcadPreferencesDrafting::PutAutoSnapMarker ( VARIANT_BOOL Path );
__declspec(implementation_key(3546)) VARIANT_BOOL IAcadPreferencesDrafting::GetAutoSnapMarker ( );
__declspec(implementation_key(3547)) void IAcadPreferencesDrafting::PutAutoSnapMagnet ( VARIANT_BOOL Path );
__declspec(implementation_key(3548)) VARIANT_BOOL IAcadPreferencesDrafting::GetAutoSnapMagnet ( );
__declspec(implementation_key(3549)) void IAcadPreferencesDrafting::PutAutoSnapTooltip ( VARIANT_BOOL Path );
__declspec(implementation_key(3550)) VARIANT_BOOL IAcadPreferencesDrafting::GetAutoSnapTooltip ( );
__declspec(implementation_key(3551)) void IAcadPreferencesDrafting::PutAutoSnapAperture ( VARIANT_BOOL Path );
__declspec(implementation_key(3552)) VARIANT_BOOL IAcadPreferencesDrafting::GetAutoSnapAperture ( );
__declspec(implementation_key(3553)) void IAcadPreferencesDrafting::PutAutoSnapApertureSize ( long Path );
__declspec(implementation_key(3554)) long IAcadPreferencesDrafting::GetAutoSnapApertureSize ( );
__declspec(implementation_key(3555)) void IAcadPreferencesDrafting::PutAutoSnapMarkerColor ( enum AcColor Path );
__declspec(implementation_key(3556)) enum AcColor IAcadPreferencesDrafting::GetAutoSnapMarkerColor ( );
__declspec(implementation_key(3557)) void IAcadPreferencesDrafting::PutAutoSnapMarkerSize ( long Path );
__declspec(implementation_key(3558)) long IAcadPreferencesDrafting::GetAutoSnapMarkerSize ( );
__declspec(implementation_key(3559)) void IAcadPreferencesDrafting::PutPolarTrackingVector ( VARIANT_BOOL Path );
__declspec(implementation_key(3560)) VARIANT_BOOL IAcadPreferencesDrafting::GetPolarTrackingVector ( );
__declspec(implementation_key(3561)) void IAcadPreferencesDrafting::PutFullScreenTrackingVector ( VARIANT_BOOL Path );
__declspec(implementation_key(3562)) VARIANT_BOOL IAcadPreferencesDrafting::GetFullScreenTrackingVector ( );
__declspec(implementation_key(3563)) void IAcadPreferencesDrafting::PutAutoTrackTooltip ( VARIANT_BOOL Path );
__declspec(implementation_key(3564)) VARIANT_BOOL IAcadPreferencesDrafting::GetAutoTrackTooltip ( );
__declspec(implementation_key(3565)) void IAcadPreferencesDrafting::PutAlignmentPointAcquisition ( enum AcAlignmentPointAcquisition Path );
__declspec(implementation_key(3566)) enum AcAlignmentPointAcquisition IAcadPreferencesDrafting::GetAlignmentPointAcquisition ( );
__declspec(implementation_key(3567)) IAcadApplicationPtr IAcadPreferencesSelection::GetApplication ( );
__declspec(implementation_key(3568)) void IAcadPreferencesSelection::PutPickFirst ( VARIANT_BOOL Path );
__declspec(implementation_key(3569)) VARIANT_BOOL IAcadPreferencesSelection::GetPickFirst ( );
__declspec(implementation_key(3570)) void IAcadPreferencesSelection::PutPickAdd ( VARIANT_BOOL Path );
__declspec(implementation_key(3571)) VARIANT_BOOL IAcadPreferencesSelection::GetPickAdd ( );
__declspec(implementation_key(3572)) void IAcadPreferencesSelection::PutPickDrag ( VARIANT_BOOL Path );
__declspec(implementation_key(3573)) VARIANT_BOOL IAcadPreferencesSelection::GetPickDrag ( );
__declspec(implementation_key(3574)) void IAcadPreferencesSelection::PutPickAuto ( VARIANT_BOOL Path );
__declspec(implementation_key(3575)) VARIANT_BOOL IAcadPreferencesSelection::GetPickAuto ( );
__declspec(implementation_key(3576)) void IAcadPreferencesSelection::PutPickBoxSize ( long Path );
__declspec(implementation_key(3577)) long IAcadPreferencesSelection::GetPickBoxSize ( );
__declspec(implementation_key(3578)) void IAcadPreferencesSelection::PutDisplayGrips ( VARIANT_BOOL Path );
__declspec(implementation_key(3579)) VARIANT_BOOL IAcadPreferencesSelection::GetDisplayGrips ( );
__declspec(implementation_key(3580)) void IAcadPreferencesSelection::PutDisplayGripsWithinBlocks ( VARIANT_BOOL Path );
__declspec(implementation_key(3581)) VARIANT_BOOL IAcadPreferencesSelection::GetDisplayGripsWithinBlocks ( );
__declspec(implementation_key(3582)) void IAcadPreferencesSelection::PutGripColorSelected ( enum AcColor Path );
__declspec(implementation_key(3583)) enum AcColor IAcadPreferencesSelection::GetGripColorSelected ( );
__declspec(implementation_key(3584)) void IAcadPreferencesSelection::PutGripColorUnselected ( enum AcColor Path );
__declspec(implementation_key(3585)) enum AcColor IAcadPreferencesSelection::GetGripColorUnselected ( );
__declspec(implementation_key(3586)) void IAcadPreferencesSelection::PutGripSize ( long Path );
__declspec(implementation_key(3587)) long IAcadPreferencesSelection::GetGripSize ( );
__declspec(implementation_key(3588)) void IAcadPreferencesSelection::PutPickGroup ( VARIANT_BOOL pick );
__declspec(implementation_key(3589)) VARIANT_BOOL IAcadPreferencesSelection::GetPickGroup ( );
__declspec(implementation_key(3590)) IAcadApplicationPtr IAcadPreferencesProfiles::GetApplication ( );
__declspec(implementation_key(3591)) void IAcadPreferencesProfiles::PutActiveProfile ( _bstr_t Path );
__declspec(implementation_key(3592)) _bstr_t IAcadPreferencesProfiles::GetActiveProfile ( );
__declspec(implementation_key(3593)) HRESULT IAcadPreferencesProfiles::ImportProfile ( _bstr_t ProfileName, _bstr_t RegFile, VARIANT_BOOL IncludePathInfo );
__declspec(implementation_key(3594)) HRESULT IAcadPreferencesProfiles::ExportProfile ( _bstr_t ProfileName, _bstr_t RegFile );
__declspec(implementation_key(3595)) HRESULT IAcadPreferencesProfiles::DeleteProfile ( _bstr_t ProfileName );
__declspec(implementation_key(3596)) HRESULT IAcadPreferencesProfiles::ResetProfile ( _bstr_t Profile );
__declspec(implementation_key(3597)) HRESULT IAcadPreferencesProfiles::RenameProfile ( _bstr_t origProfileName, _bstr_t newProfileName );
__declspec(implementation_key(3598)) HRESULT IAcadPreferencesProfiles::CopyProfile ( _bstr_t oldProfileName, _bstr_t newProfileName );
__declspec(implementation_key(3599)) HRESULT IAcadPreferencesProfiles::GetAllProfileNames ( VARIANT * pNames );
__declspec(implementation_key(3600)) IAcadApplicationPtr IAcadPreferences::GetApplication ( );
__declspec(implementation_key(3601)) IAcadPreferencesFilesPtr IAcadPreferences::GetFiles ( );
__declspec(implementation_key(3602)) IAcadPreferencesDisplayPtr IAcadPreferences::GetDisplay ( );
__declspec(implementation_key(3603)) IAcadPreferencesOpenSavePtr IAcadPreferences::GetOpenSave ( );
__declspec(implementation_key(3604)) IAcadPreferencesOutputPtr IAcadPreferences::GetOutput ( );
__declspec(implementation_key(3605)) IAcadPreferencesSystemPtr IAcadPreferences::GetSystem ( );
__declspec(implementation_key(3606)) IAcadPreferencesUserPtr IAcadPreferences::GetUser ( );
__declspec(implementation_key(3607)) IAcadPreferencesDraftingPtr IAcadPreferences::GetDrafting ( );
__declspec(implementation_key(3608)) IAcadPreferencesSelectionPtr IAcadPreferences::GetSelection ( );
__declspec(implementation_key(3609)) IAcadPreferencesProfilesPtr IAcadPreferences::GetProfiles ( );
__declspec(implementation_key(3610)) IAcadDocumentPtr IAcadDocuments::Item ( const _variant_t & Index );
__declspec(implementation_key(3611)) IUnknownPtr IAcadDocuments::Get_NewEnum ( );
__declspec(implementation_key(3612)) long IAcadDocuments::GetCount ( );
__declspec(implementation_key(3613)) IAcadApplicationPtr IAcadDocuments::GetApplication ( );
__declspec(implementation_key(3614)) IAcadDocumentPtr IAcadDocuments::Add ( const _variant_t & TemplateName );
__declspec(implementation_key(3615)) IAcadDocumentPtr IAcadDocuments::Open ( _bstr_t Name, const _variant_t & ReadOnly, const _variant_t & Password );
__declspec(implementation_key(3616)) HRESULT IAcadDocuments::Close ( );
__declspec(implementation_key(3617)) IAcadApplicationPtr IAcadState::GetApplication ( );
__declspec(implementation_key(3618)) VARIANT_BOOL IAcadState::GetIsQuiescent ( );
__declspec(implementation_key(3619)) IAcadEntityPtr IAcadSelectionSet::Item ( const _variant_t & Index );
__declspec(implementation_key(3620)) long IAcadSelectionSet::GetCount ( );
__declspec(implementation_key(3621)) IUnknownPtr IAcadSelectionSet::Get_NewEnum ( );
__declspec(implementation_key(3622)) _bstr_t IAcadSelectionSet::GetName ( );
__declspec(implementation_key(3623)) HRESULT IAcadSelectionSet::Highlight ( VARIANT_BOOL bFlag );
__declspec(implementation_key(3624)) HRESULT IAcadSelectionSet::Erase ( );
__declspec(implementation_key(3625)) HRESULT IAcadSelectionSet::Update ( );
__declspec(implementation_key(3626)) IAcadApplicationPtr IAcadSelectionSet::GetApplication ( );
__declspec(implementation_key(3627)) HRESULT IAcadSelectionSet::AddItems ( const _variant_t & pSelSet );
__declspec(implementation_key(3628)) HRESULT IAcadSelectionSet::RemoveItems ( const _variant_t & Objects );
__declspec(implementation_key(3629)) HRESULT IAcadSelectionSet::Clear ( );
__declspec(implementation_key(3630)) HRESULT IAcadSelectionSet::Select ( enum AcSelect Mode, const _variant_t & Point1, const _variant_t & Point2, const _variant_t & FilterType, const _variant_t & FilterData );
__declspec(implementation_key(3631)) HRESULT IAcadSelectionSet::SelectAtPoint ( const _variant_t & Point, const _variant_t & FilterType, const _variant_t & FilterData );
__declspec(implementation_key(3632)) HRESULT IAcadSelectionSet::SelectByPolygon ( enum AcSelect Mode, const _variant_t & PointsList, const _variant_t & FilterType, const _variant_t & FilterData );
__declspec(implementation_key(3633)) HRESULT IAcadSelectionSet::SelectOnScreen ( const _variant_t & FilterType, const _variant_t & FilterData );
__declspec(implementation_key(3634)) HRESULT IAcadSelectionSet::Delete ( );
__declspec(implementation_key(3635)) IAcadSelectionSetPtr IAcadSelectionSets::Item ( const _variant_t & Index );
__declspec(implementation_key(3636)) long IAcadSelectionSets::GetCount ( );
__declspec(implementation_key(3637)) IUnknownPtr IAcadSelectionSets::Get_NewEnum ( );
__declspec(implementation_key(3638)) IAcadApplicationPtr IAcadSelectionSets::GetApplication ( );
__declspec(implementation_key(3639)) IAcadSelectionSetPtr IAcadSelectionSets::Add ( _bstr_t Name );
__declspec(implementation_key(3640)) IAcadMenuGroupPtr IAcadMenuGroups::Item ( const _variant_t & Index );
__declspec(implementation_key(3641)) IUnknownPtr IAcadMenuGroups::Get_NewEnum ( );
__declspec(implementation_key(3642)) long IAcadMenuGroups::GetCount ( );
__declspec(implementation_key(3643)) IAcadApplicationPtr IAcadMenuGroups::GetApplication ( );
__declspec(implementation_key(3644)) IAcadApplicationPtr IAcadMenuGroups::GetParent ( );
__declspec(implementation_key(3645)) IAcadMenuGroupPtr IAcadMenuGroups::Load ( _bstr_t MenuFileName, const _variant_t & BaseMenu );
__declspec(implementation_key(3646)) IAcadApplicationPtr IAcadMenuGroup::GetApplication ( );
__declspec(implementation_key(3647)) IAcadMenuGroupsPtr IAcadMenuGroup::GetParent ( );
__declspec(implementation_key(3648)) _bstr_t IAcadMenuGroup::GetName ( );
__declspec(implementation_key(3649)) enum AcMenuGroupType IAcadMenuGroup::GetType ( );
__declspec(implementation_key(3650)) _bstr_t IAcadMenuGroup::GetMenuFileName ( );
__declspec(implementation_key(3651)) IAcadPopupMenusPtr IAcadMenuGroup::GetMenus ( );
__declspec(implementation_key(3652)) IAcadToolbarsPtr IAcadMenuGroup::GetToolbars ( );
__declspec(implementation_key(3653)) HRESULT IAcadMenuGroup::Unload ( );
__declspec(implementation_key(3654)) HRESULT IAcadMenuGroup::Save ( enum AcMenuFileType MenuFileType );
__declspec(implementation_key(3655)) HRESULT IAcadMenuGroup::SaveAs ( _bstr_t MenuFileName, enum AcMenuFileType MenuFileType );
__declspec(implementation_key(3656)) IAcadPopupMenuPtr IAcadPopupMenus::Item ( const _variant_t & Index );
__declspec(implementation_key(3657)) IUnknownPtr IAcadPopupMenus::Get_NewEnum ( );
__declspec(implementation_key(3658)) long IAcadPopupMenus::GetCount ( );
__declspec(implementation_key(3659)) IAcadApplicationPtr IAcadPopupMenus::GetApplication ( );
__declspec(implementation_key(3660)) IAcadMenuGroupPtr IAcadPopupMenus::GetParent ( );
__declspec(implementation_key(3661)) IAcadPopupMenuPtr IAcadPopupMenus::Add ( _bstr_t MenuName );
__declspec(implementation_key(3662)) HRESULT IAcadPopupMenus::InsertMenuInMenuBar ( _bstr_t MenuName, const _variant_t & Index );
__declspec(implementation_key(3663)) HRESULT IAcadPopupMenus::RemoveMenuFromMenuBar ( const _variant_t & Index );
__declspec(implementation_key(3664)) IAcadPopupMenuItemPtr IAcadPopupMenu::Item ( const _variant_t & Index );
__declspec(implementation_key(3665)) IUnknownPtr IAcadPopupMenu::Get_NewEnum ( );
__declspec(implementation_key(3666)) long IAcadPopupMenu::GetCount ( );
__declspec(implementation_key(3667)) IAcadApplicationPtr IAcadPopupMenu::GetApplication ( );
__declspec(implementation_key(3668)) IDispatchPtr IAcadPopupMenu::GetParent ( );
__declspec(implementation_key(3669)) _bstr_t IAcadPopupMenu::GetName ( );
__declspec(implementation_key(3670)) void IAcadPopupMenu::PutName ( _bstr_t bstrName );
__declspec(implementation_key(3671)) _bstr_t IAcadPopupMenu::GetNameNoMnemonic ( );
__declspec(implementation_key(3672)) VARIANT_BOOL IAcadPopupMenu::GetShortcutMenu ( );
__declspec(implementation_key(3673)) VARIANT_BOOL IAcadPopupMenu::GetOnMenuBar ( );
__declspec(implementation_key(3674)) IAcadPopupMenuItemPtr IAcadPopupMenu::AddMenuItem ( const _variant_t & Index, _bstr_t Label, _bstr_t Macro );
__declspec(implementation_key(3675)) IAcadPopupMenuPtr IAcadPopupMenu::AddSubMenu ( const _variant_t & Index, _bstr_t Label );
__declspec(implementation_key(3676)) IAcadPopupMenuItemPtr IAcadPopupMenu::AddSeparator ( const _variant_t & Index );
__declspec(implementation_key(3677)) HRESULT IAcadPopupMenu::InsertInMenuBar ( const _variant_t & Index );
__declspec(implementation_key(3678)) HRESULT IAcadPopupMenu::RemoveFromMenuBar ( );
__declspec(implementation_key(3679)) _bstr_t IAcadPopupMenu::GetTagString ( );
__declspec(implementation_key(3680)) IAcadApplicationPtr IAcadPopupMenuItem::GetApplication ( );
__declspec(implementation_key(3681)) IAcadPopupMenuPtr IAcadPopupMenuItem::GetParent ( );
__declspec(implementation_key(3682)) _bstr_t IAcadPopupMenuItem::GetLabel ( );
__declspec(implementation_key(3683)) void IAcadPopupMenuItem::PutLabel ( _bstr_t bstrLabel );
__declspec(implementation_key(3684)) _bstr_t IAcadPopupMenuItem::GetTagString ( );
__declspec(implementation_key(3685)) void IAcadPopupMenuItem::PutTagString ( _bstr_t bstrTag );
__declspec(implementation_key(3686)) VARIANT_BOOL IAcadPopupMenuItem::GetEnable ( );
__declspec(implementation_key(3687)) void IAcadPopupMenuItem::PutEnable ( VARIANT_BOOL bFlag );
__declspec(implementation_key(3688)) VARIANT_BOOL IAcadPopupMenuItem::GetCheck ( );
__declspec(implementation_key(3689)) void IAcadPopupMenuItem::PutCheck ( VARIANT_BOOL bFlag );
__declspec(implementation_key(3690)) enum AcMenuItemType IAcadPopupMenuItem::GetType ( );
__declspec(implementation_key(3691)) IAcadPopupMenuPtr IAcadPopupMenuItem::GetSubMenu ( );
__declspec(implementation_key(3692)) _bstr_t IAcadPopupMenuItem::GetMacro ( );
__declspec(implementation_key(3693)) void IAcadPopupMenuItem::PutMacro ( _bstr_t bstrMacro );
__declspec(implementation_key(3694)) int IAcadPopupMenuItem::GetIndex ( );
__declspec(implementation_key(3695)) _bstr_t IAcadPopupMenuItem::GetCaption ( );
__declspec(implementation_key(3696)) _bstr_t IAcadPopupMenuItem::GetHelpString ( );
__declspec(implementation_key(3697)) void IAcadPopupMenuItem::PutHelpString ( _bstr_t bstrHelp );
__declspec(implementation_key(3698)) HRESULT IAcadPopupMenuItem::Delete ( );
__declspec(implementation_key(3699)) int IAcadPopupMenuItem::GetEndSubMenuLevel ( );
__declspec(implementation_key(3700)) void IAcadPopupMenuItem::PutEndSubMenuLevel ( int level );
__declspec(implementation_key(3701)) IAcadPopupMenuPtr IAcadMenuBar::Item ( const _variant_t & Index );
__declspec(implementation_key(3702)) IUnknownPtr IAcadMenuBar::Get_NewEnum ( );
__declspec(implementation_key(3703)) long IAcadMenuBar::GetCount ( );
__declspec(implementation_key(3704)) IAcadApplicationPtr IAcadMenuBar::GetApplication ( );
__declspec(implementation_key(3705)) IAcadApplicationPtr IAcadMenuBar::GetParent ( );
__declspec(implementation_key(3706)) IAcadToolbarPtr IAcadToolbars::Item ( const _variant_t & Index );
__declspec(implementation_key(3707)) IUnknownPtr IAcadToolbars::Get_NewEnum ( );
__declspec(implementation_key(3708)) long IAcadToolbars::GetCount ( );
__declspec(implementation_key(3709)) IAcadApplicationPtr IAcadToolbars::GetApplication ( );
__declspec(implementation_key(3710)) IAcadMenuGroupPtr IAcadToolbars::GetParent ( );
__declspec(implementation_key(3711)) VARIANT_BOOL IAcadToolbars::GetLargeButtons ( );
__declspec(implementation_key(3712)) void IAcadToolbars::PutLargeButtons ( VARIANT_BOOL bFlag );
__declspec(implementation_key(3713)) IAcadToolbarPtr IAcadToolbars::Add ( _bstr_t ToolbarName );
__declspec(implementation_key(3714)) IAcadToolbarItemPtr IAcadToolbar::Item ( const _variant_t & Index );
__declspec(implementation_key(3715)) IUnknownPtr IAcadToolbar::Get_NewEnum ( );
__declspec(implementation_key(3716)) long IAcadToolbar::GetCount ( );
__declspec(implementation_key(3717)) IAcadApplicationPtr IAcadToolbar::GetApplication ( );
__declspec(implementation_key(3718)) IDispatchPtr IAcadToolbar::GetParent ( );
__declspec(implementation_key(3719)) _bstr_t IAcadToolbar::GetName ( );
__declspec(implementation_key(3720)) void IAcadToolbar::PutName ( _bstr_t bstrName );
__declspec(implementation_key(3721)) VARIANT_BOOL IAcadToolbar::GetVisible ( );
__declspec(implementation_key(3722)) void IAcadToolbar::PutVisible ( VARIANT_BOOL bFlag );
__declspec(implementation_key(3723)) enum AcToolbarDockStatus IAcadToolbar::GetDockStatus ( );
__declspec(implementation_key(3724)) VARIANT_BOOL IAcadToolbar::GetLargeButtons ( );
__declspec(implementation_key(3725)) int IAcadToolbar::Getleft ( );
__declspec(implementation_key(3726)) void IAcadToolbar::Putleft ( int nLeft );
__declspec(implementation_key(3727)) int IAcadToolbar::Gettop ( );
__declspec(implementation_key(3728)) void IAcadToolbar::Puttop ( int nTop );
__declspec(implementation_key(3729)) int IAcadToolbar::GetWidth ( );
__declspec(implementation_key(3730)) int IAcadToolbar::GetHeight ( );
__declspec(implementation_key(3731)) int IAcadToolbar::GetFloatingRows ( );
__declspec(implementation_key(3732)) void IAcadToolbar::PutFloatingRows ( int nRows );
__declspec(implementation_key(3733)) _bstr_t IAcadToolbar::GetHelpString ( );
__declspec(implementation_key(3734)) void IAcadToolbar::PutHelpString ( _bstr_t bstrHelp );
__declspec(implementation_key(3735)) IAcadToolbarItemPtr IAcadToolbar::AddToolbarButton ( const _variant_t & Index, _bstr_t Name, _bstr_t HelpString, _bstr_t Macro, const _variant_t & FlyoutButton );
__declspec(implementation_key(3736)) IAcadToolbarItemPtr IAcadToolbar::AddSeparator ( const _variant_t & Index );
__declspec(implementation_key(3737)) HRESULT IAcadToolbar::Dock ( enum AcToolbarDockStatus Side );
__declspec(implementation_key(3738)) HRESULT IAcadToolbar::Float ( int top, int left, int NumberFloatRows );
__declspec(implementation_key(3739)) HRESULT IAcadToolbar::Delete ( );
__declspec(implementation_key(3740)) _bstr_t IAcadToolbar::GetTagString ( );
__declspec(implementation_key(3741)) IAcadApplicationPtr IAcadToolbarItem::GetApplication ( );
__declspec(implementation_key(3742)) IAcadToolbarPtr IAcadToolbarItem::GetParent ( );
__declspec(implementation_key(3743)) _bstr_t IAcadToolbarItem::GetName ( );
__declspec(implementation_key(3744)) void IAcadToolbarItem::PutName ( _bstr_t bstrName );
__declspec(implementation_key(3745)) _bstr_t IAcadToolbarItem::GetTagString ( );
__declspec(implementation_key(3746)) void IAcadToolbarItem::PutTagString ( _bstr_t bstrTag );
__declspec(implementation_key(3747)) enum AcToolbarItemType IAcadToolbarItem::GetType ( );
__declspec(implementation_key(3748)) IAcadToolbarPtr IAcadToolbarItem::GetFlyout ( );
__declspec(implementation_key(3749)) _bstr_t IAcadToolbarItem::GetMacro ( );
__declspec(implementation_key(3750)) void IAcadToolbarItem::PutMacro ( _bstr_t bstrMacro );
__declspec(implementation_key(3751)) int IAcadToolbarItem::GetIndex ( );
__declspec(implementation_key(3752)) _bstr_t IAcadToolbarItem::GetHelpString ( );
__declspec(implementation_key(3753)) void IAcadToolbarItem::PutHelpString ( _bstr_t bstrHelp );
__declspec(implementation_key(3754)) HRESULT IAcadToolbarItem::GetBitmaps ( BSTR * SmallIconName, BSTR * LargeIconName );
__declspec(implementation_key(3755)) HRESULT IAcadToolbarItem::SetBitmaps ( _bstr_t SmallIconName, _bstr_t LargeIconName );
__declspec(implementation_key(3756)) HRESULT IAcadToolbarItem::AttachToolbarToFlyout ( _bstr_t MenuGroupName, _bstr_t ToolbarName );
__declspec(implementation_key(3757)) HRESULT IAcadToolbarItem::Delete ( );
__declspec(implementation_key(3758)) _bstr_t IAcadToolbarItem::GetCommandDisplayName ( );
__declspec(implementation_key(3759)) void IAcadToolbarItem::PutCommandDisplayName ( _bstr_t Name );
#pragma stop_map_region

} // namespace AutoCAD

#pragma pack(pop)
