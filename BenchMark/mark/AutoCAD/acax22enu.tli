// Created by Microsoft (R) C/C++ Compiler Version 14.00.24215.1 (24459e45).
//
// e:\work\git\cps_mark\benchmark\debug\acax22enu.tli
//
// Wrapper implementations for type library C:\Program Files\Common Files\Autodesk Shared\acax22enu.tlb
// compiler-generated file created 08/28/19 at 10:16:56 - DO NOT EDIT!


//
// interface IAcadAcCmColor wrapper method implementations
//

#pragma implementation_key(1)
inline void AutoCAD::IAcadAcCmColor::PutEntityColor ( long eColor ) {
    HRESULT _hr = put_EntityColor(eColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2)
inline long AutoCAD::IAcadAcCmColor::GetEntityColor ( ) {
    long _result = 0;
    HRESULT _hr = get_EntityColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3)
inline _bstr_t AutoCAD::IAcadAcCmColor::GetColorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4)
inline _bstr_t AutoCAD::IAcadAcCmColor::GetBookName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BookName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5)
inline HRESULT AutoCAD::IAcadAcCmColor::SetNames ( _bstr_t ColorName, _bstr_t BookName ) {
    HRESULT _hr = raw_SetNames(ColorName, BookName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6)
inline HRESULT AutoCAD::IAcadAcCmColor::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7)
inline long AutoCAD::IAcadAcCmColor::GetRed ( ) {
    long _result = 0;
    HRESULT _hr = get_Red(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(8)
inline long AutoCAD::IAcadAcCmColor::GetBlue ( ) {
    long _result = 0;
    HRESULT _hr = get_Blue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(9)
inline long AutoCAD::IAcadAcCmColor::GetGreen ( ) {
    long _result = 0;
    HRESULT _hr = get_Green(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(10)
inline HRESULT AutoCAD::IAcadAcCmColor::SetRGB ( long Red, long Green, long Blue ) {
    HRESULT _hr = raw_SetRGB(Red, Green, Blue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(11)
inline void AutoCAD::IAcadAcCmColor::PutColorMethod ( enum AcColorMethod Flags ) {
    HRESULT _hr = put_ColorMethod(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(12)
inline enum AutoCAD::AcColorMethod AutoCAD::IAcadAcCmColor::GetColorMethod ( ) {
    enum AcColorMethod _result;
    HRESULT _hr = get_ColorMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(13)
inline enum AutoCAD::AcColor AutoCAD::IAcadAcCmColor::GetColorIndex ( ) {
    enum AcColor _result;
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(14)
inline void AutoCAD::IAcadAcCmColor::PutColorIndex ( enum AcColor color ) {
    HRESULT _hr = put_ColorIndex(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(15)
inline HRESULT AutoCAD::IAcadAcCmColor::SetColorBookColor ( _bstr_t BookName, _bstr_t ColorName ) {
    HRESULT _hr = raw_SetColorBookColor(BookName, ColorName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadHyperlink wrapper method implementations
//

#pragma implementation_key(16)
inline void AutoCAD::IAcadHyperlink::PutURL ( _bstr_t URLPath ) {
    HRESULT _hr = put_URL(URLPath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(17)
inline _bstr_t AutoCAD::IAcadHyperlink::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(18)
inline void AutoCAD::IAcadHyperlink::PutURLDescription ( _bstr_t Description ) {
    HRESULT _hr = put_URLDescription(Description);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(19)
inline _bstr_t AutoCAD::IAcadHyperlink::GetURLDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URLDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(20)
inline IDispatchPtr AutoCAD::IAcadHyperlink::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(21)
inline HRESULT AutoCAD::IAcadHyperlink::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(22)
inline void AutoCAD::IAcadHyperlink::PutURLNamedLocation ( _bstr_t Location ) {
    HRESULT _hr = put_URLNamedLocation(Location);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(23)
inline _bstr_t AutoCAD::IAcadHyperlink::GetURLNamedLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URLNamedLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAcadHyperlinks wrapper method implementations
//

#pragma implementation_key(24)
inline AutoCAD::IAcadHyperlinkPtr AutoCAD::IAcadHyperlinks::Item ( long Index ) {
    struct IAcadHyperlink * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadHyperlinkPtr(_result, false);
}

#pragma implementation_key(25)
inline long AutoCAD::IAcadHyperlinks::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(26)
inline IUnknownPtr AutoCAD::IAcadHyperlinks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(27)
inline IDispatchPtr AutoCAD::IAcadHyperlinks::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(28)
inline AutoCAD::IAcadHyperlinkPtr AutoCAD::IAcadHyperlinks::Add ( _bstr_t Name, const _variant_t & Description, const _variant_t & NamedLocation ) {
    struct IAcadHyperlink * _result = 0;
    HRESULT _hr = raw_Add(Name, Description, NamedLocation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadHyperlinkPtr(_result, false);
}

//
// interface IAcadSectionTypeSettings wrapper method implementations
//

#pragma implementation_key(29)
inline enum AutoCAD::AcSectionGeneration AutoCAD::IAcadSectionTypeSettings::GetGenerationOptions ( ) {
    enum AcSectionGeneration _result;
    HRESULT _hr = get_GenerationOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(30)
inline void AutoCAD::IAcadSectionTypeSettings::PutGenerationOptions ( enum AcSectionGeneration pVal ) {
    HRESULT _hr = put_GenerationOptions(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(31)
inline _variant_t AutoCAD::IAcadSectionTypeSettings::GetSourceObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SourceObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(32)
inline void AutoCAD::IAcadSectionTypeSettings::PutSourceObjects ( const _variant_t & pVal ) {
    HRESULT _hr = put_SourceObjects(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(33)
inline _variant_t AutoCAD::IAcadSectionTypeSettings::GetDestinationBlock ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DestinationBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(34)
inline void AutoCAD::IAcadSectionTypeSettings::PutDestinationBlock ( const _variant_t & pVal ) {
    HRESULT _hr = put_DestinationBlock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(35)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetDestinationFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DestinationFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(36)
inline void AutoCAD::IAcadSectionTypeSettings::PutDestinationFile ( _bstr_t pVal ) {
    HRESULT _hr = put_DestinationFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(37)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadSectionTypeSettings::GetIntersectionBoundaryColor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_IntersectionBoundaryColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(38)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionBoundaryColor ( struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = put_IntersectionBoundaryColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(39)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetIntersectionBoundaryLayer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IntersectionBoundaryLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(40)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionBoundaryLayer ( _bstr_t Layer ) {
    HRESULT _hr = put_IntersectionBoundaryLayer(Layer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(41)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetIntersectionBoundaryLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IntersectionBoundaryLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(42)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionBoundaryLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_IntersectionBoundaryLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(43)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadSectionTypeSettings::GetIntersectionBoundaryLinetypeScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_IntersectionBoundaryLinetypeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(44)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionBoundaryLinetypeScale ( ACAD_NOUNITS ltScale ) {
    HRESULT _hr = put_IntersectionBoundaryLinetypeScale(ltScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(45)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetIntersectionBoundaryPlotStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IntersectionBoundaryPlotStyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(46)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionBoundaryPlotStyleName ( _bstr_t plotStyle ) {
    HRESULT _hr = put_IntersectionBoundaryPlotStyleName(plotStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(47)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadSectionTypeSettings::GetIntersectionBoundaryLineweight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_IntersectionBoundaryLineweight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(48)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionBoundaryLineweight ( ACAD_LWEIGHT Lineweight ) {
    HRESULT _hr = put_IntersectionBoundaryLineweight(Lineweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(49)
inline VARIANT_BOOL AutoCAD::IAcadSectionTypeSettings::GetIntersectionBoundaryDivisionLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IntersectionBoundaryDivisionLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(50)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionBoundaryDivisionLines ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IntersectionBoundaryDivisionLines(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(51)
inline VARIANT_BOOL AutoCAD::IAcadSectionTypeSettings::GetIntersectionFillVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IntersectionFillVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(52)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionFillVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IntersectionFillVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(53)
inline enum AutoCAD::AcPatternType AutoCAD::IAcadSectionTypeSettings::GetIntersectionFillHatchPatternType ( ) {
    enum AcPatternType _result;
    HRESULT _hr = get_IntersectionFillHatchPatternType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(54)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionFillHatchPatternType ( enum AcPatternType pVal ) {
    HRESULT _hr = put_IntersectionFillHatchPatternType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(55)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetIntersectionFillHatchPatternName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IntersectionFillHatchPatternName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(56)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionFillHatchPatternName ( _bstr_t pVal ) {
    HRESULT _hr = put_IntersectionFillHatchPatternName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(57)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadSectionTypeSettings::GetIntersectionFillHatchAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_IntersectionFillHatchAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(58)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionFillHatchAngle ( ACAD_ANGLE pVal ) {
    HRESULT _hr = put_IntersectionFillHatchAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(59)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadSectionTypeSettings::GetIntersectionFillHatchScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_IntersectionFillHatchScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(60)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionFillHatchScale ( ACAD_NOUNITS pVal ) {
    HRESULT _hr = put_IntersectionFillHatchScale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(61)
inline double AutoCAD::IAcadSectionTypeSettings::GetIntersectionFillHatchSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_IntersectionFillHatchSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(62)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionFillHatchSpacing ( double pVal ) {
    HRESULT _hr = put_IntersectionFillHatchSpacing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(63)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadSectionTypeSettings::GetIntersectionFillColor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_IntersectionFillColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(64)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionFillColor ( struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = put_IntersectionFillColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(65)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetIntersectionFillLayer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IntersectionFillLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(66)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionFillLayer ( _bstr_t Layer ) {
    HRESULT _hr = put_IntersectionFillLayer(Layer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(67)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetIntersectionFillLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IntersectionFillLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(68)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionFillLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_IntersectionFillLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(69)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadSectionTypeSettings::GetIntersectionFillLinetypeScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_IntersectionFillLinetypeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(70)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionFillLinetypeScale ( ACAD_NOUNITS ltScale ) {
    HRESULT _hr = put_IntersectionFillLinetypeScale(ltScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(71)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetIntersectionFillPlotStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IntersectionFillPlotStyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(72)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionFillPlotStyleName ( _bstr_t plotStyle ) {
    HRESULT _hr = put_IntersectionFillPlotStyleName(plotStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(73)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadSectionTypeSettings::GetIntersectionFillLineweight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_IntersectionFillLineweight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(74)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionFillLineweight ( ACAD_LWEIGHT Lineweight ) {
    HRESULT _hr = put_IntersectionFillLineweight(Lineweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(75)
inline long AutoCAD::IAcadSectionTypeSettings::GetIntersectionFillFaceTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_IntersectionFillFaceTransparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(76)
inline void AutoCAD::IAcadSectionTypeSettings::PutIntersectionFillFaceTransparency ( long pVal ) {
    HRESULT _hr = put_IntersectionFillFaceTransparency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(77)
inline VARIANT_BOOL AutoCAD::IAcadSectionTypeSettings::GetBackgroundLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BackgroundLinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(78)
inline void AutoCAD::IAcadSectionTypeSettings::PutBackgroundLinesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_BackgroundLinesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(79)
inline VARIANT_BOOL AutoCAD::IAcadSectionTypeSettings::GetBackgroundLinesHiddenLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BackgroundLinesHiddenLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(80)
inline void AutoCAD::IAcadSectionTypeSettings::PutBackgroundLinesHiddenLine ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_BackgroundLinesHiddenLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(81)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadSectionTypeSettings::GetBackgroundLinesColor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_BackgroundLinesColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(82)
inline void AutoCAD::IAcadSectionTypeSettings::PutBackgroundLinesColor ( struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = put_BackgroundLinesColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(83)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetBackgroundLinesLayer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BackgroundLinesLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(84)
inline void AutoCAD::IAcadSectionTypeSettings::PutBackgroundLinesLayer ( _bstr_t Layer ) {
    HRESULT _hr = put_BackgroundLinesLayer(Layer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(85)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetBackgroundLinesLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BackgroundLinesLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(86)
inline void AutoCAD::IAcadSectionTypeSettings::PutBackgroundLinesLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_BackgroundLinesLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(87)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadSectionTypeSettings::GetBackgroundLinesLinetypeScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_BackgroundLinesLinetypeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(88)
inline void AutoCAD::IAcadSectionTypeSettings::PutBackgroundLinesLinetypeScale ( ACAD_NOUNITS ltScale ) {
    HRESULT _hr = put_BackgroundLinesLinetypeScale(ltScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(89)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetBackgroundLinesPlotStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BackgroundLinesPlotStyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(90)
inline void AutoCAD::IAcadSectionTypeSettings::PutBackgroundLinesPlotStyleName ( _bstr_t plotStyle ) {
    HRESULT _hr = put_BackgroundLinesPlotStyleName(plotStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(91)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadSectionTypeSettings::GetBackgroundLinesLineweight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_BackgroundLinesLineweight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(92)
inline void AutoCAD::IAcadSectionTypeSettings::PutBackgroundLinesLineweight ( ACAD_LWEIGHT Lineweight ) {
    HRESULT _hr = put_BackgroundLinesLineweight(Lineweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(93)
inline VARIANT_BOOL AutoCAD::IAcadSectionTypeSettings::GetForegroundLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForegroundLinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(94)
inline void AutoCAD::IAcadSectionTypeSettings::PutForegroundLinesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ForegroundLinesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(95)
inline VARIANT_BOOL AutoCAD::IAcadSectionTypeSettings::GetForegroundLinesHiddenLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForegroundLinesHiddenLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(96)
inline void AutoCAD::IAcadSectionTypeSettings::PutForegroundLinesHiddenLine ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ForegroundLinesHiddenLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(97)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadSectionTypeSettings::GetForegroundLinesColor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_ForegroundLinesColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(98)
inline void AutoCAD::IAcadSectionTypeSettings::PutForegroundLinesColor ( struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = put_ForegroundLinesColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(99)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetForegroundLinesLayer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ForegroundLinesLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(100)
inline void AutoCAD::IAcadSectionTypeSettings::PutForegroundLinesLayer ( _bstr_t Layer ) {
    HRESULT _hr = put_ForegroundLinesLayer(Layer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(101)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetForegroundLinesLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ForegroundLinesLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(102)
inline void AutoCAD::IAcadSectionTypeSettings::PutForegroundLinesLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_ForegroundLinesLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(103)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadSectionTypeSettings::GetForegroundLinesLinetypeScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_ForegroundLinesLinetypeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(104)
inline void AutoCAD::IAcadSectionTypeSettings::PutForegroundLinesLinetypeScale ( ACAD_NOUNITS ltScale ) {
    HRESULT _hr = put_ForegroundLinesLinetypeScale(ltScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(105)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetForegroundLinesPlotStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ForegroundLinesPlotStyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(106)
inline void AutoCAD::IAcadSectionTypeSettings::PutForegroundLinesPlotStyleName ( _bstr_t plotStyle ) {
    HRESULT _hr = put_ForegroundLinesPlotStyleName(plotStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(107)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadSectionTypeSettings::GetForegroundLinesLineweight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_ForegroundLinesLineweight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(108)
inline void AutoCAD::IAcadSectionTypeSettings::PutForegroundLinesLineweight ( ACAD_LWEIGHT Lineweight ) {
    HRESULT _hr = put_ForegroundLinesLineweight(Lineweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(109)
inline long AutoCAD::IAcadSectionTypeSettings::GetForegroundLinesFaceTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_ForegroundLinesFaceTransparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(110)
inline void AutoCAD::IAcadSectionTypeSettings::PutForegroundLinesFaceTransparency ( long pVal ) {
    HRESULT _hr = put_ForegroundLinesFaceTransparency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(111)
inline long AutoCAD::IAcadSectionTypeSettings::GetForegroundLinesEdgeTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_ForegroundLinesEdgeTransparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(112)
inline void AutoCAD::IAcadSectionTypeSettings::PutForegroundLinesEdgeTransparency ( long pVal ) {
    HRESULT _hr = put_ForegroundLinesEdgeTransparency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(113)
inline VARIANT_BOOL AutoCAD::IAcadSectionTypeSettings::GetCurveTangencyLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CurveTangencyLinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(114)
inline void AutoCAD::IAcadSectionTypeSettings::PutCurveTangencyLinesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CurveTangencyLinesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(115)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadSectionTypeSettings::GetCurveTangencyLinesColor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_CurveTangencyLinesColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(116)
inline void AutoCAD::IAcadSectionTypeSettings::PutCurveTangencyLinesColor ( struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = put_CurveTangencyLinesColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(117)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetCurveTangencyLinesLayer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurveTangencyLinesLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(118)
inline void AutoCAD::IAcadSectionTypeSettings::PutCurveTangencyLinesLayer ( _bstr_t Layer ) {
    HRESULT _hr = put_CurveTangencyLinesLayer(Layer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(119)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetCurveTangencyLinesLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurveTangencyLinesLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(120)
inline void AutoCAD::IAcadSectionTypeSettings::PutCurveTangencyLinesLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_CurveTangencyLinesLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(121)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadSectionTypeSettings::GetCurveTangencyLinesLinetypeScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_CurveTangencyLinesLinetypeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(122)
inline void AutoCAD::IAcadSectionTypeSettings::PutCurveTangencyLinesLinetypeScale ( ACAD_NOUNITS ltScale ) {
    HRESULT _hr = put_CurveTangencyLinesLinetypeScale(ltScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(123)
inline _bstr_t AutoCAD::IAcadSectionTypeSettings::GetCurveTangencyLinesPlotStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurveTangencyLinesPlotStyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(124)
inline void AutoCAD::IAcadSectionTypeSettings::PutCurveTangencyLinesPlotStyleName ( _bstr_t plotStyle ) {
    HRESULT _hr = put_CurveTangencyLinesPlotStyleName(plotStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(125)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadSectionTypeSettings::GetCurveTangencyLinesLineweight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_CurveTangencyLinesLineweight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(126)
inline void AutoCAD::IAcadSectionTypeSettings::PutCurveTangencyLinesLineweight ( ACAD_LWEIGHT Lineweight ) {
    HRESULT _hr = put_CurveTangencyLinesLineweight(Lineweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadDatabasePreferences wrapper method implementations
//

#pragma implementation_key(127)
inline IDispatchPtr AutoCAD::IAcadDatabasePreferences::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(128)
inline VARIANT_BOOL AutoCAD::IAcadDatabasePreferences::GetSolidFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SolidFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(129)
inline void AutoCAD::IAcadDatabasePreferences::PutSolidFill ( VARIANT_BOOL Fill ) {
    HRESULT _hr = put_SolidFill(Fill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(130)
inline VARIANT_BOOL AutoCAD::IAcadDatabasePreferences::GetXRefEdit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_XRefEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(131)
inline void AutoCAD::IAcadDatabasePreferences::PutXRefEdit ( VARIANT_BOOL Edit ) {
    HRESULT _hr = put_XRefEdit(Edit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(132)
inline VARIANT_BOOL AutoCAD::IAcadDatabasePreferences::GetXRefLayerVisibility ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_XRefLayerVisibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(133)
inline void AutoCAD::IAcadDatabasePreferences::PutXRefLayerVisibility ( VARIANT_BOOL XRefLayerVis ) {
    HRESULT _hr = put_XRefLayerVisibility(XRefLayerVis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(134)
inline VARIANT_BOOL AutoCAD::IAcadDatabasePreferences::GetOLELaunch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OLELaunch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(135)
inline void AutoCAD::IAcadDatabasePreferences::PutOLELaunch ( VARIANT_BOOL Launch ) {
    HRESULT _hr = put_OLELaunch(Launch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(136)
inline VARIANT_BOOL AutoCAD::IAcadDatabasePreferences::GetAllowLongSymbolNames ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowLongSymbolNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(137)
inline void AutoCAD::IAcadDatabasePreferences::PutAllowLongSymbolNames ( VARIANT_BOOL LongNames ) {
    HRESULT _hr = put_AllowLongSymbolNames(LongNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(138)
inline VARIANT_BOOL AutoCAD::IAcadDatabasePreferences::GetObjectSortBySelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ObjectSortBySelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(139)
inline void AutoCAD::IAcadDatabasePreferences::PutObjectSortBySelection ( VARIANT_BOOL Sort ) {
    HRESULT _hr = put_ObjectSortBySelection(Sort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(140)
inline VARIANT_BOOL AutoCAD::IAcadDatabasePreferences::GetObjectSortBySnap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ObjectSortBySnap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(141)
inline void AutoCAD::IAcadDatabasePreferences::PutObjectSortBySnap ( VARIANT_BOOL Sort ) {
    HRESULT _hr = put_ObjectSortBySnap(Sort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(142)
inline VARIANT_BOOL AutoCAD::IAcadDatabasePreferences::GetObjectSortByRedraws ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ObjectSortByRedraws(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(143)
inline void AutoCAD::IAcadDatabasePreferences::PutObjectSortByRedraws ( VARIANT_BOOL Sort ) {
    HRESULT _hr = put_ObjectSortByRedraws(Sort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(144)
inline VARIANT_BOOL AutoCAD::IAcadDatabasePreferences::GetObjectSortByRegens ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ObjectSortByRegens(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(145)
inline void AutoCAD::IAcadDatabasePreferences::PutObjectSortByRegens ( VARIANT_BOOL Sort ) {
    HRESULT _hr = put_ObjectSortByRegens(Sort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(146)
inline VARIANT_BOOL AutoCAD::IAcadDatabasePreferences::GetObjectSortByPlotting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ObjectSortByPlotting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(147)
inline void AutoCAD::IAcadDatabasePreferences::PutObjectSortByPlotting ( VARIANT_BOOL Sort ) {
    HRESULT _hr = put_ObjectSortByPlotting(Sort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(148)
inline VARIANT_BOOL AutoCAD::IAcadDatabasePreferences::GetObjectSortByPSOutput ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ObjectSortByPSOutput(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(149)
inline void AutoCAD::IAcadDatabasePreferences::PutObjectSortByPSOutput ( VARIANT_BOOL Sort ) {
    HRESULT _hr = put_ObjectSortByPSOutput(Sort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(150)
inline void AutoCAD::IAcadDatabasePreferences::PutContourLinesPerSurface ( long Path ) {
    HRESULT _hr = put_ContourLinesPerSurface(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(151)
inline long AutoCAD::IAcadDatabasePreferences::GetContourLinesPerSurface ( ) {
    long _result = 0;
    HRESULT _hr = get_ContourLinesPerSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(152)
inline void AutoCAD::IAcadDatabasePreferences::PutDisplaySilhouette ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_DisplaySilhouette(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(153)
inline VARIANT_BOOL AutoCAD::IAcadDatabasePreferences::GetDisplaySilhouette ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplaySilhouette(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(154)
inline void AutoCAD::IAcadDatabasePreferences::PutMaxActiveViewports ( long Path ) {
    HRESULT _hr = put_MaxActiveViewports(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(155)
inline long AutoCAD::IAcadDatabasePreferences::GetMaxActiveViewports ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxActiveViewports(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(156)
inline void AutoCAD::IAcadDatabasePreferences::PutRenderSmoothness ( double Path ) {
    HRESULT _hr = put_RenderSmoothness(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(157)
inline double AutoCAD::IAcadDatabasePreferences::GetRenderSmoothness ( ) {
    double _result = 0;
    HRESULT _hr = get_RenderSmoothness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(158)
inline void AutoCAD::IAcadDatabasePreferences::PutSegmentPerPolyline ( long Path ) {
    HRESULT _hr = put_SegmentPerPolyline(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(159)
inline long AutoCAD::IAcadDatabasePreferences::GetSegmentPerPolyline ( ) {
    long _result = 0;
    HRESULT _hr = get_SegmentPerPolyline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(160)
inline void AutoCAD::IAcadDatabasePreferences::PutTextFrameDisplay ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_TextFrameDisplay(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(161)
inline VARIANT_BOOL AutoCAD::IAcadDatabasePreferences::GetTextFrameDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextFrameDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(162)
inline void AutoCAD::IAcadDatabasePreferences::PutLineweight ( enum AcLineWeight Path ) {
    HRESULT _hr = put_Lineweight(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(163)
inline enum AutoCAD::AcLineWeight AutoCAD::IAcadDatabasePreferences::GetLineweight ( ) {
    enum AcLineWeight _result;
    HRESULT _hr = get_Lineweight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(164)
inline void AutoCAD::IAcadDatabasePreferences::PutLineWeightDisplay ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_LineWeightDisplay(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(165)
inline VARIANT_BOOL AutoCAD::IAcadDatabasePreferences::GetLineWeightDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LineWeightDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadSummaryInfo wrapper method implementations
//

#pragma implementation_key(166)
inline _bstr_t AutoCAD::IAcadSummaryInfo::GetAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(167)
inline void AutoCAD::IAcadSummaryInfo::PutAuthor ( _bstr_t pAuthor ) {
    HRESULT _hr = put_Author(pAuthor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(168)
inline _bstr_t AutoCAD::IAcadSummaryInfo::GetComments ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(169)
inline void AutoCAD::IAcadSummaryInfo::PutComments ( _bstr_t pComments ) {
    HRESULT _hr = put_Comments(pComments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(170)
inline _bstr_t AutoCAD::IAcadSummaryInfo::GetHyperlinkBase ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HyperlinkBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(171)
inline void AutoCAD::IAcadSummaryInfo::PutHyperlinkBase ( _bstr_t pHyperlinkBase ) {
    HRESULT _hr = put_HyperlinkBase(pHyperlinkBase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(172)
inline _bstr_t AutoCAD::IAcadSummaryInfo::GetKeywords ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Keywords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(173)
inline void AutoCAD::IAcadSummaryInfo::PutKeywords ( _bstr_t pKeywords ) {
    HRESULT _hr = put_Keywords(pKeywords);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(174)
inline _bstr_t AutoCAD::IAcadSummaryInfo::GetLastSavedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastSavedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(175)
inline void AutoCAD::IAcadSummaryInfo::PutLastSavedBy ( _bstr_t pLastSavedBy ) {
    HRESULT _hr = put_LastSavedBy(pLastSavedBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(176)
inline _bstr_t AutoCAD::IAcadSummaryInfo::GetRevisionNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RevisionNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(177)
inline void AutoCAD::IAcadSummaryInfo::PutRevisionNumber ( _bstr_t pRevisionNumber ) {
    HRESULT _hr = put_RevisionNumber(pRevisionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(178)
inline _bstr_t AutoCAD::IAcadSummaryInfo::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(179)
inline void AutoCAD::IAcadSummaryInfo::PutSubject ( _bstr_t pSubject ) {
    HRESULT _hr = put_Subject(pSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(180)
inline _bstr_t AutoCAD::IAcadSummaryInfo::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(181)
inline void AutoCAD::IAcadSummaryInfo::PutTitle ( _bstr_t pTitle ) {
    HRESULT _hr = put_Title(pTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(182)
inline int AutoCAD::IAcadSummaryInfo::NumCustomInfo ( ) {
    int _result = 0;
    HRESULT _hr = raw_NumCustomInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(183)
inline HRESULT AutoCAD::IAcadSummaryInfo::GetCustomByIndex ( int Index, BSTR * pKey, BSTR * pValue ) {
    HRESULT _hr = raw_GetCustomByIndex(Index, pKey, pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(184)
inline HRESULT AutoCAD::IAcadSummaryInfo::GetCustomByKey ( _bstr_t key, BSTR * pValue ) {
    HRESULT _hr = raw_GetCustomByKey(key, pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(185)
inline HRESULT AutoCAD::IAcadSummaryInfo::SetCustomByIndex ( int Index, _bstr_t key, _bstr_t Value ) {
    HRESULT _hr = raw_SetCustomByIndex(Index, key, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(186)
inline HRESULT AutoCAD::IAcadSummaryInfo::SetCustomByKey ( _bstr_t key, _bstr_t Value ) {
    HRESULT _hr = raw_SetCustomByKey(key, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(187)
inline HRESULT AutoCAD::IAcadSummaryInfo::AddCustomInfo ( _bstr_t key, _bstr_t Value ) {
    HRESULT _hr = raw_AddCustomInfo(key, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(188)
inline HRESULT AutoCAD::IAcadSummaryInfo::RemoveCustomByIndex ( int Index ) {
    HRESULT _hr = raw_RemoveCustomByIndex(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(189)
inline HRESULT AutoCAD::IAcadSummaryInfo::RemoveCustomByKey ( _bstr_t key ) {
    HRESULT _hr = raw_RemoveCustomByKey(key);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadSectionTypeSettings2 wrapper method implementations
//

#pragma implementation_key(190)
inline VARIANT_BOOL AutoCAD::IAcadSectionTypeSettings2::GetIntersectionBoundaryVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IntersectionBoundaryVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(191)
inline void AutoCAD::IAcadSectionTypeSettings2::PutIntersectionBoundaryVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IntersectionBoundaryVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadDynamicBlockReferenceProperty wrapper method implementations
//

#pragma implementation_key(192)
inline _bstr_t AutoCAD::IAcadDynamicBlockReferenceProperty::GetPropertyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PropertyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(193)
inline VARIANT_BOOL AutoCAD::IAcadDynamicBlockReferenceProperty::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(194)
inline VARIANT_BOOL AutoCAD::IAcadDynamicBlockReferenceProperty::Getshow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(195)
inline _bstr_t AutoCAD::IAcadDynamicBlockReferenceProperty::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(196)
inline _variant_t AutoCAD::IAcadDynamicBlockReferenceProperty::GetAllowedValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AllowedValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(197)
inline _variant_t AutoCAD::IAcadDynamicBlockReferenceProperty::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(198)
inline void AutoCAD::IAcadDynamicBlockReferenceProperty::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(199)
inline enum AutoCAD::AcDynamicBlockReferencePropertyUnitsType AutoCAD::IAcadDynamicBlockReferenceProperty::GetUnitsType ( ) {
    enum AcDynamicBlockReferencePropertyUnitsType _result;
    HRESULT _hr = get_UnitsType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadIdPair wrapper method implementations
//

#pragma implementation_key(200)
inline VARIANT_BOOL AutoCAD::IAcadIdPair::GetIsCloned ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCloned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(201)
inline VARIANT_BOOL AutoCAD::IAcadIdPair::GetIsOwnerXlated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOwnerXlated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(202)
inline VARIANT_BOOL AutoCAD::IAcadIdPair::GetIsPrimary ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPrimary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(203)
inline AutoCAD::LONG_PTR AutoCAD::IAcadIdPair::Getkey ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(204)
inline AutoCAD::LONG_PTR AutoCAD::IAcadIdPair::GetValue ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(205)
inline IDispatchPtr AutoCAD::IAcadIdPair::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IAcadShadowDisplay wrapper method implementations
//

#pragma implementation_key(206)
inline enum AutoCAD::AcShadowDisplayType AutoCAD::IAcadShadowDisplay::GetShadowDisplay ( ) {
    enum AcShadowDisplayType _result;
    HRESULT _hr = get_ShadowDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(207)
inline void AutoCAD::IAcadShadowDisplay::PutShadowDisplay ( enum AcShadowDisplayType ShadowDisplay ) {
    HRESULT _hr = put_ShadowDisplay(ShadowDisplay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(208)
inline long AutoCAD::IAcadShadowDisplay::GetEnableShadowDisplay ( ) {
    long _result = 0;
    HRESULT _hr = get_EnableShadowDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadSubEntity wrapper method implementations
//

#pragma implementation_key(209)
inline HRESULT AutoCAD::IAcadSubEntity::OnModified ( ) {
    HRESULT _hr = raw_OnModified();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(210)
inline _bstr_t AutoCAD::IAcadSubEntity::GetObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(211)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadSubEntity::Getcolor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(212)
inline void AutoCAD::IAcadSubEntity::Putcolor ( struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = put_color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(213)
inline _bstr_t AutoCAD::IAcadSubEntity::GetLayer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Layer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(214)
inline _bstr_t AutoCAD::IAcadSubEntity::GetLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Linetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(215)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadSubEntity::GetLinetypeScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_LinetypeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(216)
inline _bstr_t AutoCAD::IAcadSubEntity::GetPlotStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlotStyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(217)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadSubEntity::GetLineweight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_Lineweight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(218)
inline AutoCAD::IAcadHyperlinksPtr AutoCAD::IAcadSubEntity::GetHyperlinks ( ) {
    struct IAcadHyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadHyperlinksPtr(_result, false);
}

//
// interface IAcadMLeaderLeader wrapper method implementations
//

#pragma implementation_key(219)
inline enum AutoCAD::AcMLeaderType AutoCAD::IAcadMLeaderLeader::GetLeaderType ( ) {
    enum AcMLeaderType _result;
    HRESULT _hr = get_LeaderType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(220)
inline void AutoCAD::IAcadMLeaderLeader::PutLeaderType ( enum AcMLeaderType Type ) {
    HRESULT _hr = put_LeaderType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(221)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadMLeaderLeader::GetLeaderLineColor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_LeaderLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(222)
inline void AutoCAD::IAcadMLeaderLeader::PutLeaderLineColor ( struct IAcadAcCmColor * Type ) {
    HRESULT _hr = put_LeaderLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(223)
inline AutoCAD::ACAD_LTYPE AutoCAD::IAcadMLeaderLeader::GetLeaderLinetype ( ) {
    ACAD_LTYPE _result;
    HRESULT _hr = get_LeaderLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(224)
inline void AutoCAD::IAcadMLeaderLeader::PutLeaderLinetype ( ACAD_LTYPE Linetype ) {
    HRESULT _hr = put_LeaderLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(225)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadMLeaderLeader::GetLeaderLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_LeaderLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(226)
inline void AutoCAD::IAcadMLeaderLeader::PutLeaderLineWeight ( ACAD_LWEIGHT Lineweight ) {
    HRESULT _hr = put_LeaderLineWeight(Lineweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(227)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadMLeaderLeader::GetArrowheadType ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_ArrowheadType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(228)
inline void AutoCAD::IAcadMLeaderLeader::PutArrowheadType ( enum AcDimArrowheadType BlockName ) {
    HRESULT _hr = put_ArrowheadType(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(229)
inline double AutoCAD::IAcadMLeaderLeader::GetArrowheadSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowheadSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(230)
inline void AutoCAD::IAcadMLeaderLeader::PutArrowheadSize ( double size ) {
    HRESULT _hr = put_ArrowheadSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(231)
inline _bstr_t AutoCAD::IAcadMLeaderLeader::GetArrowheadBlock ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ArrowheadBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(232)
inline void AutoCAD::IAcadMLeaderLeader::PutArrowheadBlock ( _bstr_t BlockName ) {
    HRESULT _hr = put_ArrowheadBlock(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadSubEntSolidFace wrapper method implementations
//

#pragma implementation_key(233)
inline _bstr_t AutoCAD::IAcadSubEntSolidFace::GetMaterial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Material(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(234)
inline void AutoCAD::IAcadSubEntSolidFace::PutMaterial ( _bstr_t Material ) {
    HRESULT _hr = put_Material(Material);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadSubDMeshFace wrapper method implementations
//

#pragma implementation_key(235)
inline _bstr_t AutoCAD::IAcadSubDMeshFace::GetMaterial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Material(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(236)
inline void AutoCAD::IAcadSubDMeshFace::PutMaterial ( _bstr_t Material ) {
    HRESULT _hr = put_Material(Material);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(237)
inline enum AutoCAD::AcMeshCreaseType AutoCAD::IAcadSubDMeshFace::GetCreaseType ( ) {
    enum AcMeshCreaseType _result;
    HRESULT _hr = get_CreaseType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(238)
inline void AutoCAD::IAcadSubDMeshFace::PutCreaseType ( enum AcMeshCreaseType Type ) {
    HRESULT _hr = put_CreaseType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(239)
inline double AutoCAD::IAcadSubDMeshFace::GetCreaseLevel ( ) {
    double _result = 0;
    HRESULT _hr = get_CreaseLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(240)
inline void AutoCAD::IAcadSubDMeshFace::PutCreaseLevel ( double level ) {
    HRESULT _hr = put_CreaseLevel(level);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadSubDMeshEdge wrapper method implementations
//

#pragma implementation_key(241)
inline enum AutoCAD::AcMeshCreaseType AutoCAD::IAcadSubDMeshEdge::GetCreaseType ( ) {
    enum AcMeshCreaseType _result;
    HRESULT _hr = get_CreaseType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(242)
inline void AutoCAD::IAcadSubDMeshEdge::PutCreaseType ( enum AcMeshCreaseType Type ) {
    HRESULT _hr = put_CreaseType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(243)
inline double AutoCAD::IAcadSubDMeshEdge::GetCreaseLevel ( ) {
    double _result = 0;
    HRESULT _hr = get_CreaseLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(244)
inline void AutoCAD::IAcadSubDMeshEdge::PutCreaseLevel ( double level ) {
    HRESULT _hr = put_CreaseLevel(level);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadSubDMeshVertex wrapper method implementations
//

#pragma implementation_key(245)
inline _variant_t AutoCAD::IAcadSubDMeshVertex::GetCoordinates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(246)
inline void AutoCAD::IAcadSubDMeshVertex::PutCoordinates ( const _variant_t & coord ) {
    HRESULT _hr = put_Coordinates(coord);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(247)
inline enum AutoCAD::AcMeshCreaseType AutoCAD::IAcadSubDMeshVertex::GetCreaseType ( ) {
    enum AcMeshCreaseType _result;
    HRESULT _hr = get_CreaseType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(248)
inline void AutoCAD::IAcadSubDMeshVertex::PutCreaseType ( enum AcMeshCreaseType Type ) {
    HRESULT _hr = put_CreaseType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(249)
inline double AutoCAD::IAcadSubDMeshVertex::GetCreaseLevel ( ) {
    double _result = 0;
    HRESULT _hr = get_CreaseLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(250)
inline void AutoCAD::IAcadSubDMeshVertex::PutCreaseLevel ( double level ) {
    HRESULT _hr = put_CreaseLevel(level);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadSecurityParams wrapper method implementations
//

#pragma implementation_key(251)
inline void AutoCAD::IAcadSecurityParams::PutAction ( long pOperations ) {
    HRESULT _hr = put_Action(pOperations);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(252)
inline long AutoCAD::IAcadSecurityParams::GetAction ( ) {
    long _result = 0;
    HRESULT _hr = get_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline void AutoCAD::IAcadSecurityParams::PutPassword ( _bstr_t pSecret ) {
    HRESULT _hr = put_Password(pSecret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(254)
inline _bstr_t AutoCAD::IAcadSecurityParams::GetPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(255)
inline void AutoCAD::IAcadSecurityParams::PutProviderType ( long pProvType ) {
    HRESULT _hr = put_ProviderType(pProvType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(256)
inline long AutoCAD::IAcadSecurityParams::GetProviderType ( ) {
    long _result = 0;
    HRESULT _hr = get_ProviderType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline void AutoCAD::IAcadSecurityParams::PutProviderName ( _bstr_t pProvName ) {
    HRESULT _hr = put_ProviderName(pProvName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(258)
inline _bstr_t AutoCAD::IAcadSecurityParams::GetProviderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProviderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(259)
inline void AutoCAD::IAcadSecurityParams::PutAlgorithm ( long pAlgId ) {
    HRESULT _hr = put_Algorithm(pAlgId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(260)
inline long AutoCAD::IAcadSecurityParams::GetAlgorithm ( ) {
    long _result = 0;
    HRESULT _hr = get_Algorithm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(261)
inline void AutoCAD::IAcadSecurityParams::PutKeyLength ( long pKeyLen ) {
    HRESULT _hr = put_KeyLength(pKeyLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(262)
inline long AutoCAD::IAcadSecurityParams::GetKeyLength ( ) {
    long _result = 0;
    HRESULT _hr = get_KeyLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(263)
inline void AutoCAD::IAcadSecurityParams::PutSubject ( _bstr_t pCertSubject ) {
    HRESULT _hr = put_Subject(pCertSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(264)
inline _bstr_t AutoCAD::IAcadSecurityParams::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(265)
inline void AutoCAD::IAcadSecurityParams::PutIssuer ( _bstr_t pCertIssuer ) {
    HRESULT _hr = put_Issuer(pCertIssuer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(266)
inline _bstr_t AutoCAD::IAcadSecurityParams::GetIssuer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Issuer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(267)
inline void AutoCAD::IAcadSecurityParams::PutSerialNumber ( _bstr_t pSerialNum ) {
    HRESULT _hr = put_SerialNumber(pSerialNum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(268)
inline _bstr_t AutoCAD::IAcadSecurityParams::GetSerialNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SerialNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(269)
inline void AutoCAD::IAcadSecurityParams::PutComment ( _bstr_t pText ) {
    HRESULT _hr = put_Comment(pText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(270)
inline _bstr_t AutoCAD::IAcadSecurityParams::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(271)
inline void AutoCAD::IAcadSecurityParams::PutTimeServer ( _bstr_t pTimeServerName ) {
    HRESULT _hr = put_TimeServer(pTimeServerName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(272)
inline _bstr_t AutoCAD::IAcadSecurityParams::GetTimeServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TimeServer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// dispinterface _DAcadApplicationEvents wrapper method implementations
//

#pragma implementation_key(273)
inline HRESULT AutoCAD::_DAcadApplicationEvents::SysVarChanged ( _bstr_t SysvarName, const _variant_t & newVal ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008\x000c", (BSTR)SysvarName, &newVal);
    return _result;
}

#pragma implementation_key(274)
inline HRESULT AutoCAD::_DAcadApplicationEvents::NewDrawing ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(275)
inline HRESULT AutoCAD::_DAcadApplicationEvents::AppActivate ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(276)
inline HRESULT AutoCAD::_DAcadApplicationEvents::AppDeactivate ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(277)
inline HRESULT AutoCAD::_DAcadApplicationEvents::WindowMovedOrResized ( long HWNDFrame, VARIANT_BOOL bMoved ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003\x000b", HWNDFrame, bMoved);
    return _result;
}

#pragma implementation_key(278)
inline HRESULT AutoCAD::_DAcadApplicationEvents::BeginModal ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(279)
inline HRESULT AutoCAD::_DAcadApplicationEvents::EndModal ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(280)
inline HRESULT AutoCAD::_DAcadApplicationEvents::BeginQuit ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

#pragma implementation_key(281)
inline HRESULT AutoCAD::_DAcadApplicationEvents::BeginFileDrop ( _bstr_t FileName, VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008\x400b", (BSTR)FileName, Cancel);
    return _result;
}

#pragma implementation_key(282)
inline HRESULT AutoCAD::_DAcadApplicationEvents::ARXLoaded ( _bstr_t AppName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)AppName);
    return _result;
}

#pragma implementation_key(283)
inline HRESULT AutoCAD::_DAcadApplicationEvents::ARXUnloaded ( _bstr_t AppName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)AppName);
    return _result;
}

#pragma implementation_key(284)
inline HRESULT AutoCAD::_DAcadApplicationEvents::BeginPlot ( _bstr_t DrawingName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)DrawingName);
    return _result;
}

#pragma implementation_key(285)
inline HRESULT AutoCAD::_DAcadApplicationEvents::EndPlot ( _bstr_t DrawingName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)DrawingName);
    return _result;
}

#pragma implementation_key(286)
inline HRESULT AutoCAD::_DAcadApplicationEvents::BeginSave ( _bstr_t FileName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x13, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)FileName);
    return _result;
}

#pragma implementation_key(287)
inline HRESULT AutoCAD::_DAcadApplicationEvents::EndSave ( _bstr_t FileName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)FileName);
    return _result;
}

#pragma implementation_key(288)
inline HRESULT AutoCAD::_DAcadApplicationEvents::BeginOpen ( BSTR * FileName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x4008", FileName);
    return _result;
}

#pragma implementation_key(289)
inline HRESULT AutoCAD::_DAcadApplicationEvents::EndOpen ( _bstr_t FileName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)FileName);
    return _result;
}

#pragma implementation_key(290)
inline HRESULT AutoCAD::_DAcadApplicationEvents::BeginCommand ( _bstr_t CommandName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x11, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)CommandName);
    return _result;
}

#pragma implementation_key(291)
inline HRESULT AutoCAD::_DAcadApplicationEvents::EndCommand ( _bstr_t CommandName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x12, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)CommandName);
    return _result;
}

#pragma implementation_key(292)
inline HRESULT AutoCAD::_DAcadApplicationEvents::BeginLisp ( _bstr_t FirstLine ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)FirstLine);
    return _result;
}

#pragma implementation_key(293)
inline HRESULT AutoCAD::_DAcadApplicationEvents::EndLisp ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x10, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(294)
inline HRESULT AutoCAD::_DAcadApplicationEvents::LispCancelled ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x18, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(295)
inline HRESULT AutoCAD::_DAcadApplicationEvents::WindowChanged ( enum AcWindowState WindowState ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x19, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003", WindowState);
    return _result;
}

//
// interface IAcadUtility wrapper method implementations
//

#pragma implementation_key(296)
inline double AutoCAD::IAcadUtility::AngleToReal ( _bstr_t Angle, enum AcAngleUnits Unit ) {
    double _result = 0;
    HRESULT _hr = raw_AngleToReal(Angle, Unit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(297)
inline _bstr_t AutoCAD::IAcadUtility::AngleToString ( double Angle, enum AcAngleUnits Unit, int precision ) {
    BSTR _result = 0;
    HRESULT _hr = raw_AngleToString(Angle, Unit, precision, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(298)
inline double AutoCAD::IAcadUtility::DistanceToReal ( _bstr_t Distance, enum AcUnits Unit ) {
    double _result = 0;
    HRESULT _hr = raw_DistanceToReal(Distance, Unit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(299)
inline _bstr_t AutoCAD::IAcadUtility::RealToString ( double Value, enum AcUnits Unit, int precision ) {
    BSTR _result = 0;
    HRESULT _hr = raw_RealToString(Value, Unit, precision, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(300)
inline _variant_t AutoCAD::IAcadUtility::TranslateCoordinates ( const _variant_t & Point, enum AcCoordinateSystem FromCoordSystem, enum AcCoordinateSystem ToCoordSystem, int Displacement, const _variant_t & OCSNormal ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_TranslateCoordinates(Point, FromCoordSystem, ToCoordSystem, Displacement, OCSNormal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(301)
inline HRESULT AutoCAD::IAcadUtility::InitializeUserInput ( int Bits, const _variant_t & KeyWordList ) {
    HRESULT _hr = raw_InitializeUserInput(Bits, KeyWordList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(302)
inline int AutoCAD::IAcadUtility::GetInteger ( const _variant_t & Prompt ) {
    int _result = 0;
    HRESULT _hr = raw_GetInteger(Prompt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(303)
inline double AutoCAD::IAcadUtility::GetReal ( const _variant_t & Prompt ) {
    double _result = 0;
    HRESULT _hr = raw_GetReal(Prompt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(304)
inline _bstr_t AutoCAD::IAcadUtility::GetInput ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetInput(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(305)
inline _bstr_t AutoCAD::IAcadUtility::GetKeyword ( const _variant_t & Prompt ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetKeyword(Prompt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(306)
inline _bstr_t AutoCAD::IAcadUtility::GetString ( int HasSpaces, const _variant_t & Prompt ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetString(HasSpaces, Prompt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(307)
inline double AutoCAD::IAcadUtility::GetAngle ( const _variant_t & Point, const _variant_t & Prompt ) {
    double _result = 0;
    HRESULT _hr = raw_GetAngle(Point, Prompt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(308)
inline double AutoCAD::IAcadUtility::AngleFromXAxis ( const _variant_t & StartPoint, const _variant_t & EndPoint ) {
    double _result = 0;
    HRESULT _hr = raw_AngleFromXAxis(StartPoint, EndPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(309)
inline _variant_t AutoCAD::IAcadUtility::GetCorner ( const _variant_t & Point, const _variant_t & Prompt ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetCorner(Point, Prompt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(310)
inline double AutoCAD::IAcadUtility::GetDistance ( const _variant_t & Point, const _variant_t & Prompt ) {
    double _result = 0;
    HRESULT _hr = raw_GetDistance(Point, Prompt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(311)
inline double AutoCAD::IAcadUtility::GetOrientation ( const _variant_t & Point, const _variant_t & Prompt ) {
    double _result = 0;
    HRESULT _hr = raw_GetOrientation(Point, Prompt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(312)
inline _variant_t AutoCAD::IAcadUtility::GetPoint ( const _variant_t & Point, const _variant_t & Prompt ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetPoint(Point, Prompt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(313)
inline _variant_t AutoCAD::IAcadUtility::PolarPoint ( const _variant_t & Point, double Angle, double Distance ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PolarPoint(Point, Angle, Distance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(314)
inline HRESULT AutoCAD::IAcadUtility::CreateTypedArray ( VARIANT * varArr, int Type, SAFEARRAY * inArgs ) {
    HRESULT _hr = raw_CreateTypedArray(varArr, Type, inArgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(315)
inline HRESULT AutoCAD::IAcadUtility::GetEntity ( IDispatch * * Object, VARIANT * PickedPoint, const _variant_t & Prompt ) {
    HRESULT _hr = raw_GetEntity(Object, PickedPoint, Prompt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(316)
inline HRESULT AutoCAD::IAcadUtility::Prompt ( _bstr_t Message ) {
    HRESULT _hr = raw_Prompt(Message);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(317)
inline HRESULT AutoCAD::IAcadUtility::GetSubEntity ( IDispatch * * Object, VARIANT * PickedPoint, VARIANT * transMatrix, VARIANT * ContextData, const _variant_t & Prompt ) {
    HRESULT _hr = raw_GetSubEntity(Object, PickedPoint, transMatrix, ContextData, Prompt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(318)
inline VARIANT_BOOL AutoCAD::IAcadUtility::IsURL ( _bstr_t URL ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsURL(URL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(319)
inline HRESULT AutoCAD::IAcadUtility::GetRemoteFile ( _bstr_t URL, BSTR * LocalFile, VARIANT_BOOL IgnoreCache ) {
    HRESULT _hr = raw_GetRemoteFile(URL, LocalFile, IgnoreCache);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(320)
inline HRESULT AutoCAD::IAcadUtility::PutRemoteFile ( _bstr_t URL, _bstr_t LocalFile ) {
    HRESULT _hr = raw_PutRemoteFile(URL, LocalFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(321)
inline VARIANT_BOOL AutoCAD::IAcadUtility::IsRemoteFile ( _bstr_t LocalFile, BSTR * URL ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsRemoteFile(LocalFile, URL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(322)
inline VARIANT_BOOL AutoCAD::IAcadUtility::LaunchBrowserDialog ( BSTR * SelectedURL, _bstr_t DialogTitle, _bstr_t OpenButtonCaption, _bstr_t StartPageURL, _bstr_t RegistryRootKey, VARIANT_BOOL OpenButtonAlwaysEnabled ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LaunchBrowserDialog(SelectedURL, DialogTitle, OpenButtonCaption, StartPageURL, RegistryRootKey, OpenButtonAlwaysEnabled, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(323)
inline HRESULT AutoCAD::IAcadUtility::SendModelessOperationStart ( _bstr_t Context ) {
    HRESULT _hr = raw_SendModelessOperationStart(Context);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(324)
inline HRESULT AutoCAD::IAcadUtility::SendModelessOperationEnded ( _bstr_t Context ) {
    HRESULT _hr = raw_SendModelessOperationEnded(Context);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(325)
inline _bstr_t AutoCAD::IAcadUtility::GetObjectIdString ( IDispatch * Object, VARIANT_BOOL bHex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetObjectIdString(Object, bHex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// dispinterface _DAcadDocumentEvents wrapper method implementations
//

#pragma implementation_key(326)
inline HRESULT AutoCAD::_DAcadDocumentEvents::BeginSave ( _bstr_t FileName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)FileName);
    return _result;
}

#pragma implementation_key(327)
inline HRESULT AutoCAD::_DAcadDocumentEvents::EndSave ( _bstr_t FileName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)FileName);
    return _result;
}

#pragma implementation_key(328)
inline HRESULT AutoCAD::_DAcadDocumentEvents::BeginCommand ( _bstr_t CommandName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)CommandName);
    return _result;
}

#pragma implementation_key(329)
inline HRESULT AutoCAD::_DAcadDocumentEvents::EndCommand ( _bstr_t CommandName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)CommandName);
    return _result;
}

#pragma implementation_key(330)
inline HRESULT AutoCAD::_DAcadDocumentEvents::BeginLisp ( _bstr_t FirstLine ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)FirstLine);
    return _result;
}

#pragma implementation_key(331)
inline HRESULT AutoCAD::_DAcadDocumentEvents::EndLisp ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(332)
inline HRESULT AutoCAD::_DAcadDocumentEvents::LispCancelled ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(333)
inline HRESULT AutoCAD::_DAcadDocumentEvents::SelectionChanged ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(334)
inline HRESULT AutoCAD::_DAcadDocumentEvents::Activate ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(335)
inline HRESULT AutoCAD::_DAcadDocumentEvents::Deactivate ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(336)
inline HRESULT AutoCAD::_DAcadDocumentEvents::BeginRightClick ( const _variant_t & PickPoint ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x000c", &PickPoint);
    return _result;
}

#pragma implementation_key(337)
inline HRESULT AutoCAD::_DAcadDocumentEvents::BeginShortcutMenuDefault ( struct IAcadPopupMenu * * ShortcutMenu ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x4009", ShortcutMenu);
    return _result;
}

#pragma implementation_key(338)
inline HRESULT AutoCAD::_DAcadDocumentEvents::BeginShortcutMenuEdit ( struct IAcadPopupMenu * * ShortcutMenu, struct IAcadSelectionSet * * SelectionSet ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x10, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x4009\x4009", ShortcutMenu, SelectionSet);
    return _result;
}

#pragma implementation_key(339)
inline HRESULT AutoCAD::_DAcadDocumentEvents::BeginShortcutMenuCommand ( struct IAcadPopupMenu * * ShortcutMenu, _bstr_t Command ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x11, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x4009\x0008", ShortcutMenu, (BSTR)Command);
    return _result;
}

#pragma implementation_key(340)
inline HRESULT AutoCAD::_DAcadDocumentEvents::BeginShortcutMenuGrip ( struct IAcadPopupMenu * * ShortcutMenu ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x12, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x4009", ShortcutMenu);
    return _result;
}

#pragma implementation_key(341)
inline HRESULT AutoCAD::_DAcadDocumentEvents::BeginShortcutMenuOsnap ( struct IAcadPopupMenu * * ShortcutMenu ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x13, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x4009", ShortcutMenu);
    return _result;
}

#pragma implementation_key(342)
inline HRESULT AutoCAD::_DAcadDocumentEvents::EndShortcutMenu ( struct IAcadPopupMenu * * ShortcutMenu ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1e, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x4009", ShortcutMenu);
    return _result;
}

#pragma implementation_key(343)
inline HRESULT AutoCAD::_DAcadDocumentEvents::BeginDoubleClick ( const _variant_t & PickPoint ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x000c", &PickPoint);
    return _result;
}

#pragma implementation_key(344)
inline HRESULT AutoCAD::_DAcadDocumentEvents::ObjectAdded ( IDispatch * Object ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009", Object);
    return _result;
}

#pragma implementation_key(345)
inline HRESULT AutoCAD::_DAcadDocumentEvents::ObjectErased ( LONG_PTR ObjectID ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0014", ObjectID);
    return _result;
}

#pragma implementation_key(346)
inline HRESULT AutoCAD::_DAcadDocumentEvents::ObjectModified ( IDispatch * Object ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009", Object);
    return _result;
}

#pragma implementation_key(347)
inline HRESULT AutoCAD::_DAcadDocumentEvents::BeginPlot ( _bstr_t DrawingName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x18, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)DrawingName);
    return _result;
}

#pragma implementation_key(348)
inline HRESULT AutoCAD::_DAcadDocumentEvents::EndPlot ( _bstr_t DrawingName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x19, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)DrawingName);
    return _result;
}

#pragma implementation_key(349)
inline HRESULT AutoCAD::_DAcadDocumentEvents::WindowMovedOrResized ( LONG_PTR HWNDFrame, VARIANT_BOOL bMoved ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1d, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0014\x000b", HWNDFrame, bMoved);
    return _result;
}

#pragma implementation_key(350)
inline HRESULT AutoCAD::_DAcadDocumentEvents::LayoutSwitched ( _bstr_t LayoutName ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1f, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)LayoutName);
    return _result;
}

#pragma implementation_key(351)
inline HRESULT AutoCAD::_DAcadDocumentEvents::WindowChanged ( enum AcWindowState WindowState ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x20, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003", WindowState);
    return _result;
}

#pragma implementation_key(352)
inline HRESULT AutoCAD::_DAcadDocumentEvents::BeginClose ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x21, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(353)
inline HRESULT AutoCAD::_DAcadDocumentEvents::BeginDocClose ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x22, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

//
// interface IAcadObject wrapper method implementations
//

#pragma implementation_key(354)
inline _bstr_t AutoCAD::IAcadObject::GetHandle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Handle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(355)
inline _bstr_t AutoCAD::IAcadObject::GetObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(356)
inline HRESULT AutoCAD::IAcadObject::GetXData ( _bstr_t AppName, VARIANT * XDataType, VARIANT * XDataValue ) {
    HRESULT _hr = raw_GetXData(AppName, XDataType, XDataValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(357)
inline HRESULT AutoCAD::IAcadObject::SetXData ( const _variant_t & XDataType, const _variant_t & XDataValue ) {
    HRESULT _hr = raw_SetXData(XDataType, XDataValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(358)
inline HRESULT AutoCAD::IAcadObject::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(359)
inline AutoCAD::LONG_PTR AutoCAD::IAcadObject::GetObjectID ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_ObjectID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(360)
inline IDispatchPtr AutoCAD::IAcadObject::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(361)
inline AutoCAD::IAcadDatabasePtr AutoCAD::IAcadObject::GetDatabase ( ) {
    struct IAcadDatabase * _result = 0;
    HRESULT _hr = get_Database(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDatabasePtr(_result, false);
}

#pragma implementation_key(362)
inline VARIANT_BOOL AutoCAD::IAcadObject::GetHasExtensionDictionary ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasExtensionDictionary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(363)
inline AutoCAD::IAcadDictionaryPtr AutoCAD::IAcadObject::GetExtensionDictionary ( ) {
    struct IAcadDictionary * _result = 0;
    HRESULT _hr = raw_GetExtensionDictionary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDictionaryPtr(_result, false);
}

#pragma implementation_key(364)
inline AutoCAD::LONG_PTR AutoCAD::IAcadObject::GetOwnerID ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_OwnerID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(365)
inline IDispatchPtr AutoCAD::IAcadObject::GetDocument ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(366)
inline HRESULT AutoCAD::IAcadObject::Erase ( ) {
    HRESULT _hr = raw_Erase();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadEntity wrapper method implementations
//

#pragma implementation_key(367)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadEntity::GetTrueColor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_TrueColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(368)
inline void AutoCAD::IAcadEntity::PutTrueColor ( struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = put_TrueColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(369)
inline _bstr_t AutoCAD::IAcadEntity::GetLayer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Layer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(370)
inline void AutoCAD::IAcadEntity::PutLayer ( _bstr_t Layer ) {
    HRESULT _hr = put_Layer(Layer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(371)
inline _bstr_t AutoCAD::IAcadEntity::GetLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Linetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(372)
inline void AutoCAD::IAcadEntity::PutLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_Linetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(373)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadEntity::GetLinetypeScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_LinetypeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(374)
inline void AutoCAD::IAcadEntity::PutLinetypeScale ( ACAD_NOUNITS ltScale ) {
    HRESULT _hr = put_LinetypeScale(ltScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(375)
inline VARIANT_BOOL AutoCAD::IAcadEntity::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(376)
inline void AutoCAD::IAcadEntity::PutVisible ( VARIANT_BOOL bVisible ) {
    HRESULT _hr = put_Visible(bVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(377)
inline _variant_t AutoCAD::IAcadEntity::ArrayPolar ( int NumberOfObjects, double AngleToFill, const _variant_t & CenterPoint ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ArrayPolar(NumberOfObjects, AngleToFill, CenterPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(378)
inline _variant_t AutoCAD::IAcadEntity::ArrayRectangular ( int NumberOfRows, int NumberOfColumns, int NumberOfLevels, double DistBetweenRows, double DistBetweenCols, double DistBetweenLevels ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ArrayRectangular(NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(379)
inline HRESULT AutoCAD::IAcadEntity::Highlight ( VARIANT_BOOL HighlightFlag ) {
    HRESULT _hr = raw_Highlight(HighlightFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(380)
inline IDispatchPtr AutoCAD::IAcadEntity::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(381)
inline HRESULT AutoCAD::IAcadEntity::Move ( const _variant_t & FromPoint, const _variant_t & ToPoint ) {
    HRESULT _hr = raw_Move(FromPoint, ToPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(382)
inline HRESULT AutoCAD::IAcadEntity::Rotate ( const _variant_t & BasePoint, double RotationAngle ) {
    HRESULT _hr = raw_Rotate(BasePoint, RotationAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(383)
inline HRESULT AutoCAD::IAcadEntity::Rotate3D ( const _variant_t & Point1, const _variant_t & Point2, double RotationAngle ) {
    HRESULT _hr = raw_Rotate3D(Point1, Point2, RotationAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(384)
inline IDispatchPtr AutoCAD::IAcadEntity::Mirror ( const _variant_t & Point1, const _variant_t & Point2 ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Mirror(Point1, Point2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(385)
inline IDispatchPtr AutoCAD::IAcadEntity::Mirror3D ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3 ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Mirror3D(Point1, Point2, point3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(386)
inline HRESULT AutoCAD::IAcadEntity::ScaleEntity ( const _variant_t & BasePoint, double ScaleFactor ) {
    HRESULT _hr = raw_ScaleEntity(BasePoint, ScaleFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(387)
inline HRESULT AutoCAD::IAcadEntity::TransformBy ( const _variant_t & TransformationMatrix ) {
    HRESULT _hr = raw_TransformBy(TransformationMatrix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(388)
inline HRESULT AutoCAD::IAcadEntity::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(389)
inline HRESULT AutoCAD::IAcadEntity::GetBoundingBox ( VARIANT * MinPoint, VARIANT * MaxPoint ) {
    HRESULT _hr = raw_GetBoundingBox(MinPoint, MaxPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(390)
inline _variant_t AutoCAD::IAcadEntity::IntersectWith ( IDispatch * IntersectObject, enum AcExtendOption option ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_IntersectWith(IntersectObject, option, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(391)
inline _bstr_t AutoCAD::IAcadEntity::GetPlotStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlotStyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(392)
inline void AutoCAD::IAcadEntity::PutPlotStyleName ( _bstr_t plotStyle ) {
    HRESULT _hr = put_PlotStyleName(plotStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(393)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadEntity::GetLineweight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_Lineweight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(394)
inline void AutoCAD::IAcadEntity::PutLineweight ( ACAD_LWEIGHT Lineweight ) {
    HRESULT _hr = put_Lineweight(Lineweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(395)
inline _bstr_t AutoCAD::IAcadEntity::GetEntityTransparency ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntityTransparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(396)
inline void AutoCAD::IAcadEntity::PutEntityTransparency ( _bstr_t transparency ) {
    HRESULT _hr = put_EntityTransparency(transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(397)
inline AutoCAD::IAcadHyperlinksPtr AutoCAD::IAcadEntity::GetHyperlinks ( ) {
    struct IAcadHyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadHyperlinksPtr(_result, false);
}

#pragma implementation_key(398)
inline _bstr_t AutoCAD::IAcadEntity::GetMaterial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Material(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(399)
inline void AutoCAD::IAcadEntity::PutMaterial ( _bstr_t Material ) {
    HRESULT _hr = put_Material(Material);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(400)
inline _bstr_t AutoCAD::IAcadEntity::GetEntityName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntityName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(401)
inline long AutoCAD::IAcadEntity::GetEntityType ( ) {
    long _result = 0;
    HRESULT _hr = get_EntityType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(402)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadEntity::Getcolor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(403)
inline void AutoCAD::IAcadEntity::Putcolor ( ACAD_COLOR color ) {
    HRESULT _hr = put_color(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcad3DFace wrapper method implementations
//

#pragma implementation_key(404)
inline _variant_t AutoCAD::IAcad3DFace::GetCoordinates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(405)
inline void AutoCAD::IAcad3DFace::PutCoordinates ( const _variant_t & corners ) {
    HRESULT _hr = put_Coordinates(corners);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(406)
inline VARIANT_BOOL AutoCAD::IAcad3DFace::GetVisibilityEdge1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VisibilityEdge1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(407)
inline void AutoCAD::IAcad3DFace::PutVisibilityEdge1 ( VARIANT_BOOL visibility ) {
    HRESULT _hr = put_VisibilityEdge1(visibility);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(408)
inline VARIANT_BOOL AutoCAD::IAcad3DFace::GetVisibilityEdge2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VisibilityEdge2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(409)
inline void AutoCAD::IAcad3DFace::PutVisibilityEdge2 ( VARIANT_BOOL visibility ) {
    HRESULT _hr = put_VisibilityEdge2(visibility);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(410)
inline VARIANT_BOOL AutoCAD::IAcad3DFace::GetVisibilityEdge3 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VisibilityEdge3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(411)
inline void AutoCAD::IAcad3DFace::PutVisibilityEdge3 ( VARIANT_BOOL visibility ) {
    HRESULT _hr = put_VisibilityEdge3(visibility);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(412)
inline VARIANT_BOOL AutoCAD::IAcad3DFace::GetVisibilityEdge4 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VisibilityEdge4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(413)
inline void AutoCAD::IAcad3DFace::PutVisibilityEdge4 ( VARIANT_BOOL visibility ) {
    HRESULT _hr = put_VisibilityEdge4(visibility);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(414)
inline VARIANT_BOOL AutoCAD::IAcad3DFace::GetInvisibleEdge ( int Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetInvisibleEdge(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(415)
inline HRESULT AutoCAD::IAcad3DFace::SetInvisibleEdge ( int Index, VARIANT_BOOL State ) {
    HRESULT _hr = raw_SetInvisibleEdge(Index, State);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(416)
inline _variant_t AutoCAD::IAcad3DFace::GetCoordinate ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinate(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(417)
inline void AutoCAD::IAcad3DFace::PutCoordinate ( int Index, const _variant_t & pVal ) {
    HRESULT _hr = put_Coordinate(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadPolygonMesh wrapper method implementations
//

#pragma implementation_key(418)
inline _variant_t AutoCAD::IAcadPolygonMesh::GetCoordinates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(419)
inline void AutoCAD::IAcadPolygonMesh::PutCoordinates ( const _variant_t & Coordinates ) {
    HRESULT _hr = put_Coordinates(Coordinates);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(420)
inline VARIANT_BOOL AutoCAD::IAcadPolygonMesh::GetMClose ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MClose(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(421)
inline void AutoCAD::IAcadPolygonMesh::PutMClose ( VARIANT_BOOL bClose ) {
    HRESULT _hr = put_MClose(bClose);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(422)
inline VARIANT_BOOL AutoCAD::IAcadPolygonMesh::GetNClose ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NClose(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(423)
inline void AutoCAD::IAcadPolygonMesh::PutNClose ( VARIANT_BOOL bClose ) {
    HRESULT _hr = put_NClose(bClose);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(424)
inline long AutoCAD::IAcadPolygonMesh::GetMDensity ( ) {
    long _result = 0;
    HRESULT _hr = get_MDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(425)
inline void AutoCAD::IAcadPolygonMesh::PutMDensity ( long density ) {
    HRESULT _hr = put_MDensity(density);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(426)
inline long AutoCAD::IAcadPolygonMesh::GetNDensity ( ) {
    long _result = 0;
    HRESULT _hr = get_NDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(427)
inline void AutoCAD::IAcadPolygonMesh::PutNDensity ( long density ) {
    HRESULT _hr = put_NDensity(density);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(428)
inline long AutoCAD::IAcadPolygonMesh::GetMVertexCount ( ) {
    long _result = 0;
    HRESULT _hr = get_MVertexCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(429)
inline long AutoCAD::IAcadPolygonMesh::GetNVertexCount ( ) {
    long _result = 0;
    HRESULT _hr = get_NVertexCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(430)
inline enum AutoCAD::AcPolymeshType AutoCAD::IAcadPolygonMesh::GetType ( ) {
    enum AcPolymeshType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(431)
inline void AutoCAD::IAcadPolygonMesh::PutType ( enum AcPolymeshType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(432)
inline HRESULT AutoCAD::IAcadPolygonMesh::AppendVertex ( const _variant_t & vertex ) {
    HRESULT _hr = raw_AppendVertex(vertex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(433)
inline _variant_t AutoCAD::IAcadPolygonMesh::Explode ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Explode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(434)
inline _variant_t AutoCAD::IAcadPolygonMesh::GetCoordinate ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinate(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(435)
inline void AutoCAD::IAcadPolygonMesh::PutCoordinate ( int Index, const _variant_t & pVal ) {
    HRESULT _hr = put_Coordinate(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcad3DPolyline wrapper method implementations
//

#pragma implementation_key(436)
inline _variant_t AutoCAD::IAcad3DPolyline::GetCoordinates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(437)
inline void AutoCAD::IAcad3DPolyline::PutCoordinates ( const _variant_t & Coordinates ) {
    HRESULT _hr = put_Coordinates(Coordinates);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(438)
inline HRESULT AutoCAD::IAcad3DPolyline::AppendVertex ( const _variant_t & vertex ) {
    HRESULT _hr = raw_AppendVertex(vertex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(439)
inline _variant_t AutoCAD::IAcad3DPolyline::Explode ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Explode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(440)
inline _variant_t AutoCAD::IAcad3DPolyline::GetCoordinate ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinate(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(441)
inline void AutoCAD::IAcad3DPolyline::PutCoordinate ( int Index, const _variant_t & pVal ) {
    HRESULT _hr = put_Coordinate(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(442)
inline enum AutoCAD::Ac3DPolylineType AutoCAD::IAcad3DPolyline::GetType ( ) {
    enum Ac3DPolylineType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(443)
inline void AutoCAD::IAcad3DPolyline::PutType ( enum Ac3DPolylineType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(444)
inline VARIANT_BOOL AutoCAD::IAcad3DPolyline::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(445)
inline void AutoCAD::IAcad3DPolyline::PutClosed ( VARIANT_BOOL fClose ) {
    HRESULT _hr = put_Closed(fClose);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(446)
inline double AutoCAD::IAcad3DPolyline::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadArc wrapper method implementations
//

#pragma implementation_key(447)
inline _variant_t AutoCAD::IAcadArc::GetStartPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(448)
inline _variant_t AutoCAD::IAcadArc::GetCenter ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(449)
inline void AutoCAD::IAcadArc::PutCenter ( const _variant_t & CenterPoint ) {
    HRESULT _hr = put_Center(CenterPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(450)
inline _variant_t AutoCAD::IAcadArc::GetEndPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EndPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(451)
inline double AutoCAD::IAcadArc::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(452)
inline void AutoCAD::IAcadArc::PutRadius ( double Radius ) {
    HRESULT _hr = put_Radius(Radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(453)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadArc::GetStartAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_StartAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(454)
inline void AutoCAD::IAcadArc::PutStartAngle ( ACAD_ANGLE Angle ) {
    HRESULT _hr = put_StartAngle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(455)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadArc::GetEndAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_EndAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(456)
inline void AutoCAD::IAcadArc::PutEndAngle ( ACAD_ANGLE Angle ) {
    HRESULT _hr = put_EndAngle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(457)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadArc::GetTotalAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_TotalAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(458)
inline AutoCAD::ACAD_DISTANCE AutoCAD::IAcadArc::GetArcLength ( ) {
    ACAD_DISTANCE _result;
    HRESULT _hr = get_ArcLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(459)
inline double AutoCAD::IAcadArc::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(460)
inline void AutoCAD::IAcadArc::PutThickness ( double Thickness ) {
    HRESULT _hr = put_Thickness(Thickness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(461)
inline _variant_t AutoCAD::IAcadArc::Offset ( double Distance ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Offset(Distance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(462)
inline double AutoCAD::IAcadArc::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(463)
inline _variant_t AutoCAD::IAcadArc::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(464)
inline void AutoCAD::IAcadArc::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadAttribute wrapper method implementations
//

#pragma implementation_key(465)
inline long AutoCAD::IAcadAttribute::GetFieldLength ( ) {
    long _result = 0;
    HRESULT _hr = get_FieldLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(466)
inline void AutoCAD::IAcadAttribute::PutFieldLength ( long fieldLen ) {
    HRESULT _hr = put_FieldLength(fieldLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(467)
inline _bstr_t AutoCAD::IAcadAttribute::GetTagString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TagString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(468)
inline void AutoCAD::IAcadAttribute::PutTagString ( _bstr_t Tag ) {
    HRESULT _hr = put_TagString(Tag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(469)
inline _bstr_t AutoCAD::IAcadAttribute::GetPromptString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PromptString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(470)
inline void AutoCAD::IAcadAttribute::PutPromptString ( _bstr_t bstrPrompt ) {
    HRESULT _hr = put_PromptString(bstrPrompt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(471)
inline _bstr_t AutoCAD::IAcadAttribute::GetTextString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(472)
inline void AutoCAD::IAcadAttribute::PutTextString ( _bstr_t bstrText ) {
    HRESULT _hr = put_TextString(bstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(473)
inline _bstr_t AutoCAD::IAcadAttribute::GetStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(474)
inline void AutoCAD::IAcadAttribute::PutStyleName ( _bstr_t Name ) {
    HRESULT _hr = put_StyleName(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(475)
inline enum AutoCAD::AcAlignment AutoCAD::IAcadAttribute::GetAlignment ( ) {
    enum AcAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(476)
inline void AutoCAD::IAcadAttribute::PutAlignment ( enum AcAlignment align ) {
    HRESULT _hr = put_Alignment(align);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(477)
inline enum AutoCAD::AcHorizontalAlignment AutoCAD::IAcadAttribute::GetHorizontalAlignment ( ) {
    enum AcHorizontalAlignment _result;
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(478)
inline void AutoCAD::IAcadAttribute::PutHorizontalAlignment ( enum AcHorizontalAlignment horizAlign ) {
    HRESULT _hr = put_HorizontalAlignment(horizAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(479)
inline enum AutoCAD::AcVerticalAlignment AutoCAD::IAcadAttribute::GetVerticalAlignment ( ) {
    enum AcVerticalAlignment _result;
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(480)
inline void AutoCAD::IAcadAttribute::PutVerticalAlignment ( enum AcVerticalAlignment vertiAlign ) {
    HRESULT _hr = put_VerticalAlignment(vertiAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(481)
inline double AutoCAD::IAcadAttribute::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(482)
inline void AutoCAD::IAcadAttribute::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(483)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadAttribute::GetRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(484)
inline void AutoCAD::IAcadAttribute::PutRotation ( ACAD_ANGLE rotAngle ) {
    HRESULT _hr = put_Rotation(rotAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(485)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadAttribute::GetScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_ScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(486)
inline void AutoCAD::IAcadAttribute::PutScaleFactor ( ACAD_NOUNITS scalFactor ) {
    HRESULT _hr = put_ScaleFactor(scalFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(487)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadAttribute::GetObliqueAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_ObliqueAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(488)
inline void AutoCAD::IAcadAttribute::PutObliqueAngle ( ACAD_ANGLE obliAngle ) {
    HRESULT _hr = put_ObliqueAngle(obliAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(489)
inline _variant_t AutoCAD::IAcadAttribute::GetTextAlignmentPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TextAlignmentPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(490)
inline void AutoCAD::IAcadAttribute::PutTextAlignmentPoint ( const _variant_t & alignPoint ) {
    HRESULT _hr = put_TextAlignmentPoint(alignPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(491)
inline _variant_t AutoCAD::IAcadAttribute::GetInsertionPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InsertionPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(492)
inline void AutoCAD::IAcadAttribute::PutInsertionPoint ( const _variant_t & insPoint ) {
    HRESULT _hr = put_InsertionPoint(insPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(493)
inline _variant_t AutoCAD::IAcadAttribute::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(494)
inline void AutoCAD::IAcadAttribute::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(495)
inline long AutoCAD::IAcadAttribute::GetTextGenerationFlag ( ) {
    long _result = 0;
    HRESULT _hr = get_TextGenerationFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(496)
inline void AutoCAD::IAcadAttribute::PutTextGenerationFlag ( long textGenFlag ) {
    HRESULT _hr = put_TextGenerationFlag(textGenFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(497)
inline double AutoCAD::IAcadAttribute::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(498)
inline void AutoCAD::IAcadAttribute::PutThickness ( double Thickness ) {
    HRESULT _hr = put_Thickness(Thickness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(499)
inline long AutoCAD::IAcadAttribute::GetMode ( ) {
    long _result = 0;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(500)
inline void AutoCAD::IAcadAttribute::PutMode ( long Mode ) {
    HRESULT _hr = put_Mode(Mode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(501)
inline VARIANT_BOOL AutoCAD::IAcadAttribute::GetUpsideDown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpsideDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(502)
inline void AutoCAD::IAcadAttribute::PutUpsideDown ( VARIANT_BOOL bUpsideDown ) {
    HRESULT _hr = put_UpsideDown(bUpsideDown);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(503)
inline VARIANT_BOOL AutoCAD::IAcadAttribute::GetBackward ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Backward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(504)
inline void AutoCAD::IAcadAttribute::PutBackward ( VARIANT_BOOL bBackward ) {
    HRESULT _hr = put_Backward(bBackward);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(505)
inline VARIANT_BOOL AutoCAD::IAcadAttribute::GetInvisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Invisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(506)
inline void AutoCAD::IAcadAttribute::PutInvisible ( VARIANT_BOOL bInvisible ) {
    HRESULT _hr = put_Invisible(bInvisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(507)
inline VARIANT_BOOL AutoCAD::IAcadAttribute::GetConstant ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Constant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(508)
inline void AutoCAD::IAcadAttribute::PutConstant ( VARIANT_BOOL bConstant ) {
    HRESULT _hr = put_Constant(bConstant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(509)
inline VARIANT_BOOL AutoCAD::IAcadAttribute::GetVerify ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Verify(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(510)
inline void AutoCAD::IAcadAttribute::PutVerify ( VARIANT_BOOL bVerify ) {
    HRESULT _hr = put_Verify(bVerify);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(511)
inline VARIANT_BOOL AutoCAD::IAcadAttribute::GetPreset ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Preset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(512)
inline void AutoCAD::IAcadAttribute::PutPreset ( VARIANT_BOOL bPreset ) {
    HRESULT _hr = put_Preset(bPreset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(513)
inline VARIANT_BOOL AutoCAD::IAcadAttribute::GetLockPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(514)
inline void AutoCAD::IAcadAttribute::PutLockPosition ( VARIANT_BOOL bLockPosition ) {
    HRESULT _hr = put_LockPosition(bLockPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(515)
inline VARIANT_BOOL AutoCAD::IAcadAttribute::GetMTextAttribute ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MTextAttribute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(516)
inline void AutoCAD::IAcadAttribute::PutMTextAttribute ( VARIANT_BOOL bMTextAttribute ) {
    HRESULT _hr = put_MTextAttribute(bMTextAttribute);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(517)
inline _bstr_t AutoCAD::IAcadAttribute::GetMTextAttributeContent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MTextAttributeContent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(518)
inline void AutoCAD::IAcadAttribute::PutMTextAttributeContent ( _bstr_t content ) {
    HRESULT _hr = put_MTextAttributeContent(content);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(519)
inline HRESULT AutoCAD::IAcadAttribute::UpdateMTextAttribute ( ) {
    HRESULT _hr = raw_UpdateMTextAttribute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(520)
inline double AutoCAD::IAcadAttribute::GetMTextBoundaryWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_MTextBoundaryWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(521)
inline void AutoCAD::IAcadAttribute::PutMTextBoundaryWidth ( double boundaryWidth ) {
    HRESULT _hr = put_MTextBoundaryWidth(boundaryWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(522)
inline enum AutoCAD::AcDrawingDirection AutoCAD::IAcadAttribute::GetMTextDrawingDirection ( ) {
    enum AcDrawingDirection _result;
    HRESULT _hr = get_MTextDrawingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(523)
inline void AutoCAD::IAcadAttribute::PutMTextDrawingDirection ( enum AcDrawingDirection drawDir ) {
    HRESULT _hr = put_MTextDrawingDirection(drawDir);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadRegion wrapper method implementations
//

#pragma implementation_key(524)
inline double AutoCAD::IAcadRegion::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(525)
inline _variant_t AutoCAD::IAcadRegion::GetCentroid ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Centroid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(526)
inline _variant_t AutoCAD::IAcadRegion::GetMomentOfInertia ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MomentOfInertia(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(527)
inline _variant_t AutoCAD::IAcadRegion::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(528)
inline double AutoCAD::IAcadRegion::GetPerimeter ( ) {
    double _result = 0;
    HRESULT _hr = get_Perimeter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(529)
inline _variant_t AutoCAD::IAcadRegion::GetPrincipalDirections ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PrincipalDirections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(530)
inline _variant_t AutoCAD::IAcadRegion::GetPrincipalMoments ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PrincipalMoments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(531)
inline double AutoCAD::IAcadRegion::GetProductOfInertia ( ) {
    double _result = 0;
    HRESULT _hr = get_ProductOfInertia(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(532)
inline _variant_t AutoCAD::IAcadRegion::GetRadiiOfGyration ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RadiiOfGyration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(533)
inline HRESULT AutoCAD::IAcadRegion::Boolean ( enum AcBooleanType Operation, struct IAcadRegion * Object ) {
    HRESULT _hr = raw_Boolean(Operation, Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(534)
inline _variant_t AutoCAD::IAcadRegion::Explode ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Explode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IAcad3DSolid wrapper method implementations
//

#pragma implementation_key(535)
inline _variant_t AutoCAD::IAcad3DSolid::GetCentroid ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Centroid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(536)
inline _variant_t AutoCAD::IAcad3DSolid::GetMomentOfInertia ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MomentOfInertia(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(537)
inline _variant_t AutoCAD::IAcad3DSolid::GetPrincipalDirections ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PrincipalDirections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(538)
inline _variant_t AutoCAD::IAcad3DSolid::GetPrincipalMoments ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PrincipalMoments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(539)
inline _variant_t AutoCAD::IAcad3DSolid::GetProductOfInertia ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ProductOfInertia(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(540)
inline _variant_t AutoCAD::IAcad3DSolid::GetRadiiOfGyration ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RadiiOfGyration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(541)
inline double AutoCAD::IAcad3DSolid::GetVolume ( ) {
    double _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(542)
inline HRESULT AutoCAD::IAcad3DSolid::Boolean ( enum AcBooleanType Operation, struct IAcad3DSolid * SolidObject ) {
    HRESULT _hr = raw_Boolean(Operation, SolidObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(543)
inline AutoCAD::IAcad3DSolidPtr AutoCAD::IAcad3DSolid::CheckInterference ( struct IAcad3DSolid * Object, VARIANT_BOOL CreateInterferenceSolid, VARIANT_BOOL * SolidsInterfere ) {
    struct IAcad3DSolid * _result = 0;
    HRESULT _hr = raw_CheckInterference(Object, CreateInterferenceSolid, SolidsInterfere, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DSolidPtr(_result, false);
}

#pragma implementation_key(544)
inline AutoCAD::IAcadRegionPtr AutoCAD::IAcad3DSolid::SectionSolid ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3 ) {
    struct IAcadRegion * _result = 0;
    HRESULT _hr = raw_SectionSolid(Point1, Point2, point3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadRegionPtr(_result, false);
}

#pragma implementation_key(545)
inline AutoCAD::IAcad3DSolidPtr AutoCAD::IAcad3DSolid::SliceSolid ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3, VARIANT_BOOL Negative ) {
    struct IAcad3DSolid * _result = 0;
    HRESULT _hr = raw_SliceSolid(Point1, Point2, point3, Negative, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DSolidPtr(_result, false);
}

#pragma implementation_key(546)
inline _bstr_t AutoCAD::IAcad3DSolid::GetSolidType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SolidType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(547)
inline _variant_t AutoCAD::IAcad3DSolid::GetPosition ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(548)
inline void AutoCAD::IAcad3DSolid::PutPosition ( const _variant_t & Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(549)
inline VARIANT_BOOL AutoCAD::IAcad3DSolid::GetHistory ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_History(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(550)
inline void AutoCAD::IAcad3DSolid::PutHistory ( VARIANT_BOOL bHistory ) {
    HRESULT _hr = put_History(bHistory);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(551)
inline VARIANT_BOOL AutoCAD::IAcad3DSolid::GetShowHistory ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowHistory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(552)
inline void AutoCAD::IAcad3DSolid::PutShowHistory ( VARIANT_BOOL Position ) {
    HRESULT _hr = put_ShowHistory(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadCircle wrapper method implementations
//

#pragma implementation_key(553)
inline _variant_t AutoCAD::IAcadCircle::GetCenter ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(554)
inline void AutoCAD::IAcadCircle::PutCenter ( const _variant_t & CenterPoint ) {
    HRESULT _hr = put_Center(CenterPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(555)
inline double AutoCAD::IAcadCircle::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(556)
inline void AutoCAD::IAcadCircle::PutRadius ( double Radius ) {
    HRESULT _hr = put_Radius(Radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(557)
inline double AutoCAD::IAcadCircle::GetDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_Diameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(558)
inline void AutoCAD::IAcadCircle::PutDiameter ( double Diameter ) {
    HRESULT _hr = put_Diameter(Diameter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(559)
inline double AutoCAD::IAcadCircle::GetCircumference ( ) {
    double _result = 0;
    HRESULT _hr = get_Circumference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(560)
inline void AutoCAD::IAcadCircle::PutCircumference ( double Circumference ) {
    HRESULT _hr = put_Circumference(Circumference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(561)
inline double AutoCAD::IAcadCircle::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(562)
inline void AutoCAD::IAcadCircle::PutArea ( double Area ) {
    HRESULT _hr = put_Area(Area);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(563)
inline _variant_t AutoCAD::IAcadCircle::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(564)
inline void AutoCAD::IAcadCircle::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(565)
inline double AutoCAD::IAcadCircle::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(566)
inline void AutoCAD::IAcadCircle::PutThickness ( double Thickness ) {
    HRESULT _hr = put_Thickness(Thickness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(567)
inline _variant_t AutoCAD::IAcadCircle::Offset ( double Distance ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Offset(Distance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IAcadDimension wrapper method implementations
//

#pragma implementation_key(568)
inline _variant_t AutoCAD::IAcadDimension::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(569)
inline void AutoCAD::IAcadDimension::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(570)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadDimension::GetRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(571)
inline void AutoCAD::IAcadDimension::PutRotation ( ACAD_ANGLE rotAngle ) {
    HRESULT _hr = put_Rotation(rotAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(572)
inline _variant_t AutoCAD::IAcadDimension::GetTextPosition ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TextPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(573)
inline void AutoCAD::IAcadDimension::PutTextPosition ( const _variant_t & textPos ) {
    HRESULT _hr = put_TextPosition(textPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(574)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadDimension::GetTextRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_TextRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(575)
inline void AutoCAD::IAcadDimension::PutTextRotation ( ACAD_ANGLE rotAngle ) {
    HRESULT _hr = put_TextRotation(rotAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(576)
inline _bstr_t AutoCAD::IAcadDimension::GetTextOverride ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextOverride(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(577)
inline void AutoCAD::IAcadDimension::PutTextOverride ( _bstr_t bstrText ) {
    HRESULT _hr = put_TextOverride(bstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(578)
inline _bstr_t AutoCAD::IAcadDimension::GetStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(579)
inline void AutoCAD::IAcadDimension::PutStyleName ( _bstr_t bstrName ) {
    HRESULT _hr = put_StyleName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(580)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDimension::GetTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(581)
inline void AutoCAD::IAcadDimension::PutTextColor ( ACAD_COLOR color ) {
    HRESULT _hr = put_TextColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(582)
inline _bstr_t AutoCAD::IAcadDimension::GetDecimalSeparator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DecimalSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(583)
inline void AutoCAD::IAcadDimension::PutDecimalSeparator ( _bstr_t character ) {
    HRESULT _hr = put_DecimalSeparator(character);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(584)
inline double AutoCAD::IAcadDimension::GetTextGap ( ) {
    double _result = 0;
    HRESULT _hr = get_TextGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(585)
inline void AutoCAD::IAcadDimension::PutTextGap ( double Offset ) {
    HRESULT _hr = put_TextGap(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(586)
inline _bstr_t AutoCAD::IAcadDimension::GetTextPrefix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextPrefix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(587)
inline void AutoCAD::IAcadDimension::PutTextPrefix ( _bstr_t prefix ) {
    HRESULT _hr = put_TextPrefix(prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(588)
inline _bstr_t AutoCAD::IAcadDimension::GetTextSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(589)
inline void AutoCAD::IAcadDimension::PutTextSuffix ( _bstr_t suffix ) {
    HRESULT _hr = put_TextSuffix(suffix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(590)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimension::GetScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_ScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(591)
inline void AutoCAD::IAcadDimension::PutScaleFactor ( ACAD_NOUNITS factor ) {
    HRESULT _hr = put_ScaleFactor(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(592)
inline enum AutoCAD::AcDimVerticalJustification AutoCAD::IAcadDimension::GetVerticalTextPosition ( ) {
    enum AcDimVerticalJustification _result;
    HRESULT _hr = get_VerticalTextPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(593)
inline void AutoCAD::IAcadDimension::PutVerticalTextPosition ( enum AcDimVerticalJustification Type ) {
    HRESULT _hr = put_VerticalTextPosition(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(594)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimension::GetTolerancePrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_TolerancePrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(595)
inline void AutoCAD::IAcadDimension::PutTolerancePrecision ( enum AcDimPrecision precision ) {
    HRESULT _hr = put_TolerancePrecision(precision);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(596)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimension::GetToleranceHeightScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_ToleranceHeightScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(597)
inline void AutoCAD::IAcadDimension::PutToleranceHeightScale ( ACAD_NOUNITS scale ) {
    HRESULT _hr = put_ToleranceHeightScale(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(598)
inline double AutoCAD::IAcadDimension::GetToleranceLowerLimit ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceLowerLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(599)
inline void AutoCAD::IAcadDimension::PutToleranceLowerLimit ( double lower ) {
    HRESULT _hr = put_ToleranceLowerLimit(lower);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(600)
inline enum AutoCAD::AcDimTextMovement AutoCAD::IAcadDimension::GetTextMovement ( ) {
    enum AcDimTextMovement _result;
    HRESULT _hr = get_TextMovement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(601)
inline void AutoCAD::IAcadDimension::PutTextMovement ( enum AcDimTextMovement Move ) {
    HRESULT _hr = put_TextMovement(Move);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(602)
inline enum AutoCAD::AcDimToleranceMethod AutoCAD::IAcadDimension::GetToleranceDisplay ( ) {
    enum AcDimToleranceMethod _result;
    HRESULT _hr = get_ToleranceDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(603)
inline void AutoCAD::IAcadDimension::PutToleranceDisplay ( enum AcDimToleranceMethod method ) {
    HRESULT _hr = put_ToleranceDisplay(method);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(604)
inline enum AutoCAD::AcDimToleranceJustify AutoCAD::IAcadDimension::GetToleranceJustification ( ) {
    enum AcDimToleranceJustify _result;
    HRESULT _hr = get_ToleranceJustification(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(605)
inline void AutoCAD::IAcadDimension::PutToleranceJustification ( enum AcDimToleranceJustify method ) {
    HRESULT _hr = put_ToleranceJustification(method);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(606)
inline double AutoCAD::IAcadDimension::GetToleranceUpperLimit ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceUpperLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(607)
inline void AutoCAD::IAcadDimension::PutToleranceUpperLimit ( double upper ) {
    HRESULT _hr = put_ToleranceUpperLimit(upper);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(608)
inline _bstr_t AutoCAD::IAcadDimension::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(609)
inline void AutoCAD::IAcadDimension::PutTextStyle ( _bstr_t style ) {
    HRESULT _hr = put_TextStyle(style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(610)
inline double AutoCAD::IAcadDimension::GetTextHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(611)
inline void AutoCAD::IAcadDimension::PutTextHeight ( double Height ) {
    HRESULT _hr = put_TextHeight(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(612)
inline VARIANT_BOOL AutoCAD::IAcadDimension::GetSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(613)
inline void AutoCAD::IAcadDimension::PutSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(614)
inline VARIANT_BOOL AutoCAD::IAcadDimension::GetSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(615)
inline void AutoCAD::IAcadDimension::PutSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(616)
inline VARIANT_BOOL AutoCAD::IAcadDimension::GetToleranceSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(617)
inline void AutoCAD::IAcadDimension::PutToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(618)
inline VARIANT_BOOL AutoCAD::IAcadDimension::GetToleranceSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(619)
inline void AutoCAD::IAcadDimension::PutToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(620)
inline VARIANT_BOOL AutoCAD::IAcadDimension::GetTextFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(621)
inline void AutoCAD::IAcadDimension::PutTextFill ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_TextFill(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(622)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDimension::GetTextFillColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextFillColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(623)
inline void AutoCAD::IAcadDimension::PutTextFillColor ( ACAD_COLOR color ) {
    HRESULT _hr = put_TextFillColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(624)
inline VARIANT_BOOL AutoCAD::IAcadDimension::GetDimTxtDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimTxtDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(625)
inline void AutoCAD::IAcadDimension::PutDimTxtDirection ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_DimTxtDirection(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadDimAligned wrapper method implementations
//

#pragma implementation_key(626)
inline _variant_t AutoCAD::IAcadDimAligned::GetExtLine1Point ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExtLine1Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(627)
inline void AutoCAD::IAcadDimAligned::PutExtLine1Point ( const _variant_t & xLine1Point ) {
    HRESULT _hr = put_ExtLine1Point(xLine1Point);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(628)
inline _variant_t AutoCAD::IAcadDimAligned::GetExtLine2Point ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExtLine2Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(629)
inline void AutoCAD::IAcadDimAligned::PutExtLine2Point ( const _variant_t & xLine2Point ) {
    HRESULT _hr = put_ExtLine2Point(xLine2Point);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(630)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetAltUnits ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(631)
inline void AutoCAD::IAcadDimAligned::PutAltUnits ( VARIANT_BOOL bAlternate ) {
    HRESULT _hr = put_AltUnits(bAlternate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(632)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimAligned::GetAltUnitsPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_AltUnitsPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(633)
inline void AutoCAD::IAcadDimAligned::PutAltUnitsPrecision ( enum AcDimPrecision precision ) {
    HRESULT _hr = put_AltUnitsPrecision(precision);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(634)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimAligned::GetAltUnitsScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_AltUnitsScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(635)
inline void AutoCAD::IAcadDimAligned::PutAltUnitsScale ( ACAD_NOUNITS scale ) {
    HRESULT _hr = put_AltUnitsScale(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(636)
inline double AutoCAD::IAcadDimAligned::GetAltRoundDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_AltRoundDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(637)
inline void AutoCAD::IAcadDimAligned::PutAltRoundDistance ( double Distance ) {
    HRESULT _hr = put_AltRoundDistance(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(638)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimAligned::GetAltTolerancePrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_AltTolerancePrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(639)
inline void AutoCAD::IAcadDimAligned::PutAltTolerancePrecision ( enum AcDimPrecision Distance ) {
    HRESULT _hr = put_AltTolerancePrecision(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(640)
inline enum AutoCAD::AcDimUnits AutoCAD::IAcadDimAligned::GetAltUnitsFormat ( ) {
    enum AcDimUnits _result;
    HRESULT _hr = get_AltUnitsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(641)
inline void AutoCAD::IAcadDimAligned::PutAltUnitsFormat ( enum AcDimUnits Units ) {
    HRESULT _hr = put_AltUnitsFormat(Units);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(642)
inline _bstr_t AutoCAD::IAcadDimAligned::GetAltTextPrefix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTextPrefix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(643)
inline void AutoCAD::IAcadDimAligned::PutAltTextPrefix ( _bstr_t prefix ) {
    HRESULT _hr = put_AltTextPrefix(prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(644)
inline _bstr_t AutoCAD::IAcadDimAligned::GetAltTextSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTextSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(645)
inline void AutoCAD::IAcadDimAligned::PutAltTextSuffix ( _bstr_t suffix ) {
    HRESULT _hr = put_AltTextSuffix(suffix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(646)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDimAligned::GetDimensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_DimensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(647)
inline void AutoCAD::IAcadDimAligned::PutDimensionLineColor ( ACAD_COLOR color ) {
    HRESULT _hr = put_DimensionLineColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(648)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDimAligned::GetExtensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_ExtensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(649)
inline void AutoCAD::IAcadDimAligned::PutExtensionLineColor ( ACAD_COLOR color ) {
    HRESULT _hr = put_ExtensionLineColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(650)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimAligned::GetPrimaryUnitsPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_PrimaryUnitsPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(651)
inline void AutoCAD::IAcadDimAligned::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec ) {
    HRESULT _hr = put_PrimaryUnitsPrecision(Prec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(652)
inline double AutoCAD::IAcadDimAligned::GetDimensionLineExtend ( ) {
    double _result = 0;
    HRESULT _hr = get_DimensionLineExtend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(653)
inline void AutoCAD::IAcadDimAligned::PutDimensionLineExtend ( double extend ) {
    HRESULT _hr = put_DimensionLineExtend(extend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(654)
inline double AutoCAD::IAcadDimAligned::GetExtensionLineExtend ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtensionLineExtend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(655)
inline void AutoCAD::IAcadDimAligned::PutExtensionLineExtend ( double extend ) {
    HRESULT _hr = put_ExtensionLineExtend(extend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(656)
inline enum AutoCAD::AcDimFit AutoCAD::IAcadDimAligned::GetFit ( ) {
    enum AcDimFit _result;
    HRESULT _hr = get_Fit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(657)
inline void AutoCAD::IAcadDimAligned::PutFit ( enum AcDimFit fittype ) {
    HRESULT _hr = put_Fit(fittype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(658)
inline enum AutoCAD::AcDimFractionType AutoCAD::IAcadDimAligned::GetFractionFormat ( ) {
    enum AcDimFractionType _result;
    HRESULT _hr = get_FractionFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(659)
inline void AutoCAD::IAcadDimAligned::PutFractionFormat ( enum AcDimFractionType Type ) {
    HRESULT _hr = put_FractionFormat(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(660)
inline enum AutoCAD::AcDimHorizontalJustification AutoCAD::IAcadDimAligned::GetHorizontalTextPosition ( ) {
    enum AcDimHorizontalJustification _result;
    HRESULT _hr = get_HorizontalTextPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(661)
inline void AutoCAD::IAcadDimAligned::PutHorizontalTextPosition ( enum AcDimHorizontalJustification Type ) {
    HRESULT _hr = put_HorizontalTextPosition(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(662)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimAligned::GetLinearScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_LinearScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(663)
inline void AutoCAD::IAcadDimAligned::PutLinearScaleFactor ( ACAD_NOUNITS Type ) {
    HRESULT _hr = put_LinearScaleFactor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(664)
inline enum AutoCAD::AcDimLUnits AutoCAD::IAcadDimAligned::GetUnitsFormat ( ) {
    enum AcDimLUnits _result;
    HRESULT _hr = get_UnitsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(665)
inline void AutoCAD::IAcadDimAligned::PutUnitsFormat ( enum AcDimLUnits format ) {
    HRESULT _hr = put_UnitsFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(666)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadDimAligned::GetExtensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_ExtensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(667)
inline void AutoCAD::IAcadDimAligned::PutExtensionLineWeight ( ACAD_LWEIGHT lweight ) {
    HRESULT _hr = put_ExtensionLineWeight(lweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(668)
inline double AutoCAD::IAcadDimAligned::GetRoundDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_RoundDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(669)
inline void AutoCAD::IAcadDimAligned::PutRoundDistance ( double Distance ) {
    HRESULT _hr = put_RoundDistance(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(670)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetDimLine1Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLine1Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(671)
inline void AutoCAD::IAcadDimAligned::PutDimLine1Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_DimLine1Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(672)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetDimLine2Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLine2Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(673)
inline void AutoCAD::IAcadDimAligned::PutDimLine2Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_DimLine2Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(674)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetExtLine1Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLine1Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(675)
inline void AutoCAD::IAcadDimAligned::PutExtLine1Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_ExtLine1Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(676)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetExtLine2Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLine2Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(677)
inline void AutoCAD::IAcadDimAligned::PutExtLine2Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_ExtLine2Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(678)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetDimLineInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLineInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(679)
inline void AutoCAD::IAcadDimAligned::PutDimLineInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_DimLineInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(680)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetTextInsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(681)
inline void AutoCAD::IAcadDimAligned::PutTextInsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(682)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetTextInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(683)
inline void AutoCAD::IAcadDimAligned::PutTextInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(684)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetForceLineInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForceLineInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(685)
inline void AutoCAD::IAcadDimAligned::PutForceLineInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_ForceLineInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(686)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetTextOutsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextOutsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(687)
inline void AutoCAD::IAcadDimAligned::PutTextOutsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextOutsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(688)
inline double AutoCAD::IAcadDimAligned::GetExtensionLineOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtensionLineOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(689)
inline void AutoCAD::IAcadDimAligned::PutExtensionLineOffset ( double Offset ) {
    HRESULT _hr = put_ExtensionLineOffset(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(690)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetAltSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(691)
inline void AutoCAD::IAcadDimAligned::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(692)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetAltSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(693)
inline void AutoCAD::IAcadDimAligned::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(694)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetAltSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(695)
inline void AutoCAD::IAcadDimAligned::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(696)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetAltSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(697)
inline void AutoCAD::IAcadDimAligned::PutAltSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(698)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetAltToleranceSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(699)
inline void AutoCAD::IAcadDimAligned::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(700)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetAltToleranceSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(701)
inline void AutoCAD::IAcadDimAligned::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(702)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetAltToleranceSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(703)
inline void AutoCAD::IAcadDimAligned::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(704)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetAltToleranceSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(705)
inline void AutoCAD::IAcadDimAligned::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(706)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(707)
inline void AutoCAD::IAcadDimAligned::PutSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(708)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(709)
inline void AutoCAD::IAcadDimAligned::PutSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(710)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetToleranceSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(711)
inline void AutoCAD::IAcadDimAligned::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(712)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetToleranceSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(713)
inline void AutoCAD::IAcadDimAligned::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(714)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadDimAligned::GetDimensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_DimensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(715)
inline void AutoCAD::IAcadDimAligned::PutDimensionLineWeight ( ACAD_LWEIGHT weight ) {
    HRESULT _hr = put_DimensionLineWeight(weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(716)
inline double AutoCAD::IAcadDimAligned::GetArrowheadSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowheadSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(717)
inline void AutoCAD::IAcadDimAligned::PutArrowheadSize ( double size ) {
    HRESULT _hr = put_ArrowheadSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(718)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadDimAligned::GetArrowhead1Type ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_Arrowhead1Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(719)
inline void AutoCAD::IAcadDimAligned::PutArrowhead1Type ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_Arrowhead1Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(720)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadDimAligned::GetArrowhead2Type ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_Arrowhead2Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(721)
inline void AutoCAD::IAcadDimAligned::PutArrowhead2Type ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_Arrowhead2Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(722)
inline double AutoCAD::IAcadDimAligned::GetMeasurement ( ) {
    double _result = 0;
    HRESULT _hr = get_Measurement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(723)
inline _bstr_t AutoCAD::IAcadDimAligned::GetArrowhead1Block ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Arrowhead1Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(724)
inline void AutoCAD::IAcadDimAligned::PutArrowhead1Block ( _bstr_t BlockName ) {
    HRESULT _hr = put_Arrowhead1Block(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(725)
inline _bstr_t AutoCAD::IAcadDimAligned::GetArrowhead2Block ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Arrowhead2Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(726)
inline void AutoCAD::IAcadDimAligned::PutArrowhead2Block ( _bstr_t BlockName ) {
    HRESULT _hr = put_Arrowhead2Block(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(727)
inline _bstr_t AutoCAD::IAcadDimAligned::GetDimensionLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimensionLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(728)
inline void AutoCAD::IAcadDimAligned::PutDimensionLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_DimensionLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(729)
inline _bstr_t AutoCAD::IAcadDimAligned::GetExtLine1Linetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtLine1Linetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(730)
inline void AutoCAD::IAcadDimAligned::PutExtLine1Linetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_ExtLine1Linetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(731)
inline _bstr_t AutoCAD::IAcadDimAligned::GetExtLine2Linetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtLine2Linetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(732)
inline void AutoCAD::IAcadDimAligned::PutExtLine2Linetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_ExtLine2Linetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(733)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetExtLineFixedLenSuppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLineFixedLenSuppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(734)
inline void AutoCAD::IAcadDimAligned::PutExtLineFixedLenSuppress ( VARIANT_BOOL bFixedLen ) {
    HRESULT _hr = put_ExtLineFixedLenSuppress(bFixedLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(735)
inline double AutoCAD::IAcadDimAligned::GetExtLineFixedLen ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtLineFixedLen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(736)
inline void AutoCAD::IAcadDimAligned::PutExtLineFixedLen ( double FixedLen ) {
    HRESULT _hr = put_ExtLineFixedLen(FixedLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(737)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetDimConstrForm ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimConstrForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(738)
inline void AutoCAD::IAcadDimAligned::PutDimConstrForm ( VARIANT_BOOL bIsDynamic ) {
    HRESULT _hr = put_DimConstrForm(bIsDynamic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(739)
inline VARIANT_BOOL AutoCAD::IAcadDimAligned::GetDimConstrReference ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimConstrReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(740)
inline void AutoCAD::IAcadDimAligned::PutDimConstrReference ( VARIANT_BOOL bIsReference ) {
    HRESULT _hr = put_DimConstrReference(bIsReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(741)
inline _bstr_t AutoCAD::IAcadDimAligned::GetDimConstrName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(742)
inline void AutoCAD::IAcadDimAligned::PutDimConstrName ( _bstr_t bstrName ) {
    HRESULT _hr = put_DimConstrName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(743)
inline _bstr_t AutoCAD::IAcadDimAligned::GetDimConstrExpression ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrExpression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(744)
inline void AutoCAD::IAcadDimAligned::PutDimConstrExpression ( _bstr_t bstrExpression ) {
    HRESULT _hr = put_DimConstrExpression(bstrExpression);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(745)
inline _bstr_t AutoCAD::IAcadDimAligned::GetDimConstrValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(746)
inline void AutoCAD::IAcadDimAligned::PutDimConstrValue ( _bstr_t Value ) {
    HRESULT _hr = put_DimConstrValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(747)
inline _bstr_t AutoCAD::IAcadDimAligned::GetDimConstrDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(748)
inline void AutoCAD::IAcadDimAligned::PutDimConstrDesc ( _bstr_t bstrDescription ) {
    HRESULT _hr = put_DimConstrDesc(bstrDescription);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(749)
inline _bstr_t AutoCAD::IAcadDimAligned::GetSubUnitsSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubUnitsSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(750)
inline void AutoCAD::IAcadDimAligned::PutSubUnitsSuffix ( _bstr_t suffix ) {
    HRESULT _hr = put_SubUnitsSuffix(suffix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(751)
inline double AutoCAD::IAcadDimAligned::GetSubUnitsFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_SubUnitsFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(752)
inline void AutoCAD::IAcadDimAligned::PutSubUnitsFactor ( double factor ) {
    HRESULT _hr = put_SubUnitsFactor(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(753)
inline _bstr_t AutoCAD::IAcadDimAligned::GetAltSubUnitsSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltSubUnitsSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(754)
inline void AutoCAD::IAcadDimAligned::PutAltSubUnitsSuffix ( _bstr_t suffix ) {
    HRESULT _hr = put_AltSubUnitsSuffix(suffix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(755)
inline double AutoCAD::IAcadDimAligned::GetAltSubUnitsFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_AltSubUnitsFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(756)
inline void AutoCAD::IAcadDimAligned::PutAltSubUnitsFactor ( double factor ) {
    HRESULT _hr = put_AltSubUnitsFactor(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadDimAngular wrapper method implementations
//

#pragma implementation_key(757)
inline _variant_t AutoCAD::IAcadDimAngular::GetExtLine1StartPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExtLine1StartPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(758)
inline void AutoCAD::IAcadDimAngular::PutExtLine1StartPoint ( const _variant_t & xLine1Point ) {
    HRESULT _hr = put_ExtLine1StartPoint(xLine1Point);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(759)
inline _variant_t AutoCAD::IAcadDimAngular::GetExtLine1EndPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExtLine1EndPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(760)
inline void AutoCAD::IAcadDimAngular::PutExtLine1EndPoint ( const _variant_t & xLine1Point ) {
    HRESULT _hr = put_ExtLine1EndPoint(xLine1Point);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(761)
inline _variant_t AutoCAD::IAcadDimAngular::GetExtLine2StartPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExtLine2StartPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(762)
inline void AutoCAD::IAcadDimAngular::PutExtLine2StartPoint ( const _variant_t & xLine2Point ) {
    HRESULT _hr = put_ExtLine2StartPoint(xLine2Point);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(763)
inline _variant_t AutoCAD::IAcadDimAngular::GetExtLine2EndPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExtLine2EndPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(764)
inline void AutoCAD::IAcadDimAngular::PutExtLine2EndPoint ( const _variant_t & xLine2Point ) {
    HRESULT _hr = put_ExtLine2EndPoint(xLine2Point);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(765)
inline enum AutoCAD::AcAngleUnits AutoCAD::IAcadDimAngular::GetAngleFormat ( ) {
    enum AcAngleUnits _result;
    HRESULT _hr = get_AngleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(766)
inline void AutoCAD::IAcadDimAngular::PutAngleFormat ( enum AcAngleUnits format ) {
    HRESULT _hr = put_AngleFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(767)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDimAngular::GetDimensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_DimensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(768)
inline void AutoCAD::IAcadDimAngular::PutDimensionLineColor ( ACAD_COLOR Type ) {
    HRESULT _hr = put_DimensionLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(769)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDimAngular::GetExtensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_ExtensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(770)
inline void AutoCAD::IAcadDimAngular::PutExtensionLineColor ( ACAD_COLOR Type ) {
    HRESULT _hr = put_ExtensionLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(771)
inline double AutoCAD::IAcadDimAngular::GetExtensionLineExtend ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtensionLineExtend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(772)
inline void AutoCAD::IAcadDimAngular::PutExtensionLineExtend ( double extend ) {
    HRESULT _hr = put_ExtensionLineExtend(extend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(773)
inline enum AutoCAD::AcDimFit AutoCAD::IAcadDimAngular::GetFit ( ) {
    enum AcDimFit _result;
    HRESULT _hr = get_Fit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(774)
inline void AutoCAD::IAcadDimAngular::PutFit ( enum AcDimFit fittype ) {
    HRESULT _hr = put_Fit(fittype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(775)
inline enum AutoCAD::AcDimHorizontalJustification AutoCAD::IAcadDimAngular::GetHorizontalTextPosition ( ) {
    enum AcDimHorizontalJustification _result;
    HRESULT _hr = get_HorizontalTextPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(776)
inline void AutoCAD::IAcadDimAngular::PutHorizontalTextPosition ( enum AcDimHorizontalJustification Type ) {
    HRESULT _hr = put_HorizontalTextPosition(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(777)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadDimAngular::GetExtensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_ExtensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(778)
inline void AutoCAD::IAcadDimAngular::PutExtensionLineWeight ( ACAD_LWEIGHT lweight ) {
    HRESULT _hr = put_ExtensionLineWeight(lweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(779)
inline VARIANT_BOOL AutoCAD::IAcadDimAngular::GetDimLine1Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLine1Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(780)
inline void AutoCAD::IAcadDimAngular::PutDimLine1Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_DimLine1Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(781)
inline VARIANT_BOOL AutoCAD::IAcadDimAngular::GetDimLine2Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLine2Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(782)
inline void AutoCAD::IAcadDimAngular::PutDimLine2Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_DimLine2Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(783)
inline VARIANT_BOOL AutoCAD::IAcadDimAngular::GetExtLine1Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLine1Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(784)
inline void AutoCAD::IAcadDimAngular::PutExtLine1Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_ExtLine1Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(785)
inline VARIANT_BOOL AutoCAD::IAcadDimAngular::GetExtLine2Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLine2Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(786)
inline void AutoCAD::IAcadDimAngular::PutExtLine2Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_ExtLine2Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(787)
inline VARIANT_BOOL AutoCAD::IAcadDimAngular::GetDimLineInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLineInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(788)
inline void AutoCAD::IAcadDimAngular::PutDimLineInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_DimLineInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(789)
inline VARIANT_BOOL AutoCAD::IAcadDimAngular::GetTextInsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(790)
inline void AutoCAD::IAcadDimAngular::PutTextInsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(791)
inline VARIANT_BOOL AutoCAD::IAcadDimAngular::GetTextInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(792)
inline void AutoCAD::IAcadDimAngular::PutTextInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(793)
inline VARIANT_BOOL AutoCAD::IAcadDimAngular::GetForceLineInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForceLineInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(794)
inline void AutoCAD::IAcadDimAngular::PutForceLineInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_ForceLineInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(795)
inline VARIANT_BOOL AutoCAD::IAcadDimAngular::GetTextOutsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextOutsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(796)
inline void AutoCAD::IAcadDimAngular::PutTextOutsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextOutsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(797)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimAngular::GetTextPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_TextPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(798)
inline void AutoCAD::IAcadDimAngular::PutTextPrecision ( enum AcDimPrecision precision ) {
    HRESULT _hr = put_TextPrecision(precision);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(799)
inline double AutoCAD::IAcadDimAngular::GetExtensionLineOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtensionLineOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(800)
inline void AutoCAD::IAcadDimAngular::PutExtensionLineOffset ( double Offset ) {
    HRESULT _hr = put_ExtensionLineOffset(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(801)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadDimAngular::GetDimensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_DimensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(802)
inline void AutoCAD::IAcadDimAngular::PutDimensionLineWeight ( ACAD_LWEIGHT weight ) {
    HRESULT _hr = put_DimensionLineWeight(weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(803)
inline double AutoCAD::IAcadDimAngular::GetArrowheadSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowheadSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(804)
inline void AutoCAD::IAcadDimAngular::PutArrowheadSize ( double size ) {
    HRESULT _hr = put_ArrowheadSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(805)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadDimAngular::GetArrowhead1Type ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_Arrowhead1Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(806)
inline void AutoCAD::IAcadDimAngular::PutArrowhead1Type ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_Arrowhead1Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(807)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadDimAngular::GetArrowhead2Type ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_Arrowhead2Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(808)
inline void AutoCAD::IAcadDimAngular::PutArrowhead2Type ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_Arrowhead2Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(809)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadDimAngular::GetMeasurement ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Measurement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(810)
inline _bstr_t AutoCAD::IAcadDimAngular::GetArrowhead1Block ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Arrowhead1Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(811)
inline void AutoCAD::IAcadDimAngular::PutArrowhead1Block ( _bstr_t BlockName ) {
    HRESULT _hr = put_Arrowhead1Block(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(812)
inline _bstr_t AutoCAD::IAcadDimAngular::GetArrowhead2Block ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Arrowhead2Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(813)
inline void AutoCAD::IAcadDimAngular::PutArrowhead2Block ( _bstr_t BlockName ) {
    HRESULT _hr = put_Arrowhead2Block(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(814)
inline _bstr_t AutoCAD::IAcadDimAngular::GetDimensionLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimensionLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(815)
inline void AutoCAD::IAcadDimAngular::PutDimensionLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_DimensionLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(816)
inline _bstr_t AutoCAD::IAcadDimAngular::GetExtLine1Linetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtLine1Linetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(817)
inline void AutoCAD::IAcadDimAngular::PutExtLine1Linetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_ExtLine1Linetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(818)
inline _bstr_t AutoCAD::IAcadDimAngular::GetExtLine2Linetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtLine2Linetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(819)
inline void AutoCAD::IAcadDimAngular::PutExtLine2Linetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_ExtLine2Linetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(820)
inline VARIANT_BOOL AutoCAD::IAcadDimAngular::GetExtLineFixedLenSuppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLineFixedLenSuppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(821)
inline void AutoCAD::IAcadDimAngular::PutExtLineFixedLenSuppress ( VARIANT_BOOL bFixedLen ) {
    HRESULT _hr = put_ExtLineFixedLenSuppress(bFixedLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(822)
inline double AutoCAD::IAcadDimAngular::GetExtLineFixedLen ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtLineFixedLen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(823)
inline void AutoCAD::IAcadDimAngular::PutExtLineFixedLen ( double FixedLen ) {
    HRESULT _hr = put_ExtLineFixedLen(FixedLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(824)
inline VARIANT_BOOL AutoCAD::IAcadDimAngular::GetDimConstrForm ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimConstrForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(825)
inline void AutoCAD::IAcadDimAngular::PutDimConstrForm ( VARIANT_BOOL bIsDynamic ) {
    HRESULT _hr = put_DimConstrForm(bIsDynamic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(826)
inline VARIANT_BOOL AutoCAD::IAcadDimAngular::GetDimConstrReference ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimConstrReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(827)
inline void AutoCAD::IAcadDimAngular::PutDimConstrReference ( VARIANT_BOOL bIsReference ) {
    HRESULT _hr = put_DimConstrReference(bIsReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(828)
inline _bstr_t AutoCAD::IAcadDimAngular::GetDimConstrName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(829)
inline void AutoCAD::IAcadDimAngular::PutDimConstrName ( _bstr_t bstrName ) {
    HRESULT _hr = put_DimConstrName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(830)
inline _bstr_t AutoCAD::IAcadDimAngular::GetDimConstrExpression ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrExpression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(831)
inline void AutoCAD::IAcadDimAngular::PutDimConstrExpression ( _bstr_t bstrExpression ) {
    HRESULT _hr = put_DimConstrExpression(bstrExpression);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(832)
inline _bstr_t AutoCAD::IAcadDimAngular::GetDimConstrValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(833)
inline void AutoCAD::IAcadDimAngular::PutDimConstrValue ( _bstr_t Value ) {
    HRESULT _hr = put_DimConstrValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(834)
inline _bstr_t AutoCAD::IAcadDimAngular::GetDimConstrDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(835)
inline void AutoCAD::IAcadDimAngular::PutDimConstrDesc ( _bstr_t bstrDescription ) {
    HRESULT _hr = put_DimConstrDesc(bstrDescription);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadDimDiametric wrapper method implementations
//

#pragma implementation_key(836)
inline void AutoCAD::IAcadDimDiametric::PutLeaderLength ( double _arg1 ) {
    HRESULT _hr = put_LeaderLength(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(837)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetAltUnits ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(838)
inline void AutoCAD::IAcadDimDiametric::PutAltUnits ( VARIANT_BOOL bAlternate ) {
    HRESULT _hr = put_AltUnits(bAlternate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(839)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimDiametric::GetAltUnitsPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_AltUnitsPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(840)
inline void AutoCAD::IAcadDimDiametric::PutAltUnitsPrecision ( enum AcDimPrecision precision ) {
    HRESULT _hr = put_AltUnitsPrecision(precision);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(841)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimDiametric::GetAltUnitsScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_AltUnitsScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(842)
inline void AutoCAD::IAcadDimDiametric::PutAltUnitsScale ( ACAD_NOUNITS scale ) {
    HRESULT _hr = put_AltUnitsScale(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(843)
inline double AutoCAD::IAcadDimDiametric::GetAltRoundDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_AltRoundDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(844)
inline void AutoCAD::IAcadDimDiametric::PutAltRoundDistance ( double Distance ) {
    HRESULT _hr = put_AltRoundDistance(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(845)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimDiametric::GetAltTolerancePrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_AltTolerancePrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(846)
inline void AutoCAD::IAcadDimDiametric::PutAltTolerancePrecision ( enum AcDimPrecision Distance ) {
    HRESULT _hr = put_AltTolerancePrecision(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(847)
inline enum AutoCAD::AcDimUnits AutoCAD::IAcadDimDiametric::GetAltUnitsFormat ( ) {
    enum AcDimUnits _result;
    HRESULT _hr = get_AltUnitsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(848)
inline void AutoCAD::IAcadDimDiametric::PutAltUnitsFormat ( enum AcDimUnits Units ) {
    HRESULT _hr = put_AltUnitsFormat(Units);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(849)
inline _bstr_t AutoCAD::IAcadDimDiametric::GetAltTextPrefix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTextPrefix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(850)
inline void AutoCAD::IAcadDimDiametric::PutAltTextPrefix ( _bstr_t prefix ) {
    HRESULT _hr = put_AltTextPrefix(prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(851)
inline _bstr_t AutoCAD::IAcadDimDiametric::GetAltTextSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTextSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(852)
inline void AutoCAD::IAcadDimDiametric::PutAltTextSuffix ( _bstr_t prefix ) {
    HRESULT _hr = put_AltTextSuffix(prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(853)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDimDiametric::GetDimensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_DimensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(854)
inline void AutoCAD::IAcadDimDiametric::PutDimensionLineColor ( ACAD_COLOR Type ) {
    HRESULT _hr = put_DimensionLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(855)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimDiametric::GetPrimaryUnitsPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_PrimaryUnitsPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(856)
inline void AutoCAD::IAcadDimDiametric::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec ) {
    HRESULT _hr = put_PrimaryUnitsPrecision(Prec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(857)
inline enum AutoCAD::AcDimFractionType AutoCAD::IAcadDimDiametric::GetFractionFormat ( ) {
    enum AcDimFractionType _result;
    HRESULT _hr = get_FractionFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(858)
inline void AutoCAD::IAcadDimDiametric::PutFractionFormat ( enum AcDimFractionType Type ) {
    HRESULT _hr = put_FractionFormat(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(859)
inline enum AutoCAD::AcDimFit AutoCAD::IAcadDimDiametric::GetFit ( ) {
    enum AcDimFit _result;
    HRESULT _hr = get_Fit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(860)
inline void AutoCAD::IAcadDimDiametric::PutFit ( enum AcDimFit fittype ) {
    HRESULT _hr = put_Fit(fittype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(861)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimDiametric::GetLinearScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_LinearScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(862)
inline void AutoCAD::IAcadDimDiametric::PutLinearScaleFactor ( ACAD_NOUNITS Type ) {
    HRESULT _hr = put_LinearScaleFactor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(863)
inline enum AutoCAD::AcDimLUnits AutoCAD::IAcadDimDiametric::GetUnitsFormat ( ) {
    enum AcDimLUnits _result;
    HRESULT _hr = get_UnitsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(864)
inline void AutoCAD::IAcadDimDiametric::PutUnitsFormat ( enum AcDimLUnits format ) {
    HRESULT _hr = put_UnitsFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(865)
inline double AutoCAD::IAcadDimDiametric::GetRoundDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_RoundDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(866)
inline void AutoCAD::IAcadDimDiametric::PutRoundDistance ( double Distance ) {
    HRESULT _hr = put_RoundDistance(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(867)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetDimLine1Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLine1Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(868)
inline void AutoCAD::IAcadDimDiametric::PutDimLine1Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_DimLine1Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(869)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetDimLine2Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLine2Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(870)
inline void AutoCAD::IAcadDimDiametric::PutDimLine2Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_DimLine2Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(871)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetTextInsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(872)
inline void AutoCAD::IAcadDimDiametric::PutTextInsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(873)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetTextInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(874)
inline void AutoCAD::IAcadDimDiametric::PutTextInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(875)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetForceLineInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForceLineInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(876)
inline void AutoCAD::IAcadDimDiametric::PutForceLineInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_ForceLineInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(877)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetTextOutsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextOutsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(878)
inline void AutoCAD::IAcadDimDiametric::PutTextOutsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextOutsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(879)
inline enum AutoCAD::AcDimCenterType AutoCAD::IAcadDimDiametric::GetCenterType ( ) {
    enum AcDimCenterType _result;
    HRESULT _hr = get_CenterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(880)
inline void AutoCAD::IAcadDimDiametric::PutCenterType ( enum AcDimCenterType Type ) {
    HRESULT _hr = put_CenterType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(881)
inline double AutoCAD::IAcadDimDiametric::GetCenterMarkSize ( ) {
    double _result = 0;
    HRESULT _hr = get_CenterMarkSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(882)
inline void AutoCAD::IAcadDimDiametric::PutCenterMarkSize ( double Type ) {
    HRESULT _hr = put_CenterMarkSize(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(883)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetAltSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(884)
inline void AutoCAD::IAcadDimDiametric::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(885)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetAltSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(886)
inline void AutoCAD::IAcadDimDiametric::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(887)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetAltSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(888)
inline void AutoCAD::IAcadDimDiametric::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(889)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetAltSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(890)
inline void AutoCAD::IAcadDimDiametric::PutAltSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(891)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetAltToleranceSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(892)
inline void AutoCAD::IAcadDimDiametric::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(893)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetAltToleranceSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(894)
inline void AutoCAD::IAcadDimDiametric::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(895)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetAltToleranceSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(896)
inline void AutoCAD::IAcadDimDiametric::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(897)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetAltToleranceSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(898)
inline void AutoCAD::IAcadDimDiametric::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(899)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(900)
inline void AutoCAD::IAcadDimDiametric::PutSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(901)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(902)
inline void AutoCAD::IAcadDimDiametric::PutSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(903)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetToleranceSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(904)
inline void AutoCAD::IAcadDimDiametric::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(905)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetToleranceSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(906)
inline void AutoCAD::IAcadDimDiametric::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(907)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadDimDiametric::GetDimensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_DimensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(908)
inline void AutoCAD::IAcadDimDiametric::PutDimensionLineWeight ( ACAD_LWEIGHT weight ) {
    HRESULT _hr = put_DimensionLineWeight(weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(909)
inline double AutoCAD::IAcadDimDiametric::GetArrowheadSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowheadSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(910)
inline void AutoCAD::IAcadDimDiametric::PutArrowheadSize ( double size ) {
    HRESULT _hr = put_ArrowheadSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(911)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadDimDiametric::GetArrowhead1Type ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_Arrowhead1Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(912)
inline void AutoCAD::IAcadDimDiametric::PutArrowhead1Type ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_Arrowhead1Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(913)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadDimDiametric::GetArrowhead2Type ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_Arrowhead2Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(914)
inline void AutoCAD::IAcadDimDiametric::PutArrowhead2Type ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_Arrowhead2Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(915)
inline double AutoCAD::IAcadDimDiametric::GetMeasurement ( ) {
    double _result = 0;
    HRESULT _hr = get_Measurement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(916)
inline _bstr_t AutoCAD::IAcadDimDiametric::GetArrowhead1Block ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Arrowhead1Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(917)
inline void AutoCAD::IAcadDimDiametric::PutArrowhead1Block ( _bstr_t BlockName ) {
    HRESULT _hr = put_Arrowhead1Block(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(918)
inline _bstr_t AutoCAD::IAcadDimDiametric::GetArrowhead2Block ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Arrowhead2Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(919)
inline void AutoCAD::IAcadDimDiametric::PutArrowhead2Block ( _bstr_t BlockName ) {
    HRESULT _hr = put_Arrowhead2Block(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(920)
inline _bstr_t AutoCAD::IAcadDimDiametric::GetDimensionLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimensionLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(921)
inline void AutoCAD::IAcadDimDiametric::PutDimensionLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_DimensionLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(922)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetDimConstrForm ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimConstrForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(923)
inline void AutoCAD::IAcadDimDiametric::PutDimConstrForm ( VARIANT_BOOL bIsDynamic ) {
    HRESULT _hr = put_DimConstrForm(bIsDynamic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(924)
inline VARIANT_BOOL AutoCAD::IAcadDimDiametric::GetDimConstrReference ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimConstrReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(925)
inline void AutoCAD::IAcadDimDiametric::PutDimConstrReference ( VARIANT_BOOL bIsReference ) {
    HRESULT _hr = put_DimConstrReference(bIsReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(926)
inline _bstr_t AutoCAD::IAcadDimDiametric::GetDimConstrName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(927)
inline void AutoCAD::IAcadDimDiametric::PutDimConstrName ( _bstr_t bstrName ) {
    HRESULT _hr = put_DimConstrName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(928)
inline _bstr_t AutoCAD::IAcadDimDiametric::GetDimConstrExpression ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrExpression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(929)
inline void AutoCAD::IAcadDimDiametric::PutDimConstrExpression ( _bstr_t bstrExpression ) {
    HRESULT _hr = put_DimConstrExpression(bstrExpression);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(930)
inline _bstr_t AutoCAD::IAcadDimDiametric::GetDimConstrValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(931)
inline void AutoCAD::IAcadDimDiametric::PutDimConstrValue ( _bstr_t Value ) {
    HRESULT _hr = put_DimConstrValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(932)
inline _bstr_t AutoCAD::IAcadDimDiametric::GetDimConstrDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(933)
inline void AutoCAD::IAcadDimDiametric::PutDimConstrDesc ( _bstr_t bstrDescription ) {
    HRESULT _hr = put_DimConstrDesc(bstrDescription);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadDimRotated wrapper method implementations
//

#pragma implementation_key(934)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetAltUnits ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(935)
inline void AutoCAD::IAcadDimRotated::PutAltUnits ( VARIANT_BOOL bAlternate ) {
    HRESULT _hr = put_AltUnits(bAlternate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(936)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimRotated::GetAltUnitsPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_AltUnitsPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(937)
inline void AutoCAD::IAcadDimRotated::PutAltUnitsPrecision ( enum AcDimPrecision precision ) {
    HRESULT _hr = put_AltUnitsPrecision(precision);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(938)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimRotated::GetAltUnitsScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_AltUnitsScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(939)
inline void AutoCAD::IAcadDimRotated::PutAltUnitsScale ( ACAD_NOUNITS scale ) {
    HRESULT _hr = put_AltUnitsScale(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(940)
inline double AutoCAD::IAcadDimRotated::GetAltRoundDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_AltRoundDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(941)
inline void AutoCAD::IAcadDimRotated::PutAltRoundDistance ( double Distance ) {
    HRESULT _hr = put_AltRoundDistance(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(942)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimRotated::GetAltTolerancePrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_AltTolerancePrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(943)
inline void AutoCAD::IAcadDimRotated::PutAltTolerancePrecision ( enum AcDimPrecision Distance ) {
    HRESULT _hr = put_AltTolerancePrecision(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(944)
inline enum AutoCAD::AcDimUnits AutoCAD::IAcadDimRotated::GetAltUnitsFormat ( ) {
    enum AcDimUnits _result;
    HRESULT _hr = get_AltUnitsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(945)
inline void AutoCAD::IAcadDimRotated::PutAltUnitsFormat ( enum AcDimUnits Units ) {
    HRESULT _hr = put_AltUnitsFormat(Units);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(946)
inline _bstr_t AutoCAD::IAcadDimRotated::GetAltTextPrefix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTextPrefix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(947)
inline void AutoCAD::IAcadDimRotated::PutAltTextPrefix ( _bstr_t prefix ) {
    HRESULT _hr = put_AltTextPrefix(prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(948)
inline _bstr_t AutoCAD::IAcadDimRotated::GetAltTextSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTextSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(949)
inline void AutoCAD::IAcadDimRotated::PutAltTextSuffix ( _bstr_t prefix ) {
    HRESULT _hr = put_AltTextSuffix(prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(950)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDimRotated::GetDimensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_DimensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(951)
inline void AutoCAD::IAcadDimRotated::PutDimensionLineColor ( ACAD_COLOR Type ) {
    HRESULT _hr = put_DimensionLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(952)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDimRotated::GetExtensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_ExtensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(953)
inline void AutoCAD::IAcadDimRotated::PutExtensionLineColor ( ACAD_COLOR Type ) {
    HRESULT _hr = put_ExtensionLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(954)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimRotated::GetPrimaryUnitsPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_PrimaryUnitsPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(955)
inline void AutoCAD::IAcadDimRotated::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec ) {
    HRESULT _hr = put_PrimaryUnitsPrecision(Prec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(956)
inline double AutoCAD::IAcadDimRotated::GetDimensionLineExtend ( ) {
    double _result = 0;
    HRESULT _hr = get_DimensionLineExtend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(957)
inline void AutoCAD::IAcadDimRotated::PutDimensionLineExtend ( double extend ) {
    HRESULT _hr = put_DimensionLineExtend(extend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(958)
inline double AutoCAD::IAcadDimRotated::GetExtensionLineExtend ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtensionLineExtend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(959)
inline void AutoCAD::IAcadDimRotated::PutExtensionLineExtend ( double extend ) {
    HRESULT _hr = put_ExtensionLineExtend(extend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(960)
inline enum AutoCAD::AcDimFit AutoCAD::IAcadDimRotated::GetFit ( ) {
    enum AcDimFit _result;
    HRESULT _hr = get_Fit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(961)
inline void AutoCAD::IAcadDimRotated::PutFit ( enum AcDimFit fittype ) {
    HRESULT _hr = put_Fit(fittype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(962)
inline enum AutoCAD::AcDimFractionType AutoCAD::IAcadDimRotated::GetFractionFormat ( ) {
    enum AcDimFractionType _result;
    HRESULT _hr = get_FractionFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(963)
inline void AutoCAD::IAcadDimRotated::PutFractionFormat ( enum AcDimFractionType Type ) {
    HRESULT _hr = put_FractionFormat(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(964)
inline enum AutoCAD::AcDimHorizontalJustification AutoCAD::IAcadDimRotated::GetHorizontalTextPosition ( ) {
    enum AcDimHorizontalJustification _result;
    HRESULT _hr = get_HorizontalTextPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(965)
inline void AutoCAD::IAcadDimRotated::PutHorizontalTextPosition ( enum AcDimHorizontalJustification Type ) {
    HRESULT _hr = put_HorizontalTextPosition(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(966)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimRotated::GetLinearScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_LinearScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(967)
inline void AutoCAD::IAcadDimRotated::PutLinearScaleFactor ( ACAD_NOUNITS Type ) {
    HRESULT _hr = put_LinearScaleFactor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(968)
inline enum AutoCAD::AcDimLUnits AutoCAD::IAcadDimRotated::GetUnitsFormat ( ) {
    enum AcDimLUnits _result;
    HRESULT _hr = get_UnitsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(969)
inline void AutoCAD::IAcadDimRotated::PutUnitsFormat ( enum AcDimLUnits format ) {
    HRESULT _hr = put_UnitsFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(970)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadDimRotated::GetExtensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_ExtensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(971)
inline void AutoCAD::IAcadDimRotated::PutExtensionLineWeight ( ACAD_LWEIGHT lweight ) {
    HRESULT _hr = put_ExtensionLineWeight(lweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(972)
inline double AutoCAD::IAcadDimRotated::GetRoundDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_RoundDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(973)
inline void AutoCAD::IAcadDimRotated::PutRoundDistance ( double Distance ) {
    HRESULT _hr = put_RoundDistance(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(974)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetDimLine1Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLine1Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(975)
inline void AutoCAD::IAcadDimRotated::PutDimLine1Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_DimLine1Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(976)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetDimLine2Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLine2Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(977)
inline void AutoCAD::IAcadDimRotated::PutDimLine2Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_DimLine2Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(978)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetExtLine1Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLine1Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(979)
inline void AutoCAD::IAcadDimRotated::PutExtLine1Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_ExtLine1Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(980)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetExtLine2Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLine2Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(981)
inline void AutoCAD::IAcadDimRotated::PutExtLine2Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_ExtLine2Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(982)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetDimLineInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLineInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(983)
inline void AutoCAD::IAcadDimRotated::PutDimLineInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_DimLineInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(984)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetTextInsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(985)
inline void AutoCAD::IAcadDimRotated::PutTextInsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(986)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetTextInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(987)
inline void AutoCAD::IAcadDimRotated::PutTextInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(988)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetForceLineInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForceLineInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(989)
inline void AutoCAD::IAcadDimRotated::PutForceLineInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_ForceLineInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(990)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetTextOutsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextOutsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(991)
inline void AutoCAD::IAcadDimRotated::PutTextOutsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextOutsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(992)
inline double AutoCAD::IAcadDimRotated::GetExtensionLineOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtensionLineOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(993)
inline void AutoCAD::IAcadDimRotated::PutExtensionLineOffset ( double Offset ) {
    HRESULT _hr = put_ExtensionLineOffset(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(994)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetAltSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(995)
inline void AutoCAD::IAcadDimRotated::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(996)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetAltSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(997)
inline void AutoCAD::IAcadDimRotated::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(998)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetAltSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(999)
inline void AutoCAD::IAcadDimRotated::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1000)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetAltSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1001)
inline void AutoCAD::IAcadDimRotated::PutAltSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1002)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetAltToleranceSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1003)
inline void AutoCAD::IAcadDimRotated::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1004)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetAltToleranceSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1005)
inline void AutoCAD::IAcadDimRotated::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1006)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetAltToleranceSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1007)
inline void AutoCAD::IAcadDimRotated::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1008)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetAltToleranceSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1009)
inline void AutoCAD::IAcadDimRotated::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1010)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1011)
inline void AutoCAD::IAcadDimRotated::PutSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1012)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1013)
inline void AutoCAD::IAcadDimRotated::PutSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1014)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetToleranceSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1015)
inline void AutoCAD::IAcadDimRotated::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1016)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetToleranceSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1017)
inline void AutoCAD::IAcadDimRotated::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1018)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadDimRotated::GetDimensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_DimensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1019)
inline void AutoCAD::IAcadDimRotated::PutDimensionLineWeight ( ACAD_LWEIGHT weight ) {
    HRESULT _hr = put_DimensionLineWeight(weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1020)
inline double AutoCAD::IAcadDimRotated::GetArrowheadSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowheadSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1021)
inline void AutoCAD::IAcadDimRotated::PutArrowheadSize ( double size ) {
    HRESULT _hr = put_ArrowheadSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1022)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadDimRotated::GetArrowhead1Type ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_Arrowhead1Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1023)
inline void AutoCAD::IAcadDimRotated::PutArrowhead1Type ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_Arrowhead1Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1024)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadDimRotated::GetArrowhead2Type ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_Arrowhead2Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1025)
inline void AutoCAD::IAcadDimRotated::PutArrowhead2Type ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_Arrowhead2Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1026)
inline double AutoCAD::IAcadDimRotated::GetMeasurement ( ) {
    double _result = 0;
    HRESULT _hr = get_Measurement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1027)
inline _bstr_t AutoCAD::IAcadDimRotated::GetArrowhead1Block ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Arrowhead1Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1028)
inline void AutoCAD::IAcadDimRotated::PutArrowhead1Block ( _bstr_t BlockName ) {
    HRESULT _hr = put_Arrowhead1Block(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1029)
inline _bstr_t AutoCAD::IAcadDimRotated::GetArrowhead2Block ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Arrowhead2Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1030)
inline void AutoCAD::IAcadDimRotated::PutArrowhead2Block ( _bstr_t BlockName ) {
    HRESULT _hr = put_Arrowhead2Block(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1031)
inline _bstr_t AutoCAD::IAcadDimRotated::GetDimensionLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimensionLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1032)
inline void AutoCAD::IAcadDimRotated::PutDimensionLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_DimensionLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1033)
inline _bstr_t AutoCAD::IAcadDimRotated::GetExtLine1Linetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtLine1Linetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1034)
inline void AutoCAD::IAcadDimRotated::PutExtLine1Linetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_ExtLine1Linetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1035)
inline _bstr_t AutoCAD::IAcadDimRotated::GetExtLine2Linetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtLine2Linetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1036)
inline void AutoCAD::IAcadDimRotated::PutExtLine2Linetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_ExtLine2Linetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1037)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetExtLineFixedLenSuppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLineFixedLenSuppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1038)
inline void AutoCAD::IAcadDimRotated::PutExtLineFixedLenSuppress ( VARIANT_BOOL bFixedLen ) {
    HRESULT _hr = put_ExtLineFixedLenSuppress(bFixedLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1039)
inline double AutoCAD::IAcadDimRotated::GetExtLineFixedLen ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtLineFixedLen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1040)
inline void AutoCAD::IAcadDimRotated::PutExtLineFixedLen ( double FixedLen ) {
    HRESULT _hr = put_ExtLineFixedLen(FixedLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1041)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetDimConstrForm ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimConstrForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1042)
inline void AutoCAD::IAcadDimRotated::PutDimConstrForm ( VARIANT_BOOL bIsDynamic ) {
    HRESULT _hr = put_DimConstrForm(bIsDynamic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1043)
inline VARIANT_BOOL AutoCAD::IAcadDimRotated::GetDimConstrReference ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimConstrReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1044)
inline void AutoCAD::IAcadDimRotated::PutDimConstrReference ( VARIANT_BOOL bIsReference ) {
    HRESULT _hr = put_DimConstrReference(bIsReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1045)
inline _bstr_t AutoCAD::IAcadDimRotated::GetDimConstrName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1046)
inline void AutoCAD::IAcadDimRotated::PutDimConstrName ( _bstr_t bstrName ) {
    HRESULT _hr = put_DimConstrName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1047)
inline _bstr_t AutoCAD::IAcadDimRotated::GetDimConstrExpression ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrExpression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1048)
inline void AutoCAD::IAcadDimRotated::PutDimConstrExpression ( _bstr_t bstrExpression ) {
    HRESULT _hr = put_DimConstrExpression(bstrExpression);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1049)
inline _bstr_t AutoCAD::IAcadDimRotated::GetDimConstrValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1050)
inline void AutoCAD::IAcadDimRotated::PutDimConstrValue ( _bstr_t Value ) {
    HRESULT _hr = put_DimConstrValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1051)
inline _bstr_t AutoCAD::IAcadDimRotated::GetDimConstrDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1052)
inline void AutoCAD::IAcadDimRotated::PutDimConstrDesc ( _bstr_t bstrDescription ) {
    HRESULT _hr = put_DimConstrDesc(bstrDescription);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1053)
inline _bstr_t AutoCAD::IAcadDimRotated::GetSubUnitsSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubUnitsSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1054)
inline void AutoCAD::IAcadDimRotated::PutSubUnitsSuffix ( _bstr_t suffix ) {
    HRESULT _hr = put_SubUnitsSuffix(suffix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1055)
inline double AutoCAD::IAcadDimRotated::GetSubUnitsFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_SubUnitsFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1056)
inline void AutoCAD::IAcadDimRotated::PutSubUnitsFactor ( double factor ) {
    HRESULT _hr = put_SubUnitsFactor(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1057)
inline _bstr_t AutoCAD::IAcadDimRotated::GetAltSubUnitsSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltSubUnitsSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1058)
inline void AutoCAD::IAcadDimRotated::PutAltSubUnitsSuffix ( _bstr_t suffix ) {
    HRESULT _hr = put_AltSubUnitsSuffix(suffix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1059)
inline double AutoCAD::IAcadDimRotated::GetAltSubUnitsFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_AltSubUnitsFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1060)
inline void AutoCAD::IAcadDimRotated::PutAltSubUnitsFactor ( double factor ) {
    HRESULT _hr = put_AltSubUnitsFactor(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadDimOrdinate wrapper method implementations
//

#pragma implementation_key(1061)
inline VARIANT_BOOL AutoCAD::IAcadDimOrdinate::GetAltUnits ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1062)
inline void AutoCAD::IAcadDimOrdinate::PutAltUnits ( VARIANT_BOOL bAlternate ) {
    HRESULT _hr = put_AltUnits(bAlternate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1063)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimOrdinate::GetAltUnitsPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_AltUnitsPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1064)
inline void AutoCAD::IAcadDimOrdinate::PutAltUnitsPrecision ( enum AcDimPrecision precision ) {
    HRESULT _hr = put_AltUnitsPrecision(precision);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1065)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimOrdinate::GetAltUnitsScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_AltUnitsScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1066)
inline void AutoCAD::IAcadDimOrdinate::PutAltUnitsScale ( ACAD_NOUNITS scale ) {
    HRESULT _hr = put_AltUnitsScale(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1067)
inline double AutoCAD::IAcadDimOrdinate::GetAltRoundDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_AltRoundDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1068)
inline void AutoCAD::IAcadDimOrdinate::PutAltRoundDistance ( double Distance ) {
    HRESULT _hr = put_AltRoundDistance(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1069)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimOrdinate::GetAltTolerancePrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_AltTolerancePrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1070)
inline void AutoCAD::IAcadDimOrdinate::PutAltTolerancePrecision ( enum AcDimPrecision Distance ) {
    HRESULT _hr = put_AltTolerancePrecision(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1071)
inline enum AutoCAD::AcDimUnits AutoCAD::IAcadDimOrdinate::GetAltUnitsFormat ( ) {
    enum AcDimUnits _result;
    HRESULT _hr = get_AltUnitsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1072)
inline void AutoCAD::IAcadDimOrdinate::PutAltUnitsFormat ( enum AcDimUnits Units ) {
    HRESULT _hr = put_AltUnitsFormat(Units);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1073)
inline _bstr_t AutoCAD::IAcadDimOrdinate::GetAltTextPrefix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTextPrefix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1074)
inline void AutoCAD::IAcadDimOrdinate::PutAltTextPrefix ( _bstr_t prefix ) {
    HRESULT _hr = put_AltTextPrefix(prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1075)
inline _bstr_t AutoCAD::IAcadDimOrdinate::GetAltTextSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTextSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1076)
inline void AutoCAD::IAcadDimOrdinate::PutAltTextSuffix ( _bstr_t prefix ) {
    HRESULT _hr = put_AltTextSuffix(prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1077)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDimOrdinate::GetExtensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_ExtensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1078)
inline void AutoCAD::IAcadDimOrdinate::PutExtensionLineColor ( ACAD_COLOR Type ) {
    HRESULT _hr = put_ExtensionLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1079)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimOrdinate::GetPrimaryUnitsPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_PrimaryUnitsPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1080)
inline void AutoCAD::IAcadDimOrdinate::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec ) {
    HRESULT _hr = put_PrimaryUnitsPrecision(Prec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1081)
inline enum AutoCAD::AcDimFractionType AutoCAD::IAcadDimOrdinate::GetFractionFormat ( ) {
    enum AcDimFractionType _result;
    HRESULT _hr = get_FractionFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1082)
inline void AutoCAD::IAcadDimOrdinate::PutFractionFormat ( enum AcDimFractionType Type ) {
    HRESULT _hr = put_FractionFormat(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1083)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimOrdinate::GetLinearScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_LinearScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1084)
inline void AutoCAD::IAcadDimOrdinate::PutLinearScaleFactor ( ACAD_NOUNITS Type ) {
    HRESULT _hr = put_LinearScaleFactor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1085)
inline enum AutoCAD::AcDimLUnits AutoCAD::IAcadDimOrdinate::GetUnitsFormat ( ) {
    enum AcDimLUnits _result;
    HRESULT _hr = get_UnitsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1086)
inline void AutoCAD::IAcadDimOrdinate::PutUnitsFormat ( enum AcDimLUnits format ) {
    HRESULT _hr = put_UnitsFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1087)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadDimOrdinate::GetExtensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_ExtensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1088)
inline void AutoCAD::IAcadDimOrdinate::PutExtensionLineWeight ( ACAD_LWEIGHT lweight ) {
    HRESULT _hr = put_ExtensionLineWeight(lweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1089)
inline double AutoCAD::IAcadDimOrdinate::GetRoundDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_RoundDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1090)
inline void AutoCAD::IAcadDimOrdinate::PutRoundDistance ( double Distance ) {
    HRESULT _hr = put_RoundDistance(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1091)
inline double AutoCAD::IAcadDimOrdinate::GetExtensionLineOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtensionLineOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1092)
inline void AutoCAD::IAcadDimOrdinate::PutExtensionLineOffset ( double Offset ) {
    HRESULT _hr = put_ExtensionLineOffset(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1093)
inline VARIANT_BOOL AutoCAD::IAcadDimOrdinate::GetAltSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1094)
inline void AutoCAD::IAcadDimOrdinate::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1095)
inline VARIANT_BOOL AutoCAD::IAcadDimOrdinate::GetAltSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1096)
inline void AutoCAD::IAcadDimOrdinate::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1097)
inline VARIANT_BOOL AutoCAD::IAcadDimOrdinate::GetAltSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1098)
inline void AutoCAD::IAcadDimOrdinate::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1099)
inline VARIANT_BOOL AutoCAD::IAcadDimOrdinate::GetAltSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1100)
inline void AutoCAD::IAcadDimOrdinate::PutAltSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1101)
inline VARIANT_BOOL AutoCAD::IAcadDimOrdinate::GetAltToleranceSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1102)
inline void AutoCAD::IAcadDimOrdinate::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1103)
inline VARIANT_BOOL AutoCAD::IAcadDimOrdinate::GetAltToleranceSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1104)
inline void AutoCAD::IAcadDimOrdinate::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1105)
inline VARIANT_BOOL AutoCAD::IAcadDimOrdinate::GetAltToleranceSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1106)
inline void AutoCAD::IAcadDimOrdinate::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1107)
inline VARIANT_BOOL AutoCAD::IAcadDimOrdinate::GetAltToleranceSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1108)
inline void AutoCAD::IAcadDimOrdinate::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1109)
inline VARIANT_BOOL AutoCAD::IAcadDimOrdinate::GetSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1110)
inline void AutoCAD::IAcadDimOrdinate::PutSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1111)
inline VARIANT_BOOL AutoCAD::IAcadDimOrdinate::GetSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1112)
inline void AutoCAD::IAcadDimOrdinate::PutSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1113)
inline VARIANT_BOOL AutoCAD::IAcadDimOrdinate::GetToleranceSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1114)
inline void AutoCAD::IAcadDimOrdinate::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1115)
inline VARIANT_BOOL AutoCAD::IAcadDimOrdinate::GetToleranceSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1116)
inline void AutoCAD::IAcadDimOrdinate::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1117)
inline double AutoCAD::IAcadDimOrdinate::GetArrowheadSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowheadSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1118)
inline void AutoCAD::IAcadDimOrdinate::PutArrowheadSize ( double size ) {
    HRESULT _hr = put_ArrowheadSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1119)
inline double AutoCAD::IAcadDimOrdinate::GetMeasurement ( ) {
    double _result = 0;
    HRESULT _hr = get_Measurement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1120)
inline VARIANT_BOOL AutoCAD::IAcadDimOrdinate::GetExtLineFixedLenSuppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLineFixedLenSuppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1121)
inline void AutoCAD::IAcadDimOrdinate::PutExtLineFixedLenSuppress ( VARIANT_BOOL bFixedLen ) {
    HRESULT _hr = put_ExtLineFixedLenSuppress(bFixedLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1122)
inline double AutoCAD::IAcadDimOrdinate::GetExtLineFixedLen ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtLineFixedLen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1123)
inline void AutoCAD::IAcadDimOrdinate::PutExtLineFixedLen ( double FixedLen ) {
    HRESULT _hr = put_ExtLineFixedLen(FixedLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1124)
inline _bstr_t AutoCAD::IAcadDimOrdinate::GetSubUnitsSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubUnitsSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1125)
inline void AutoCAD::IAcadDimOrdinate::PutSubUnitsSuffix ( _bstr_t suffix ) {
    HRESULT _hr = put_SubUnitsSuffix(suffix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1126)
inline double AutoCAD::IAcadDimOrdinate::GetSubUnitsFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_SubUnitsFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1127)
inline void AutoCAD::IAcadDimOrdinate::PutSubUnitsFactor ( double factor ) {
    HRESULT _hr = put_SubUnitsFactor(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1128)
inline _bstr_t AutoCAD::IAcadDimOrdinate::GetAltSubUnitsSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltSubUnitsSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1129)
inline void AutoCAD::IAcadDimOrdinate::PutAltSubUnitsSuffix ( _bstr_t suffix ) {
    HRESULT _hr = put_AltSubUnitsSuffix(suffix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1130)
inline double AutoCAD::IAcadDimOrdinate::GetAltSubUnitsFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_AltSubUnitsFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1131)
inline void AutoCAD::IAcadDimOrdinate::PutAltSubUnitsFactor ( double factor ) {
    HRESULT _hr = put_AltSubUnitsFactor(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadDimRadial wrapper method implementations
//

#pragma implementation_key(1132)
inline void AutoCAD::IAcadDimRadial::PutLeaderLength ( double _arg1 ) {
    HRESULT _hr = put_LeaderLength(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1133)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetAltUnits ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1134)
inline void AutoCAD::IAcadDimRadial::PutAltUnits ( VARIANT_BOOL bAlternate ) {
    HRESULT _hr = put_AltUnits(bAlternate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1135)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimRadial::GetAltUnitsPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_AltUnitsPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1136)
inline void AutoCAD::IAcadDimRadial::PutAltUnitsPrecision ( enum AcDimPrecision precision ) {
    HRESULT _hr = put_AltUnitsPrecision(precision);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1137)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimRadial::GetAltUnitsScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_AltUnitsScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1138)
inline void AutoCAD::IAcadDimRadial::PutAltUnitsScale ( ACAD_NOUNITS scale ) {
    HRESULT _hr = put_AltUnitsScale(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1139)
inline double AutoCAD::IAcadDimRadial::GetAltRoundDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_AltRoundDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1140)
inline void AutoCAD::IAcadDimRadial::PutAltRoundDistance ( double Distance ) {
    HRESULT _hr = put_AltRoundDistance(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1141)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimRadial::GetAltTolerancePrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_AltTolerancePrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1142)
inline void AutoCAD::IAcadDimRadial::PutAltTolerancePrecision ( enum AcDimPrecision Distance ) {
    HRESULT _hr = put_AltTolerancePrecision(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1143)
inline enum AutoCAD::AcDimUnits AutoCAD::IAcadDimRadial::GetAltUnitsFormat ( ) {
    enum AcDimUnits _result;
    HRESULT _hr = get_AltUnitsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1144)
inline void AutoCAD::IAcadDimRadial::PutAltUnitsFormat ( enum AcDimUnits Units ) {
    HRESULT _hr = put_AltUnitsFormat(Units);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1145)
inline _bstr_t AutoCAD::IAcadDimRadial::GetAltTextPrefix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTextPrefix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1146)
inline void AutoCAD::IAcadDimRadial::PutAltTextPrefix ( _bstr_t prefix ) {
    HRESULT _hr = put_AltTextPrefix(prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1147)
inline _bstr_t AutoCAD::IAcadDimRadial::GetAltTextSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTextSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1148)
inline void AutoCAD::IAcadDimRadial::PutAltTextSuffix ( _bstr_t prefix ) {
    HRESULT _hr = put_AltTextSuffix(prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1149)
inline enum AutoCAD::AcDimCenterType AutoCAD::IAcadDimRadial::GetCenterType ( ) {
    enum AcDimCenterType _result;
    HRESULT _hr = get_CenterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1150)
inline void AutoCAD::IAcadDimRadial::PutCenterType ( enum AcDimCenterType Type ) {
    HRESULT _hr = put_CenterType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1151)
inline double AutoCAD::IAcadDimRadial::GetCenterMarkSize ( ) {
    double _result = 0;
    HRESULT _hr = get_CenterMarkSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1152)
inline void AutoCAD::IAcadDimRadial::PutCenterMarkSize ( double Type ) {
    HRESULT _hr = put_CenterMarkSize(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1153)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDimRadial::GetDimensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_DimensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1154)
inline void AutoCAD::IAcadDimRadial::PutDimensionLineColor ( ACAD_COLOR Type ) {
    HRESULT _hr = put_DimensionLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1155)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimRadial::GetPrimaryUnitsPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_PrimaryUnitsPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1156)
inline void AutoCAD::IAcadDimRadial::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec ) {
    HRESULT _hr = put_PrimaryUnitsPrecision(Prec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1157)
inline enum AutoCAD::AcDimFractionType AutoCAD::IAcadDimRadial::GetFractionFormat ( ) {
    enum AcDimFractionType _result;
    HRESULT _hr = get_FractionFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1158)
inline void AutoCAD::IAcadDimRadial::PutFractionFormat ( enum AcDimFractionType Type ) {
    HRESULT _hr = put_FractionFormat(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1159)
inline enum AutoCAD::AcDimFit AutoCAD::IAcadDimRadial::GetFit ( ) {
    enum AcDimFit _result;
    HRESULT _hr = get_Fit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1160)
inline void AutoCAD::IAcadDimRadial::PutFit ( enum AcDimFit fittype ) {
    HRESULT _hr = put_Fit(fittype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1161)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimRadial::GetLinearScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_LinearScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1162)
inline void AutoCAD::IAcadDimRadial::PutLinearScaleFactor ( ACAD_NOUNITS Type ) {
    HRESULT _hr = put_LinearScaleFactor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1163)
inline enum AutoCAD::AcDimLUnits AutoCAD::IAcadDimRadial::GetUnitsFormat ( ) {
    enum AcDimLUnits _result;
    HRESULT _hr = get_UnitsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1164)
inline void AutoCAD::IAcadDimRadial::PutUnitsFormat ( enum AcDimLUnits format ) {
    HRESULT _hr = put_UnitsFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1165)
inline double AutoCAD::IAcadDimRadial::GetRoundDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_RoundDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1166)
inline void AutoCAD::IAcadDimRadial::PutRoundDistance ( double Distance ) {
    HRESULT _hr = put_RoundDistance(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1167)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetDimLineSuppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLineSuppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1168)
inline void AutoCAD::IAcadDimRadial::PutDimLineSuppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_DimLineSuppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1169)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetTextInsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1170)
inline void AutoCAD::IAcadDimRadial::PutTextInsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1171)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetTextInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1172)
inline void AutoCAD::IAcadDimRadial::PutTextInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1173)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetForceLineInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForceLineInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1174)
inline void AutoCAD::IAcadDimRadial::PutForceLineInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_ForceLineInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1175)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetTextOutsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextOutsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1176)
inline void AutoCAD::IAcadDimRadial::PutTextOutsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextOutsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1177)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetAltSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1178)
inline void AutoCAD::IAcadDimRadial::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1179)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetAltSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1180)
inline void AutoCAD::IAcadDimRadial::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1181)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetAltSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1182)
inline void AutoCAD::IAcadDimRadial::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1183)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetAltSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1184)
inline void AutoCAD::IAcadDimRadial::PutAltSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1185)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetAltToleranceSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1186)
inline void AutoCAD::IAcadDimRadial::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1187)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetAltToleranceSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1188)
inline void AutoCAD::IAcadDimRadial::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1189)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetAltToleranceSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1190)
inline void AutoCAD::IAcadDimRadial::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1191)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetAltToleranceSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1192)
inline void AutoCAD::IAcadDimRadial::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1193)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1194)
inline void AutoCAD::IAcadDimRadial::PutSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1195)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1196)
inline void AutoCAD::IAcadDimRadial::PutSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1197)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetToleranceSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1198)
inline void AutoCAD::IAcadDimRadial::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1199)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetToleranceSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1200)
inline void AutoCAD::IAcadDimRadial::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1201)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadDimRadial::GetDimensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_DimensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1202)
inline void AutoCAD::IAcadDimRadial::PutDimensionLineWeight ( ACAD_LWEIGHT weight ) {
    HRESULT _hr = put_DimensionLineWeight(weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1203)
inline double AutoCAD::IAcadDimRadial::GetArrowheadSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowheadSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1204)
inline void AutoCAD::IAcadDimRadial::PutArrowheadSize ( double size ) {
    HRESULT _hr = put_ArrowheadSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1205)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadDimRadial::GetArrowheadType ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_ArrowheadType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1206)
inline void AutoCAD::IAcadDimRadial::PutArrowheadType ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_ArrowheadType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1207)
inline double AutoCAD::IAcadDimRadial::GetMeasurement ( ) {
    double _result = 0;
    HRESULT _hr = get_Measurement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1208)
inline _bstr_t AutoCAD::IAcadDimRadial::GetArrowheadBlock ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ArrowheadBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1209)
inline void AutoCAD::IAcadDimRadial::PutArrowheadBlock ( _bstr_t BlockName ) {
    HRESULT _hr = put_ArrowheadBlock(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1210)
inline _bstr_t AutoCAD::IAcadDimRadial::GetDimensionLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimensionLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1211)
inline void AutoCAD::IAcadDimRadial::PutDimensionLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_DimensionLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1212)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetDimConstrForm ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimConstrForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1213)
inline void AutoCAD::IAcadDimRadial::PutDimConstrForm ( VARIANT_BOOL bIsDynamic ) {
    HRESULT _hr = put_DimConstrForm(bIsDynamic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1214)
inline VARIANT_BOOL AutoCAD::IAcadDimRadial::GetDimConstrReference ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimConstrReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1215)
inline void AutoCAD::IAcadDimRadial::PutDimConstrReference ( VARIANT_BOOL bIsReference ) {
    HRESULT _hr = put_DimConstrReference(bIsReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1216)
inline _bstr_t AutoCAD::IAcadDimRadial::GetDimConstrName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1217)
inline void AutoCAD::IAcadDimRadial::PutDimConstrName ( _bstr_t bstrName ) {
    HRESULT _hr = put_DimConstrName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1218)
inline _bstr_t AutoCAD::IAcadDimRadial::GetDimConstrExpression ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrExpression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1219)
inline void AutoCAD::IAcadDimRadial::PutDimConstrExpression ( _bstr_t bstrExpression ) {
    HRESULT _hr = put_DimConstrExpression(bstrExpression);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1220)
inline _bstr_t AutoCAD::IAcadDimRadial::GetDimConstrValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1221)
inline void AutoCAD::IAcadDimRadial::PutDimConstrValue ( _bstr_t Value ) {
    HRESULT _hr = put_DimConstrValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1222)
inline _bstr_t AutoCAD::IAcadDimRadial::GetDimConstrDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1223)
inline void AutoCAD::IAcadDimRadial::PutDimConstrDesc ( _bstr_t bstrDescription ) {
    HRESULT _hr = put_DimConstrDesc(bstrDescription);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadEllipse wrapper method implementations
//

#pragma implementation_key(1224)
inline _variant_t AutoCAD::IAcadEllipse::GetStartPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1225)
inline _variant_t AutoCAD::IAcadEllipse::GetCenter ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1226)
inline void AutoCAD::IAcadEllipse::PutCenter ( const _variant_t & Center ) {
    HRESULT _hr = put_Center(Center);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1227)
inline _variant_t AutoCAD::IAcadEllipse::GetEndPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EndPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1228)
inline double AutoCAD::IAcadEllipse::GetMajorRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1229)
inline void AutoCAD::IAcadEllipse::PutMajorRadius ( double MajorRadius ) {
    HRESULT _hr = put_MajorRadius(MajorRadius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1230)
inline double AutoCAD::IAcadEllipse::GetMinorRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1231)
inline void AutoCAD::IAcadEllipse::PutMinorRadius ( double MinorRadius ) {
    HRESULT _hr = put_MinorRadius(MinorRadius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1232)
inline double AutoCAD::IAcadEllipse::GetRadiusRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1233)
inline void AutoCAD::IAcadEllipse::PutRadiusRatio ( double RadiusRatio ) {
    HRESULT _hr = put_RadiusRatio(RadiusRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1234)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadEllipse::GetStartAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_StartAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1235)
inline void AutoCAD::IAcadEllipse::PutStartAngle ( ACAD_ANGLE StartAngle ) {
    HRESULT _hr = put_StartAngle(StartAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1236)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadEllipse::GetEndAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_EndAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1237)
inline void AutoCAD::IAcadEllipse::PutEndAngle ( ACAD_ANGLE EndAngle ) {
    HRESULT _hr = put_EndAngle(EndAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1238)
inline double AutoCAD::IAcadEllipse::GetStartParameter ( ) {
    double _result = 0;
    HRESULT _hr = get_StartParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1239)
inline void AutoCAD::IAcadEllipse::PutStartParameter ( double StartParameter ) {
    HRESULT _hr = put_StartParameter(StartParameter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1240)
inline double AutoCAD::IAcadEllipse::GetEndParameter ( ) {
    double _result = 0;
    HRESULT _hr = get_EndParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1241)
inline void AutoCAD::IAcadEllipse::PutEndParameter ( double EndParameter ) {
    HRESULT _hr = put_EndParameter(EndParameter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1242)
inline _variant_t AutoCAD::IAcadEllipse::GetMajorAxis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1243)
inline void AutoCAD::IAcadEllipse::PutMajorAxis ( const _variant_t & MajorAxis ) {
    HRESULT _hr = put_MajorAxis(MajorAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1244)
inline _variant_t AutoCAD::IAcadEllipse::GetMinorAxis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1245)
inline _variant_t AutoCAD::IAcadEllipse::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1246)
inline void AutoCAD::IAcadEllipse::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1247)
inline double AutoCAD::IAcadEllipse::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1248)
inline _variant_t AutoCAD::IAcadEllipse::Offset ( double Distance ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Offset(Distance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IAcadLeader wrapper method implementations
//

#pragma implementation_key(1249)
inline _variant_t AutoCAD::IAcadLeader::GetCoordinates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1250)
inline void AutoCAD::IAcadLeader::PutCoordinates ( const _variant_t & Coordinates ) {
    HRESULT _hr = put_Coordinates(Coordinates);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1251)
inline _variant_t AutoCAD::IAcadLeader::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1252)
inline _bstr_t AutoCAD::IAcadLeader::GetStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1253)
inline void AutoCAD::IAcadLeader::PutStyleName ( _bstr_t bstrName ) {
    HRESULT _hr = put_StyleName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1254)
inline enum AutoCAD::AcLeaderType AutoCAD::IAcadLeader::GetType ( ) {
    enum AcLeaderType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1255)
inline void AutoCAD::IAcadLeader::PutType ( enum AcLeaderType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1256)
inline HRESULT AutoCAD::IAcadLeader::Evaluate ( ) {
    HRESULT _hr = raw_Evaluate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1257)
inline _variant_t AutoCAD::IAcadLeader::GetCoordinate ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinate(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1258)
inline void AutoCAD::IAcadLeader::PutCoordinate ( int Index, const _variant_t & pVal ) {
    HRESULT _hr = put_Coordinate(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1259)
inline AutoCAD::IAcadEntityPtr AutoCAD::IAcadLeader::GetAnnotation ( ) {
    struct IAcadEntity * _result = 0;
    HRESULT _hr = get_Annotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadEntityPtr(_result, false);
}

#pragma implementation_key(1260)
inline void AutoCAD::IAcadLeader::PutAnnotation ( struct IAcadEntity * pVal ) {
    HRESULT _hr = put_Annotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1261)
inline double AutoCAD::IAcadLeader::GetArrowheadSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowheadSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1262)
inline void AutoCAD::IAcadLeader::PutArrowheadSize ( double size ) {
    HRESULT _hr = put_ArrowheadSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1263)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadLeader::GetArrowheadType ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_ArrowheadType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1264)
inline void AutoCAD::IAcadLeader::PutArrowheadType ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_ArrowheadType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1265)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadLeader::GetDimensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_DimensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1266)
inline void AutoCAD::IAcadLeader::PutDimensionLineColor ( ACAD_COLOR Type ) {
    HRESULT _hr = put_DimensionLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1267)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadLeader::GetDimensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_DimensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1268)
inline void AutoCAD::IAcadLeader::PutDimensionLineWeight ( ACAD_LWEIGHT weight ) {
    HRESULT _hr = put_DimensionLineWeight(weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1269)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadLeader::GetScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_ScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1270)
inline void AutoCAD::IAcadLeader::PutScaleFactor ( ACAD_NOUNITS factor ) {
    HRESULT _hr = put_ScaleFactor(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1271)
inline enum AutoCAD::AcDimVerticalJustification AutoCAD::IAcadLeader::GetVerticalTextPosition ( ) {
    enum AcDimVerticalJustification _result;
    HRESULT _hr = get_VerticalTextPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1272)
inline void AutoCAD::IAcadLeader::PutVerticalTextPosition ( enum AcDimVerticalJustification Type ) {
    HRESULT _hr = put_VerticalTextPosition(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1273)
inline double AutoCAD::IAcadLeader::GetTextGap ( ) {
    double _result = 0;
    HRESULT _hr = get_TextGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1274)
inline void AutoCAD::IAcadLeader::PutTextGap ( double Offset ) {
    HRESULT _hr = put_TextGap(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1275)
inline _bstr_t AutoCAD::IAcadLeader::GetArrowheadBlock ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ArrowheadBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1276)
inline void AutoCAD::IAcadLeader::PutArrowheadBlock ( _bstr_t BlockName ) {
    HRESULT _hr = put_ArrowheadBlock(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadMText wrapper method implementations
//

#pragma implementation_key(1277)
inline _bstr_t AutoCAD::IAcadMText::GetTextString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1278)
inline void AutoCAD::IAcadMText::PutTextString ( _bstr_t bstrText ) {
    HRESULT _hr = put_TextString(bstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1279)
inline _bstr_t AutoCAD::IAcadMText::GetStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1280)
inline void AutoCAD::IAcadMText::PutStyleName ( _bstr_t bstrName ) {
    HRESULT _hr = put_StyleName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1281)
inline enum AutoCAD::AcAttachmentPoint AutoCAD::IAcadMText::GetAttachmentPoint ( ) {
    enum AcAttachmentPoint _result;
    HRESULT _hr = get_AttachmentPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1282)
inline void AutoCAD::IAcadMText::PutAttachmentPoint ( enum AcAttachmentPoint attPoint ) {
    HRESULT _hr = put_AttachmentPoint(attPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1283)
inline enum AutoCAD::AcDrawingDirection AutoCAD::IAcadMText::GetDrawingDirection ( ) {
    enum AcDrawingDirection _result;
    HRESULT _hr = get_DrawingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1284)
inline void AutoCAD::IAcadMText::PutDrawingDirection ( enum AcDrawingDirection drawDir ) {
    HRESULT _hr = put_DrawingDirection(drawDir);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1285)
inline double AutoCAD::IAcadMText::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1286)
inline void AutoCAD::IAcadMText::PutWidth ( double Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1287)
inline double AutoCAD::IAcadMText::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1288)
inline void AutoCAD::IAcadMText::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1289)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadMText::GetRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1290)
inline void AutoCAD::IAcadMText::PutRotation ( ACAD_ANGLE rotAngle ) {
    HRESULT _hr = put_Rotation(rotAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1291)
inline _variant_t AutoCAD::IAcadMText::GetInsertionPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InsertionPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1292)
inline void AutoCAD::IAcadMText::PutInsertionPoint ( const _variant_t & insPoint ) {
    HRESULT _hr = put_InsertionPoint(insPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1293)
inline _variant_t AutoCAD::IAcadMText::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1294)
inline void AutoCAD::IAcadMText::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1295)
inline double AutoCAD::IAcadMText::GetLineSpacingFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_LineSpacingFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1296)
inline void AutoCAD::IAcadMText::PutLineSpacingFactor ( double factor ) {
    HRESULT _hr = put_LineSpacingFactor(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1297)
inline enum AutoCAD::AcLineSpacingStyle AutoCAD::IAcadMText::GetLineSpacingStyle ( ) {
    enum AcLineSpacingStyle _result;
    HRESULT _hr = get_LineSpacingStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1298)
inline void AutoCAD::IAcadMText::PutLineSpacingStyle ( enum AcLineSpacingStyle style ) {
    HRESULT _hr = put_LineSpacingStyle(style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1299)
inline double AutoCAD::IAcadMText::GetLineSpacingDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_LineSpacingDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1300)
inline void AutoCAD::IAcadMText::PutLineSpacingDistance ( double Value ) {
    HRESULT _hr = put_LineSpacingDistance(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1301)
inline VARIANT_BOOL AutoCAD::IAcadMText::GetBackgroundFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BackgroundFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1302)
inline void AutoCAD::IAcadMText::PutBackgroundFill ( VARIANT_BOOL bUseBackgroundFill ) {
    HRESULT _hr = put_BackgroundFill(bUseBackgroundFill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1303)
inline _bstr_t AutoCAD::IAcadMText::FieldCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FieldCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAcadPoint wrapper method implementations
//

#pragma implementation_key(1304)
inline _variant_t AutoCAD::IAcadPoint::GetCoordinates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1305)
inline void AutoCAD::IAcadPoint::PutCoordinates ( const _variant_t & Coordinates ) {
    HRESULT _hr = put_Coordinates(Coordinates);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1306)
inline _variant_t AutoCAD::IAcadPoint::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1307)
inline void AutoCAD::IAcadPoint::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1308)
inline double AutoCAD::IAcadPoint::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1309)
inline void AutoCAD::IAcadPoint::PutThickness ( double Thickness ) {
    HRESULT _hr = put_Thickness(Thickness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadLWPolyline wrapper method implementations
//

#pragma implementation_key(1310)
inline _variant_t AutoCAD::IAcadLWPolyline::GetCoordinates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1311)
inline void AutoCAD::IAcadLWPolyline::PutCoordinates ( const _variant_t & Coordinates ) {
    HRESULT _hr = put_Coordinates(Coordinates);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1312)
inline _variant_t AutoCAD::IAcadLWPolyline::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1313)
inline void AutoCAD::IAcadLWPolyline::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1314)
inline double AutoCAD::IAcadLWPolyline::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1315)
inline void AutoCAD::IAcadLWPolyline::PutThickness ( double Thickness ) {
    HRESULT _hr = put_Thickness(Thickness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1316)
inline HRESULT AutoCAD::IAcadLWPolyline::AddVertex ( int Index, const _variant_t & vertex ) {
    HRESULT _hr = raw_AddVertex(Index, vertex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1317)
inline _variant_t AutoCAD::IAcadLWPolyline::Explode ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Explode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1318)
inline double AutoCAD::IAcadLWPolyline::GetBulge ( int Index ) {
    double _result = 0;
    HRESULT _hr = raw_GetBulge(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1319)
inline HRESULT AutoCAD::IAcadLWPolyline::SetBulge ( int Index, double bulge ) {
    HRESULT _hr = raw_SetBulge(Index, bulge);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1320)
inline HRESULT AutoCAD::IAcadLWPolyline::GetWidth ( int Index, double * StartWidth, double * EndWidth ) {
    HRESULT _hr = raw_GetWidth(Index, StartWidth, EndWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1321)
inline HRESULT AutoCAD::IAcadLWPolyline::SetWidth ( int Index, double StartWidth, double EndWidth ) {
    HRESULT _hr = raw_SetWidth(Index, StartWidth, EndWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1322)
inline double AutoCAD::IAcadLWPolyline::GetConstantWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_ConstantWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1323)
inline void AutoCAD::IAcadLWPolyline::PutConstantWidth ( double Width ) {
    HRESULT _hr = put_ConstantWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1324)
inline _variant_t AutoCAD::IAcadLWPolyline::Offset ( double Distance ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Offset(Distance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1325)
inline double AutoCAD::IAcadLWPolyline::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1326)
inline void AutoCAD::IAcadLWPolyline::PutElevation ( double Elevation ) {
    HRESULT _hr = put_Elevation(Elevation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1327)
inline double AutoCAD::IAcadLWPolyline::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1328)
inline _variant_t AutoCAD::IAcadLWPolyline::GetCoordinate ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinate(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1329)
inline void AutoCAD::IAcadLWPolyline::PutCoordinate ( int Index, const _variant_t & pVal ) {
    HRESULT _hr = put_Coordinate(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1330)
inline VARIANT_BOOL AutoCAD::IAcadLWPolyline::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1331)
inline void AutoCAD::IAcadLWPolyline::PutClosed ( VARIANT_BOOL fClose ) {
    HRESULT _hr = put_Closed(fClose);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1332)
inline VARIANT_BOOL AutoCAD::IAcadLWPolyline::GetLinetypeGeneration ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LinetypeGeneration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1333)
inline void AutoCAD::IAcadLWPolyline::PutLinetypeGeneration ( VARIANT_BOOL bLinetypeGen ) {
    HRESULT _hr = put_LinetypeGeneration(bLinetypeGen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1334)
inline double AutoCAD::IAcadLWPolyline::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadPolyline wrapper method implementations
//

#pragma implementation_key(1335)
inline _variant_t AutoCAD::IAcadPolyline::GetCoordinates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1336)
inline void AutoCAD::IAcadPolyline::PutCoordinates ( const _variant_t & Coordinates ) {
    HRESULT _hr = put_Coordinates(Coordinates);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1337)
inline _variant_t AutoCAD::IAcadPolyline::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1338)
inline void AutoCAD::IAcadPolyline::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1339)
inline double AutoCAD::IAcadPolyline::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1340)
inline void AutoCAD::IAcadPolyline::PutThickness ( double Thickness ) {
    HRESULT _hr = put_Thickness(Thickness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1341)
inline HRESULT AutoCAD::IAcadPolyline::AppendVertex ( const _variant_t & vertex ) {
    HRESULT _hr = raw_AppendVertex(vertex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1342)
inline _variant_t AutoCAD::IAcadPolyline::Explode ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Explode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1343)
inline double AutoCAD::IAcadPolyline::GetBulge ( int Index ) {
    double _result = 0;
    HRESULT _hr = raw_GetBulge(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1344)
inline HRESULT AutoCAD::IAcadPolyline::SetBulge ( int Index, double bulge ) {
    HRESULT _hr = raw_SetBulge(Index, bulge);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1345)
inline HRESULT AutoCAD::IAcadPolyline::GetWidth ( int Index, double * StartWidth, double * EndWidth ) {
    HRESULT _hr = raw_GetWidth(Index, StartWidth, EndWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1346)
inline HRESULT AutoCAD::IAcadPolyline::SetWidth ( int Index, double StartWidth, double EndWidth ) {
    HRESULT _hr = raw_SetWidth(Index, StartWidth, EndWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1347)
inline double AutoCAD::IAcadPolyline::GetConstantWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_ConstantWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1348)
inline void AutoCAD::IAcadPolyline::PutConstantWidth ( double Width ) {
    HRESULT _hr = put_ConstantWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1349)
inline _variant_t AutoCAD::IAcadPolyline::Offset ( double Distance ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Offset(Distance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1350)
inline double AutoCAD::IAcadPolyline::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1351)
inline void AutoCAD::IAcadPolyline::PutElevation ( double Elevation ) {
    HRESULT _hr = put_Elevation(Elevation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1352)
inline enum AutoCAD::AcPolylineType AutoCAD::IAcadPolyline::GetType ( ) {
    enum AcPolylineType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1353)
inline void AutoCAD::IAcadPolyline::PutType ( enum AcPolylineType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1354)
inline VARIANT_BOOL AutoCAD::IAcadPolyline::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1355)
inline void AutoCAD::IAcadPolyline::PutClosed ( VARIANT_BOOL fClose ) {
    HRESULT _hr = put_Closed(fClose);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1356)
inline VARIANT_BOOL AutoCAD::IAcadPolyline::GetLinetypeGeneration ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LinetypeGeneration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1357)
inline void AutoCAD::IAcadPolyline::PutLinetypeGeneration ( VARIANT_BOOL bLinetypeGen ) {
    HRESULT _hr = put_LinetypeGeneration(bLinetypeGen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1358)
inline double AutoCAD::IAcadPolyline::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1359)
inline _variant_t AutoCAD::IAcadPolyline::GetCoordinate ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinate(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1360)
inline void AutoCAD::IAcadPolyline::PutCoordinate ( int Index, const _variant_t & pVal ) {
    HRESULT _hr = put_Coordinate(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1361)
inline double AutoCAD::IAcadPolyline::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadRay wrapper method implementations
//

#pragma implementation_key(1362)
inline _variant_t AutoCAD::IAcadRay::GetBasePoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BasePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1363)
inline void AutoCAD::IAcadRay::PutBasePoint ( const _variant_t & BasePoint ) {
    HRESULT _hr = put_BasePoint(BasePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1364)
inline _variant_t AutoCAD::IAcadRay::GetSecondPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SecondPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1365)
inline void AutoCAD::IAcadRay::PutSecondPoint ( const _variant_t & SecondPoint ) {
    HRESULT _hr = put_SecondPoint(SecondPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1366)
inline _variant_t AutoCAD::IAcadRay::GetDirectionVector ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DirectionVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1367)
inline void AutoCAD::IAcadRay::PutDirectionVector ( const _variant_t & dirVector ) {
    HRESULT _hr = put_DirectionVector(dirVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadShape wrapper method implementations
//

#pragma implementation_key(1368)
inline _variant_t AutoCAD::IAcadShape::GetInsertionPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InsertionPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1369)
inline void AutoCAD::IAcadShape::PutInsertionPoint ( const _variant_t & insPoint ) {
    HRESULT _hr = put_InsertionPoint(insPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1370)
inline _bstr_t AutoCAD::IAcadShape::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1371)
inline void AutoCAD::IAcadShape::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1372)
inline double AutoCAD::IAcadShape::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1373)
inline void AutoCAD::IAcadShape::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1374)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadShape::GetRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1375)
inline void AutoCAD::IAcadShape::PutRotation ( ACAD_ANGLE rotAngle ) {
    HRESULT _hr = put_Rotation(rotAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1376)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadShape::GetScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_ScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1377)
inline void AutoCAD::IAcadShape::PutScaleFactor ( ACAD_NOUNITS scalFactor ) {
    HRESULT _hr = put_ScaleFactor(scalFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1378)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadShape::GetObliqueAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_ObliqueAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1379)
inline void AutoCAD::IAcadShape::PutObliqueAngle ( ACAD_ANGLE obliAngle ) {
    HRESULT _hr = put_ObliqueAngle(obliAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1380)
inline _variant_t AutoCAD::IAcadShape::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1381)
inline void AutoCAD::IAcadShape::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1382)
inline double AutoCAD::IAcadShape::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1383)
inline void AutoCAD::IAcadShape::PutThickness ( double Thickness ) {
    HRESULT _hr = put_Thickness(Thickness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadSolid wrapper method implementations
//

#pragma implementation_key(1384)
inline _variant_t AutoCAD::IAcadSolid::GetCoordinates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1385)
inline void AutoCAD::IAcadSolid::PutCoordinates ( const _variant_t & corners ) {
    HRESULT _hr = put_Coordinates(corners);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1386)
inline _variant_t AutoCAD::IAcadSolid::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1387)
inline void AutoCAD::IAcadSolid::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1388)
inline double AutoCAD::IAcadSolid::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1389)
inline void AutoCAD::IAcadSolid::PutThickness ( double Thickness ) {
    HRESULT _hr = put_Thickness(Thickness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1390)
inline _variant_t AutoCAD::IAcadSolid::GetCoordinate ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinate(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1391)
inline void AutoCAD::IAcadSolid::PutCoordinate ( int Index, const _variant_t & pVal ) {
    HRESULT _hr = put_Coordinate(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadSpline wrapper method implementations
//

#pragma implementation_key(1392)
inline long AutoCAD::IAcadSpline::GetNumberOfControlPoints ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfControlPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1393)
inline _variant_t AutoCAD::IAcadSpline::GetControlPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ControlPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1394)
inline void AutoCAD::IAcadSpline::PutControlPoints ( const _variant_t & controlPoint ) {
    HRESULT _hr = put_ControlPoints(controlPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1395)
inline long AutoCAD::IAcadSpline::GetNumberOfFitPoints ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfFitPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1396)
inline _variant_t AutoCAD::IAcadSpline::GetFitPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FitPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1397)
inline void AutoCAD::IAcadSpline::PutFitPoints ( const _variant_t & fitPoint ) {
    HRESULT _hr = put_FitPoints(fitPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1398)
inline long AutoCAD::IAcadSpline::GetDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_Degree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1399)
inline VARIANT_BOOL AutoCAD::IAcadSpline::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1400)
inline VARIANT_BOOL AutoCAD::IAcadSpline::GetIsPlanar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlanar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1401)
inline VARIANT_BOOL AutoCAD::IAcadSpline::GetIsRational ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRational(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1402)
inline VARIANT_BOOL AutoCAD::IAcadSpline::GetIsPeriodic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPeriodic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1403)
inline _variant_t AutoCAD::IAcadSpline::GetStartTangent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTangent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1404)
inline void AutoCAD::IAcadSpline::PutStartTangent ( const _variant_t & StartTangent ) {
    HRESULT _hr = put_StartTangent(StartTangent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1405)
inline _variant_t AutoCAD::IAcadSpline::GetEndTangent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EndTangent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1406)
inline void AutoCAD::IAcadSpline::PutEndTangent ( const _variant_t & EndTangent ) {
    HRESULT _hr = put_EndTangent(EndTangent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1407)
inline double AutoCAD::IAcadSpline::GetFitTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_FitTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1408)
inline void AutoCAD::IAcadSpline::PutFitTolerance ( double fitTol ) {
    HRESULT _hr = put_FitTolerance(fitTol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1409)
inline double AutoCAD::IAcadSpline::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1410)
inline HRESULT AutoCAD::IAcadSpline::SetControlPoint ( int Index, const _variant_t & controlPoint ) {
    HRESULT _hr = raw_SetControlPoint(Index, controlPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1411)
inline _variant_t AutoCAD::IAcadSpline::GetControlPoint ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetControlPoint(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1412)
inline HRESULT AutoCAD::IAcadSpline::SetFitPoint ( int Index, const _variant_t & fitPoint ) {
    HRESULT _hr = raw_SetFitPoint(Index, fitPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1413)
inline _variant_t AutoCAD::IAcadSpline::GetFitPoint ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetFitPoint(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1414)
inline HRESULT AutoCAD::IAcadSpline::SetWeight ( int Index, double weight ) {
    HRESULT _hr = raw_SetWeight(Index, weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1415)
inline double AutoCAD::IAcadSpline::GetWeight ( int Index ) {
    double _result = 0;
    HRESULT _hr = raw_GetWeight(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1416)
inline HRESULT AutoCAD::IAcadSpline::AddFitPoint ( int Index, const _variant_t & fitPoint ) {
    HRESULT _hr = raw_AddFitPoint(Index, fitPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1417)
inline HRESULT AutoCAD::IAcadSpline::DeleteFitPoint ( int Index ) {
    HRESULT _hr = raw_DeleteFitPoint(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1418)
inline HRESULT AutoCAD::IAcadSpline::ElevateOrder ( int Order ) {
    HRESULT _hr = raw_ElevateOrder(Order);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1419)
inline _variant_t AutoCAD::IAcadSpline::Offset ( double Distance ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Offset(Distance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1420)
inline HRESULT AutoCAD::IAcadSpline::PurgeFitData ( ) {
    HRESULT _hr = raw_PurgeFitData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1421)
inline HRESULT AutoCAD::IAcadSpline::Reverse ( ) {
    HRESULT _hr = raw_Reverse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1422)
inline _variant_t AutoCAD::IAcadSpline::GetKnots ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Knots(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1423)
inline void AutoCAD::IAcadSpline::PutKnots ( const _variant_t & KnotValues ) {
    HRESULT _hr = put_Knots(KnotValues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1424)
inline _variant_t AutoCAD::IAcadSpline::GetWeights ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Weights(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1425)
inline void AutoCAD::IAcadSpline::PutWeights ( const _variant_t & WeightValues ) {
    HRESULT _hr = put_Weights(WeightValues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1426)
inline enum AutoCAD::AcSplineKnotParameterizationType AutoCAD::IAcadSpline::GetKnotParameterization ( ) {
    enum AcSplineKnotParameterizationType _result;
    HRESULT _hr = get_KnotParameterization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1427)
inline void AutoCAD::IAcadSpline::PutKnotParameterization ( enum AcSplineKnotParameterizationType knotParamVal ) {
    HRESULT _hr = put_KnotParameterization(knotParamVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1428)
inline enum AutoCAD::AcSplineFrameType AutoCAD::IAcadSpline::GetSplineFrame ( ) {
    enum AcSplineFrameType _result;
    HRESULT _hr = get_SplineFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1429)
inline void AutoCAD::IAcadSpline::PutSplineFrame ( enum AcSplineFrameType show ) {
    HRESULT _hr = put_SplineFrame(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1430)
inline enum AutoCAD::AcSplineMethodType AutoCAD::IAcadSpline::GetSplineMethod ( ) {
    enum AcSplineMethodType _result;
    HRESULT _hr = get_SplineMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1431)
inline void AutoCAD::IAcadSpline::PutSplineMethod ( enum AcSplineMethodType method ) {
    HRESULT _hr = put_SplineMethod(method);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1432)
inline void AutoCAD::IAcadSpline::PutDegree2 ( long Degree ) {
    HRESULT _hr = put_Degree2(Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1433)
inline long AutoCAD::IAcadSpline::GetDegree2 ( ) {
    long _result = 0;
    HRESULT _hr = get_Degree2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1434)
inline void AutoCAD::IAcadSpline::PutClosed2 ( VARIANT_BOOL fClose ) {
    HRESULT _hr = put_Closed2(fClose);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1435)
inline VARIANT_BOOL AutoCAD::IAcadSpline::GetClosed2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadText wrapper method implementations
//

#pragma implementation_key(1436)
inline _bstr_t AutoCAD::IAcadText::GetTextString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1437)
inline void AutoCAD::IAcadText::PutTextString ( _bstr_t bstrText ) {
    HRESULT _hr = put_TextString(bstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1438)
inline _bstr_t AutoCAD::IAcadText::GetStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1439)
inline void AutoCAD::IAcadText::PutStyleName ( _bstr_t bstrName ) {
    HRESULT _hr = put_StyleName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1440)
inline enum AutoCAD::AcAlignment AutoCAD::IAcadText::GetAlignment ( ) {
    enum AcAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1441)
inline void AutoCAD::IAcadText::PutAlignment ( enum AcAlignment align ) {
    HRESULT _hr = put_Alignment(align);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1442)
inline enum AutoCAD::AcHorizontalAlignment AutoCAD::IAcadText::GetHorizontalAlignment ( ) {
    enum AcHorizontalAlignment _result;
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1443)
inline void AutoCAD::IAcadText::PutHorizontalAlignment ( enum AcHorizontalAlignment horizAlign ) {
    HRESULT _hr = put_HorizontalAlignment(horizAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1444)
inline enum AutoCAD::AcVerticalAlignment AutoCAD::IAcadText::GetVerticalAlignment ( ) {
    enum AcVerticalAlignment _result;
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1445)
inline void AutoCAD::IAcadText::PutVerticalAlignment ( enum AcVerticalAlignment vertiAlign ) {
    HRESULT _hr = put_VerticalAlignment(vertiAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1446)
inline double AutoCAD::IAcadText::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1447)
inline void AutoCAD::IAcadText::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1448)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadText::GetRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1449)
inline void AutoCAD::IAcadText::PutRotation ( ACAD_ANGLE rotAngle ) {
    HRESULT _hr = put_Rotation(rotAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1450)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadText::GetScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_ScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1451)
inline void AutoCAD::IAcadText::PutScaleFactor ( ACAD_NOUNITS scalFactor ) {
    HRESULT _hr = put_ScaleFactor(scalFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1452)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadText::GetObliqueAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_ObliqueAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1453)
inline void AutoCAD::IAcadText::PutObliqueAngle ( ACAD_ANGLE obliAngle ) {
    HRESULT _hr = put_ObliqueAngle(obliAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1454)
inline _variant_t AutoCAD::IAcadText::GetTextAlignmentPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TextAlignmentPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1455)
inline void AutoCAD::IAcadText::PutTextAlignmentPoint ( const _variant_t & alignPoint ) {
    HRESULT _hr = put_TextAlignmentPoint(alignPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1456)
inline _variant_t AutoCAD::IAcadText::GetInsertionPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InsertionPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1457)
inline void AutoCAD::IAcadText::PutInsertionPoint ( const _variant_t & insPoint ) {
    HRESULT _hr = put_InsertionPoint(insPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1458)
inline _variant_t AutoCAD::IAcadText::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1459)
inline void AutoCAD::IAcadText::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1460)
inline long AutoCAD::IAcadText::GetTextGenerationFlag ( ) {
    long _result = 0;
    HRESULT _hr = get_TextGenerationFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1461)
inline void AutoCAD::IAcadText::PutTextGenerationFlag ( long textGenFlag ) {
    HRESULT _hr = put_TextGenerationFlag(textGenFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1462)
inline double AutoCAD::IAcadText::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1463)
inline void AutoCAD::IAcadText::PutThickness ( double Thickness ) {
    HRESULT _hr = put_Thickness(Thickness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1464)
inline VARIANT_BOOL AutoCAD::IAcadText::GetUpsideDown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpsideDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1465)
inline void AutoCAD::IAcadText::PutUpsideDown ( VARIANT_BOOL UpsideDown ) {
    HRESULT _hr = put_UpsideDown(UpsideDown);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1466)
inline VARIANT_BOOL AutoCAD::IAcadText::GetBackward ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Backward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1467)
inline void AutoCAD::IAcadText::PutBackward ( VARIANT_BOOL Backward ) {
    HRESULT _hr = put_Backward(Backward);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1468)
inline _bstr_t AutoCAD::IAcadText::FieldCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FieldCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAcadTolerance wrapper method implementations
//

#pragma implementation_key(1469)
inline _variant_t AutoCAD::IAcadTolerance::GetDirectionVector ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DirectionVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1470)
inline void AutoCAD::IAcadTolerance::PutDirectionVector ( const _variant_t & dirVector ) {
    HRESULT _hr = put_DirectionVector(dirVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1471)
inline _variant_t AutoCAD::IAcadTolerance::GetInsertionPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InsertionPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1472)
inline void AutoCAD::IAcadTolerance::PutInsertionPoint ( const _variant_t & insPoint ) {
    HRESULT _hr = put_InsertionPoint(insPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1473)
inline _variant_t AutoCAD::IAcadTolerance::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1474)
inline void AutoCAD::IAcadTolerance::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1475)
inline _bstr_t AutoCAD::IAcadTolerance::GetStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1476)
inline void AutoCAD::IAcadTolerance::PutStyleName ( _bstr_t bstrName ) {
    HRESULT _hr = put_StyleName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1477)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadTolerance::GetTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1478)
inline void AutoCAD::IAcadTolerance::PutTextColor ( ACAD_COLOR color ) {
    HRESULT _hr = put_TextColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1479)
inline _bstr_t AutoCAD::IAcadTolerance::GetTextString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1480)
inline void AutoCAD::IAcadTolerance::PutTextString ( _bstr_t bstrText ) {
    HRESULT _hr = put_TextString(bstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1481)
inline _bstr_t AutoCAD::IAcadTolerance::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1482)
inline void AutoCAD::IAcadTolerance::PutTextStyle ( _bstr_t style ) {
    HRESULT _hr = put_TextStyle(style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1483)
inline double AutoCAD::IAcadTolerance::GetTextHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1484)
inline void AutoCAD::IAcadTolerance::PutTextHeight ( double Height ) {
    HRESULT _hr = put_TextHeight(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1485)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadTolerance::GetScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_ScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1486)
inline void AutoCAD::IAcadTolerance::PutScaleFactor ( ACAD_NOUNITS factor ) {
    HRESULT _hr = put_ScaleFactor(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1487)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadTolerance::GetDimensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_DimensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1488)
inline void AutoCAD::IAcadTolerance::PutDimensionLineColor ( ACAD_COLOR Type ) {
    HRESULT _hr = put_DimensionLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadTrace wrapper method implementations
//

#pragma implementation_key(1489)
inline _variant_t AutoCAD::IAcadTrace::GetCoordinates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1490)
inline void AutoCAD::IAcadTrace::PutCoordinates ( const _variant_t & corners ) {
    HRESULT _hr = put_Coordinates(corners);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1491)
inline _variant_t AutoCAD::IAcadTrace::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1492)
inline void AutoCAD::IAcadTrace::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1493)
inline double AutoCAD::IAcadTrace::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1494)
inline void AutoCAD::IAcadTrace::PutThickness ( double Thickness ) {
    HRESULT _hr = put_Thickness(Thickness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1495)
inline _variant_t AutoCAD::IAcadTrace::GetCoordinate ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinate(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1496)
inline void AutoCAD::IAcadTrace::PutCoordinate ( int Index, const _variant_t & pVal ) {
    HRESULT _hr = put_Coordinate(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadXline wrapper method implementations
//

#pragma implementation_key(1497)
inline _variant_t AutoCAD::IAcadXline::GetBasePoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BasePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1498)
inline void AutoCAD::IAcadXline::PutBasePoint ( const _variant_t & BasePoint ) {
    HRESULT _hr = put_BasePoint(BasePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1499)
inline _variant_t AutoCAD::IAcadXline::GetSecondPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SecondPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1500)
inline void AutoCAD::IAcadXline::PutSecondPoint ( const _variant_t & SecondPoint ) {
    HRESULT _hr = put_SecondPoint(SecondPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1501)
inline _variant_t AutoCAD::IAcadXline::GetDirectionVector ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DirectionVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1502)
inline void AutoCAD::IAcadXline::PutDirectionVector ( const _variant_t & dirVector ) {
    HRESULT _hr = put_DirectionVector(dirVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1503)
inline _variant_t AutoCAD::IAcadXline::Offset ( double Distance ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Offset(Distance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IAcadBlockReference wrapper method implementations
//

#pragma implementation_key(1504)
inline _variant_t AutoCAD::IAcadBlockReference::GetInsertionPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InsertionPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1505)
inline void AutoCAD::IAcadBlockReference::PutInsertionPoint ( const _variant_t & insPoint ) {
    HRESULT _hr = put_InsertionPoint(insPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1506)
inline _bstr_t AutoCAD::IAcadBlockReference::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1507)
inline void AutoCAD::IAcadBlockReference::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1508)
inline _variant_t AutoCAD::IAcadBlockReference::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1509)
inline void AutoCAD::IAcadBlockReference::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1510)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadBlockReference::GetRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1511)
inline void AutoCAD::IAcadBlockReference::PutRotation ( ACAD_ANGLE rotAngle ) {
    HRESULT _hr = put_Rotation(rotAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1512)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadBlockReference::GetXScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_XScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1513)
inline void AutoCAD::IAcadBlockReference::PutXScaleFactor ( ACAD_NOUNITS ScaleFactor ) {
    HRESULT _hr = put_XScaleFactor(ScaleFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1514)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadBlockReference::GetYScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_YScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1515)
inline void AutoCAD::IAcadBlockReference::PutYScaleFactor ( ACAD_NOUNITS ScaleFactor ) {
    HRESULT _hr = put_YScaleFactor(ScaleFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1516)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadBlockReference::GetZScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_ZScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1517)
inline void AutoCAD::IAcadBlockReference::PutZScaleFactor ( ACAD_NOUNITS ScaleFactor ) {
    HRESULT _hr = put_ZScaleFactor(ScaleFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1518)
inline _variant_t AutoCAD::IAcadBlockReference::Explode ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Explode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1519)
inline _variant_t AutoCAD::IAcadBlockReference::GetAttributes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1520)
inline _variant_t AutoCAD::IAcadBlockReference::GetConstantAttributes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetConstantAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1521)
inline VARIANT_BOOL AutoCAD::IAcadBlockReference::GetHasAttributes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1522)
inline _bstr_t AutoCAD::IAcadBlockReference::GetEffectiveName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EffectiveName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1523)
inline VARIANT_BOOL AutoCAD::IAcadBlockReference::GetIsDynamicBlock ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsDynamicBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1524)
inline _variant_t AutoCAD::IAcadBlockReference::GetDynamicBlockProperties ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetDynamicBlockProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1525)
inline HRESULT AutoCAD::IAcadBlockReference::ResetBlock ( ) {
    HRESULT _hr = raw_ResetBlock();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1526)
inline HRESULT AutoCAD::IAcadBlockReference::ConvertToAnonymousBlock ( ) {
    HRESULT _hr = raw_ConvertToAnonymousBlock();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1527)
inline HRESULT AutoCAD::IAcadBlockReference::ConvertToStaticBlock ( _bstr_t newBlockName ) {
    HRESULT _hr = raw_ConvertToStaticBlock(newBlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1528)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadBlockReference::GetXEffectiveScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_XEffectiveScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1529)
inline void AutoCAD::IAcadBlockReference::PutXEffectiveScaleFactor ( ACAD_NOUNITS ScaleFactor ) {
    HRESULT _hr = put_XEffectiveScaleFactor(ScaleFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1530)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadBlockReference::GetYEffectiveScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_YEffectiveScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1531)
inline void AutoCAD::IAcadBlockReference::PutYEffectiveScaleFactor ( ACAD_NOUNITS ScaleFactor ) {
    HRESULT _hr = put_YEffectiveScaleFactor(ScaleFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1532)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadBlockReference::GetZEffectiveScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_ZEffectiveScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1533)
inline void AutoCAD::IAcadBlockReference::PutZEffectiveScaleFactor ( ACAD_NOUNITS ScaleFactor ) {
    HRESULT _hr = put_ZEffectiveScaleFactor(ScaleFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1534)
inline _bstr_t AutoCAD::IAcadBlockReference::GetInsUnits ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InsUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1535)
inline double AutoCAD::IAcadBlockReference::GetInsUnitsFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_InsUnitsFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadHatch wrapper method implementations
//

#pragma implementation_key(1536)
inline _variant_t AutoCAD::IAcadHatch::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1537)
inline void AutoCAD::IAcadHatch::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1538)
inline long AutoCAD::IAcadHatch::GetNumberOfLoops ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfLoops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1539)
inline enum AutoCAD::AcPatternType AutoCAD::IAcadHatch::GetPatternType ( ) {
    enum AcPatternType _result;
    HRESULT _hr = get_PatternType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1540)
inline _bstr_t AutoCAD::IAcadHatch::GetPatternName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PatternName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1541)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadHatch::GetPatternAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_PatternAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1542)
inline void AutoCAD::IAcadHatch::PutPatternAngle ( ACAD_ANGLE PatternAngle ) {
    HRESULT _hr = put_PatternAngle(PatternAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1543)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadHatch::GetPatternScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_PatternScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1544)
inline void AutoCAD::IAcadHatch::PutPatternScale ( ACAD_NOUNITS PatternScale ) {
    HRESULT _hr = put_PatternScale(PatternScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1545)
inline double AutoCAD::IAcadHatch::GetPatternSpace ( ) {
    double _result = 0;
    HRESULT _hr = get_PatternSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1546)
inline void AutoCAD::IAcadHatch::PutPatternSpace ( double PatternSpace ) {
    HRESULT _hr = put_PatternSpace(PatternSpace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1547)
inline enum AutoCAD::AcISOPenWidth AutoCAD::IAcadHatch::GetISOPenWidth ( ) {
    enum AcISOPenWidth _result;
    HRESULT _hr = get_ISOPenWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1548)
inline void AutoCAD::IAcadHatch::PutISOPenWidth ( enum AcISOPenWidth penWidth ) {
    HRESULT _hr = put_ISOPenWidth(penWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1549)
inline VARIANT_BOOL AutoCAD::IAcadHatch::GetPatternDouble ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PatternDouble(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1550)
inline void AutoCAD::IAcadHatch::PutPatternDouble ( VARIANT_BOOL bDouble ) {
    HRESULT _hr = put_PatternDouble(bDouble);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1551)
inline double AutoCAD::IAcadHatch::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1552)
inline void AutoCAD::IAcadHatch::PutElevation ( double Elevation ) {
    HRESULT _hr = put_Elevation(Elevation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1553)
inline VARIANT_BOOL AutoCAD::IAcadHatch::GetAssociativeHatch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssociativeHatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1554)
inline void AutoCAD::IAcadHatch::PutAssociativeHatch ( VARIANT_BOOL fAssoc ) {
    HRESULT _hr = put_AssociativeHatch(fAssoc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1555)
inline enum AutoCAD::AcHatchStyle AutoCAD::IAcadHatch::GetHatchStyle ( ) {
    enum AcHatchStyle _result;
    HRESULT _hr = get_HatchStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1556)
inline void AutoCAD::IAcadHatch::PutHatchStyle ( enum AcHatchStyle HatchStyle ) {
    HRESULT _hr = put_HatchStyle(HatchStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1557)
inline HRESULT AutoCAD::IAcadHatch::SetPattern ( int PatternType, _bstr_t PatternName ) {
    HRESULT _hr = raw_SetPattern(PatternType, PatternName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1558)
inline HRESULT AutoCAD::IAcadHatch::AppendOuterLoop ( const _variant_t & ObjectArray ) {
    HRESULT _hr = raw_AppendOuterLoop(ObjectArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1559)
inline HRESULT AutoCAD::IAcadHatch::AppendInnerLoop ( const _variant_t & ObjectArray ) {
    HRESULT _hr = raw_AppendInnerLoop(ObjectArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1560)
inline HRESULT AutoCAD::IAcadHatch::InsertLoopAt ( int Index, enum AcLoopType LoopType, const _variant_t & ObjectArray ) {
    HRESULT _hr = raw_InsertLoopAt(Index, LoopType, ObjectArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1561)
inline HRESULT AutoCAD::IAcadHatch::GetLoopAt ( int Index, VARIANT * ObjectArray ) {
    HRESULT _hr = raw_GetLoopAt(Index, ObjectArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1562)
inline HRESULT AutoCAD::IAcadHatch::Evaluate ( ) {
    HRESULT _hr = raw_Evaluate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1563)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadHatch::GetGradientColor1 ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_GradientColor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(1564)
inline void AutoCAD::IAcadHatch::PutGradientColor1 ( struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = put_GradientColor1(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1565)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadHatch::GetGradientColor2 ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_GradientColor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(1566)
inline void AutoCAD::IAcadHatch::PutGradientColor2 ( struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = put_GradientColor2(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1567)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadHatch::GetGradientAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_GradientAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1568)
inline void AutoCAD::IAcadHatch::PutGradientAngle ( ACAD_ANGLE GradientAngle ) {
    HRESULT _hr = put_GradientAngle(GradientAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1569)
inline VARIANT_BOOL AutoCAD::IAcadHatch::GetGradientCentered ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GradientCentered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1570)
inline void AutoCAD::IAcadHatch::PutGradientCentered ( VARIANT_BOOL fCentered ) {
    HRESULT _hr = put_GradientCentered(fCentered);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1571)
inline _bstr_t AutoCAD::IAcadHatch::GetGradientName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GradientName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1572)
inline void AutoCAD::IAcadHatch::PutGradientName ( _bstr_t bstrName ) {
    HRESULT _hr = put_GradientName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1573)
inline enum AutoCAD::AcHatchObjectType AutoCAD::IAcadHatch::GetHatchObjectType ( ) {
    enum AcHatchObjectType _result;
    HRESULT _hr = get_HatchObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1574)
inline void AutoCAD::IAcadHatch::PutHatchObjectType ( enum AcHatchObjectType hatchType ) {
    HRESULT _hr = put_HatchObjectType(hatchType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1575)
inline double AutoCAD::IAcadHatch::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1576)
inline _variant_t AutoCAD::IAcadHatch::GetOrigin ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1577)
inline void AutoCAD::IAcadHatch::PutOrigin ( const _variant_t & Origin ) {
    HRESULT _hr = put_Origin(Origin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1578)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadHatch::GetBackgroundColor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_BackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(1579)
inline void AutoCAD::IAcadHatch::PutBackgroundColor ( struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = put_BackgroundColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadRasterImage wrapper method implementations
//

#pragma implementation_key(1580)
inline long AutoCAD::IAcadRasterImage::GetBrightness ( ) {
    long _result = 0;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1581)
inline void AutoCAD::IAcadRasterImage::PutBrightness ( long Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1582)
inline long AutoCAD::IAcadRasterImage::GetContrast ( ) {
    long _result = 0;
    HRESULT _hr = get_Contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1583)
inline void AutoCAD::IAcadRasterImage::PutContrast ( long Contrast ) {
    HRESULT _hr = put_Contrast(Contrast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1584)
inline long AutoCAD::IAcadRasterImage::GetFade ( ) {
    long _result = 0;
    HRESULT _hr = get_Fade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1585)
inline void AutoCAD::IAcadRasterImage::PutFade ( long Fade ) {
    HRESULT _hr = put_Fade(Fade);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1586)
inline _variant_t AutoCAD::IAcadRasterImage::GetOrigin ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1587)
inline void AutoCAD::IAcadRasterImage::PutOrigin ( const _variant_t & Origin ) {
    HRESULT _hr = put_Origin(Origin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1588)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadRasterImage::GetRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1589)
inline void AutoCAD::IAcadRasterImage::PutRotation ( ACAD_ANGLE rotAngle ) {
    HRESULT _hr = put_Rotation(rotAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1590)
inline double AutoCAD::IAcadRasterImage::GetImageWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_ImageWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1591)
inline void AutoCAD::IAcadRasterImage::PutImageWidth ( double Width ) {
    HRESULT _hr = put_ImageWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1592)
inline double AutoCAD::IAcadRasterImage::GetImageHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_ImageHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1593)
inline void AutoCAD::IAcadRasterImage::PutImageHeight ( double Height ) {
    HRESULT _hr = put_ImageHeight(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1594)
inline _bstr_t AutoCAD::IAcadRasterImage::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1595)
inline void AutoCAD::IAcadRasterImage::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1596)
inline void AutoCAD::IAcadRasterImage::PutImageFile ( _bstr_t imageFileName ) {
    HRESULT _hr = put_ImageFile(imageFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1597)
inline _bstr_t AutoCAD::IAcadRasterImage::GetImageFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ImageFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1598)
inline VARIANT_BOOL AutoCAD::IAcadRasterImage::GetImageVisibility ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ImageVisibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1599)
inline void AutoCAD::IAcadRasterImage::PutImageVisibility ( VARIANT_BOOL fVisible ) {
    HRESULT _hr = put_ImageVisibility(fVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1600)
inline VARIANT_BOOL AutoCAD::IAcadRasterImage::GetClippingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClippingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1601)
inline void AutoCAD::IAcadRasterImage::PutClippingEnabled ( VARIANT_BOOL kClip ) {
    HRESULT _hr = put_ClippingEnabled(kClip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1602)
inline VARIANT_BOOL AutoCAD::IAcadRasterImage::Gettransparency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1603)
inline void AutoCAD::IAcadRasterImage::Puttransparency ( VARIANT_BOOL bTransp ) {
    HRESULT _hr = put_transparency(bTransp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1604)
inline HRESULT AutoCAD::IAcadRasterImage::ClipBoundary ( const _variant_t & boundry ) {
    HRESULT _hr = raw_ClipBoundary(boundry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1605)
inline double AutoCAD::IAcadRasterImage::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1606)
inline double AutoCAD::IAcadRasterImage::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1607)
inline VARIANT_BOOL AutoCAD::IAcadRasterImage::GetShowRotation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1608)
inline void AutoCAD::IAcadRasterImage::PutShowRotation ( VARIANT_BOOL bShow ) {
    HRESULT _hr = put_ShowRotation(bShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1609)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadRasterImage::GetScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_ScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1610)
inline void AutoCAD::IAcadRasterImage::PutScaleFactor ( ACAD_NOUNITS ScaleFactor ) {
    HRESULT _hr = put_ScaleFactor(ScaleFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadLine wrapper method implementations
//

#pragma implementation_key(1611)
inline _variant_t AutoCAD::IAcadLine::GetStartPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1612)
inline void AutoCAD::IAcadLine::PutStartPoint ( const _variant_t & StartPoint ) {
    HRESULT _hr = put_StartPoint(StartPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1613)
inline _variant_t AutoCAD::IAcadLine::GetEndPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EndPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1614)
inline void AutoCAD::IAcadLine::PutEndPoint ( const _variant_t & EndPoint ) {
    HRESULT _hr = put_EndPoint(EndPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1615)
inline _variant_t AutoCAD::IAcadLine::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1616)
inline void AutoCAD::IAcadLine::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1617)
inline double AutoCAD::IAcadLine::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1618)
inline void AutoCAD::IAcadLine::PutThickness ( double Thickness ) {
    HRESULT _hr = put_Thickness(Thickness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1619)
inline _variant_t AutoCAD::IAcadLine::Offset ( double Distance ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Offset(Distance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1620)
inline _variant_t AutoCAD::IAcadLine::GetDelta ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Delta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1621)
inline double AutoCAD::IAcadLine::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1622)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadLine::GetAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadPlotConfiguration wrapper method implementations
//

#pragma implementation_key(1623)
inline _bstr_t AutoCAD::IAcadPlotConfiguration::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1624)
inline void AutoCAD::IAcadPlotConfiguration::PutName ( _bstr_t pName ) {
    HRESULT _hr = put_Name(pName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1625)
inline _bstr_t AutoCAD::IAcadPlotConfiguration::GetConfigName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConfigName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1626)
inline void AutoCAD::IAcadPlotConfiguration::PutConfigName ( _bstr_t pName ) {
    HRESULT _hr = put_ConfigName(pName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1627)
inline _bstr_t AutoCAD::IAcadPlotConfiguration::GetCanonicalMediaName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CanonicalMediaName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1628)
inline void AutoCAD::IAcadPlotConfiguration::PutCanonicalMediaName ( _bstr_t pName ) {
    HRESULT _hr = put_CanonicalMediaName(pName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1629)
inline enum AutoCAD::AcPlotPaperUnits AutoCAD::IAcadPlotConfiguration::GetPaperUnits ( ) {
    enum AcPlotPaperUnits _result;
    HRESULT _hr = get_PaperUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1630)
inline void AutoCAD::IAcadPlotConfiguration::PutPaperUnits ( enum AcPlotPaperUnits pPaperUnits ) {
    HRESULT _hr = put_PaperUnits(pPaperUnits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1631)
inline VARIANT_BOOL AutoCAD::IAcadPlotConfiguration::GetPlotViewportBorders ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlotViewportBorders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1632)
inline void AutoCAD::IAcadPlotConfiguration::PutPlotViewportBorders ( VARIANT_BOOL pViewportBorders ) {
    HRESULT _hr = put_PlotViewportBorders(pViewportBorders);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1633)
inline VARIANT_BOOL AutoCAD::IAcadPlotConfiguration::GetShowPlotStyles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPlotStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1634)
inline void AutoCAD::IAcadPlotConfiguration::PutShowPlotStyles ( VARIANT_BOOL pStyles ) {
    HRESULT _hr = put_ShowPlotStyles(pStyles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1635)
inline enum AutoCAD::AcPlotRotation AutoCAD::IAcadPlotConfiguration::GetPlotRotation ( ) {
    enum AcPlotRotation _result;
    HRESULT _hr = get_PlotRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1636)
inline void AutoCAD::IAcadPlotConfiguration::PutPlotRotation ( enum AcPlotRotation pRotation ) {
    HRESULT _hr = put_PlotRotation(pRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1637)
inline VARIANT_BOOL AutoCAD::IAcadPlotConfiguration::GetCenterPlot ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CenterPlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1638)
inline void AutoCAD::IAcadPlotConfiguration::PutCenterPlot ( VARIANT_BOOL pCentered ) {
    HRESULT _hr = put_CenterPlot(pCentered);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1639)
inline VARIANT_BOOL AutoCAD::IAcadPlotConfiguration::GetPlotHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlotHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1640)
inline void AutoCAD::IAcadPlotConfiguration::PutPlotHidden ( VARIANT_BOOL pHidden ) {
    HRESULT _hr = put_PlotHidden(pHidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1641)
inline enum AutoCAD::AcPlotType AutoCAD::IAcadPlotConfiguration::GetPlotType ( ) {
    enum AcPlotType _result;
    HRESULT _hr = get_PlotType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1642)
inline void AutoCAD::IAcadPlotConfiguration::PutPlotType ( enum AcPlotType pType ) {
    HRESULT _hr = put_PlotType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1643)
inline _bstr_t AutoCAD::IAcadPlotConfiguration::GetViewToPlot ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewToPlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1644)
inline void AutoCAD::IAcadPlotConfiguration::PutViewToPlot ( _bstr_t pName ) {
    HRESULT _hr = put_ViewToPlot(pName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1645)
inline VARIANT_BOOL AutoCAD::IAcadPlotConfiguration::GetUseStandardScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseStandardScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1646)
inline void AutoCAD::IAcadPlotConfiguration::PutUseStandardScale ( VARIANT_BOOL pUseStdScale ) {
    HRESULT _hr = put_UseStandardScale(pUseStdScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1647)
inline enum AutoCAD::AcPlotScale AutoCAD::IAcadPlotConfiguration::GetStandardScale ( ) {
    enum AcPlotScale _result;
    HRESULT _hr = get_StandardScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1648)
inline void AutoCAD::IAcadPlotConfiguration::PutStandardScale ( enum AcPlotScale pStdScale ) {
    HRESULT _hr = put_StandardScale(pStdScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1649)
inline HRESULT AutoCAD::IAcadPlotConfiguration::GetCustomScale ( double * Numerator, double * Denominator ) {
    HRESULT _hr = raw_GetCustomScale(Numerator, Denominator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1650)
inline HRESULT AutoCAD::IAcadPlotConfiguration::SetCustomScale ( double Numerator, double Denominator ) {
    HRESULT _hr = raw_SetCustomScale(Numerator, Denominator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1651)
inline VARIANT_BOOL AutoCAD::IAcadPlotConfiguration::GetScaleLineweights ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScaleLineweights(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1652)
inline void AutoCAD::IAcadPlotConfiguration::PutScaleLineweights ( VARIANT_BOOL pScale ) {
    HRESULT _hr = put_ScaleLineweights(pScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1653)
inline VARIANT_BOOL AutoCAD::IAcadPlotConfiguration::GetPlotWithLineweights ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlotWithLineweights(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1654)
inline void AutoCAD::IAcadPlotConfiguration::PutPlotWithLineweights ( VARIANT_BOOL pPlot ) {
    HRESULT _hr = put_PlotWithLineweights(pPlot);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1655)
inline VARIANT_BOOL AutoCAD::IAcadPlotConfiguration::GetPlotViewportsFirst ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlotViewportsFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1656)
inline void AutoCAD::IAcadPlotConfiguration::PutPlotViewportsFirst ( VARIANT_BOOL pViewportsFirst ) {
    HRESULT _hr = put_PlotViewportsFirst(pViewportsFirst);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1657)
inline _bstr_t AutoCAD::IAcadPlotConfiguration::GetStyleSheet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StyleSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1658)
inline void AutoCAD::IAcadPlotConfiguration::PutStyleSheet ( _bstr_t pName ) {
    HRESULT _hr = put_StyleSheet(pName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1659)
inline HRESULT AutoCAD::IAcadPlotConfiguration::GetPaperMargins ( VARIANT * LowerLeft, VARIANT * UpperRight ) {
    HRESULT _hr = raw_GetPaperMargins(LowerLeft, UpperRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1660)
inline HRESULT AutoCAD::IAcadPlotConfiguration::GetPaperSize ( double * Width, double * Height ) {
    HRESULT _hr = raw_GetPaperSize(Width, Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1661)
inline _variant_t AutoCAD::IAcadPlotConfiguration::GetPlotOrigin ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PlotOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1662)
inline void AutoCAD::IAcadPlotConfiguration::PutPlotOrigin ( const _variant_t & pOrigin ) {
    HRESULT _hr = put_PlotOrigin(pOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1663)
inline HRESULT AutoCAD::IAcadPlotConfiguration::GetWindowToPlot ( VARIANT * LowerLeft, VARIANT * UpperRight ) {
    HRESULT _hr = raw_GetWindowToPlot(LowerLeft, UpperRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1664)
inline HRESULT AutoCAD::IAcadPlotConfiguration::SetWindowToPlot ( const _variant_t & LowerLeft, const _variant_t & UpperRight ) {
    HRESULT _hr = raw_SetWindowToPlot(LowerLeft, UpperRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1665)
inline VARIANT_BOOL AutoCAD::IAcadPlotConfiguration::GetPlotWithPlotStyles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlotWithPlotStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1666)
inline void AutoCAD::IAcadPlotConfiguration::PutPlotWithPlotStyles ( VARIANT_BOOL pStyles ) {
    HRESULT _hr = put_PlotWithPlotStyles(pStyles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1667)
inline VARIANT_BOOL AutoCAD::IAcadPlotConfiguration::GetModelType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1668)
inline HRESULT AutoCAD::IAcadPlotConfiguration::CopyFrom ( struct IAcadPlotConfiguration * pPlotConfig ) {
    HRESULT _hr = raw_CopyFrom(pPlotConfig);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1669)
inline _variant_t AutoCAD::IAcadPlotConfiguration::GetCanonicalMediaNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetCanonicalMediaNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1670)
inline _variant_t AutoCAD::IAcadPlotConfiguration::GetPlotDeviceNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetPlotDeviceNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1671)
inline _variant_t AutoCAD::IAcadPlotConfiguration::GetPlotStyleTableNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetPlotStyleTableNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1672)
inline HRESULT AutoCAD::IAcadPlotConfiguration::RefreshPlotDeviceInfo ( ) {
    HRESULT _hr = raw_RefreshPlotDeviceInfo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1673)
inline _bstr_t AutoCAD::IAcadPlotConfiguration::GetLocaleMediaName ( _bstr_t Name ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLocaleMediaName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAcadMInsertBlock wrapper method implementations
//

#pragma implementation_key(1674)
inline void AutoCAD::IAcadMInsertBlock::PutColumns ( long NumColumns ) {
    HRESULT _hr = put_Columns(NumColumns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1675)
inline long AutoCAD::IAcadMInsertBlock::GetColumns ( ) {
    long _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1676)
inline void AutoCAD::IAcadMInsertBlock::PutColumnSpacing ( double Spacing ) {
    HRESULT _hr = put_ColumnSpacing(Spacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1677)
inline double AutoCAD::IAcadMInsertBlock::GetColumnSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_ColumnSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1678)
inline void AutoCAD::IAcadMInsertBlock::PutRows ( long NumRows ) {
    HRESULT _hr = put_Rows(NumRows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1679)
inline long AutoCAD::IAcadMInsertBlock::GetRows ( ) {
    long _result = 0;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1680)
inline void AutoCAD::IAcadMInsertBlock::PutRowSpacing ( double Spacing ) {
    HRESULT _hr = put_RowSpacing(Spacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1681)
inline double AutoCAD::IAcadMInsertBlock::GetRowSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_RowSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadPolyfaceMesh wrapper method implementations
//

#pragma implementation_key(1682)
inline void AutoCAD::IAcadPolyfaceMesh::PutCoordinates ( const _variant_t & Vertices ) {
    HRESULT _hr = put_Coordinates(Vertices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1683)
inline _variant_t AutoCAD::IAcadPolyfaceMesh::GetCoordinates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1684)
inline _variant_t AutoCAD::IAcadPolyfaceMesh::GetCoordinate ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinate(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1685)
inline void AutoCAD::IAcadPolyfaceMesh::PutCoordinate ( int Index, const _variant_t & pVal ) {
    HRESULT _hr = put_Coordinate(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1686)
inline long AutoCAD::IAcadPolyfaceMesh::GetNumberOfVertices ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfVertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1687)
inline long AutoCAD::IAcadPolyfaceMesh::GetNumberOfFaces ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1688)
inline void AutoCAD::IAcadPolyfaceMesh::PutFaces ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_Faces(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadMLine wrapper method implementations
//

#pragma implementation_key(1689)
inline _bstr_t AutoCAD::IAcadMLine::GetStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1690)
inline _variant_t AutoCAD::IAcadMLine::GetCoordinates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1691)
inline void AutoCAD::IAcadMLine::PutCoordinates ( const _variant_t & Vertices ) {
    HRESULT _hr = put_Coordinates(Vertices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1692)
inline enum AutoCAD::AcMLineJustification AutoCAD::IAcadMLine::GetJustification ( ) {
    enum AcMLineJustification _result;
    HRESULT _hr = get_Justification(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1693)
inline void AutoCAD::IAcadMLine::PutJustification ( enum AcMLineJustification Justification ) {
    HRESULT _hr = put_Justification(Justification);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1694)
inline double AutoCAD::IAcadMLine::GetMLineScale ( ) {
    double _result = 0;
    HRESULT _hr = get_MLineScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1695)
inline void AutoCAD::IAcadMLine::PutMLineScale ( double scale ) {
    HRESULT _hr = put_MLineScale(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadDim3PointAngular wrapper method implementations
//

#pragma implementation_key(1696)
inline _variant_t AutoCAD::IAcadDim3PointAngular::GetExtLine1EndPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExtLine1EndPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1697)
inline void AutoCAD::IAcadDim3PointAngular::PutExtLine1EndPoint ( const _variant_t & xLine1Point ) {
    HRESULT _hr = put_ExtLine1EndPoint(xLine1Point);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1698)
inline _variant_t AutoCAD::IAcadDim3PointAngular::GetExtLine2EndPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExtLine2EndPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1699)
inline void AutoCAD::IAcadDim3PointAngular::PutExtLine2EndPoint ( const _variant_t & xLine2Point ) {
    HRESULT _hr = put_ExtLine2EndPoint(xLine2Point);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1700)
inline _variant_t AutoCAD::IAcadDim3PointAngular::GetAngleVertex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AngleVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1701)
inline void AutoCAD::IAcadDim3PointAngular::PutAngleVertex ( const _variant_t & AngleVertex ) {
    HRESULT _hr = put_AngleVertex(AngleVertex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1702)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDim3PointAngular::GetTextPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_TextPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1703)
inline void AutoCAD::IAcadDim3PointAngular::PutTextPrecision ( enum AcDimPrecision AngleVertex ) {
    HRESULT _hr = put_TextPrecision(AngleVertex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1704)
inline enum AutoCAD::AcAngleUnits AutoCAD::IAcadDim3PointAngular::GetAngleFormat ( ) {
    enum AcAngleUnits _result;
    HRESULT _hr = get_AngleFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1705)
inline void AutoCAD::IAcadDim3PointAngular::PutAngleFormat ( enum AcAngleUnits format ) {
    HRESULT _hr = put_AngleFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1706)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDim3PointAngular::GetDimensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_DimensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1707)
inline void AutoCAD::IAcadDim3PointAngular::PutDimensionLineColor ( ACAD_COLOR Type ) {
    HRESULT _hr = put_DimensionLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1708)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDim3PointAngular::GetExtensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_ExtensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1709)
inline void AutoCAD::IAcadDim3PointAngular::PutExtensionLineColor ( ACAD_COLOR Type ) {
    HRESULT _hr = put_ExtensionLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1710)
inline double AutoCAD::IAcadDim3PointAngular::GetExtensionLineExtend ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtensionLineExtend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1711)
inline void AutoCAD::IAcadDim3PointAngular::PutExtensionLineExtend ( double extend ) {
    HRESULT _hr = put_ExtensionLineExtend(extend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1712)
inline enum AutoCAD::AcDimFit AutoCAD::IAcadDim3PointAngular::GetFit ( ) {
    enum AcDimFit _result;
    HRESULT _hr = get_Fit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1713)
inline void AutoCAD::IAcadDim3PointAngular::PutFit ( enum AcDimFit fittype ) {
    HRESULT _hr = put_Fit(fittype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1714)
inline enum AutoCAD::AcDimHorizontalJustification AutoCAD::IAcadDim3PointAngular::GetHorizontalTextPosition ( ) {
    enum AcDimHorizontalJustification _result;
    HRESULT _hr = get_HorizontalTextPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1715)
inline void AutoCAD::IAcadDim3PointAngular::PutHorizontalTextPosition ( enum AcDimHorizontalJustification Type ) {
    HRESULT _hr = put_HorizontalTextPosition(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1716)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadDim3PointAngular::GetExtensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_ExtensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1717)
inline void AutoCAD::IAcadDim3PointAngular::PutExtensionLineWeight ( ACAD_LWEIGHT lweight ) {
    HRESULT _hr = put_ExtensionLineWeight(lweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1718)
inline VARIANT_BOOL AutoCAD::IAcadDim3PointAngular::GetDimLine1Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLine1Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1719)
inline void AutoCAD::IAcadDim3PointAngular::PutDimLine1Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_DimLine1Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1720)
inline VARIANT_BOOL AutoCAD::IAcadDim3PointAngular::GetDimLine2Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLine2Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1721)
inline void AutoCAD::IAcadDim3PointAngular::PutDimLine2Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_DimLine2Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1722)
inline VARIANT_BOOL AutoCAD::IAcadDim3PointAngular::GetExtLine1Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLine1Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1723)
inline void AutoCAD::IAcadDim3PointAngular::PutExtLine1Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_ExtLine1Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1724)
inline VARIANT_BOOL AutoCAD::IAcadDim3PointAngular::GetExtLine2Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLine2Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1725)
inline void AutoCAD::IAcadDim3PointAngular::PutExtLine2Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_ExtLine2Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1726)
inline VARIANT_BOOL AutoCAD::IAcadDim3PointAngular::GetDimLineInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLineInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1727)
inline void AutoCAD::IAcadDim3PointAngular::PutDimLineInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_DimLineInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1728)
inline VARIANT_BOOL AutoCAD::IAcadDim3PointAngular::GetTextInsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1729)
inline void AutoCAD::IAcadDim3PointAngular::PutTextInsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1730)
inline VARIANT_BOOL AutoCAD::IAcadDim3PointAngular::GetTextInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1731)
inline void AutoCAD::IAcadDim3PointAngular::PutTextInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1732)
inline VARIANT_BOOL AutoCAD::IAcadDim3PointAngular::GetForceLineInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForceLineInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1733)
inline void AutoCAD::IAcadDim3PointAngular::PutForceLineInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_ForceLineInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1734)
inline VARIANT_BOOL AutoCAD::IAcadDim3PointAngular::GetTextOutsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextOutsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1735)
inline void AutoCAD::IAcadDim3PointAngular::PutTextOutsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextOutsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1736)
inline double AutoCAD::IAcadDim3PointAngular::GetExtensionLineOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtensionLineOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1737)
inline void AutoCAD::IAcadDim3PointAngular::PutExtensionLineOffset ( double Offset ) {
    HRESULT _hr = put_ExtensionLineOffset(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1738)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadDim3PointAngular::GetDimensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_DimensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1739)
inline void AutoCAD::IAcadDim3PointAngular::PutDimensionLineWeight ( ACAD_LWEIGHT weight ) {
    HRESULT _hr = put_DimensionLineWeight(weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1740)
inline double AutoCAD::IAcadDim3PointAngular::GetArrowheadSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowheadSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1741)
inline void AutoCAD::IAcadDim3PointAngular::PutArrowheadSize ( double size ) {
    HRESULT _hr = put_ArrowheadSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1742)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadDim3PointAngular::GetArrowhead1Type ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_Arrowhead1Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1743)
inline void AutoCAD::IAcadDim3PointAngular::PutArrowhead1Type ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_Arrowhead1Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1744)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadDim3PointAngular::GetArrowhead2Type ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_Arrowhead2Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1745)
inline void AutoCAD::IAcadDim3PointAngular::PutArrowhead2Type ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_Arrowhead2Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1746)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadDim3PointAngular::GetMeasurement ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Measurement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1747)
inline _bstr_t AutoCAD::IAcadDim3PointAngular::GetArrowhead1Block ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Arrowhead1Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1748)
inline void AutoCAD::IAcadDim3PointAngular::PutArrowhead1Block ( _bstr_t BlockName ) {
    HRESULT _hr = put_Arrowhead1Block(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1749)
inline _bstr_t AutoCAD::IAcadDim3PointAngular::GetArrowhead2Block ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Arrowhead2Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1750)
inline void AutoCAD::IAcadDim3PointAngular::PutArrowhead2Block ( _bstr_t BlockName ) {
    HRESULT _hr = put_Arrowhead2Block(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1751)
inline _bstr_t AutoCAD::IAcadDim3PointAngular::GetDimensionLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimensionLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1752)
inline void AutoCAD::IAcadDim3PointAngular::PutDimensionLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_DimensionLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1753)
inline _bstr_t AutoCAD::IAcadDim3PointAngular::GetExtLine1Linetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtLine1Linetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1754)
inline void AutoCAD::IAcadDim3PointAngular::PutExtLine1Linetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_ExtLine1Linetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1755)
inline _bstr_t AutoCAD::IAcadDim3PointAngular::GetExtLine2Linetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtLine2Linetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1756)
inline void AutoCAD::IAcadDim3PointAngular::PutExtLine2Linetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_ExtLine2Linetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1757)
inline VARIANT_BOOL AutoCAD::IAcadDim3PointAngular::GetExtLineFixedLenSuppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLineFixedLenSuppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1758)
inline void AutoCAD::IAcadDim3PointAngular::PutExtLineFixedLenSuppress ( VARIANT_BOOL bFixedLen ) {
    HRESULT _hr = put_ExtLineFixedLenSuppress(bFixedLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1759)
inline double AutoCAD::IAcadDim3PointAngular::GetExtLineFixedLen ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtLineFixedLen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1760)
inline void AutoCAD::IAcadDim3PointAngular::PutExtLineFixedLen ( double FixedLen ) {
    HRESULT _hr = put_ExtLineFixedLen(FixedLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1761)
inline VARIANT_BOOL AutoCAD::IAcadDim3PointAngular::GetDimConstrForm ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimConstrForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1762)
inline void AutoCAD::IAcadDim3PointAngular::PutDimConstrForm ( VARIANT_BOOL bIsDynamic ) {
    HRESULT _hr = put_DimConstrForm(bIsDynamic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1763)
inline VARIANT_BOOL AutoCAD::IAcadDim3PointAngular::GetDimConstrReference ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimConstrReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1764)
inline void AutoCAD::IAcadDim3PointAngular::PutDimConstrReference ( VARIANT_BOOL bIsReference ) {
    HRESULT _hr = put_DimConstrReference(bIsReference);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1765)
inline _bstr_t AutoCAD::IAcadDim3PointAngular::GetDimConstrName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1766)
inline void AutoCAD::IAcadDim3PointAngular::PutDimConstrName ( _bstr_t bstrName ) {
    HRESULT _hr = put_DimConstrName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1767)
inline _bstr_t AutoCAD::IAcadDim3PointAngular::GetDimConstrExpression ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrExpression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1768)
inline void AutoCAD::IAcadDim3PointAngular::PutDimConstrExpression ( _bstr_t bstrExpression ) {
    HRESULT _hr = put_DimConstrExpression(bstrExpression);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1769)
inline _bstr_t AutoCAD::IAcadDim3PointAngular::GetDimConstrValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1770)
inline void AutoCAD::IAcadDim3PointAngular::PutDimConstrValue ( _bstr_t Value ) {
    HRESULT _hr = put_DimConstrValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1771)
inline _bstr_t AutoCAD::IAcadDim3PointAngular::GetDimConstrDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimConstrDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1772)
inline void AutoCAD::IAcadDim3PointAngular::PutDimConstrDesc ( _bstr_t bstrDescription ) {
    HRESULT _hr = put_DimConstrDesc(bstrDescription);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadExternalReference wrapper method implementations
//

#pragma implementation_key(1773)
inline _bstr_t AutoCAD::IAcadExternalReference::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1774)
inline void AutoCAD::IAcadExternalReference::PutPath ( _bstr_t bstrName ) {
    HRESULT _hr = put_Path(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadTable wrapper method implementations
//

#pragma implementation_key(1775)
inline _bstr_t AutoCAD::IAcadTable::GetStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1776)
inline void AutoCAD::IAcadTable::PutStyleName ( _bstr_t bstrName ) {
    HRESULT _hr = put_StyleName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1777)
inline int AutoCAD::IAcadTable::GetRows ( ) {
    int _result = 0;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1778)
inline void AutoCAD::IAcadTable::PutRows ( int pRows ) {
    HRESULT _hr = put_Rows(pRows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1779)
inline int AutoCAD::IAcadTable::GetColumns ( ) {
    int _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1780)
inline void AutoCAD::IAcadTable::PutColumns ( int pColumns ) {
    HRESULT _hr = put_Columns(pColumns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1781)
inline enum AutoCAD::AcTableDirection AutoCAD::IAcadTable::GetFlowDirection ( ) {
    enum AcTableDirection _result;
    HRESULT _hr = get_FlowDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1782)
inline void AutoCAD::IAcadTable::PutFlowDirection ( enum AcTableDirection pFlow ) {
    HRESULT _hr = put_FlowDirection(pFlow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1783)
inline double AutoCAD::IAcadTable::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1784)
inline void AutoCAD::IAcadTable::PutWidth ( double pWidth ) {
    HRESULT _hr = put_Width(pWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1785)
inline double AutoCAD::IAcadTable::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1786)
inline void AutoCAD::IAcadTable::PutHeight ( double pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1787)
inline double AutoCAD::IAcadTable::GetVertCellMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_VertCellMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1788)
inline void AutoCAD::IAcadTable::PutVertCellMargin ( double pGap ) {
    HRESULT _hr = put_VertCellMargin(pGap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1789)
inline double AutoCAD::IAcadTable::GetHorzCellMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_HorzCellMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1790)
inline void AutoCAD::IAcadTable::PutHorzCellMargin ( double pGap ) {
    HRESULT _hr = put_HorzCellMargin(pGap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1791)
inline _variant_t AutoCAD::IAcadTable::GetInsertionPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InsertionPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1792)
inline void AutoCAD::IAcadTable::PutInsertionPoint ( const _variant_t & insPoint ) {
    HRESULT _hr = put_InsertionPoint(insPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1793)
inline double AutoCAD::IAcadTable::GetColumnWidth ( int col ) {
    double _result = 0;
    HRESULT _hr = raw_GetColumnWidth(col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1794)
inline HRESULT AutoCAD::IAcadTable::SetColumnWidth ( int col, double Width ) {
    HRESULT _hr = raw_SetColumnWidth(col, Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1795)
inline void AutoCAD::IAcadTable::PutColumnWidth ( double _arg1 ) {
    HRESULT _hr = put_ColumnWidth(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1796)
inline double AutoCAD::IAcadTable::GetRowHeight ( int row ) {
    double _result = 0;
    HRESULT _hr = raw_GetRowHeight(row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1797)
inline HRESULT AutoCAD::IAcadTable::SetRowHeight ( int row, double Height ) {
    HRESULT _hr = raw_SetRowHeight(row, Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1798)
inline void AutoCAD::IAcadTable::PutRowHeight ( double _arg1 ) {
    HRESULT _hr = put_RowHeight(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1799)
inline double AutoCAD::IAcadTable::GetMinimumColumnWidth ( int col ) {
    double _result = 0;
    HRESULT _hr = raw_GetMinimumColumnWidth(col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1800)
inline double AutoCAD::IAcadTable::GetMinimumRowHeight ( int row ) {
    double _result = 0;
    HRESULT _hr = raw_GetMinimumRowHeight(row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1801)
inline double AutoCAD::IAcadTable::GetMinimumTableWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumTableWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1802)
inline double AutoCAD::IAcadTable::GetMinimumTableHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumTableHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1803)
inline _variant_t AutoCAD::IAcadTable::GetDirection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1804)
inline void AutoCAD::IAcadTable::PutDirection ( const _variant_t & DirectionVector ) {
    HRESULT _hr = put_Direction(DirectionVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1805)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetTitleSuppressed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TitleSuppressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1806)
inline void AutoCAD::IAcadTable::PutTitleSuppressed ( VARIANT_BOOL bValue ) {
    HRESULT _hr = put_TitleSuppressed(bValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1807)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetHeaderSuppressed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HeaderSuppressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1808)
inline void AutoCAD::IAcadTable::PutHeaderSuppressed ( VARIANT_BOOL bValue ) {
    HRESULT _hr = put_HeaderSuppressed(bValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1809)
inline enum AutoCAD::AcCellAlignment AutoCAD::IAcadTable::GetAlignment ( enum AcRowType rowType ) {
    enum AcCellAlignment _result;
    HRESULT _hr = raw_GetAlignment(rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1810)
inline HRESULT AutoCAD::IAcadTable::SetAlignment ( int rowTypes, enum AcCellAlignment cellAlignment ) {
    HRESULT _hr = raw_SetAlignment(rowTypes, cellAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1811)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetBackgroundColorNone ( enum AcRowType rowType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBackgroundColorNone(rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1812)
inline HRESULT AutoCAD::IAcadTable::SetBackgroundColorNone ( int rowTypes, VARIANT_BOOL * bValue ) {
    HRESULT _hr = raw_SetBackgroundColorNone(rowTypes, bValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1813)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadTable::GetBackgroundColor ( enum AcRowType rowType ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = raw_GetBackgroundColor(rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(1814)
inline HRESULT AutoCAD::IAcadTable::SetBackgroundColor ( int rowTypes, struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = raw_SetBackgroundColor(rowTypes, pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1815)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadTable::GetContentColor ( enum AcRowType rowType ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = raw_GetContentColor(rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(1816)
inline HRESULT AutoCAD::IAcadTable::SetContentColor ( int rowTypes, struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = raw_SetContentColor(rowTypes, pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1817)
inline _bstr_t AutoCAD::IAcadTable::GetTextStyle ( enum AcRowType rowType ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetTextStyle(rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1818)
inline HRESULT AutoCAD::IAcadTable::SetTextStyle ( int rowTypes, _bstr_t bstrName ) {
    HRESULT _hr = raw_SetTextStyle(rowTypes, bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1819)
inline double AutoCAD::IAcadTable::GetTextHeight ( enum AcRowType rowType ) {
    double _result = 0;
    HRESULT _hr = raw_GetTextHeight(rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1820)
inline HRESULT AutoCAD::IAcadTable::SetTextHeight ( int rowTypes, double TextHeight ) {
    HRESULT _hr = raw_SetTextHeight(rowTypes, TextHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1821)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadTable::GetGridLineWeight ( enum AcGridLineType gridLineType, enum AcRowType rowType ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = raw_GetGridLineWeight(gridLineType, rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1822)
inline HRESULT AutoCAD::IAcadTable::SetGridLineWeight ( int gridLineTypes, int rowTypes, ACAD_LWEIGHT Lineweight ) {
    HRESULT _hr = raw_SetGridLineWeight(gridLineTypes, rowTypes, Lineweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1823)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadTable::GetGridColor ( enum AcGridLineType gridLineType, enum AcRowType rowType ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = raw_GetGridColor(gridLineType, rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(1824)
inline HRESULT AutoCAD::IAcadTable::SetGridColor ( int gridLineTypes, int rowTypes, struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = raw_SetGridColor(gridLineTypes, rowTypes, pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1825)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetGridVisibility ( enum AcGridLineType gridLineType, enum AcRowType rowType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetGridVisibility(gridLineType, rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1826)
inline HRESULT AutoCAD::IAcadTable::SetGridVisibility ( int gridLineTypes, int rowTypes, VARIANT_BOOL bValue ) {
    HRESULT _hr = raw_SetGridVisibility(gridLineTypes, rowTypes, bValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1827)
inline _variant_t AutoCAD::IAcadTable::GetTableStyleOverrides ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TableStyleOverrides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1828)
inline HRESULT AutoCAD::IAcadTable::ClearTableStyleOverrides ( int flag ) {
    HRESULT _hr = raw_ClearTableStyleOverrides(flag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1829)
inline enum AutoCAD::AcCellType AutoCAD::IAcadTable::GetCellType ( int row, int col ) {
    enum AcCellType _result;
    HRESULT _hr = raw_GetCellType(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1830)
inline HRESULT AutoCAD::IAcadTable::SetCellType ( int row, int col, enum AcCellType CellType ) {
    HRESULT _hr = raw_SetCellType(row, col, CellType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1831)
inline _variant_t AutoCAD::IAcadTable::GetCellExtents ( int row, int col, VARIANT_BOOL bOuterCell ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetCellExtents(row, col, bOuterCell, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1832)
inline _variant_t AutoCAD::IAcadTable::GetAttachmentPoint ( int row, int col ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetAttachmentPoint(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1833)
inline enum AutoCAD::AcCellAlignment AutoCAD::IAcadTable::GetCellAlignment ( int row, int col ) {
    enum AcCellAlignment _result;
    HRESULT _hr = raw_GetCellAlignment(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1834)
inline HRESULT AutoCAD::IAcadTable::SetCellAlignment ( int row, int col, enum AcCellAlignment cellAlignment ) {
    HRESULT _hr = raw_SetCellAlignment(row, col, cellAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1835)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetCellBackgroundColorNone ( int row, int col ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCellBackgroundColorNone(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1836)
inline HRESULT AutoCAD::IAcadTable::SetCellBackgroundColorNone ( int row, int col, VARIANT_BOOL * bValue ) {
    HRESULT _hr = raw_SetCellBackgroundColorNone(row, col, bValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1837)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadTable::GetCellBackgroundColor ( int row, int col ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = raw_GetCellBackgroundColor(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(1838)
inline HRESULT AutoCAD::IAcadTable::SetCellBackgroundColor ( int row, int col, struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = raw_SetCellBackgroundColor(row, col, pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1839)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadTable::GetCellContentColor ( int row, int col ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = raw_GetCellContentColor(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(1840)
inline HRESULT AutoCAD::IAcadTable::SetCellContentColor ( int row, int col, struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = raw_SetCellContentColor(row, col, pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1841)
inline _variant_t AutoCAD::IAcadTable::GetCellStyleOverrides ( int row, int col ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetCellStyleOverrides(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1842)
inline HRESULT AutoCAD::IAcadTable::DeleteCellContent ( int row, int col ) {
    HRESULT _hr = raw_DeleteCellContent(row, col);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1843)
inline enum AutoCAD::AcRowType AutoCAD::IAcadTable::GetRowType ( int row ) {
    enum AcRowType _result;
    HRESULT _hr = raw_GetRowType(row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1844)
inline _bstr_t AutoCAD::IAcadTable::GetText ( int row, int col ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetText(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1845)
inline HRESULT AutoCAD::IAcadTable::SetText ( int row, int col, _bstr_t pStr ) {
    HRESULT _hr = raw_SetText(row, col, pStr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1846)
inline _bstr_t AutoCAD::IAcadTable::GetCellTextStyle ( int row, int col ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCellTextStyle(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1847)
inline HRESULT AutoCAD::IAcadTable::SetCellTextStyle ( int row, int col, _bstr_t bstrName ) {
    HRESULT _hr = raw_SetCellTextStyle(row, col, bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1848)
inline double AutoCAD::IAcadTable::GetCellTextHeight ( int row, int col ) {
    double _result = 0;
    HRESULT _hr = raw_GetCellTextHeight(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1849)
inline HRESULT AutoCAD::IAcadTable::SetCellTextHeight ( int row, int col, double TextHeight ) {
    HRESULT _hr = raw_SetCellTextHeight(row, col, TextHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1850)
inline enum AutoCAD::AcRotationAngle AutoCAD::IAcadTable::GetTextRotation ( int row, int col ) {
    enum AcRotationAngle _result;
    HRESULT _hr = raw_GetTextRotation(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1851)
inline HRESULT AutoCAD::IAcadTable::SetTextRotation ( int row, int col, enum AcRotationAngle TextRotation ) {
    HRESULT _hr = raw_SetTextRotation(row, col, TextRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1852)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetAutoScale ( int row, int col ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAutoScale(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1853)
inline HRESULT AutoCAD::IAcadTable::SetAutoScale ( int row, int col, VARIANT_BOOL * bValue ) {
    HRESULT _hr = raw_SetAutoScale(row, col, bValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1854)
inline AutoCAD::LONG_PTR AutoCAD::IAcadTable::GetBlockTableRecordId ( int row, int col ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetBlockTableRecordId(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1855)
inline HRESULT AutoCAD::IAcadTable::SetBlockTableRecordId ( int row, int col, LONG_PTR blkId, VARIANT_BOOL bAutoFit ) {
    HRESULT _hr = raw_SetBlockTableRecordId(row, col, blkId, bAutoFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1856)
inline double AutoCAD::IAcadTable::GetBlockScale ( int row, int col ) {
    double _result = 0;
    HRESULT _hr = raw_GetBlockScale(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1857)
inline HRESULT AutoCAD::IAcadTable::SetBlockScale ( int row, int col, double blkScale ) {
    HRESULT _hr = raw_SetBlockScale(row, col, blkScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1858)
inline double AutoCAD::IAcadTable::GetBlockRotation ( int row, int col ) {
    double _result = 0;
    HRESULT _hr = raw_GetBlockRotation(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1859)
inline HRESULT AutoCAD::IAcadTable::SetBlockRotation ( int row, int col, double blkRotation ) {
    HRESULT _hr = raw_SetBlockRotation(row, col, blkRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1860)
inline _bstr_t AutoCAD::IAcadTable::GetBlockAttributeValue ( int row, int col, LONG_PTR attdefId ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBlockAttributeValue(row, col, attdefId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1861)
inline HRESULT AutoCAD::IAcadTable::SetBlockAttributeValue ( int row, int col, LONG_PTR attdefId, _bstr_t bstrValue ) {
    HRESULT _hr = raw_SetBlockAttributeValue(row, col, attdefId, bstrValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1862)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadTable::GetCellGridLineWeight ( int row, int col, enum AcCellEdgeMask edge ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = raw_GetCellGridLineWeight(row, col, edge, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1863)
inline HRESULT AutoCAD::IAcadTable::SetCellGridLineWeight ( int row, int col, int edges, ACAD_LWEIGHT Lineweight ) {
    HRESULT _hr = raw_SetCellGridLineWeight(row, col, edges, Lineweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1864)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadTable::GetCellGridColor ( int row, int col, enum AcCellEdgeMask edge ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = raw_GetCellGridColor(row, col, edge, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(1865)
inline HRESULT AutoCAD::IAcadTable::SetCellGridColor ( int row, int col, int edges, struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = raw_SetCellGridColor(row, col, edges, pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1866)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetCellGridVisibility ( int row, int col, enum AcCellEdgeMask edge ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCellGridVisibility(row, col, edge, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1867)
inline HRESULT AutoCAD::IAcadTable::SetCellGridVisibility ( int row, int col, int edges, VARIANT_BOOL bValue ) {
    HRESULT _hr = raw_SetCellGridVisibility(row, col, edges, bValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1868)
inline HRESULT AutoCAD::IAcadTable::InsertColumns ( int col, double Width, int cols ) {
    HRESULT _hr = raw_InsertColumns(col, Width, cols);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1869)
inline HRESULT AutoCAD::IAcadTable::DeleteColumns ( int col, int cols ) {
    HRESULT _hr = raw_DeleteColumns(col, cols);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1870)
inline HRESULT AutoCAD::IAcadTable::InsertRows ( int row, double Height, int Rows ) {
    HRESULT _hr = raw_InsertRows(row, Height, Rows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1871)
inline HRESULT AutoCAD::IAcadTable::DeleteRows ( int row, int Rows ) {
    HRESULT _hr = raw_DeleteRows(row, Rows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1872)
inline HRESULT AutoCAD::IAcadTable::MergeCells ( int minRow, int maxRow, int minCol, int maxCol ) {
    HRESULT _hr = raw_MergeCells(minRow, maxRow, minCol, maxCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1873)
inline HRESULT AutoCAD::IAcadTable::UnmergeCells ( int minRow, int maxRow, int minCol, int maxCol ) {
    HRESULT _hr = raw_UnmergeCells(minRow, maxRow, minCol, maxCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1874)
inline VARIANT_BOOL AutoCAD::IAcadTable::IsMergedCell ( int row, int col, int * minRow, int * maxRow, int * minCol, int * maxCol ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMergedCell(row, col, minRow, maxRow, minCol, maxCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1875)
inline AutoCAD::LONG_PTR AutoCAD::IAcadTable::GetFieldId ( int row, int col ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetFieldId(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1876)
inline HRESULT AutoCAD::IAcadTable::SetFieldId ( int row, int col, LONG_PTR fieldId ) {
    HRESULT _hr = raw_SetFieldId(row, col, fieldId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1877)
inline HRESULT AutoCAD::IAcadTable::GenerateLayout ( ) {
    HRESULT _hr = raw_GenerateLayout();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1878)
inline HRESULT AutoCAD::IAcadTable::RecomputeTableBlock ( VARIANT_BOOL bForceUpdate ) {
    HRESULT _hr = raw_RecomputeTableBlock(bForceUpdate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1879)
inline VARIANT_BOOL AutoCAD::IAcadTable::HitTest ( const _variant_t & wpt, const _variant_t & wviewVec, int * resultRowIndex, int * resultColumnIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HitTest(wpt, wviewVec, resultRowIndex, resultColumnIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1880)
inline HRESULT AutoCAD::IAcadTable::Select ( const _variant_t & wpt, const _variant_t & wvwVec, const _variant_t & wvwxVec, double wxaper, double wyaper, VARIANT_BOOL allowOutside, int * resultRowIndex, int * resultColumnIndex ) {
    HRESULT _hr = raw_Select(wpt, wvwVec, wvwxVec, wxaper, wyaper, allowOutside, resultRowIndex, resultColumnIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1881)
inline HRESULT AutoCAD::IAcadTable::SelectSubRegion ( const _variant_t & wpt1, const _variant_t & wpt2, const _variant_t & wvwVec, const _variant_t & wvwxVec, enum AcSelectType seltype, VARIANT_BOOL bIncludeCurrentSelection, int * rowMin, int * rowMax, int * colMin, int * colMax ) {
    HRESULT _hr = raw_SelectSubRegion(wpt1, wpt2, wvwVec, wvwxVec, seltype, bIncludeCurrentSelection, rowMin, rowMax, colMin, colMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1882)
inline HRESULT AutoCAD::IAcadTable::ReselectSubRegion ( ) {
    HRESULT _hr = raw_ReselectSubRegion();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1883)
inline HRESULT AutoCAD::IAcadTable::GetSubSelection ( int * rowMin, int * rowMax, int * colMin, int * colMax ) {
    HRESULT _hr = raw_GetSubSelection(rowMin, rowMax, colMin, colMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1884)
inline HRESULT AutoCAD::IAcadTable::SetSubSelection ( int rowMin, int rowMax, int colMin, int colMax ) {
    HRESULT _hr = raw_SetSubSelection(rowMin, rowMax, colMin, colMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1885)
inline HRESULT AutoCAD::IAcadTable::ClearSubSelection ( ) {
    HRESULT _hr = raw_ClearSubSelection();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1886)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetHasSubSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasSubSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1887)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetRegenerateTableSuppressed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RegenerateTableSuppressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1888)
inline void AutoCAD::IAcadTable::PutRegenerateTableSuppressed ( VARIANT_BOOL bValue ) {
    HRESULT _hr = put_RegenerateTableSuppressed(bValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1889)
inline HRESULT AutoCAD::IAcadTable::GetDataType ( enum AcRowType rowType, enum AcValueDataType * pDataType, enum AcValueUnitType * pUnitType ) {
    HRESULT _hr = raw_GetDataType(rowType, pDataType, pUnitType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1890)
inline HRESULT AutoCAD::IAcadTable::SetDataType ( int rowTypes, enum AcValueDataType dataType, enum AcValueUnitType unitType ) {
    HRESULT _hr = raw_SetDataType(rowTypes, dataType, unitType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1891)
inline _bstr_t AutoCAD::IAcadTable::GetFormat ( enum AcRowType rowType ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFormat(rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1892)
inline HRESULT AutoCAD::IAcadTable::SetFormat ( int rowTypes, _bstr_t pFormat ) {
    HRESULT _hr = raw_SetFormat(rowTypes, pFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1893)
inline HRESULT AutoCAD::IAcadTable::FormatValue ( int row, int col, enum AcFormatOption nOption, BSTR * pVal ) {
    HRESULT _hr = raw_FormatValue(row, col, nOption, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1894)
inline HRESULT AutoCAD::IAcadTable::GetCellDataType ( int row, int col, enum AcValueDataType * pDataType, enum AcValueUnitType * pUnitType ) {
    HRESULT _hr = raw_GetCellDataType(row, col, pDataType, pUnitType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1895)
inline HRESULT AutoCAD::IAcadTable::SetCellDataType ( int row, int col, enum AcValueDataType dataType, enum AcValueUnitType unitType ) {
    HRESULT _hr = raw_SetCellDataType(row, col, dataType, unitType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1896)
inline _bstr_t AutoCAD::IAcadTable::GetCellFormat ( int row, int col ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCellFormat(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1897)
inline HRESULT AutoCAD::IAcadTable::SetCellFormat ( int row, int col, _bstr_t pFormat ) {
    HRESULT _hr = raw_SetCellFormat(row, col, pFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1898)
inline _variant_t AutoCAD::IAcadTable::GetCellValue ( int row, int col ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetCellValue(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1899)
inline HRESULT AutoCAD::IAcadTable::SetCellValue ( int row, int col, const _variant_t & val ) {
    HRESULT _hr = raw_SetCellValue(row, col, val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1900)
inline HRESULT AutoCAD::IAcadTable::SetCellValueFromText ( int row, int col, _bstr_t val, enum AcParseOption nOption ) {
    HRESULT _hr = raw_SetCellValueFromText(row, col, val, nOption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1901)
inline HRESULT AutoCAD::IAcadTable::ResetCellValue ( int row, int col ) {
    HRESULT _hr = raw_ResetCellValue(row, col);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1902)
inline VARIANT_BOOL AutoCAD::IAcadTable::IsEmpty ( int nRow, int nCol ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsEmpty(nRow, nCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1903)
inline int AutoCAD::IAcadTable::CreateContent ( int nRow, int nCol, int nIndex ) {
    int _result = 0;
    HRESULT _hr = raw_CreateContent(nRow, nCol, nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1904)
inline HRESULT AutoCAD::IAcadTable::MoveContent ( int nRow, int nCol, int nFromIndex, int nToIndex ) {
    HRESULT _hr = raw_MoveContent(nRow, nCol, nFromIndex, nToIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1905)
inline HRESULT AutoCAD::IAcadTable::DeleteContent ( int nRow, int nCol ) {
    HRESULT _hr = raw_DeleteContent(nRow, nCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1906)
inline _variant_t AutoCAD::IAcadTable::GetValue ( int nRow, int nCol, int nContent ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetValue(nRow, nCol, nContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1907)
inline HRESULT AutoCAD::IAcadTable::SetValue ( int nRow, int nCol, int nContent, const _variant_t & acValue ) {
    HRESULT _hr = raw_SetValue(nRow, nCol, nContent, acValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1908)
inline HRESULT AutoCAD::IAcadTable::SetValueFromText ( int nRow, int nCol, int nContent, _bstr_t szText, enum AcParseOption nOption ) {
    HRESULT _hr = raw_SetValueFromText(nRow, nCol, nContent, szText, nOption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1909)
inline _bstr_t AutoCAD::IAcadTable::GetDataFormat ( int nRow, int nCol, int nContent ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDataFormat(nRow, nCol, nContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1910)
inline HRESULT AutoCAD::IAcadTable::SetDataFormat ( int nRow, int nCol, int nContent, _bstr_t szFormat ) {
    HRESULT _hr = raw_SetDataFormat(nRow, nCol, nContent, szFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1911)
inline _bstr_t AutoCAD::IAcadTable::GetTextString ( int nRow, int nCol, int nContent ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetTextString(nRow, nCol, nContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1912)
inline HRESULT AutoCAD::IAcadTable::SetTextString ( int nRow, int nCol, int nContent, _bstr_t Text ) {
    HRESULT _hr = raw_SetTextString(nRow, nCol, nContent, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1913)
inline AutoCAD::LONG_PTR AutoCAD::IAcadTable::GetFieldId2 ( int nRow, int nCol, int nContent ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetFieldId2(nRow, nCol, nContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1914)
inline HRESULT AutoCAD::IAcadTable::SetFieldId2 ( int nRow, int nCol, int nContent, LONG_PTR acDbObjectId, enum AcCellOption nflag ) {
    HRESULT _hr = raw_SetFieldId2(nRow, nCol, nContent, acDbObjectId, nflag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1915)
inline AutoCAD::LONG_PTR AutoCAD::IAcadTable::GetBlockTableRecordId2 ( int nRow, int nCol, int nContent ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetBlockTableRecordId2(nRow, nCol, nContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1916)
inline HRESULT AutoCAD::IAcadTable::SetBlockTableRecordId2 ( int nRow, int nCol, int nContent, LONG_PTR blkId, VARIANT_BOOL autoFit ) {
    HRESULT _hr = raw_SetBlockTableRecordId2(nRow, nCol, nContent, blkId, autoFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1917)
inline _bstr_t AutoCAD::IAcadTable::GetBlockAttributeValue2 ( int nRow, int nCol, int nContent, LONG_PTR blkId ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBlockAttributeValue2(nRow, nCol, nContent, blkId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1918)
inline HRESULT AutoCAD::IAcadTable::SetBlockAttributeValue2 ( int nRow, int nCol, int nContent, LONG_PTR blkId, _bstr_t Value ) {
    HRESULT _hr = raw_SetBlockAttributeValue2(nRow, nCol, nContent, blkId, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1919)
inline HRESULT AutoCAD::IAcadTable::GetCustomData ( int nRow, int nCol, _bstr_t szKey, VARIANT * pData ) {
    HRESULT _hr = raw_GetCustomData(nRow, nCol, szKey, pData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1920)
inline HRESULT AutoCAD::IAcadTable::SetCustomData ( int nRow, int nCol, _bstr_t szKey, const _variant_t & data ) {
    HRESULT _hr = raw_SetCustomData(nRow, nCol, szKey, data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1921)
inline _bstr_t AutoCAD::IAcadTable::GetCellStyle ( int nRow, int nCol ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCellStyle(nRow, nCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1922)
inline HRESULT AutoCAD::IAcadTable::SetCellStyle ( int nRow, int nCol, _bstr_t szCellStyle ) {
    HRESULT _hr = raw_SetCellStyle(nRow, nCol, szCellStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1923)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadTable::GetContentColor2 ( int nRow, int nCol, int nContent ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = raw_GetContentColor2(nRow, nCol, nContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(1924)
inline HRESULT AutoCAD::IAcadTable::SetContentColor2 ( int nRow, int nCol, int nContent, struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = raw_SetContentColor2(nRow, nCol, nContent, pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1925)
inline HRESULT AutoCAD::IAcadTable::GetDataType2 ( int nRow, int nCol, int nContent, enum AcValueDataType * pDataType, enum AcValueUnitType * pUnitType ) {
    HRESULT _hr = raw_GetDataType2(nRow, nCol, nContent, pDataType, pUnitType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1926)
inline HRESULT AutoCAD::IAcadTable::SetDataType2 ( int nRow, int nCol, int nContent, enum AcValueDataType dataType, enum AcValueUnitType unitType ) {
    HRESULT _hr = raw_SetDataType2(nRow, nCol, nContent, dataType, unitType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1927)
inline _bstr_t AutoCAD::IAcadTable::GetTextStyle2 ( int nRow, int nCol, int nContent ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetTextStyle2(nRow, nCol, nContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1928)
inline HRESULT AutoCAD::IAcadTable::SetTextStyle2 ( int nRow, int nCol, int nContent, _bstr_t bstrStyleName ) {
    HRESULT _hr = raw_SetTextStyle2(nRow, nCol, nContent, bstrStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1929)
inline double AutoCAD::IAcadTable::GetTextHeight2 ( int nRow, int nCol, int nContent ) {
    double _result = 0;
    HRESULT _hr = raw_GetTextHeight2(nRow, nCol, nContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1930)
inline HRESULT AutoCAD::IAcadTable::SetTextHeight2 ( int nRow, int nCol, int nContent, double Height ) {
    HRESULT _hr = raw_SetTextHeight2(nRow, nCol, nContent, Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1931)
inline double AutoCAD::IAcadTable::GetRotation ( int nRow, int nCol, int nContent ) {
    double _result = 0;
    HRESULT _hr = raw_GetRotation(nRow, nCol, nContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1932)
inline HRESULT AutoCAD::IAcadTable::SetRotation ( int nRow, int nCol, int nContent, double Value ) {
    HRESULT _hr = raw_SetRotation(nRow, nCol, nContent, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1933)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetAutoScale2 ( int nRow, int nCol, int nContent ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAutoScale2(nRow, nCol, nContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1934)
inline HRESULT AutoCAD::IAcadTable::SetAutoScale2 ( int nRow, int nCol, int nContent, VARIANT_BOOL bAutoFit ) {
    HRESULT _hr = raw_SetAutoScale2(nRow, nCol, nContent, bAutoFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1935)
inline double AutoCAD::IAcadTable::GetScale ( int nRow, int nCol, int nContent ) {
    double _result = 0;
    HRESULT _hr = raw_GetScale(nRow, nCol, nContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1936)
inline HRESULT AutoCAD::IAcadTable::SetScale ( int nRow, int nCol, int nContent, double scale ) {
    HRESULT _hr = raw_SetScale(nRow, nCol, nContent, scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1937)
inline HRESULT AutoCAD::IAcadTable::RemoveAllOverrides ( int nRow, int nCol ) {
    HRESULT _hr = raw_RemoveAllOverrides(nRow, nCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1938)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadTable::GetGridLineWeight2 ( int nRow, int nCol, enum AcGridLineType nGridLineType ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = raw_GetGridLineWeight2(nRow, nCol, nGridLineType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1939)
inline HRESULT AutoCAD::IAcadTable::SetGridLineWeight2 ( int nRow, int nCol, enum AcGridLineType nGridLineType, ACAD_LWEIGHT Lineweight ) {
    HRESULT _hr = raw_SetGridLineWeight2(nRow, nCol, nGridLineType, Lineweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1940)
inline AutoCAD::LONG_PTR AutoCAD::IAcadTable::GetGridLinetype ( int nRow, int nCol, enum AcGridLineType nGridLineType ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetGridLinetype(nRow, nCol, nGridLineType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1941)
inline HRESULT AutoCAD::IAcadTable::SetGridLinetype ( int nRow, int nCol, enum AcGridLineType nGridLineType, LONG_PTR idLinetype ) {
    HRESULT _hr = raw_SetGridLinetype(nRow, nCol, nGridLineType, idLinetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1942)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadTable::GetGridColor2 ( int nRow, int nCol, enum AcGridLineType nGridLineType ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = raw_GetGridColor2(nRow, nCol, nGridLineType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(1943)
inline HRESULT AutoCAD::IAcadTable::SetGridColor2 ( int nRow, int nCol, enum AcGridLineType nGridLineType, struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = raw_SetGridColor2(nRow, nCol, nGridLineType, pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1944)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetGridVisibility2 ( int nRow, int nCol, enum AcGridLineType nGridLineType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetGridVisibility2(nRow, nCol, nGridLineType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1945)
inline HRESULT AutoCAD::IAcadTable::SetGridVisibility2 ( int nRow, int nCol, enum AcGridLineType nGridLineType, VARIANT_BOOL bVisible ) {
    HRESULT _hr = raw_SetGridVisibility2(nRow, nCol, nGridLineType, bVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1946)
inline double AutoCAD::IAcadTable::GetGridDoubleLineSpacing ( int nRow, int nCol, enum AcGridLineType nGridLineType ) {
    double _result = 0;
    HRESULT _hr = raw_GetGridDoubleLineSpacing(nRow, nCol, nGridLineType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1947)
inline HRESULT AutoCAD::IAcadTable::SetGridDoubleLineSpacing ( int nRow, int nCol, enum AcGridLineType nGridLineType, double fSpacing ) {
    HRESULT _hr = raw_SetGridDoubleLineSpacing(nRow, nCol, nGridLineType, fSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1948)
inline void AutoCAD::IAcadTable::PutEnableBreak ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_EnableBreak(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1949)
inline double AutoCAD::IAcadTable::GetBreakHeight ( int nIndex ) {
    double _result = 0;
    HRESULT _hr = raw_GetBreakHeight(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1950)
inline HRESULT AutoCAD::IAcadTable::SetBreakHeight ( int nIndex, double Height ) {
    HRESULT _hr = raw_SetBreakHeight(nIndex, Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1951)
inline enum AutoCAD::AcCellContentType AutoCAD::IAcadTable::GetContentType ( int nRow, int nCol ) {
    enum AcCellContentType _result;
    HRESULT _hr = raw_GetContentType(nRow, nCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1952)
inline double AutoCAD::IAcadTable::GetMargin ( int nRow, int nCol, enum AcCellMargin nMargin ) {
    double _result = 0;
    HRESULT _hr = raw_GetMargin(nRow, nCol, nMargin, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1953)
inline HRESULT AutoCAD::IAcadTable::SetMargin ( int nRow, int nCol, enum AcCellMargin nMargins, double fMargin ) {
    HRESULT _hr = raw_SetMargin(nRow, nCol, nMargins, fMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1954)
inline enum AutoCAD::AcCellContentLayout AutoCAD::IAcadTable::GetContentLayout ( int row, int col ) {
    enum AcCellContentLayout _result;
    HRESULT _hr = raw_GetContentLayout(row, col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1955)
inline HRESULT AutoCAD::IAcadTable::SetContentLayout ( int row, int col, enum AcCellContentLayout nLayout ) {
    HRESULT _hr = raw_SetContentLayout(row, col, nLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1956)
inline enum AutoCAD::AcCellProperty AutoCAD::IAcadTable::GetOverride ( int nRow, int nCol, int nContent ) {
    enum AcCellProperty _result;
    HRESULT _hr = raw_GetOverride(nRow, nCol, nContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1957)
inline HRESULT AutoCAD::IAcadTable::SetOverride ( int nRow, int nCol, int nContent, enum AcCellProperty nProp ) {
    HRESULT _hr = raw_SetOverride(nRow, nCol, nContent, nProp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1958)
inline enum AutoCAD::AcGridLineStyle AutoCAD::IAcadTable::GetGridLineStyle ( int nRow, int nCol, enum AcGridLineType nGridLineType ) {
    enum AcGridLineStyle _result;
    HRESULT _hr = raw_GetGridLineStyle(nRow, nCol, nGridLineType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1959)
inline HRESULT AutoCAD::IAcadTable::SetGridLineStyle ( int nRow, int nCol, enum AcGridLineType nGridLineTypes, enum AcGridLineStyle nLineStyle ) {
    HRESULT _hr = raw_SetGridLineStyle(nRow, nCol, nGridLineTypes, nLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1960)
inline HRESULT AutoCAD::IAcadTable::InsertRowsAndInherit ( int nIndex, int nInheritFrom, int nNumRows ) {
    HRESULT _hr = raw_InsertRowsAndInherit(nIndex, nInheritFrom, nNumRows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1961)
inline HRESULT AutoCAD::IAcadTable::InsertColumnsAndInherit ( int col, int nInheritFrom, int nNumCols ) {
    HRESULT _hr = raw_InsertColumnsAndInherit(col, nInheritFrom, nNumCols);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1962)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetHasFormula ( int nRow, int nCol, int nContent ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetHasFormula(nRow, nCol, nContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1963)
inline _bstr_t AutoCAD::IAcadTable::GetFormula ( int nRow, int nCol, int nContent ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFormula(nRow, nCol, nContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1964)
inline HRESULT AutoCAD::IAcadTable::SetFormula ( int nRow, int nCol, int nContent, _bstr_t pszFormula ) {
    HRESULT _hr = raw_SetFormula(nRow, nCol, nContent, pszFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1965)
inline VARIANT_BOOL AutoCAD::IAcadTable::IsContentEditable ( int nRow, int nCol ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsContentEditable(nRow, nCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1966)
inline VARIANT_BOOL AutoCAD::IAcadTable::IsFormatEditable ( int nRow, int nCol ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFormatEditable(nRow, nCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1967)
inline enum AutoCAD::AcCellState AutoCAD::IAcadTable::GetCellState ( int nRow, int nCol ) {
    enum AcCellState _result;
    HRESULT _hr = raw_GetCellState(nRow, nCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1968)
inline HRESULT AutoCAD::IAcadTable::SetCellState ( int nRow, int nCol, enum AcCellState nLock ) {
    HRESULT _hr = raw_SetCellState(nRow, nCol, nLock);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1969)
inline HRESULT AutoCAD::IAcadTable::EnableMergeAll ( int nRow, int nCol, VARIANT_BOOL bEnable ) {
    HRESULT _hr = raw_EnableMergeAll(nRow, nCol, bEnable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1970)
inline VARIANT_BOOL AutoCAD::IAcadTable::IsMergeAllEnabled ( int nRow, int nCol ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMergeAllEnabled(nRow, nCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1971)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetBreaksEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BreaksEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1972)
inline void AutoCAD::IAcadTable::PutBreaksEnabled ( VARIANT_BOOL bEnabled ) {
    HRESULT _hr = put_BreaksEnabled(bEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1973)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetRepeatTopLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RepeatTopLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1974)
inline void AutoCAD::IAcadTable::PutRepeatTopLabels ( VARIANT_BOOL bEnabled ) {
    HRESULT _hr = put_RepeatTopLabels(bEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1975)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetRepeatBottomLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RepeatBottomLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1976)
inline void AutoCAD::IAcadTable::PutRepeatBottomLabels ( VARIANT_BOOL bEnabled ) {
    HRESULT _hr = put_RepeatBottomLabels(bEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1977)
inline enum AutoCAD::AcTableFlowDirection AutoCAD::IAcadTable::GetTableBreakFlowDirection ( ) {
    enum AcTableFlowDirection _result;
    HRESULT _hr = get_TableBreakFlowDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1978)
inline void AutoCAD::IAcadTable::PutTableBreakFlowDirection ( enum AcTableFlowDirection pDir ) {
    HRESULT _hr = put_TableBreakFlowDirection(pDir);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1979)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetAllowManualPositions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowManualPositions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1980)
inline void AutoCAD::IAcadTable::PutAllowManualPositions ( VARIANT_BOOL bEnabled ) {
    HRESULT _hr = put_AllowManualPositions(bEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1981)
inline VARIANT_BOOL AutoCAD::IAcadTable::GetAllowManualHeights ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowManualHeights(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1982)
inline void AutoCAD::IAcadTable::PutAllowManualHeights ( VARIANT_BOOL bEnabled ) {
    HRESULT _hr = put_AllowManualHeights(bEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1983)
inline double AutoCAD::IAcadTable::GetTableBreakHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_TableBreakHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1984)
inline void AutoCAD::IAcadTable::PutTableBreakHeight ( double pHeight ) {
    HRESULT _hr = put_TableBreakHeight(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1985)
inline double AutoCAD::IAcadTable::GetBreakSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_BreakSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1986)
inline void AutoCAD::IAcadTable::PutBreakSpacing ( double pSpacing ) {
    HRESULT _hr = put_BreakSpacing(pSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1987)
inline _bstr_t AutoCAD::IAcadTable::GetColumnName ( int nIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetColumnName(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1988)
inline HRESULT AutoCAD::IAcadTable::SetColumnName ( int nIndex, _bstr_t Name ) {
    HRESULT _hr = raw_SetColumnName(nIndex, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1989)
inline HRESULT AutoCAD::IAcadTable::SetToolTip ( int nRow, int nCol, _bstr_t tip ) {
    HRESULT _hr = raw_SetToolTip(nRow, nCol, tip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadDimArcLength wrapper method implementations
//

#pragma implementation_key(1990)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetAltUnits ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1991)
inline void AutoCAD::IAcadDimArcLength::PutAltUnits ( VARIANT_BOOL bAlternate ) {
    HRESULT _hr = put_AltUnits(bAlternate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1992)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimArcLength::GetAltUnitsPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_AltUnitsPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1993)
inline void AutoCAD::IAcadDimArcLength::PutAltUnitsPrecision ( enum AcDimPrecision precision ) {
    HRESULT _hr = put_AltUnitsPrecision(precision);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1994)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimArcLength::GetAltUnitsScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_AltUnitsScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1995)
inline void AutoCAD::IAcadDimArcLength::PutAltUnitsScale ( ACAD_NOUNITS scale ) {
    HRESULT _hr = put_AltUnitsScale(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1996)
inline double AutoCAD::IAcadDimArcLength::GetAltRoundDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_AltRoundDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1997)
inline void AutoCAD::IAcadDimArcLength::PutAltRoundDistance ( double Distance ) {
    HRESULT _hr = put_AltRoundDistance(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1998)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimArcLength::GetAltTolerancePrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_AltTolerancePrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1999)
inline void AutoCAD::IAcadDimArcLength::PutAltTolerancePrecision ( enum AcDimPrecision Distance ) {
    HRESULT _hr = put_AltTolerancePrecision(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2000)
inline enum AutoCAD::AcDimUnits AutoCAD::IAcadDimArcLength::GetAltUnitsFormat ( ) {
    enum AcDimUnits _result;
    HRESULT _hr = get_AltUnitsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2001)
inline void AutoCAD::IAcadDimArcLength::PutAltUnitsFormat ( enum AcDimUnits Units ) {
    HRESULT _hr = put_AltUnitsFormat(Units);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2002)
inline _bstr_t AutoCAD::IAcadDimArcLength::GetAltTextPrefix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTextPrefix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2003)
inline void AutoCAD::IAcadDimArcLength::PutAltTextPrefix ( _bstr_t prefix ) {
    HRESULT _hr = put_AltTextPrefix(prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2004)
inline _bstr_t AutoCAD::IAcadDimArcLength::GetAltTextSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTextSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2005)
inline void AutoCAD::IAcadDimArcLength::PutAltTextSuffix ( _bstr_t prefix ) {
    HRESULT _hr = put_AltTextSuffix(prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2006)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDimArcLength::GetDimensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_DimensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2007)
inline void AutoCAD::IAcadDimArcLength::PutDimensionLineColor ( ACAD_COLOR Type ) {
    HRESULT _hr = put_DimensionLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2008)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDimArcLength::GetExtensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_ExtensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2009)
inline void AutoCAD::IAcadDimArcLength::PutExtensionLineColor ( ACAD_COLOR Type ) {
    HRESULT _hr = put_ExtensionLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2010)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimArcLength::GetPrimaryUnitsPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_PrimaryUnitsPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2011)
inline void AutoCAD::IAcadDimArcLength::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec ) {
    HRESULT _hr = put_PrimaryUnitsPrecision(Prec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2012)
inline double AutoCAD::IAcadDimArcLength::GetDimensionLineExtend ( ) {
    double _result = 0;
    HRESULT _hr = get_DimensionLineExtend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2013)
inline void AutoCAD::IAcadDimArcLength::PutDimensionLineExtend ( double extend ) {
    HRESULT _hr = put_DimensionLineExtend(extend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2014)
inline double AutoCAD::IAcadDimArcLength::GetExtensionLineExtend ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtensionLineExtend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2015)
inline void AutoCAD::IAcadDimArcLength::PutExtensionLineExtend ( double extend ) {
    HRESULT _hr = put_ExtensionLineExtend(extend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2016)
inline enum AutoCAD::AcDimFit AutoCAD::IAcadDimArcLength::GetFit ( ) {
    enum AcDimFit _result;
    HRESULT _hr = get_Fit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2017)
inline void AutoCAD::IAcadDimArcLength::PutFit ( enum AcDimFit fittype ) {
    HRESULT _hr = put_Fit(fittype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2018)
inline enum AutoCAD::AcDimFractionType AutoCAD::IAcadDimArcLength::GetFractionFormat ( ) {
    enum AcDimFractionType _result;
    HRESULT _hr = get_FractionFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2019)
inline void AutoCAD::IAcadDimArcLength::PutFractionFormat ( enum AcDimFractionType Type ) {
    HRESULT _hr = put_FractionFormat(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2020)
inline enum AutoCAD::AcDimHorizontalJustification AutoCAD::IAcadDimArcLength::GetHorizontalTextPosition ( ) {
    enum AcDimHorizontalJustification _result;
    HRESULT _hr = get_HorizontalTextPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2021)
inline void AutoCAD::IAcadDimArcLength::PutHorizontalTextPosition ( enum AcDimHorizontalJustification Type ) {
    HRESULT _hr = put_HorizontalTextPosition(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2022)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimArcLength::GetLinearScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_LinearScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2023)
inline void AutoCAD::IAcadDimArcLength::PutLinearScaleFactor ( ACAD_NOUNITS Type ) {
    HRESULT _hr = put_LinearScaleFactor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2024)
inline enum AutoCAD::AcDimLUnits AutoCAD::IAcadDimArcLength::GetUnitsFormat ( ) {
    enum AcDimLUnits _result;
    HRESULT _hr = get_UnitsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2025)
inline void AutoCAD::IAcadDimArcLength::PutUnitsFormat ( enum AcDimLUnits format ) {
    HRESULT _hr = put_UnitsFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2026)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadDimArcLength::GetExtensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_ExtensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2027)
inline void AutoCAD::IAcadDimArcLength::PutExtensionLineWeight ( ACAD_LWEIGHT lweight ) {
    HRESULT _hr = put_ExtensionLineWeight(lweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2028)
inline double AutoCAD::IAcadDimArcLength::GetRoundDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_RoundDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2029)
inline void AutoCAD::IAcadDimArcLength::PutRoundDistance ( double Distance ) {
    HRESULT _hr = put_RoundDistance(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2030)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetDimLine1Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLine1Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2031)
inline void AutoCAD::IAcadDimArcLength::PutDimLine1Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_DimLine1Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2032)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetDimLine2Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLine2Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2033)
inline void AutoCAD::IAcadDimArcLength::PutDimLine2Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_DimLine2Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2034)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetExtLine1Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLine1Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2035)
inline void AutoCAD::IAcadDimArcLength::PutExtLine1Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_ExtLine1Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2036)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetExtLine2Suppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLine2Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2037)
inline void AutoCAD::IAcadDimArcLength::PutExtLine2Suppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_ExtLine2Suppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2038)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetDimLineInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLineInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2039)
inline void AutoCAD::IAcadDimArcLength::PutDimLineInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_DimLineInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2040)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetTextInsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2041)
inline void AutoCAD::IAcadDimArcLength::PutTextInsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2042)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetTextInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2043)
inline void AutoCAD::IAcadDimArcLength::PutTextInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2044)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetForceLineInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForceLineInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2045)
inline void AutoCAD::IAcadDimArcLength::PutForceLineInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_ForceLineInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2046)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetTextOutsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextOutsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2047)
inline void AutoCAD::IAcadDimArcLength::PutTextOutsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextOutsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2048)
inline double AutoCAD::IAcadDimArcLength::GetExtensionLineOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtensionLineOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2049)
inline void AutoCAD::IAcadDimArcLength::PutExtensionLineOffset ( double Offset ) {
    HRESULT _hr = put_ExtensionLineOffset(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2050)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetAltSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2051)
inline void AutoCAD::IAcadDimArcLength::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2052)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetAltSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2053)
inline void AutoCAD::IAcadDimArcLength::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2054)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetAltSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2055)
inline void AutoCAD::IAcadDimArcLength::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2056)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetAltSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2057)
inline void AutoCAD::IAcadDimArcLength::PutAltSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2058)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetAltToleranceSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2059)
inline void AutoCAD::IAcadDimArcLength::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2060)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetAltToleranceSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2061)
inline void AutoCAD::IAcadDimArcLength::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2062)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetAltToleranceSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2063)
inline void AutoCAD::IAcadDimArcLength::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2064)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetAltToleranceSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2065)
inline void AutoCAD::IAcadDimArcLength::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2066)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2067)
inline void AutoCAD::IAcadDimArcLength::PutSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2068)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2069)
inline void AutoCAD::IAcadDimArcLength::PutSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2070)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetToleranceSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2071)
inline void AutoCAD::IAcadDimArcLength::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2072)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetToleranceSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2073)
inline void AutoCAD::IAcadDimArcLength::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2074)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadDimArcLength::GetDimensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_DimensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2075)
inline void AutoCAD::IAcadDimArcLength::PutDimensionLineWeight ( ACAD_LWEIGHT weight ) {
    HRESULT _hr = put_DimensionLineWeight(weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2076)
inline double AutoCAD::IAcadDimArcLength::GetArrowheadSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowheadSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2077)
inline void AutoCAD::IAcadDimArcLength::PutArrowheadSize ( double size ) {
    HRESULT _hr = put_ArrowheadSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2078)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadDimArcLength::GetArrowhead1Type ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_Arrowhead1Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2079)
inline void AutoCAD::IAcadDimArcLength::PutArrowhead1Type ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_Arrowhead1Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2080)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadDimArcLength::GetArrowhead2Type ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_Arrowhead2Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2081)
inline void AutoCAD::IAcadDimArcLength::PutArrowhead2Type ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_Arrowhead2Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2082)
inline double AutoCAD::IAcadDimArcLength::GetMeasurement ( ) {
    double _result = 0;
    HRESULT _hr = get_Measurement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2083)
inline _bstr_t AutoCAD::IAcadDimArcLength::GetArrowhead1Block ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Arrowhead1Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2084)
inline void AutoCAD::IAcadDimArcLength::PutArrowhead1Block ( _bstr_t BlockName ) {
    HRESULT _hr = put_Arrowhead1Block(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2085)
inline _bstr_t AutoCAD::IAcadDimArcLength::GetArrowhead2Block ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Arrowhead2Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2086)
inline void AutoCAD::IAcadDimArcLength::PutArrowhead2Block ( _bstr_t BlockName ) {
    HRESULT _hr = put_Arrowhead2Block(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2087)
inline _variant_t AutoCAD::IAcadDimArcLength::GetArcPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArcPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2088)
inline void AutoCAD::IAcadDimArcLength::PutArcPoint ( const _variant_t & pVal ) {
    HRESULT _hr = put_ArcPoint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2089)
inline _variant_t AutoCAD::IAcadDimArcLength::GetExtLine1Point ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExtLine1Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2090)
inline void AutoCAD::IAcadDimArcLength::PutExtLine1Point ( const _variant_t & pVal ) {
    HRESULT _hr = put_ExtLine1Point(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2091)
inline _variant_t AutoCAD::IAcadDimArcLength::GetExtLine2Point ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExtLine2Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2092)
inline void AutoCAD::IAcadDimArcLength::PutExtLine2Point ( const _variant_t & pVal ) {
    HRESULT _hr = put_ExtLine2Point(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2093)
inline _variant_t AutoCAD::IAcadDimArcLength::GetCenterPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CenterPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2094)
inline void AutoCAD::IAcadDimArcLength::PutCenterPoint ( const _variant_t & pVal ) {
    HRESULT _hr = put_CenterPoint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2095)
inline _variant_t AutoCAD::IAcadDimArcLength::GetLeader1Point ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Leader1Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2096)
inline void AutoCAD::IAcadDimArcLength::PutLeader1Point ( const _variant_t & pVal ) {
    HRESULT _hr = put_Leader1Point(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2097)
inline _variant_t AutoCAD::IAcadDimArcLength::GetLeader2Point ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Leader2Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2098)
inline void AutoCAD::IAcadDimArcLength::PutLeader2Point ( const _variant_t & pVal ) {
    HRESULT _hr = put_Leader2Point(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2099)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetIsPartial ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPartial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2100)
inline void AutoCAD::IAcadDimArcLength::PutIsPartial ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPartial(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2101)
inline double AutoCAD::IAcadDimArcLength::GetArcStartParam ( ) {
    double _result = 0;
    HRESULT _hr = get_ArcStartParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2102)
inline void AutoCAD::IAcadDimArcLength::PutArcStartParam ( double pVal ) {
    HRESULT _hr = put_ArcStartParam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2103)
inline double AutoCAD::IAcadDimArcLength::GetArcEndParam ( ) {
    double _result = 0;
    HRESULT _hr = get_ArcEndParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2104)
inline void AutoCAD::IAcadDimArcLength::PutArcEndParam ( double pVal ) {
    HRESULT _hr = put_ArcEndParam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2105)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetHasLeader ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2106)
inline void AutoCAD::IAcadDimArcLength::PutHasLeader ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HasLeader(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2107)
inline enum AutoCAD::AcDimArcLengthSymbol AutoCAD::IAcadDimArcLength::GetSymbolPosition ( ) {
    enum AcDimArcLengthSymbol _result;
    HRESULT _hr = get_SymbolPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2108)
inline void AutoCAD::IAcadDimArcLength::PutSymbolPosition ( enum AcDimArcLengthSymbol Position ) {
    HRESULT _hr = put_SymbolPosition(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2109)
inline _bstr_t AutoCAD::IAcadDimArcLength::GetDimensionLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimensionLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2110)
inline void AutoCAD::IAcadDimArcLength::PutDimensionLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_DimensionLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2111)
inline _bstr_t AutoCAD::IAcadDimArcLength::GetExtLine1Linetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtLine1Linetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2112)
inline void AutoCAD::IAcadDimArcLength::PutExtLine1Linetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_ExtLine1Linetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2113)
inline _bstr_t AutoCAD::IAcadDimArcLength::GetExtLine2Linetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtLine2Linetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2114)
inline void AutoCAD::IAcadDimArcLength::PutExtLine2Linetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_ExtLine2Linetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2115)
inline VARIANT_BOOL AutoCAD::IAcadDimArcLength::GetExtLineFixedLenSuppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtLineFixedLenSuppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2116)
inline void AutoCAD::IAcadDimArcLength::PutExtLineFixedLenSuppress ( VARIANT_BOOL bFixedLen ) {
    HRESULT _hr = put_ExtLineFixedLenSuppress(bFixedLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2117)
inline double AutoCAD::IAcadDimArcLength::GetExtLineFixedLen ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtLineFixedLen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2118)
inline void AutoCAD::IAcadDimArcLength::PutExtLineFixedLen ( double FixedLen ) {
    HRESULT _hr = put_ExtLineFixedLen(FixedLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2119)
inline _bstr_t AutoCAD::IAcadDimArcLength::GetSubUnitsSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubUnitsSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2120)
inline void AutoCAD::IAcadDimArcLength::PutSubUnitsSuffix ( _bstr_t suffix ) {
    HRESULT _hr = put_SubUnitsSuffix(suffix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2121)
inline double AutoCAD::IAcadDimArcLength::GetSubUnitsFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_SubUnitsFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2122)
inline void AutoCAD::IAcadDimArcLength::PutSubUnitsFactor ( double factor ) {
    HRESULT _hr = put_SubUnitsFactor(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2123)
inline _bstr_t AutoCAD::IAcadDimArcLength::GetAltSubUnitsSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltSubUnitsSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2124)
inline void AutoCAD::IAcadDimArcLength::PutAltSubUnitsSuffix ( _bstr_t suffix ) {
    HRESULT _hr = put_AltSubUnitsSuffix(suffix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2125)
inline double AutoCAD::IAcadDimArcLength::GetAltSubUnitsFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_AltSubUnitsFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2126)
inline void AutoCAD::IAcadDimArcLength::PutAltSubUnitsFactor ( double factor ) {
    HRESULT _hr = put_AltSubUnitsFactor(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadDimRadialLarge wrapper method implementations
//

#pragma implementation_key(2127)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetAltUnits ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2128)
inline void AutoCAD::IAcadDimRadialLarge::PutAltUnits ( VARIANT_BOOL bAlternate ) {
    HRESULT _hr = put_AltUnits(bAlternate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2129)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimRadialLarge::GetAltUnitsPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_AltUnitsPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2130)
inline void AutoCAD::IAcadDimRadialLarge::PutAltUnitsPrecision ( enum AcDimPrecision precision ) {
    HRESULT _hr = put_AltUnitsPrecision(precision);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2131)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimRadialLarge::GetAltUnitsScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_AltUnitsScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2132)
inline void AutoCAD::IAcadDimRadialLarge::PutAltUnitsScale ( ACAD_NOUNITS scale ) {
    HRESULT _hr = put_AltUnitsScale(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2133)
inline double AutoCAD::IAcadDimRadialLarge::GetAltRoundDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_AltRoundDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2134)
inline void AutoCAD::IAcadDimRadialLarge::PutAltRoundDistance ( double Distance ) {
    HRESULT _hr = put_AltRoundDistance(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2135)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimRadialLarge::GetAltTolerancePrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_AltTolerancePrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2136)
inline void AutoCAD::IAcadDimRadialLarge::PutAltTolerancePrecision ( enum AcDimPrecision Distance ) {
    HRESULT _hr = put_AltTolerancePrecision(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2137)
inline enum AutoCAD::AcDimUnits AutoCAD::IAcadDimRadialLarge::GetAltUnitsFormat ( ) {
    enum AcDimUnits _result;
    HRESULT _hr = get_AltUnitsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2138)
inline void AutoCAD::IAcadDimRadialLarge::PutAltUnitsFormat ( enum AcDimUnits Units ) {
    HRESULT _hr = put_AltUnitsFormat(Units);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2139)
inline _bstr_t AutoCAD::IAcadDimRadialLarge::GetAltTextPrefix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTextPrefix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2140)
inline void AutoCAD::IAcadDimRadialLarge::PutAltTextPrefix ( _bstr_t prefix ) {
    HRESULT _hr = put_AltTextPrefix(prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2141)
inline _bstr_t AutoCAD::IAcadDimRadialLarge::GetAltTextSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTextSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2142)
inline void AutoCAD::IAcadDimRadialLarge::PutAltTextSuffix ( _bstr_t prefix ) {
    HRESULT _hr = put_AltTextSuffix(prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2143)
inline enum AutoCAD::AcDimCenterType AutoCAD::IAcadDimRadialLarge::GetCenterType ( ) {
    enum AcDimCenterType _result;
    HRESULT _hr = get_CenterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2144)
inline void AutoCAD::IAcadDimRadialLarge::PutCenterType ( enum AcDimCenterType Type ) {
    HRESULT _hr = put_CenterType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2145)
inline double AutoCAD::IAcadDimRadialLarge::GetCenterMarkSize ( ) {
    double _result = 0;
    HRESULT _hr = get_CenterMarkSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2146)
inline void AutoCAD::IAcadDimRadialLarge::PutCenterMarkSize ( double Type ) {
    HRESULT _hr = put_CenterMarkSize(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2147)
inline AutoCAD::ACAD_COLOR AutoCAD::IAcadDimRadialLarge::GetDimensionLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_DimensionLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2148)
inline void AutoCAD::IAcadDimRadialLarge::PutDimensionLineColor ( ACAD_COLOR Type ) {
    HRESULT _hr = put_DimensionLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2149)
inline enum AutoCAD::AcDimPrecision AutoCAD::IAcadDimRadialLarge::GetPrimaryUnitsPrecision ( ) {
    enum AcDimPrecision _result;
    HRESULT _hr = get_PrimaryUnitsPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2150)
inline void AutoCAD::IAcadDimRadialLarge::PutPrimaryUnitsPrecision ( enum AcDimPrecision Prec ) {
    HRESULT _hr = put_PrimaryUnitsPrecision(Prec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2151)
inline enum AutoCAD::AcDimFractionType AutoCAD::IAcadDimRadialLarge::GetFractionFormat ( ) {
    enum AcDimFractionType _result;
    HRESULT _hr = get_FractionFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2152)
inline void AutoCAD::IAcadDimRadialLarge::PutFractionFormat ( enum AcDimFractionType Type ) {
    HRESULT _hr = put_FractionFormat(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2153)
inline enum AutoCAD::AcDimFit AutoCAD::IAcadDimRadialLarge::GetFit ( ) {
    enum AcDimFit _result;
    HRESULT _hr = get_Fit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2154)
inline void AutoCAD::IAcadDimRadialLarge::PutFit ( enum AcDimFit fittype ) {
    HRESULT _hr = put_Fit(fittype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2155)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadDimRadialLarge::GetLinearScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_LinearScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2156)
inline void AutoCAD::IAcadDimRadialLarge::PutLinearScaleFactor ( ACAD_NOUNITS Type ) {
    HRESULT _hr = put_LinearScaleFactor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2157)
inline enum AutoCAD::AcDimLUnits AutoCAD::IAcadDimRadialLarge::GetUnitsFormat ( ) {
    enum AcDimLUnits _result;
    HRESULT _hr = get_UnitsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2158)
inline void AutoCAD::IAcadDimRadialLarge::PutUnitsFormat ( enum AcDimLUnits format ) {
    HRESULT _hr = put_UnitsFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2159)
inline double AutoCAD::IAcadDimRadialLarge::GetRoundDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_RoundDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2160)
inline void AutoCAD::IAcadDimRadialLarge::PutRoundDistance ( double Distance ) {
    HRESULT _hr = put_RoundDistance(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2161)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetDimLineSuppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimLineSuppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2162)
inline void AutoCAD::IAcadDimRadialLarge::PutDimLineSuppress ( VARIANT_BOOL bSuppress ) {
    HRESULT _hr = put_DimLineSuppress(bSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2163)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetTextInsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2164)
inline void AutoCAD::IAcadDimRadialLarge::PutTextInsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2165)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetTextInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2166)
inline void AutoCAD::IAcadDimRadialLarge::PutTextInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2167)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetForceLineInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForceLineInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2168)
inline void AutoCAD::IAcadDimRadialLarge::PutForceLineInside ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_ForceLineInside(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2169)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetTextOutsideAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextOutsideAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2170)
inline void AutoCAD::IAcadDimRadialLarge::PutTextOutsideAlign ( VARIANT_BOOL bInside ) {
    HRESULT _hr = put_TextOutsideAlign(bInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2171)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetAltSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2172)
inline void AutoCAD::IAcadDimRadialLarge::PutAltSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2173)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetAltSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2174)
inline void AutoCAD::IAcadDimRadialLarge::PutAltSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2175)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetAltSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2176)
inline void AutoCAD::IAcadDimRadialLarge::PutAltSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2177)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetAltSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2178)
inline void AutoCAD::IAcadDimRadialLarge::PutAltSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2179)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetAltToleranceSuppressLeadingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressLeadingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2180)
inline void AutoCAD::IAcadDimRadialLarge::PutAltToleranceSuppressLeadingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressLeadingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2181)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetAltToleranceSuppressTrailingZeros ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressTrailingZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2182)
inline void AutoCAD::IAcadDimRadialLarge::PutAltToleranceSuppressTrailingZeros ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressTrailingZeros(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2183)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetAltToleranceSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2184)
inline void AutoCAD::IAcadDimRadialLarge::PutAltToleranceSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2185)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetAltToleranceSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltToleranceSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2186)
inline void AutoCAD::IAcadDimRadialLarge::PutAltToleranceSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_AltToleranceSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2187)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2188)
inline void AutoCAD::IAcadDimRadialLarge::PutSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2189)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2190)
inline void AutoCAD::IAcadDimRadialLarge::PutSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_SuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2191)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetToleranceSuppressZeroFeet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressZeroFeet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2192)
inline void AutoCAD::IAcadDimRadialLarge::PutToleranceSuppressZeroFeet ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressZeroFeet(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2193)
inline VARIANT_BOOL AutoCAD::IAcadDimRadialLarge::GetToleranceSuppressZeroInches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceSuppressZeroInches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2194)
inline void AutoCAD::IAcadDimRadialLarge::PutToleranceSuppressZeroInches ( VARIANT_BOOL bVal ) {
    HRESULT _hr = put_ToleranceSuppressZeroInches(bVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2195)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadDimRadialLarge::GetDimensionLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_DimensionLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2196)
inline void AutoCAD::IAcadDimRadialLarge::PutDimensionLineWeight ( ACAD_LWEIGHT weight ) {
    HRESULT _hr = put_DimensionLineWeight(weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2197)
inline double AutoCAD::IAcadDimRadialLarge::GetArrowheadSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowheadSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2198)
inline void AutoCAD::IAcadDimRadialLarge::PutArrowheadSize ( double size ) {
    HRESULT _hr = put_ArrowheadSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2199)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadDimRadialLarge::GetArrowheadType ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_ArrowheadType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2200)
inline void AutoCAD::IAcadDimRadialLarge::PutArrowheadType ( enum AcDimArrowheadType Type ) {
    HRESULT _hr = put_ArrowheadType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2201)
inline double AutoCAD::IAcadDimRadialLarge::GetMeasurement ( ) {
    double _result = 0;
    HRESULT _hr = get_Measurement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2202)
inline _bstr_t AutoCAD::IAcadDimRadialLarge::GetArrowheadBlock ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ArrowheadBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2203)
inline void AutoCAD::IAcadDimRadialLarge::PutArrowheadBlock ( _bstr_t BlockName ) {
    HRESULT _hr = put_ArrowheadBlock(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2204)
inline _variant_t AutoCAD::IAcadDimRadialLarge::GetOverrideCenter ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OverrideCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2205)
inline void AutoCAD::IAcadDimRadialLarge::PutOverrideCenter ( const _variant_t & overrideCenterPos ) {
    HRESULT _hr = put_OverrideCenter(overrideCenterPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2206)
inline _variant_t AutoCAD::IAcadDimRadialLarge::GetJogLocation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_JogLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2207)
inline void AutoCAD::IAcadDimRadialLarge::PutJogLocation ( const _variant_t & jogPos ) {
    HRESULT _hr = put_JogLocation(jogPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2208)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadDimRadialLarge::GetJogAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_JogAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2209)
inline void AutoCAD::IAcadDimRadialLarge::PutJogAngle ( ACAD_ANGLE JogAngle ) {
    HRESULT _hr = put_JogAngle(JogAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2210)
inline _variant_t AutoCAD::IAcadDimRadialLarge::GetCenter ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2211)
inline void AutoCAD::IAcadDimRadialLarge::PutCenter ( const _variant_t & pVar ) {
    HRESULT _hr = put_Center(pVar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2212)
inline _variant_t AutoCAD::IAcadDimRadialLarge::GetChordPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChordPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2213)
inline void AutoCAD::IAcadDimRadialLarge::PutChordPoint ( const _variant_t & pVal ) {
    HRESULT _hr = put_ChordPoint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2214)
inline _bstr_t AutoCAD::IAcadDimRadialLarge::GetDimensionLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimensionLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2215)
inline void AutoCAD::IAcadDimRadialLarge::PutDimensionLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_DimensionLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadSectionSettings wrapper method implementations
//

#pragma implementation_key(2216)
inline enum AutoCAD::AcSectionType AutoCAD::IAcadSectionSettings::GetCurrentSectionType ( ) {
    enum AcSectionType _result;
    HRESULT _hr = get_CurrentSectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2217)
inline void AutoCAD::IAcadSectionSettings::PutCurrentSectionType ( enum AcSectionType pVal ) {
    HRESULT _hr = put_CurrentSectionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2218)
inline AutoCAD::IAcadSectionTypeSettingsPtr AutoCAD::IAcadSectionSettings::GetSectionTypeSettings ( enum AcSectionType secType ) {
    struct IAcadSectionTypeSettings * _result = 0;
    HRESULT _hr = raw_GetSectionTypeSettings(secType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadSectionTypeSettingsPtr(_result, false);
}

//
// interface IAcadSection wrapper method implementations
//

#pragma implementation_key(2219)
inline _bstr_t AutoCAD::IAcadSection::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2220)
inline void AutoCAD::IAcadSection::PutName ( _bstr_t pbstrName ) {
    HRESULT _hr = put_Name(pbstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2221)
inline enum AutoCAD::AcSectionState AutoCAD::IAcadSection::GetState ( ) {
    enum AcSectionState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2222)
inline void AutoCAD::IAcadSection::PutState ( enum AcSectionState pVal ) {
    HRESULT _hr = put_State(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2223)
inline _variant_t AutoCAD::IAcadSection::GetViewingDirection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ViewingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2224)
inline void AutoCAD::IAcadSection::PutViewingDirection ( const _variant_t & pVal ) {
    HRESULT _hr = put_ViewingDirection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2225)
inline _variant_t AutoCAD::IAcadSection::GetVerticalDirection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2226)
inline void AutoCAD::IAcadSection::PutVerticalDirection ( const _variant_t & pVal ) {
    HRESULT _hr = put_VerticalDirection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2227)
inline _variant_t AutoCAD::IAcadSection::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2228)
inline VARIANT_BOOL AutoCAD::IAcadSection::GetLiveSectionEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LiveSectionEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2229)
inline void AutoCAD::IAcadSection::PutLiveSectionEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LiveSectionEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2230)
inline int AutoCAD::IAcadSection::GetIndicatorTransparency ( ) {
    int _result = 0;
    HRESULT _hr = get_IndicatorTransparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2231)
inline void AutoCAD::IAcadSection::PutIndicatorTransparency ( int pVal ) {
    HRESULT _hr = put_IndicatorTransparency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2232)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadSection::GetIndicatorFillColor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_IndicatorFillColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(2233)
inline void AutoCAD::IAcadSection::PutIndicatorFillColor ( struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = put_IndicatorFillColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2234)
inline double AutoCAD::IAcadSection::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2235)
inline void AutoCAD::IAcadSection::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2236)
inline double AutoCAD::IAcadSection::GetTopHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_TopHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2237)
inline void AutoCAD::IAcadSection::PutTopHeight ( double pVal ) {
    HRESULT _hr = put_TopHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2238)
inline double AutoCAD::IAcadSection::GetBottomHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_BottomHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2239)
inline void AutoCAD::IAcadSection::PutBottomHeight ( double pVal ) {
    HRESULT _hr = put_BottomHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2240)
inline int AutoCAD::IAcadSection::GetNumVertices ( ) {
    int _result = 0;
    HRESULT _hr = get_NumVertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2241)
inline _variant_t AutoCAD::IAcadSection::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2242)
inline void AutoCAD::IAcadSection::PutVertices ( const _variant_t & pVal ) {
    HRESULT _hr = put_Vertices(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2243)
inline _variant_t AutoCAD::IAcadSection::GetCoordinate ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinate(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2244)
inline void AutoCAD::IAcadSection::PutCoordinate ( int Index, const _variant_t & pVal ) {
    HRESULT _hr = put_Coordinate(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2245)
inline HRESULT AutoCAD::IAcadSection::AddVertex ( int nIndex, const _variant_t & val ) {
    HRESULT _hr = raw_AddVertex(nIndex, val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2246)
inline HRESULT AutoCAD::IAcadSection::RemoveVertex ( int nIndex ) {
    HRESULT _hr = raw_RemoveVertex(nIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2247)
inline HRESULT AutoCAD::IAcadSection::HitTest ( const _variant_t & varPtHit, VARIANT_BOOL * pHit, int * pSegmentIndex, VARIANT * pPtOnSegment, enum AcSectionSubItem * pSubItem ) {
    HRESULT _hr = raw_HitTest(varPtHit, pHit, pSegmentIndex, pPtOnSegment, pSubItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2248)
inline HRESULT AutoCAD::IAcadSection::CreateJog ( const _variant_t & varPt ) {
    HRESULT _hr = raw_CreateJog(varPt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2249)
inline AutoCAD::IAcadSectionSettingsPtr AutoCAD::IAcadSection::GetSettings ( ) {
    struct IAcadSectionSettings * _result = 0;
    HRESULT _hr = get_Settings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadSectionSettingsPtr(_result, false);
}

#pragma implementation_key(2250)
inline HRESULT AutoCAD::IAcadSection::GenerateSectionGeometry ( struct IAcadEntity * pEntity, VARIANT * pIntersectionBoundaryObjs, VARIANT * pIntersectionFillObjs, VARIANT * pBackgroudnObjs, VARIANT * pForegroudObjs, VARIANT * pCurveTangencyObjs ) {
    HRESULT _hr = raw_GenerateSectionGeometry(pEntity, pIntersectionBoundaryObjs, pIntersectionFillObjs, pBackgroudnObjs, pForegroudObjs, pCurveTangencyObjs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadMLeader wrapper method implementations
//

#pragma implementation_key(2251)
inline double AutoCAD::IAcadMLeader::GetScaleFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2252)
inline void AutoCAD::IAcadMLeader::PutScaleFactor ( double scale ) {
    HRESULT _hr = put_ScaleFactor(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2253)
inline enum AutoCAD::AcMLeaderType AutoCAD::IAcadMLeader::GetLeaderType ( ) {
    enum AcMLeaderType _result;
    HRESULT _hr = get_LeaderType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2254)
inline void AutoCAD::IAcadMLeader::PutLeaderType ( enum AcMLeaderType Type ) {
    HRESULT _hr = put_LeaderType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2255)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadMLeader::GetLeaderLineColor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_LeaderLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(2256)
inline void AutoCAD::IAcadMLeader::PutLeaderLineColor ( struct IAcadAcCmColor * Type ) {
    HRESULT _hr = put_LeaderLineColor(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2257)
inline AutoCAD::ACAD_LTYPE AutoCAD::IAcadMLeader::GetLeaderLinetype ( ) {
    ACAD_LTYPE _result;
    HRESULT _hr = get_LeaderLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2258)
inline void AutoCAD::IAcadMLeader::PutLeaderLinetype ( ACAD_LTYPE Linetype ) {
    HRESULT _hr = put_LeaderLinetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2259)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadMLeader::GetLeaderLineWeight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_LeaderLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2260)
inline void AutoCAD::IAcadMLeader::PutLeaderLineWeight ( ACAD_LWEIGHT Lineweight ) {
    HRESULT _hr = put_LeaderLineWeight(Lineweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2261)
inline enum AutoCAD::AcDimArrowheadType AutoCAD::IAcadMLeader::GetArrowheadType ( ) {
    enum AcDimArrowheadType _result;
    HRESULT _hr = get_ArrowheadType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2262)
inline void AutoCAD::IAcadMLeader::PutArrowheadType ( enum AcDimArrowheadType BlockName ) {
    HRESULT _hr = put_ArrowheadType(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2263)
inline double AutoCAD::IAcadMLeader::GetArrowheadSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowheadSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2264)
inline void AutoCAD::IAcadMLeader::PutArrowheadSize ( double size ) {
    HRESULT _hr = put_ArrowheadSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2265)
inline VARIANT_BOOL AutoCAD::IAcadMLeader::GetDogLegged ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DogLegged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2266)
inline void AutoCAD::IAcadMLeader::PutDogLegged ( VARIANT_BOOL val ) {
    HRESULT _hr = put_DogLegged(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2267)
inline double AutoCAD::IAcadMLeader::GetDoglegLength ( ) {
    double _result = 0;
    HRESULT _hr = get_DoglegLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2268)
inline void AutoCAD::IAcadMLeader::PutDoglegLength ( double DoglegLength ) {
    HRESULT _hr = put_DoglegLength(DoglegLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2269)
inline _bstr_t AutoCAD::IAcadMLeader::GetContentBlockName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ContentBlockName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2270)
inline void AutoCAD::IAcadMLeader::PutContentBlockName ( _bstr_t BlockName ) {
    HRESULT _hr = put_ContentBlockName(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2271)
inline enum AutoCAD::AcBlockConnectionType AutoCAD::IAcadMLeader::GetBlockConnectionType ( ) {
    enum AcBlockConnectionType _result;
    HRESULT _hr = get_BlockConnectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2272)
inline void AutoCAD::IAcadMLeader::PutBlockConnectionType ( enum AcBlockConnectionType Type ) {
    HRESULT _hr = put_BlockConnectionType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2273)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadMLeader::GetBlockScale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_BlockScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2274)
inline void AutoCAD::IAcadMLeader::PutBlockScale ( ACAD_NOUNITS factor ) {
    HRESULT _hr = put_BlockScale(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2275)
inline _bstr_t AutoCAD::IAcadMLeader::GetTextString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2276)
inline void AutoCAD::IAcadMLeader::PutTextString ( _bstr_t bstrText ) {
    HRESULT _hr = put_TextString(bstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2277)
inline _bstr_t AutoCAD::IAcadMLeader::GetTextStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2278)
inline void AutoCAD::IAcadMLeader::PutTextStyleName ( _bstr_t bstrName ) {
    HRESULT _hr = put_TextStyleName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2279)
inline enum AutoCAD::AcAttachmentPoint AutoCAD::IAcadMLeader::GetTextJustify ( ) {
    enum AcAttachmentPoint _result;
    HRESULT _hr = get_TextJustify(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2280)
inline void AutoCAD::IAcadMLeader::PutTextJustify ( enum AcAttachmentPoint attPoint ) {
    HRESULT _hr = put_TextJustify(attPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2281)
inline enum AutoCAD::AcDrawingDirection AutoCAD::IAcadMLeader::GetTextDirection ( ) {
    enum AcDrawingDirection _result;
    HRESULT _hr = get_TextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2282)
inline void AutoCAD::IAcadMLeader::PutTextDirection ( enum AcDrawingDirection drawDir ) {
    HRESULT _hr = put_TextDirection(drawDir);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2283)
inline double AutoCAD::IAcadMLeader::GetTextWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_TextWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2284)
inline void AutoCAD::IAcadMLeader::PutTextWidth ( double Width ) {
    HRESULT _hr = put_TextWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2285)
inline double AutoCAD::IAcadMLeader::GetTextHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2286)
inline void AutoCAD::IAcadMLeader::PutTextHeight ( double Height ) {
    HRESULT _hr = put_TextHeight(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2287)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadMLeader::GetTextRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_TextRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2288)
inline void AutoCAD::IAcadMLeader::PutTextRotation ( ACAD_ANGLE rotAngle ) {
    HRESULT _hr = put_TextRotation(rotAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2289)
inline double AutoCAD::IAcadMLeader::GetTextLineSpacingFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_TextLineSpacingFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2290)
inline void AutoCAD::IAcadMLeader::PutTextLineSpacingFactor ( double factor ) {
    HRESULT _hr = put_TextLineSpacingFactor(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2291)
inline double AutoCAD::IAcadMLeader::GetTextLineSpacingDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_TextLineSpacingDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2292)
inline void AutoCAD::IAcadMLeader::PutTextLineSpacingDistance ( double Value ) {
    HRESULT _hr = put_TextLineSpacingDistance(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2293)
inline enum AutoCAD::AcLineSpacingStyle AutoCAD::IAcadMLeader::GetTextLineSpacingStyle ( ) {
    enum AcLineSpacingStyle _result;
    HRESULT _hr = get_TextLineSpacingStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2294)
inline void AutoCAD::IAcadMLeader::PutTextLineSpacingStyle ( enum AcLineSpacingStyle style ) {
    HRESULT _hr = put_TextLineSpacingStyle(style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2295)
inline VARIANT_BOOL AutoCAD::IAcadMLeader::GetTextBackgroundFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextBackgroundFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2296)
inline void AutoCAD::IAcadMLeader::PutTextBackgroundFill ( VARIANT_BOOL bUseBackgroundFill ) {
    HRESULT _hr = put_TextBackgroundFill(bUseBackgroundFill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2297)
inline enum AutoCAD::AcTextAttachmentDirection AutoCAD::IAcadMLeader::GetTextAttachmentDirection ( ) {
    enum AcTextAttachmentDirection _result;
    HRESULT _hr = get_TextAttachmentDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2298)
inline void AutoCAD::IAcadMLeader::PutTextAttachmentDirection ( enum AcTextAttachmentDirection dir ) {
    HRESULT _hr = put_TextAttachmentDirection(dir);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2299)
inline enum AutoCAD::AcTextAttachmentType AutoCAD::IAcadMLeader::GetTextLeftAttachmentType ( ) {
    enum AcTextAttachmentType _result;
    HRESULT _hr = get_TextLeftAttachmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2300)
inline void AutoCAD::IAcadMLeader::PutTextLeftAttachmentType ( enum AcTextAttachmentType Type ) {
    HRESULT _hr = put_TextLeftAttachmentType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2301)
inline enum AutoCAD::AcTextAttachmentType AutoCAD::IAcadMLeader::GetTextRightAttachmentType ( ) {
    enum AcTextAttachmentType _result;
    HRESULT _hr = get_TextRightAttachmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2302)
inline void AutoCAD::IAcadMLeader::PutTextRightAttachmentType ( enum AcTextAttachmentType Type ) {
    HRESULT _hr = put_TextRightAttachmentType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2303)
inline enum AutoCAD::AcVerticalTextAttachmentType AutoCAD::IAcadMLeader::GetTextTopAttachmentType ( ) {
    enum AcVerticalTextAttachmentType _result;
    HRESULT _hr = get_TextTopAttachmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2304)
inline void AutoCAD::IAcadMLeader::PutTextTopAttachmentType ( enum AcVerticalTextAttachmentType Type ) {
    HRESULT _hr = put_TextTopAttachmentType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2305)
inline enum AutoCAD::AcVerticalTextAttachmentType AutoCAD::IAcadMLeader::GetTextBottomAttachmentType ( ) {
    enum AcVerticalTextAttachmentType _result;
    HRESULT _hr = get_TextBottomAttachmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2306)
inline void AutoCAD::IAcadMLeader::PutTextBottomAttachmentType ( enum AcVerticalTextAttachmentType Type ) {
    HRESULT _hr = put_TextBottomAttachmentType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2307)
inline double AutoCAD::IAcadMLeader::GetLandingGap ( ) {
    double _result = 0;
    HRESULT _hr = get_LandingGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2308)
inline void AutoCAD::IAcadMLeader::PutLandingGap ( double gap ) {
    HRESULT _hr = put_LandingGap(gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2309)
inline _bstr_t AutoCAD::IAcadMLeader::GetArrowheadBlock ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ArrowheadBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2310)
inline void AutoCAD::IAcadMLeader::PutArrowheadBlock ( _bstr_t BlockName ) {
    HRESULT _hr = put_ArrowheadBlock(BlockName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2311)
inline enum AutoCAD::AcPredefBlockType AutoCAD::IAcadMLeader::GetContentBlockType ( ) {
    enum AcPredefBlockType _result;
    HRESULT _hr = get_ContentBlockType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2312)
inline void AutoCAD::IAcadMLeader::PutContentBlockType ( enum AcPredefBlockType Type ) {
    HRESULT _hr = put_ContentBlockType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2313)
inline int AutoCAD::IAcadMLeader::GetLeaderCount ( ) {
    int _result = 0;
    HRESULT _hr = get_LeaderCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2314)
inline int AutoCAD::IAcadMLeader::AddLeader ( ) {
    int _result = 0;
    HRESULT _hr = raw_AddLeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2315)
inline HRESULT AutoCAD::IAcadMLeader::RemoveLeader ( int leaderIndex ) {
    HRESULT _hr = raw_RemoveLeader(leaderIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2316)
inline int AutoCAD::IAcadMLeader::AddLeaderLine ( int leaderIndex, const _variant_t & pointArray ) {
    int _result = 0;
    HRESULT _hr = raw_AddLeaderLine(leaderIndex, pointArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2317)
inline int AutoCAD::IAcadMLeader::AddLeaderLineEx ( const _variant_t & pointArray ) {
    int _result = 0;
    HRESULT _hr = raw_AddLeaderLineEx(pointArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2318)
inline HRESULT AutoCAD::IAcadMLeader::RemoveLeaderLine ( int leaderLineIndex ) {
    HRESULT _hr = raw_RemoveLeaderLine(leaderLineIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2319)
inline HRESULT AutoCAD::IAcadMLeader::SetLeaderLineVertices ( int leaderLineIndex, const _variant_t & pointArray ) {
    HRESULT _hr = raw_SetLeaderLineVertices(leaderLineIndex, pointArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2320)
inline _variant_t AutoCAD::IAcadMLeader::GetLeaderLineVertices ( int leaderLineIndex ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetLeaderLineVertices(leaderLineIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2321)
inline void AutoCAD::IAcadMLeader::PutContentType ( enum AcMLeaderContentType Type ) {
    HRESULT _hr = put_ContentType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2322)
inline enum AutoCAD::AcMLeaderContentType AutoCAD::IAcadMLeader::GetContentType ( ) {
    enum AcMLeaderContentType _result;
    HRESULT _hr = get_ContentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2323)
inline int AutoCAD::IAcadMLeader::GetLeaderIndex ( int leaderLineIndex ) {
    int _result = 0;
    HRESULT _hr = raw_GetLeaderIndex(leaderLineIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2324)
inline _variant_t AutoCAD::IAcadMLeader::GetLeaderLineIndexes ( int leaderIndex ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetLeaderLineIndexes(leaderIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2325)
inline int AutoCAD::IAcadMLeader::GetVertexCount ( int leaderLineIndex ) {
    int _result = 0;
    HRESULT _hr = raw_GetVertexCount(leaderLineIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2326)
inline VARIANT_BOOL AutoCAD::IAcadMLeader::GetTextFrameDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextFrameDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2327)
inline void AutoCAD::IAcadMLeader::PutTextFrameDisplay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TextFrameDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2328)
inline _bstr_t AutoCAD::IAcadMLeader::GetStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2329)
inline void AutoCAD::IAcadMLeader::PutStyleName ( _bstr_t Name ) {
    HRESULT _hr = put_StyleName(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2330)
inline _variant_t AutoCAD::IAcadMLeader::GetDoglegDirection ( int leaderIndex ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetDoglegDirection(leaderIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2331)
inline HRESULT AutoCAD::IAcadMLeader::SetDoglegDirection ( int leaderIndex, const _variant_t & dirVec ) {
    HRESULT _hr = raw_SetDoglegDirection(leaderIndex, dirVec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2332)
inline _bstr_t AutoCAD::IAcadMLeader::GetBlockAttributeValue ( LONG_PTR attdefId ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBlockAttributeValue(attdefId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2333)
inline HRESULT AutoCAD::IAcadMLeader::SetBlockAttributeValue ( LONG_PTR attdefId, _bstr_t Value ) {
    HRESULT _hr = raw_SetBlockAttributeValue(attdefId, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadView wrapper method implementations
//

#pragma implementation_key(2334)
inline _variant_t AutoCAD::IAcadView::GetCenter ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2335)
inline void AutoCAD::IAcadView::PutCenter ( const _variant_t & Center ) {
    HRESULT _hr = put_Center(Center);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2336)
inline double AutoCAD::IAcadView::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2337)
inline void AutoCAD::IAcadView::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2338)
inline double AutoCAD::IAcadView::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2339)
inline void AutoCAD::IAcadView::PutWidth ( double Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2340)
inline _variant_t AutoCAD::IAcadView::GetTarget ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2341)
inline void AutoCAD::IAcadView::PutTarget ( const _variant_t & targetPoint ) {
    HRESULT _hr = put_Target(targetPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2342)
inline _variant_t AutoCAD::IAcadView::GetDirection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2343)
inline void AutoCAD::IAcadView::PutDirection ( const _variant_t & dirVec ) {
    HRESULT _hr = put_Direction(dirVec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2344)
inline _bstr_t AutoCAD::IAcadView::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2345)
inline void AutoCAD::IAcadView::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2346)
inline _bstr_t AutoCAD::IAcadView::GetCategoryName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CategoryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2347)
inline void AutoCAD::IAcadView::PutCategoryName ( _bstr_t category ) {
    HRESULT _hr = put_CategoryName(category);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2348)
inline AutoCAD::LONG_PTR AutoCAD::IAcadView::GetLayoutId ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_LayoutId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2349)
inline void AutoCAD::IAcadView::PutLayoutId ( LONG_PTR ObjectID ) {
    HRESULT _hr = put_LayoutId(ObjectID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2350)
inline _bstr_t AutoCAD::IAcadView::GetLayerState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LayerState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2351)
inline void AutoCAD::IAcadView::PutLayerState ( _bstr_t LayerState ) {
    HRESULT _hr = put_LayerState(LayerState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2352)
inline VARIANT_BOOL AutoCAD::IAcadView::GetHasVpAssociation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasVpAssociation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2353)
inline void AutoCAD::IAcadView::PutHasVpAssociation ( VARIANT_BOOL bVpAssoc ) {
    HRESULT _hr = put_HasVpAssociation(bVpAssoc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadPViewport wrapper method implementations
//

#pragma implementation_key(2354)
inline _variant_t AutoCAD::IAcadPViewport::GetCenter ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2355)
inline void AutoCAD::IAcadPViewport::PutCenter ( const _variant_t & CenterPoint ) {
    HRESULT _hr = put_Center(CenterPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2356)
inline _variant_t AutoCAD::IAcadPViewport::GetDirection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2357)
inline void AutoCAD::IAcadPViewport::PutDirection ( const _variant_t & dirVector ) {
    HRESULT _hr = put_Direction(dirVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2358)
inline VARIANT_BOOL AutoCAD::IAcadPViewport::GetGridOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GridOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2359)
inline void AutoCAD::IAcadPViewport::PutGridOn ( VARIANT_BOOL bGridOn ) {
    HRESULT _hr = put_GridOn(bGridOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2360)
inline double AutoCAD::IAcadPViewport::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2361)
inline void AutoCAD::IAcadPViewport::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2362)
inline double AutoCAD::IAcadPViewport::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2363)
inline void AutoCAD::IAcadPViewport::PutWidth ( double Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2364)
inline VARIANT_BOOL AutoCAD::IAcadPViewport::GetViewportOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ViewportOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2365)
inline void AutoCAD::IAcadPViewport::PutViewportOn ( VARIANT_BOOL bOn ) {
    HRESULT _hr = put_ViewportOn(bOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2366)
inline VARIANT_BOOL AutoCAD::IAcadPViewport::GetClipped ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Clipped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2367)
inline VARIANT_BOOL AutoCAD::IAcadPViewport::GetDisplayLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayLocked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2368)
inline void AutoCAD::IAcadPViewport::PutDisplayLocked ( VARIANT_BOOL bLocked ) {
    HRESULT _hr = put_DisplayLocked(bLocked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2369)
inline enum AutoCAD::AcViewportScale AutoCAD::IAcadPViewport::GetStandardScale ( ) {
    enum AcViewportScale _result;
    HRESULT _hr = get_StandardScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2370)
inline void AutoCAD::IAcadPViewport::PutStandardScale ( enum AcViewportScale scale ) {
    HRESULT _hr = put_StandardScale(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2371)
inline double AutoCAD::IAcadPViewport::GetCustomScale ( ) {
    double _result = 0;
    HRESULT _hr = get_CustomScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2372)
inline void AutoCAD::IAcadPViewport::PutCustomScale ( double scale ) {
    HRESULT _hr = put_CustomScale(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2373)
inline _bstr_t AutoCAD::IAcadPViewport::GetStyleSheet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StyleSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2374)
inline void AutoCAD::IAcadPViewport::PutStyleSheet ( _bstr_t pName ) {
    HRESULT _hr = put_StyleSheet(pName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2375)
inline VARIANT_BOOL AutoCAD::IAcadPViewport::GetUCSPerViewport ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UCSPerViewport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2376)
inline void AutoCAD::IAcadPViewport::PutUCSPerViewport ( VARIANT_BOOL UCSSaved ) {
    HRESULT _hr = put_UCSPerViewport(UCSSaved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2377)
inline _variant_t AutoCAD::IAcadPViewport::GetSnapBasePoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SnapBasePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2378)
inline void AutoCAD::IAcadPViewport::PutSnapBasePoint ( const _variant_t & lowLeft ) {
    HRESULT _hr = put_SnapBasePoint(lowLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2379)
inline VARIANT_BOOL AutoCAD::IAcadPViewport::GetSnapOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SnapOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2380)
inline void AutoCAD::IAcadPViewport::PutSnapOn ( VARIANT_BOOL bSnapOn ) {
    HRESULT _hr = put_SnapOn(bSnapOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2381)
inline double AutoCAD::IAcadPViewport::GetSnapRotationAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_SnapRotationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2382)
inline void AutoCAD::IAcadPViewport::PutSnapRotationAngle ( double Angle ) {
    HRESULT _hr = put_SnapRotationAngle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2383)
inline VARIANT_BOOL AutoCAD::IAcadPViewport::GetUCSIconOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UCSIconOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2384)
inline void AutoCAD::IAcadPViewport::PutUCSIconOn ( VARIANT_BOOL bIconOn ) {
    HRESULT _hr = put_UCSIconOn(bIconOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2385)
inline VARIANT_BOOL AutoCAD::IAcadPViewport::GetUCSIconAtOrigin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UCSIconAtOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2386)
inline void AutoCAD::IAcadPViewport::PutUCSIconAtOrigin ( VARIANT_BOOL bIconAtOrigin ) {
    HRESULT _hr = put_UCSIconAtOrigin(bIconAtOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2387)
inline HRESULT AutoCAD::IAcadPViewport::GetGridSpacing ( double * XSpacing, double * YSpacing ) {
    HRESULT _hr = raw_GetGridSpacing(XSpacing, YSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2388)
inline HRESULT AutoCAD::IAcadPViewport::SetGridSpacing ( double XSpacing, double YSpacing ) {
    HRESULT _hr = raw_SetGridSpacing(XSpacing, YSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2389)
inline HRESULT AutoCAD::IAcadPViewport::GetSnapSpacing ( double * XSpacing, double * YSpacing ) {
    HRESULT _hr = raw_GetSnapSpacing(XSpacing, YSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2390)
inline HRESULT AutoCAD::IAcadPViewport::SetSnapSpacing ( double XSpacing, double YSpacing ) {
    HRESULT _hr = raw_SetSnapSpacing(XSpacing, YSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2391)
inline HRESULT AutoCAD::IAcadPViewport::Display ( VARIANT_BOOL bStatus ) {
    HRESULT _hr = raw_Display(bStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2392)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadPViewport::GetTwistAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_TwistAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2393)
inline void AutoCAD::IAcadPViewport::PutTwistAngle ( ACAD_ANGLE Angle ) {
    HRESULT _hr = put_TwistAngle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2394)
inline double AutoCAD::IAcadPViewport::GetLensLength ( ) {
    double _result = 0;
    HRESULT _hr = get_LensLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2395)
inline void AutoCAD::IAcadPViewport::PutLensLength ( double Length ) {
    HRESULT _hr = put_LensLength(Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2396)
inline VARIANT_BOOL AutoCAD::IAcadPViewport::GetRemoveHiddenLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RemoveHiddenLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2397)
inline void AutoCAD::IAcadPViewport::PutRemoveHiddenLines ( VARIANT_BOOL bRemoval ) {
    HRESULT _hr = put_RemoveHiddenLines(bRemoval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2398)
inline _variant_t AutoCAD::IAcadPViewport::GetTarget ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2399)
inline void AutoCAD::IAcadPViewport::PutTarget ( const _variant_t & targetPoint ) {
    HRESULT _hr = put_Target(targetPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2400)
inline long AutoCAD::IAcadPViewport::GetArcSmoothness ( ) {
    long _result = 0;
    HRESULT _hr = get_ArcSmoothness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2401)
inline void AutoCAD::IAcadPViewport::PutArcSmoothness ( long arcSmooth ) {
    HRESULT _hr = put_ArcSmoothness(arcSmooth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2402)
inline int AutoCAD::IAcadPViewport::GetVisualStyle ( ) {
    int _result = 0;
    HRESULT _hr = get_VisualStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2403)
inline void AutoCAD::IAcadPViewport::PutVisualStyle ( int pVisualStyleIndex ) {
    HRESULT _hr = put_VisualStyle(pVisualStyleIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2404)
inline int AutoCAD::IAcadPViewport::GetShadePlot ( ) {
    int _result = 0;
    HRESULT _hr = get_ShadePlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2405)
inline void AutoCAD::IAcadPViewport::PutShadePlot ( int pShadePlotIndex ) {
    HRESULT _hr = put_ShadePlot(pShadePlotIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2406)
inline AutoCAD::IAcadViewPtr AutoCAD::IAcadPViewport::GetModelView ( ) {
    struct IAcadView * _result = 0;
    HRESULT _hr = get_ModelView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadViewPtr(_result, false);
}

#pragma implementation_key(2407)
inline void AutoCAD::IAcadPViewport::PutModelView ( struct IAcadView * View ) {
    HRESULT _hr = put_ModelView(View);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2408)
inline AutoCAD::IAcadViewPtr AutoCAD::IAcadPViewport::GetSheetView ( ) {
    struct IAcadView * _result = 0;
    HRESULT _hr = get_SheetView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadViewPtr(_result, false);
}

#pragma implementation_key(2409)
inline void AutoCAD::IAcadPViewport::PutSheetView ( struct IAcadView * View ) {
    HRESULT _hr = put_SheetView(View);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2410)
inline AutoCAD::LONG_PTR AutoCAD::IAcadPViewport::GetLabelBlockId ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_LabelBlockId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2411)
inline void AutoCAD::IAcadPViewport::PutLabelBlockId ( LONG_PTR * ObjectID ) {
    HRESULT _hr = put_LabelBlockId(ObjectID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2412)
inline VARIANT_BOOL AutoCAD::IAcadPViewport::GetHasSheetView ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasSheetView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2413)
inline HRESULT AutoCAD::IAcadPViewport::SyncModelView ( ) {
    HRESULT _hr = raw_SyncModelView();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2414)
inline int AutoCAD::IAcadPViewport::GetStandardScale2 ( ) {
    int _result = 0;
    HRESULT _hr = get_StandardScale2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2415)
inline void AutoCAD::IAcadPViewport::PutStandardScale2 ( int scale ) {
    HRESULT _hr = put_StandardScale2(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2416)
inline VARIANT_BOOL AutoCAD::IAcadPViewport::GetLayerPropertyOverrides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LayerPropertyOverrides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadGroup wrapper method implementations
//

#pragma implementation_key(2417)
inline AutoCAD::IAcadEntityPtr AutoCAD::IAcadGroup::Item ( const _variant_t & Index ) {
    struct IAcadEntity * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadEntityPtr(_result, false);
}

#pragma implementation_key(2418)
inline IUnknownPtr AutoCAD::IAcadGroup::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2419)
inline long AutoCAD::IAcadGroup::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2420)
inline void AutoCAD::IAcadGroup::PutTrueColor ( struct IAcadAcCmColor * _arg1 ) {
    HRESULT _hr = put_TrueColor(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2421)
inline void AutoCAD::IAcadGroup::PutLayer ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Layer(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2422)
inline void AutoCAD::IAcadGroup::PutLinetype ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Linetype(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2423)
inline void AutoCAD::IAcadGroup::PutLinetypeScale ( ACAD_NOUNITS _arg1 ) {
    HRESULT _hr = put_LinetypeScale(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2424)
inline void AutoCAD::IAcadGroup::PutVisible ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_Visible(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2425)
inline HRESULT AutoCAD::IAcadGroup::Highlight ( VARIANT_BOOL HighlightFlag ) {
    HRESULT _hr = raw_Highlight(HighlightFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2426)
inline void AutoCAD::IAcadGroup::PutPlotStyleName ( _bstr_t _arg1 ) {
    HRESULT _hr = put_PlotStyleName(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2427)
inline void AutoCAD::IAcadGroup::PutLineweight ( ACAD_LWEIGHT _arg1 ) {
    HRESULT _hr = put_Lineweight(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2428)
inline _bstr_t AutoCAD::IAcadGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2429)
inline void AutoCAD::IAcadGroup::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2430)
inline HRESULT AutoCAD::IAcadGroup::AppendItems ( const _variant_t & Objects ) {
    HRESULT _hr = raw_AppendItems(Objects);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2431)
inline HRESULT AutoCAD::IAcadGroup::RemoveItems ( const _variant_t & Objects ) {
    HRESULT _hr = raw_RemoveItems(Objects);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2432)
inline HRESULT AutoCAD::IAcadGroup::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2433)
inline void AutoCAD::IAcadGroup::PutMaterial ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Material(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2434)
inline void AutoCAD::IAcadGroup::Putcolor ( enum AcColor _arg1 ) {
    HRESULT _hr = put_color(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadGroups wrapper method implementations
//

#pragma implementation_key(2435)
inline AutoCAD::IAcadGroupPtr AutoCAD::IAcadGroups::Item ( const _variant_t & Index ) {
    struct IAcadGroup * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadGroupPtr(_result, false);
}

#pragma implementation_key(2436)
inline long AutoCAD::IAcadGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2437)
inline IUnknownPtr AutoCAD::IAcadGroups::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2438)
inline AutoCAD::IAcadGroupPtr AutoCAD::IAcadGroups::Add ( _bstr_t Name ) {
    struct IAcadGroup * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadGroupPtr(_result, false);
}

//
// interface IAcadDimStyle wrapper method implementations
//

#pragma implementation_key(2439)
inline _bstr_t AutoCAD::IAcadDimStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2440)
inline void AutoCAD::IAcadDimStyle::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2441)
inline HRESULT AutoCAD::IAcadDimStyle::CopyFrom ( IDispatch * StyleSource ) {
    HRESULT _hr = raw_CopyFrom(StyleSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadDimStyles wrapper method implementations
//

#pragma implementation_key(2442)
inline AutoCAD::IAcadDimStylePtr AutoCAD::IAcadDimStyles::Item ( const _variant_t & Index ) {
    struct IAcadDimStyle * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDimStylePtr(_result, false);
}

#pragma implementation_key(2443)
inline long AutoCAD::IAcadDimStyles::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2444)
inline IUnknownPtr AutoCAD::IAcadDimStyles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2445)
inline AutoCAD::IAcadDimStylePtr AutoCAD::IAcadDimStyles::Add ( _bstr_t Name ) {
    struct IAcadDimStyle * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDimStylePtr(_result, false);
}

//
// interface IAcadLayer wrapper method implementations
//

#pragma implementation_key(2446)
inline enum AutoCAD::AcColor AutoCAD::IAcadLayer::Getcolor ( ) {
    enum AcColor _result;
    HRESULT _hr = get_color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2447)
inline void AutoCAD::IAcadLayer::Putcolor ( enum AcColor color ) {
    HRESULT _hr = put_color(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2448)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadLayer::GetTrueColor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_TrueColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(2449)
inline void AutoCAD::IAcadLayer::PutTrueColor ( struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = put_TrueColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2450)
inline VARIANT_BOOL AutoCAD::IAcadLayer::GetFreeze ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Freeze(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2451)
inline void AutoCAD::IAcadLayer::PutFreeze ( VARIANT_BOOL bFreeze ) {
    HRESULT _hr = put_Freeze(bFreeze);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2452)
inline VARIANT_BOOL AutoCAD::IAcadLayer::GetLayerOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LayerOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2453)
inline void AutoCAD::IAcadLayer::PutLayerOn ( VARIANT_BOOL bOn ) {
    HRESULT _hr = put_LayerOn(bOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2454)
inline _bstr_t AutoCAD::IAcadLayer::GetLinetype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Linetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2455)
inline void AutoCAD::IAcadLayer::PutLinetype ( _bstr_t Linetype ) {
    HRESULT _hr = put_Linetype(Linetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2456)
inline VARIANT_BOOL AutoCAD::IAcadLayer::GetLock ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2457)
inline void AutoCAD::IAcadLayer::PutLock ( VARIANT_BOOL Block ) {
    HRESULT _hr = put_Lock(Block);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2458)
inline _bstr_t AutoCAD::IAcadLayer::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2459)
inline void AutoCAD::IAcadLayer::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2460)
inline VARIANT_BOOL AutoCAD::IAcadLayer::GetPlottable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Plottable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2461)
inline void AutoCAD::IAcadLayer::PutPlottable ( VARIANT_BOOL bPlottable ) {
    HRESULT _hr = put_Plottable(bPlottable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2462)
inline VARIANT_BOOL AutoCAD::IAcadLayer::GetViewportDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ViewportDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2463)
inline void AutoCAD::IAcadLayer::PutViewportDefault ( VARIANT_BOOL bDefault ) {
    HRESULT _hr = put_ViewportDefault(bDefault);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2464)
inline _bstr_t AutoCAD::IAcadLayer::GetPlotStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlotStyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2465)
inline void AutoCAD::IAcadLayer::PutPlotStyleName ( _bstr_t plotStyle ) {
    HRESULT _hr = put_PlotStyleName(plotStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2466)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadLayer::GetLineweight ( ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = get_Lineweight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2467)
inline void AutoCAD::IAcadLayer::PutLineweight ( ACAD_LWEIGHT Lineweight ) {
    HRESULT _hr = put_Lineweight(Lineweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2468)
inline _bstr_t AutoCAD::IAcadLayer::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2469)
inline void AutoCAD::IAcadLayer::PutDescription ( _bstr_t Description ) {
    HRESULT _hr = put_Description(Description);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2470)
inline VARIANT_BOOL AutoCAD::IAcadLayer::GetUsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Used(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2471)
inline _bstr_t AutoCAD::IAcadLayer::GetMaterial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Material(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2472)
inline void AutoCAD::IAcadLayer::PutMaterial ( _bstr_t Material ) {
    HRESULT _hr = put_Material(Material);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadLayers wrapper method implementations
//

#pragma implementation_key(2473)
inline AutoCAD::IAcadLayerPtr AutoCAD::IAcadLayers::Item ( const _variant_t & Index ) {
    struct IAcadLayer * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLayerPtr(_result, false);
}

#pragma implementation_key(2474)
inline long AutoCAD::IAcadLayers::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2475)
inline IUnknownPtr AutoCAD::IAcadLayers::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2476)
inline AutoCAD::IAcadLayerPtr AutoCAD::IAcadLayers::Add ( _bstr_t Name ) {
    struct IAcadLayer * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLayerPtr(_result, false);
}

#pragma implementation_key(2477)
inline HRESULT AutoCAD::IAcadLayers::GenerateUsageData ( ) {
    HRESULT _hr = raw_GenerateUsageData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadLineType wrapper method implementations
//

#pragma implementation_key(2478)
inline _bstr_t AutoCAD::IAcadLineType::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2479)
inline void AutoCAD::IAcadLineType::PutDescription ( _bstr_t bstrDes ) {
    HRESULT _hr = put_Description(bstrDes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2480)
inline _bstr_t AutoCAD::IAcadLineType::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2481)
inline void AutoCAD::IAcadLineType::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadLineTypes wrapper method implementations
//

#pragma implementation_key(2482)
inline AutoCAD::IAcadLineTypePtr AutoCAD::IAcadLineTypes::Item ( const _variant_t & Index ) {
    struct IAcadLineType * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLineTypePtr(_result, false);
}

#pragma implementation_key(2483)
inline long AutoCAD::IAcadLineTypes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2484)
inline IUnknownPtr AutoCAD::IAcadLineTypes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2485)
inline AutoCAD::IAcadLineTypePtr AutoCAD::IAcadLineTypes::Add ( _bstr_t Name ) {
    struct IAcadLineType * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLineTypePtr(_result, false);
}

#pragma implementation_key(2486)
inline HRESULT AutoCAD::IAcadLineTypes::Load ( _bstr_t Name, _bstr_t FileName ) {
    HRESULT _hr = raw_Load(Name, FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadXRecord wrapper method implementations
//

#pragma implementation_key(2487)
inline _bstr_t AutoCAD::IAcadXRecord::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2488)
inline void AutoCAD::IAcadXRecord::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2489)
inline HRESULT AutoCAD::IAcadXRecord::GetXRecordData ( VARIANT * XRecordDataType, VARIANT * XRecordDataValue ) {
    HRESULT _hr = raw_GetXRecordData(XRecordDataType, XRecordDataValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2490)
inline HRESULT AutoCAD::IAcadXRecord::SetXRecordData ( const _variant_t & XRecordDataType, const _variant_t & XRecordDataValue ) {
    HRESULT _hr = raw_SetXRecordData(XRecordDataType, XRecordDataValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2491)
inline VARIANT_BOOL AutoCAD::IAcadXRecord::GetTranslateIDs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TranslateIDs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2492)
inline void AutoCAD::IAcadXRecord::PutTranslateIDs ( VARIANT_BOOL xlateIds ) {
    HRESULT _hr = put_TranslateIDs(xlateIds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadDictionary wrapper method implementations
//

#pragma implementation_key(2493)
inline _bstr_t AutoCAD::IAcadDictionary::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2494)
inline void AutoCAD::IAcadDictionary::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2495)
inline AutoCAD::IAcadObjectPtr AutoCAD::IAcadDictionary::AddObject ( _bstr_t Keyword, _bstr_t ObjectName ) {
    struct IAcadObject * _result = 0;
    HRESULT _hr = raw_AddObject(Keyword, ObjectName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadObjectPtr(_result, false);
}

#pragma implementation_key(2496)
inline _bstr_t AutoCAD::IAcadDictionary::GetName ( struct IAcadObject * Object ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetName(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2497)
inline AutoCAD::IAcadObjectPtr AutoCAD::IAcadDictionary::GetObject ( _bstr_t Name ) {
    struct IAcadObject * _result = 0;
    HRESULT _hr = raw_GetObject(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadObjectPtr(_result, false);
}

#pragma implementation_key(2498)
inline AutoCAD::IAcadObjectPtr AutoCAD::IAcadDictionary::Remove ( _bstr_t Name ) {
    struct IAcadObject * _result = 0;
    HRESULT _hr = raw_Remove(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadObjectPtr(_result, false);
}

#pragma implementation_key(2499)
inline HRESULT AutoCAD::IAcadDictionary::Rename ( _bstr_t OldName, _bstr_t NewName ) {
    HRESULT _hr = raw_Rename(OldName, NewName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2500)
inline HRESULT AutoCAD::IAcadDictionary::Replace ( _bstr_t OldName, struct IAcadObject * pObj ) {
    HRESULT _hr = raw_Replace(OldName, pObj);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2501)
inline AutoCAD::IAcadObjectPtr AutoCAD::IAcadDictionary::Item ( const _variant_t & Index ) {
    struct IAcadObject * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadObjectPtr(_result, false);
}

#pragma implementation_key(2502)
inline IUnknownPtr AutoCAD::IAcadDictionary::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2503)
inline long AutoCAD::IAcadDictionary::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2504)
inline AutoCAD::IAcadXRecordPtr AutoCAD::IAcadDictionary::AddXRecord ( _bstr_t Keyword ) {
    struct IAcadXRecord * _result = 0;
    HRESULT _hr = raw_AddXRecord(Keyword, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadXRecordPtr(_result, false);
}

//
// interface IAcadDictionaries wrapper method implementations
//

#pragma implementation_key(2505)
inline AutoCAD::IAcadObjectPtr AutoCAD::IAcadDictionaries::Item ( const _variant_t & Index ) {
    struct IAcadObject * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadObjectPtr(_result, false);
}

#pragma implementation_key(2506)
inline long AutoCAD::IAcadDictionaries::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2507)
inline IUnknownPtr AutoCAD::IAcadDictionaries::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2508)
inline AutoCAD::IAcadDictionaryPtr AutoCAD::IAcadDictionaries::Add ( _bstr_t Name ) {
    struct IAcadDictionary * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDictionaryPtr(_result, false);
}

//
// interface IAcadRegisteredApplication wrapper method implementations
//

#pragma implementation_key(2509)
inline _bstr_t AutoCAD::IAcadRegisteredApplication::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2510)
inline void AutoCAD::IAcadRegisteredApplication::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadRegisteredApplications wrapper method implementations
//

#pragma implementation_key(2511)
inline AutoCAD::IAcadRegisteredApplicationPtr AutoCAD::IAcadRegisteredApplications::Item ( const _variant_t & Index ) {
    struct IAcadRegisteredApplication * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadRegisteredApplicationPtr(_result, false);
}

#pragma implementation_key(2512)
inline long AutoCAD::IAcadRegisteredApplications::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2513)
inline IUnknownPtr AutoCAD::IAcadRegisteredApplications::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2514)
inline AutoCAD::IAcadRegisteredApplicationPtr AutoCAD::IAcadRegisteredApplications::Add ( _bstr_t Name ) {
    struct IAcadRegisteredApplication * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadRegisteredApplicationPtr(_result, false);
}

//
// interface IAcadTextStyle wrapper method implementations
//

#pragma implementation_key(2515)
inline _bstr_t AutoCAD::IAcadTextStyle::GetBigFontFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BigFontFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2516)
inline void AutoCAD::IAcadTextStyle::PutBigFontFile ( _bstr_t fontFile ) {
    HRESULT _hr = put_BigFontFile(fontFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2517)
inline _bstr_t AutoCAD::IAcadTextStyle::GetfontFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_fontFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2518)
inline void AutoCAD::IAcadTextStyle::PutfontFile ( _bstr_t fontFile ) {
    HRESULT _hr = put_fontFile(fontFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2519)
inline double AutoCAD::IAcadTextStyle::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2520)
inline void AutoCAD::IAcadTextStyle::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2521)
inline double AutoCAD::IAcadTextStyle::GetLastHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_LastHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2522)
inline void AutoCAD::IAcadTextStyle::PutLastHeight ( double Height ) {
    HRESULT _hr = put_LastHeight(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2523)
inline _bstr_t AutoCAD::IAcadTextStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2524)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadTextStyle::GetObliqueAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_ObliqueAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2525)
inline void AutoCAD::IAcadTextStyle::PutObliqueAngle ( ACAD_ANGLE obliAngle ) {
    HRESULT _hr = put_ObliqueAngle(obliAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2526)
inline long AutoCAD::IAcadTextStyle::GetTextGenerationFlag ( ) {
    long _result = 0;
    HRESULT _hr = get_TextGenerationFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2527)
inline void AutoCAD::IAcadTextStyle::PutTextGenerationFlag ( long textGenFlag ) {
    HRESULT _hr = put_TextGenerationFlag(textGenFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2528)
inline double AutoCAD::IAcadTextStyle::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2529)
inline void AutoCAD::IAcadTextStyle::PutWidth ( double Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2530)
inline HRESULT AutoCAD::IAcadTextStyle::GetFont ( BSTR * TypeFace, VARIANT_BOOL * Bold, VARIANT_BOOL * Italic, long * Charset, long * PitchAndFamily ) {
    HRESULT _hr = raw_GetFont(TypeFace, Bold, Italic, Charset, PitchAndFamily);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2531)
inline HRESULT AutoCAD::IAcadTextStyle::SetFont ( _bstr_t TypeFace, VARIANT_BOOL Bold, VARIANT_BOOL Italic, long Charset, long PitchAndFamily ) {
    HRESULT _hr = raw_SetFont(TypeFace, Bold, Italic, Charset, PitchAndFamily);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadTextStyles wrapper method implementations
//

#pragma implementation_key(2532)
inline AutoCAD::IAcadTextStylePtr AutoCAD::IAcadTextStyles::Item ( const _variant_t & Index ) {
    struct IAcadTextStyle * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadTextStylePtr(_result, false);
}

#pragma implementation_key(2533)
inline long AutoCAD::IAcadTextStyles::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2534)
inline IUnknownPtr AutoCAD::IAcadTextStyles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2535)
inline AutoCAD::IAcadTextStylePtr AutoCAD::IAcadTextStyles::Add ( _bstr_t Name ) {
    struct IAcadTextStyle * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadTextStylePtr(_result, false);
}

//
// interface IAcadUCS wrapper method implementations
//

#pragma implementation_key(2536)
inline _bstr_t AutoCAD::IAcadUCS::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2537)
inline void AutoCAD::IAcadUCS::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2538)
inline _variant_t AutoCAD::IAcadUCS::GetOrigin ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2539)
inline void AutoCAD::IAcadUCS::PutOrigin ( const _variant_t & Origin ) {
    HRESULT _hr = put_Origin(Origin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2540)
inline _variant_t AutoCAD::IAcadUCS::GetXVector ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_XVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2541)
inline void AutoCAD::IAcadUCS::PutXVector ( const _variant_t & XVector ) {
    HRESULT _hr = put_XVector(XVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2542)
inline _variant_t AutoCAD::IAcadUCS::GetYVector ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_YVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2543)
inline void AutoCAD::IAcadUCS::PutYVector ( const _variant_t & YVector ) {
    HRESULT _hr = put_YVector(YVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2544)
inline _variant_t AutoCAD::IAcadUCS::GetUCSMatrix ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetUCSMatrix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IAcadUCSs wrapper method implementations
//

#pragma implementation_key(2545)
inline AutoCAD::IAcadUCSPtr AutoCAD::IAcadUCSs::Item ( const _variant_t & Index ) {
    struct IAcadUCS * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadUCSPtr(_result, false);
}

#pragma implementation_key(2546)
inline long AutoCAD::IAcadUCSs::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2547)
inline IUnknownPtr AutoCAD::IAcadUCSs::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2548)
inline AutoCAD::IAcadUCSPtr AutoCAD::IAcadUCSs::Add ( const _variant_t & Origin, const _variant_t & XAxisPoint, const _variant_t & YAxisPoint, _bstr_t Name ) {
    struct IAcadUCS * _result = 0;
    HRESULT _hr = raw_Add(Origin, XAxisPoint, YAxisPoint, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadUCSPtr(_result, false);
}

//
// interface IAcadViews wrapper method implementations
//

#pragma implementation_key(2549)
inline AutoCAD::IAcadViewPtr AutoCAD::IAcadViews::Item ( const _variant_t & Index ) {
    struct IAcadView * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadViewPtr(_result, false);
}

#pragma implementation_key(2550)
inline long AutoCAD::IAcadViews::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2551)
inline IUnknownPtr AutoCAD::IAcadViews::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2552)
inline AutoCAD::IAcadViewPtr AutoCAD::IAcadViews::Add ( _bstr_t Name ) {
    struct IAcadView * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadViewPtr(_result, false);
}

//
// interface IAcadViewport wrapper method implementations
//

#pragma implementation_key(2553)
inline _variant_t AutoCAD::IAcadViewport::GetCenter ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2554)
inline void AutoCAD::IAcadViewport::PutCenter ( const _variant_t & Center ) {
    HRESULT _hr = put_Center(Center);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2555)
inline double AutoCAD::IAcadViewport::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2556)
inline void AutoCAD::IAcadViewport::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2557)
inline double AutoCAD::IAcadViewport::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2558)
inline void AutoCAD::IAcadViewport::PutWidth ( double Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2559)
inline _variant_t AutoCAD::IAcadViewport::GetTarget ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2560)
inline void AutoCAD::IAcadViewport::PutTarget ( const _variant_t & targetPoint ) {
    HRESULT _hr = put_Target(targetPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2561)
inline _variant_t AutoCAD::IAcadViewport::GetDirection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2562)
inline void AutoCAD::IAcadViewport::PutDirection ( const _variant_t & dirVec ) {
    HRESULT _hr = put_Direction(dirVec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2563)
inline _bstr_t AutoCAD::IAcadViewport::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2564)
inline void AutoCAD::IAcadViewport::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2565)
inline VARIANT_BOOL AutoCAD::IAcadViewport::GetGridOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GridOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2566)
inline void AutoCAD::IAcadViewport::PutGridOn ( VARIANT_BOOL bGridOn ) {
    HRESULT _hr = put_GridOn(bGridOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2567)
inline VARIANT_BOOL AutoCAD::IAcadViewport::GetOrthoOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OrthoOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2568)
inline void AutoCAD::IAcadViewport::PutOrthoOn ( VARIANT_BOOL bOrthoOn ) {
    HRESULT _hr = put_OrthoOn(bOrthoOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2569)
inline _variant_t AutoCAD::IAcadViewport::GetSnapBasePoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SnapBasePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2570)
inline void AutoCAD::IAcadViewport::PutSnapBasePoint ( const _variant_t & lowLeft ) {
    HRESULT _hr = put_SnapBasePoint(lowLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2571)
inline VARIANT_BOOL AutoCAD::IAcadViewport::GetSnapOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SnapOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2572)
inline void AutoCAD::IAcadViewport::PutSnapOn ( VARIANT_BOOL bSnapOn ) {
    HRESULT _hr = put_SnapOn(bSnapOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2573)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadViewport::GetSnapRotationAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_SnapRotationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2574)
inline void AutoCAD::IAcadViewport::PutSnapRotationAngle ( ACAD_ANGLE Angle ) {
    HRESULT _hr = put_SnapRotationAngle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2575)
inline VARIANT_BOOL AutoCAD::IAcadViewport::GetUCSIconOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UCSIconOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2576)
inline void AutoCAD::IAcadViewport::PutUCSIconOn ( VARIANT_BOOL bIconOn ) {
    HRESULT _hr = put_UCSIconOn(bIconOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2577)
inline VARIANT_BOOL AutoCAD::IAcadViewport::GetUCSIconAtOrigin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UCSIconAtOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2578)
inline void AutoCAD::IAcadViewport::PutUCSIconAtOrigin ( VARIANT_BOOL bIconAtOrigin ) {
    HRESULT _hr = put_UCSIconAtOrigin(bIconAtOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2579)
inline _variant_t AutoCAD::IAcadViewport::GetLowerLeftCorner ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LowerLeftCorner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2580)
inline _variant_t AutoCAD::IAcadViewport::GetUpperRightCorner ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UpperRightCorner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2581)
inline HRESULT AutoCAD::IAcadViewport::Split ( enum AcViewportSplitType NumWins ) {
    HRESULT _hr = raw_Split(NumWins);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2582)
inline HRESULT AutoCAD::IAcadViewport::GetGridSpacing ( double * XSpacing, double * YSpacing ) {
    HRESULT _hr = raw_GetGridSpacing(XSpacing, YSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2583)
inline HRESULT AutoCAD::IAcadViewport::SetGridSpacing ( double XSpacing, double YSpacing ) {
    HRESULT _hr = raw_SetGridSpacing(XSpacing, YSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2584)
inline HRESULT AutoCAD::IAcadViewport::GetSnapSpacing ( double * XSpacing, double * YSpacing ) {
    HRESULT _hr = raw_GetSnapSpacing(XSpacing, YSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2585)
inline HRESULT AutoCAD::IAcadViewport::SetSnapSpacing ( double XSpacing, double YSpacing ) {
    HRESULT _hr = raw_SetSnapSpacing(XSpacing, YSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2586)
inline HRESULT AutoCAD::IAcadViewport::SetView ( struct IAcadView * View ) {
    HRESULT _hr = raw_SetView(View);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2587)
inline long AutoCAD::IAcadViewport::GetArcSmoothness ( ) {
    long _result = 0;
    HRESULT _hr = get_ArcSmoothness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2588)
inline void AutoCAD::IAcadViewport::PutArcSmoothness ( long arcSmooth ) {
    HRESULT _hr = put_ArcSmoothness(arcSmooth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadViewports wrapper method implementations
//

#pragma implementation_key(2589)
inline AutoCAD::IAcadViewportPtr AutoCAD::IAcadViewports::Item ( const _variant_t & Index ) {
    struct IAcadViewport * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadViewportPtr(_result, false);
}

#pragma implementation_key(2590)
inline long AutoCAD::IAcadViewports::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2591)
inline IUnknownPtr AutoCAD::IAcadViewports::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2592)
inline AutoCAD::IAcadViewportPtr AutoCAD::IAcadViewports::Add ( _bstr_t Name ) {
    struct IAcadViewport * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadViewportPtr(_result, false);
}

#pragma implementation_key(2593)
inline HRESULT AutoCAD::IAcadViewports::DeleteConfiguration ( _bstr_t Name ) {
    HRESULT _hr = raw_DeleteConfiguration(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadPlotConfigurations wrapper method implementations
//

#pragma implementation_key(2594)
inline AutoCAD::IAcadPlotConfigurationPtr AutoCAD::IAcadPlotConfigurations::Item ( const _variant_t & Index ) {
    struct IAcadPlotConfiguration * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPlotConfigurationPtr(_result, false);
}

#pragma implementation_key(2595)
inline long AutoCAD::IAcadPlotConfigurations::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2596)
inline IUnknownPtr AutoCAD::IAcadPlotConfigurations::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2597)
inline AutoCAD::IAcadPlotConfigurationPtr AutoCAD::IAcadPlotConfigurations::Add ( _bstr_t Name, const _variant_t & ModelType ) {
    struct IAcadPlotConfiguration * _result = 0;
    HRESULT _hr = raw_Add(Name, ModelType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPlotConfigurationPtr(_result, false);
}

//
// interface IAcadSectionManager wrapper method implementations
//

#pragma implementation_key(2598)
inline AutoCAD::IAcadSectionPtr AutoCAD::IAcadSectionManager::Item ( const _variant_t & Index ) {
    struct IAcadSection * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadSectionPtr(_result, false);
}

#pragma implementation_key(2599)
inline IUnknownPtr AutoCAD::IAcadSectionManager::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2600)
inline long AutoCAD::IAcadSectionManager::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2601)
inline AutoCAD::IAcadSectionPtr AutoCAD::IAcadSectionManager::GetLiveSection ( ) {
    struct IAcadSection * _result = 0;
    HRESULT _hr = raw_GetLiveSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadSectionPtr(_result, false);
}

#pragma implementation_key(2602)
inline _bstr_t AutoCAD::IAcadSectionManager::GetUniqueSectionName ( _bstr_t pBaseName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetUniqueSectionName(pBaseName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAcadMaterial wrapper method implementations
//

#pragma implementation_key(2603)
inline _bstr_t AutoCAD::IAcadMaterial::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2604)
inline void AutoCAD::IAcadMaterial::PutDescription ( _bstr_t bstrDes ) {
    HRESULT _hr = put_Description(bstrDes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2605)
inline _bstr_t AutoCAD::IAcadMaterial::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2606)
inline void AutoCAD::IAcadMaterial::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadMaterials wrapper method implementations
//

#pragma implementation_key(2607)
inline AutoCAD::IAcadMaterialPtr AutoCAD::IAcadMaterials::Item ( const _variant_t & Index ) {
    struct IAcadMaterial * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMaterialPtr(_result, false);
}

#pragma implementation_key(2608)
inline long AutoCAD::IAcadMaterials::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2609)
inline IUnknownPtr AutoCAD::IAcadMaterials::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2610)
inline AutoCAD::IAcadMaterialPtr AutoCAD::IAcadMaterials::Add ( _bstr_t Name ) {
    struct IAcadMaterial * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMaterialPtr(_result, false);
}

//
// interface IAcadObjectEvents wrapper method implementations
//

#pragma implementation_key(2611)
inline HRESULT AutoCAD::IAcadObjectEvents::Modified ( struct IAcadObject * pObject ) {
    HRESULT _hr = raw_Modified(pObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadTableStyle wrapper method implementations
//

#pragma implementation_key(2612)
inline _bstr_t AutoCAD::IAcadTableStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2613)
inline void AutoCAD::IAcadTableStyle::PutName ( _bstr_t bstrValue ) {
    HRESULT _hr = put_Name(bstrValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2614)
inline _bstr_t AutoCAD::IAcadTableStyle::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2615)
inline void AutoCAD::IAcadTableStyle::PutDescription ( _bstr_t bstr ) {
    HRESULT _hr = put_Description(bstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2616)
inline long AutoCAD::IAcadTableStyle::GetBitFlags ( ) {
    long _result = 0;
    HRESULT _hr = get_BitFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2617)
inline void AutoCAD::IAcadTableStyle::PutBitFlags ( long bitFlag ) {
    HRESULT _hr = put_BitFlags(bitFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2618)
inline enum AutoCAD::AcTableDirection AutoCAD::IAcadTableStyle::GetFlowDirection ( ) {
    enum AcTableDirection _result;
    HRESULT _hr = get_FlowDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2619)
inline void AutoCAD::IAcadTableStyle::PutFlowDirection ( enum AcTableDirection pFlow ) {
    HRESULT _hr = put_FlowDirection(pFlow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2620)
inline double AutoCAD::IAcadTableStyle::GetHorzCellMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_HorzCellMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2621)
inline void AutoCAD::IAcadTableStyle::PutHorzCellMargin ( double dHorzCellMargin ) {
    HRESULT _hr = put_HorzCellMargin(dHorzCellMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2622)
inline double AutoCAD::IAcadTableStyle::GetVertCellMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_VertCellMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2623)
inline void AutoCAD::IAcadTableStyle::PutVertCellMargin ( double dVertCellMargin ) {
    HRESULT _hr = put_VertCellMargin(dVertCellMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2624)
inline VARIANT_BOOL AutoCAD::IAcadTableStyle::GetTitleSuppressed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TitleSuppressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2625)
inline void AutoCAD::IAcadTableStyle::PutTitleSuppressed ( VARIANT_BOOL bValue ) {
    HRESULT _hr = put_TitleSuppressed(bValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2626)
inline VARIANT_BOOL AutoCAD::IAcadTableStyle::GetHeaderSuppressed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HeaderSuppressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2627)
inline void AutoCAD::IAcadTableStyle::PutHeaderSuppressed ( VARIANT_BOOL bValue ) {
    HRESULT _hr = put_HeaderSuppressed(bValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2628)
inline _bstr_t AutoCAD::IAcadTableStyle::GetTextStyle ( enum AcRowType rowType ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetTextStyle(rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2629)
inline HRESULT AutoCAD::IAcadTableStyle::SetTextStyle ( int rowTypes, _bstr_t bstrName ) {
    HRESULT _hr = raw_SetTextStyle(rowTypes, bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2630)
inline double AutoCAD::IAcadTableStyle::GetTextHeight ( enum AcRowType rowType ) {
    double _result = 0;
    HRESULT _hr = raw_GetTextHeight(rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2631)
inline HRESULT AutoCAD::IAcadTableStyle::SetTextHeight ( int rowTypes, double TextHeight ) {
    HRESULT _hr = raw_SetTextHeight(rowTypes, TextHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2632)
inline enum AutoCAD::AcCellAlignment AutoCAD::IAcadTableStyle::GetAlignment ( enum AcRowType rowType ) {
    enum AcCellAlignment _result;
    HRESULT _hr = raw_GetAlignment(rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2633)
inline HRESULT AutoCAD::IAcadTableStyle::SetAlignment ( int rowTypes, enum AcCellAlignment cellAlignment ) {
    HRESULT _hr = raw_SetAlignment(rowTypes, cellAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2634)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadTableStyle::GetColor ( enum AcRowType rowType ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = raw_GetColor(rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(2635)
inline HRESULT AutoCAD::IAcadTableStyle::SetColor ( int rowTypes, struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = raw_SetColor(rowTypes, pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2636)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadTableStyle::GetBackgroundColor ( enum AcRowType rowType ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = raw_GetBackgroundColor(rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(2637)
inline HRESULT AutoCAD::IAcadTableStyle::SetBackgroundColor ( int rowTypes, struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = raw_SetBackgroundColor(rowTypes, pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2638)
inline VARIANT_BOOL AutoCAD::IAcadTableStyle::GetBackgroundColorNone ( enum AcRowType rowType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBackgroundColorNone(rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2639)
inline HRESULT AutoCAD::IAcadTableStyle::SetBackgroundColorNone ( int rowTypes, VARIANT_BOOL * bValue ) {
    HRESULT _hr = raw_SetBackgroundColorNone(rowTypes, bValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2640)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadTableStyle::GetGridLineWeight ( enum AcGridLineType gridLineType, enum AcRowType rowType ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = raw_GetGridLineWeight(gridLineType, rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2641)
inline HRESULT AutoCAD::IAcadTableStyle::SetGridLineWeight ( int gridLineTypes, int rowTypes, ACAD_LWEIGHT Lineweight ) {
    HRESULT _hr = raw_SetGridLineWeight(gridLineTypes, rowTypes, Lineweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2642)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadTableStyle::GetGridColor ( enum AcGridLineType gridLineType, enum AcRowType rowType ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = raw_GetGridColor(gridLineType, rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(2643)
inline HRESULT AutoCAD::IAcadTableStyle::SetGridColor ( int gridLineTypes, int rowTypes, struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = raw_SetGridColor(gridLineTypes, rowTypes, pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2644)
inline VARIANT_BOOL AutoCAD::IAcadTableStyle::GetGridVisibility ( enum AcGridLineType gridLineType, enum AcRowType rowType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetGridVisibility(gridLineType, rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2645)
inline HRESULT AutoCAD::IAcadTableStyle::SetGridVisibility ( int gridLineTypes, int rowTypes, VARIANT_BOOL bValue ) {
    HRESULT _hr = raw_SetGridVisibility(gridLineTypes, rowTypes, bValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2646)
inline HRESULT AutoCAD::IAcadTableStyle::GetDataType ( enum AcRowType rowType, enum AcValueDataType * pDataType, enum AcValueUnitType * pUnitType ) {
    HRESULT _hr = raw_GetDataType(rowType, pDataType, pUnitType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2647)
inline HRESULT AutoCAD::IAcadTableStyle::SetDataType ( int rowTypes, enum AcValueDataType nDataType, enum AcValueUnitType nUnitType ) {
    HRESULT _hr = raw_SetDataType(rowTypes, nDataType, nUnitType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2648)
inline _bstr_t AutoCAD::IAcadTableStyle::GetFormat ( enum AcRowType rowType ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFormat(rowType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2649)
inline HRESULT AutoCAD::IAcadTableStyle::SetFormat ( int rowTypes, _bstr_t val ) {
    HRESULT _hr = raw_SetFormat(rowTypes, val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2650)
inline HRESULT AutoCAD::IAcadTableStyle::CreateCellStyle ( _bstr_t bstrCellStyle ) {
    HRESULT _hr = raw_CreateCellStyle(bstrCellStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2651)
inline HRESULT AutoCAD::IAcadTableStyle::CreateCellStyleFromStyle ( _bstr_t bstrCellStyle, _bstr_t bstrSourceCellStyle ) {
    HRESULT _hr = raw_CreateCellStyleFromStyle(bstrCellStyle, bstrSourceCellStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2652)
inline HRESULT AutoCAD::IAcadTableStyle::RenameCellStyle ( _bstr_t bstrOldName, _bstr_t bstrNewName ) {
    HRESULT _hr = raw_RenameCellStyle(bstrOldName, bstrNewName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2653)
inline HRESULT AutoCAD::IAcadTableStyle::DeleteCellStyle ( _bstr_t bstrCellStyle ) {
    HRESULT _hr = raw_DeleteCellStyle(bstrCellStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2654)
inline _bstr_t AutoCAD::IAcadTableStyle::GetUniqueCellStyleName ( _bstr_t pszBaseName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetUniqueCellStyleName(pszBaseName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2655)
inline VARIANT_BOOL AutoCAD::IAcadTableStyle::GetIsCellStyleInUse ( _bstr_t pszCellStyle ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetIsCellStyleInUse(pszCellStyle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2656)
inline long AutoCAD::IAcadTableStyle::GetNumCellStyles ( ) {
    long _result = 0;
    HRESULT _hr = get_NumCellStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2657)
inline HRESULT AutoCAD::IAcadTableStyle::GetCellStyles ( VARIANT * cellStylesArray ) {
    HRESULT _hr = raw_GetCellStyles(cellStylesArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2658)
inline AutoCAD::LONG_PTR AutoCAD::IAcadTableStyle::GetTextStyleId ( _bstr_t bstrCellStyle ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetTextStyleId(bstrCellStyle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2659)
inline HRESULT AutoCAD::IAcadTableStyle::SetTextStyleId ( _bstr_t bstrCellStyle, LONG_PTR val ) {
    HRESULT _hr = raw_SetTextStyleId(bstrCellStyle, val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2660)
inline double AutoCAD::IAcadTableStyle::GetTextHeight2 ( _bstr_t bstrCellStyle ) {
    double _result = 0;
    HRESULT _hr = raw_GetTextHeight2(bstrCellStyle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2661)
inline HRESULT AutoCAD::IAcadTableStyle::SetTextHeight2 ( _bstr_t bstrCellStyle, double Height ) {
    HRESULT _hr = raw_SetTextHeight2(bstrCellStyle, Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2662)
inline enum AutoCAD::AcCellAlignment AutoCAD::IAcadTableStyle::GetAlignment2 ( _bstr_t bstrCellStyle ) {
    enum AcCellAlignment _result;
    HRESULT _hr = raw_GetAlignment2(bstrCellStyle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2663)
inline HRESULT AutoCAD::IAcadTableStyle::SetAlignment2 ( _bstr_t bstrCellStyle, enum AcCellAlignment cellAlignment ) {
    HRESULT _hr = raw_SetAlignment2(bstrCellStyle, cellAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2664)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadTableStyle::GetColor2 ( _bstr_t bstrCellStyle ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = raw_GetColor2(bstrCellStyle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(2665)
inline HRESULT AutoCAD::IAcadTableStyle::SetColor2 ( _bstr_t bstrCellStyle, struct IAcadAcCmColor * color ) {
    HRESULT _hr = raw_SetColor2(bstrCellStyle, color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2666)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadTableStyle::GetBackgroundColor2 ( _bstr_t bstrCellStyle ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = raw_GetBackgroundColor2(bstrCellStyle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(2667)
inline HRESULT AutoCAD::IAcadTableStyle::SetBackgroundColor2 ( _bstr_t bstrCellStyle, struct IAcadAcCmColor * color ) {
    HRESULT _hr = raw_SetBackgroundColor2(bstrCellStyle, color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2668)
inline HRESULT AutoCAD::IAcadTableStyle::GetDataType2 ( _bstr_t bstrCellStyle, enum AcValueDataType * pDataType, enum AcValueUnitType * pUnitType ) {
    HRESULT _hr = raw_GetDataType2(bstrCellStyle, pDataType, pUnitType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2669)
inline HRESULT AutoCAD::IAcadTableStyle::SetDataType2 ( _bstr_t bstrCellStyle, enum AcValueDataType nDataType, enum AcValueUnitType nUnitType ) {
    HRESULT _hr = raw_SetDataType2(bstrCellStyle, nDataType, nUnitType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2670)
inline HRESULT AutoCAD::IAcadTableStyle::GetFormat2 ( _bstr_t bstrCellStyle, BSTR * pbstrFormat ) {
    HRESULT _hr = raw_GetFormat2(bstrCellStyle, pbstrFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2671)
inline HRESULT AutoCAD::IAcadTableStyle::SetFormat2 ( _bstr_t bstrCellStyle, _bstr_t bstrFormat ) {
    HRESULT _hr = raw_SetFormat2(bstrCellStyle, bstrFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2672)
inline int AutoCAD::IAcadTableStyle::GetCellClass ( _bstr_t bstrCellStyle ) {
    int _result = 0;
    HRESULT _hr = raw_GetCellClass(bstrCellStyle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2673)
inline HRESULT AutoCAD::IAcadTableStyle::SetCellClass ( _bstr_t bstrCellStyle, int cellClass ) {
    HRESULT _hr = raw_SetCellClass(bstrCellStyle, cellClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2674)
inline double AutoCAD::IAcadTableStyle::GetRotation ( _bstr_t bstrCellStyle ) {
    double _result = 0;
    HRESULT _hr = raw_GetRotation(bstrCellStyle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2675)
inline HRESULT AutoCAD::IAcadTableStyle::SetRotation ( _bstr_t bstrCellStyle, double Rotation ) {
    HRESULT _hr = raw_SetRotation(bstrCellStyle, Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2676)
inline VARIANT_BOOL AutoCAD::IAcadTableStyle::GetIsMergeAllEnabled ( _bstr_t bstrCellStyle ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetIsMergeAllEnabled(bstrCellStyle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2677)
inline HRESULT AutoCAD::IAcadTableStyle::EnableMergeAll ( _bstr_t bstrCellStyle, VARIANT_BOOL bEnable ) {
    HRESULT _hr = raw_EnableMergeAll(bstrCellStyle, bEnable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2678)
inline AutoCAD::ACAD_LWEIGHT AutoCAD::IAcadTableStyle::GetGridLineWeight2 ( _bstr_t bstrCellStyle, enum AcGridLineType gridLineType ) {
    ACAD_LWEIGHT _result;
    HRESULT _hr = raw_GetGridLineWeight2(bstrCellStyle, gridLineType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2679)
inline HRESULT AutoCAD::IAcadTableStyle::SetGridLineWeight2 ( _bstr_t bstrCellStyle, enum AcGridLineType gridLineTypes, ACAD_LWEIGHT Lineweight ) {
    HRESULT _hr = raw_SetGridLineWeight2(bstrCellStyle, gridLineTypes, Lineweight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2680)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadTableStyle::GetGridColor2 ( _bstr_t bstrCellStyle, enum AcGridLineType gridLineType ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = raw_GetGridColor2(bstrCellStyle, gridLineType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(2681)
inline HRESULT AutoCAD::IAcadTableStyle::SetGridColor2 ( _bstr_t bstrCellStyle, enum AcGridLineType gridLineTypes, struct IAcadAcCmColor * pColor ) {
    HRESULT _hr = raw_SetGridColor2(bstrCellStyle, gridLineTypes, pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2682)
inline VARIANT_BOOL AutoCAD::IAcadTableStyle::GetGridVisibility2 ( _bstr_t bstrCellStyle, enum AcGridLineType gridLineType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetGridVisibility2(bstrCellStyle, gridLineType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2683)
inline HRESULT AutoCAD::IAcadTableStyle::SetGridVisibility2 ( _bstr_t bstrCellStyle, enum AcGridLineType gridLineTypes, VARIANT_BOOL bValue ) {
    HRESULT _hr = raw_SetGridVisibility2(bstrCellStyle, gridLineTypes, bValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2684)
inline AutoCAD::LONG_PTR AutoCAD::IAcadTableStyle::GetTemplateId ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_TemplateId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2685)
inline void AutoCAD::IAcadTableStyle::PutTemplateId ( LONG_PTR pVal ) {
    HRESULT _hr = put_TemplateId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2686)
inline HRESULT AutoCAD::IAcadTableStyle::SetTemplateId ( LONG_PTR val, enum AcMergeCellStyleOption option ) {
    HRESULT _hr = raw_SetTemplateId(val, option);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadMLeaderStyle wrapper method implementations
//

#pragma implementation_key(2687)
inline _bstr_t AutoCAD::IAcadMLeaderStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2688)
inline void AutoCAD::IAcadMLeaderStyle::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2689)
inline _bstr_t AutoCAD::IAcadMLeaderStyle::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2690)
inline void AutoCAD::IAcadMLeaderStyle::PutDescription ( _bstr_t Description ) {
    HRESULT _hr = put_Description(Description);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2691)
inline long AutoCAD::IAcadMLeaderStyle::GetBitFlags ( ) {
    long _result = 0;
    HRESULT _hr = get_BitFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2692)
inline void AutoCAD::IAcadMLeaderStyle::PutBitFlags ( long bitFlag ) {
    HRESULT _hr = put_BitFlags(bitFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2693)
inline enum AutoCAD::AcMLeaderContentType AutoCAD::IAcadMLeaderStyle::GetContentType ( ) {
    enum AcMLeaderContentType _result;
    HRESULT _hr = get_ContentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2694)
inline void AutoCAD::IAcadMLeaderStyle::PutContentType ( enum AcMLeaderContentType Type ) {
    HRESULT _hr = put_ContentType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2695)
inline enum AutoCAD::AcDrawMLeaderOrderType AutoCAD::IAcadMLeaderStyle::GetDrawMLeaderOrderType ( ) {
    enum AcDrawMLeaderOrderType _result;
    HRESULT _hr = get_DrawMLeaderOrderType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2696)
inline void AutoCAD::IAcadMLeaderStyle::PutDrawMLeaderOrderType ( enum AcDrawMLeaderOrderType Type ) {
    HRESULT _hr = put_DrawMLeaderOrderType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2697)
inline enum AutoCAD::AcDrawLeaderOrderType AutoCAD::IAcadMLeaderStyle::GetDrawLeaderOrderType ( ) {
    enum AcDrawLeaderOrderType _result;
    HRESULT _hr = get_DrawLeaderOrderType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2698)
inline void AutoCAD::IAcadMLeaderStyle::PutDrawLeaderOrderType ( enum AcDrawLeaderOrderType Type ) {
    HRESULT _hr = put_DrawLeaderOrderType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2699)
inline int AutoCAD::IAcadMLeaderStyle::GetMaxLeaderSegmentsPoints ( ) {
    int _result = 0;
    HRESULT _hr = get_MaxLeaderSegmentsPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2700)
inline void AutoCAD::IAcadMLeaderStyle::PutMaxLeaderSegmentsPoints ( int number ) {
    HRESULT _hr = put_MaxLeaderSegmentsPoints(number);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2701)
inline enum AutoCAD::AcSegmentAngleType AutoCAD::IAcadMLeaderStyle::GetFirstSegmentAngleConstraint ( ) {
    enum AcSegmentAngleType _result;
    HRESULT _hr = get_FirstSegmentAngleConstraint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2702)
inline void AutoCAD::IAcadMLeaderStyle::PutFirstSegmentAngleConstraint ( enum AcSegmentAngleType constraint ) {
    HRESULT _hr = put_FirstSegmentAngleConstraint(constraint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2703)
inline enum AutoCAD::AcSegmentAngleType AutoCAD::IAcadMLeaderStyle::GetSecondSegmentAngleConstraint ( ) {
    enum AcSegmentAngleType _result;
    HRESULT _hr = get_SecondSegmentAngleConstraint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2704)
inline void AutoCAD::IAcadMLeaderStyle::PutSecondSegmentAngleConstraint ( enum AcSegmentAngleType constraint ) {
    HRESULT _hr = put_SecondSegmentAngleConstraint(constraint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2705)
inline enum AutoCAD::AcMLeaderType AutoCAD::IAcadMLeaderStyle::GetLeaderLinetype ( ) {
    enum AcMLeaderType _result;
    HRESULT _hr = get_LeaderLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2706)
inline void AutoCAD::IAcadMLeaderStyle::PutLeaderLinetype ( enum AcMLeaderType Type ) {
    HRESULT _hr = put_LeaderLinetype(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2707)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadMLeaderStyle::GetLeaderLineColor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_LeaderLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(2708)
inline void AutoCAD::IAcadMLeaderStyle::PutLeaderLineColor ( struct IAcadAcCmColor * color ) {
    HRESULT _hr = put_LeaderLineColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2709)
inline AutoCAD::ACAD_LTYPE AutoCAD::IAcadMLeaderStyle::GetLeaderLineTypeId ( ) {
    ACAD_LTYPE _result;
    HRESULT _hr = get_LeaderLineTypeId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2710)
inline void AutoCAD::IAcadMLeaderStyle::PutLeaderLineTypeId ( ACAD_LTYPE Type ) {
    HRESULT _hr = put_LeaderLineTypeId(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2711)
inline enum AutoCAD::AcLineWeight AutoCAD::IAcadMLeaderStyle::GetLeaderLineWeight ( ) {
    enum AcLineWeight _result;
    HRESULT _hr = get_LeaderLineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2712)
inline void AutoCAD::IAcadMLeaderStyle::PutLeaderLineWeight ( enum AcLineWeight weight ) {
    HRESULT _hr = put_LeaderLineWeight(weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2713)
inline VARIANT_BOOL AutoCAD::IAcadMLeaderStyle::GetEnableLanding ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLanding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2714)
inline void AutoCAD::IAcadMLeaderStyle::PutEnableLanding ( VARIANT_BOOL enabled ) {
    HRESULT _hr = put_EnableLanding(enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2715)
inline double AutoCAD::IAcadMLeaderStyle::GetLandingGap ( ) {
    double _result = 0;
    HRESULT _hr = get_LandingGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2716)
inline void AutoCAD::IAcadMLeaderStyle::PutLandingGap ( double LandingGap ) {
    HRESULT _hr = put_LandingGap(LandingGap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2717)
inline VARIANT_BOOL AutoCAD::IAcadMLeaderStyle::GetEnableDogleg ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDogleg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2718)
inline void AutoCAD::IAcadMLeaderStyle::PutEnableDogleg ( VARIANT_BOOL enabled ) {
    HRESULT _hr = put_EnableDogleg(enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2719)
inline double AutoCAD::IAcadMLeaderStyle::GetDoglegLength ( ) {
    double _result = 0;
    HRESULT _hr = get_DoglegLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2720)
inline void AutoCAD::IAcadMLeaderStyle::PutDoglegLength ( double DoglegLength ) {
    HRESULT _hr = put_DoglegLength(DoglegLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2721)
inline _bstr_t AutoCAD::IAcadMLeaderStyle::GetArrowSymbol ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ArrowSymbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2722)
inline void AutoCAD::IAcadMLeaderStyle::PutArrowSymbol ( _bstr_t Name ) {
    HRESULT _hr = put_ArrowSymbol(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2723)
inline double AutoCAD::IAcadMLeaderStyle::GetArrowSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2724)
inline void AutoCAD::IAcadMLeaderStyle::PutArrowSize ( double size ) {
    HRESULT _hr = put_ArrowSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2725)
inline _bstr_t AutoCAD::IAcadMLeaderStyle::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2726)
inline void AutoCAD::IAcadMLeaderStyle::PutTextStyle ( _bstr_t Name ) {
    HRESULT _hr = put_TextStyle(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2727)
inline enum AutoCAD::AcTextAttachmentDirection AutoCAD::IAcadMLeaderStyle::GetTextAttachmentDirection ( ) {
    enum AcTextAttachmentDirection _result;
    HRESULT _hr = get_TextAttachmentDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2728)
inline void AutoCAD::IAcadMLeaderStyle::PutTextAttachmentDirection ( enum AcTextAttachmentDirection dir ) {
    HRESULT _hr = put_TextAttachmentDirection(dir);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2729)
inline enum AutoCAD::AcTextAttachmentType AutoCAD::IAcadMLeaderStyle::GetTextLeftAttachmentType ( ) {
    enum AcTextAttachmentType _result;
    HRESULT _hr = get_TextLeftAttachmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2730)
inline void AutoCAD::IAcadMLeaderStyle::PutTextLeftAttachmentType ( enum AcTextAttachmentType Type ) {
    HRESULT _hr = put_TextLeftAttachmentType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2731)
inline enum AutoCAD::AcTextAttachmentType AutoCAD::IAcadMLeaderStyle::GetTextRightAttachmentType ( ) {
    enum AcTextAttachmentType _result;
    HRESULT _hr = get_TextRightAttachmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2732)
inline void AutoCAD::IAcadMLeaderStyle::PutTextRightAttachmentType ( enum AcTextAttachmentType Type ) {
    HRESULT _hr = put_TextRightAttachmentType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2733)
inline enum AutoCAD::AcVerticalTextAttachmentType AutoCAD::IAcadMLeaderStyle::GetTextTopAttachmentType ( ) {
    enum AcVerticalTextAttachmentType _result;
    HRESULT _hr = get_TextTopAttachmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2734)
inline void AutoCAD::IAcadMLeaderStyle::PutTextTopAttachmentType ( enum AcVerticalTextAttachmentType Type ) {
    HRESULT _hr = put_TextTopAttachmentType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2735)
inline enum AutoCAD::AcVerticalTextAttachmentType AutoCAD::IAcadMLeaderStyle::GetTextBottomAttachmentType ( ) {
    enum AcVerticalTextAttachmentType _result;
    HRESULT _hr = get_TextBottomAttachmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2736)
inline void AutoCAD::IAcadMLeaderStyle::PutTextBottomAttachmentType ( enum AcVerticalTextAttachmentType Type ) {
    HRESULT _hr = put_TextBottomAttachmentType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2737)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadMLeaderStyle::GetTextColor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(2738)
inline void AutoCAD::IAcadMLeaderStyle::PutTextColor ( struct IAcadAcCmColor * color ) {
    HRESULT _hr = put_TextColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2739)
inline double AutoCAD::IAcadMLeaderStyle::GetTextHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2740)
inline void AutoCAD::IAcadMLeaderStyle::PutTextHeight ( double Height ) {
    HRESULT _hr = put_TextHeight(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2741)
inline VARIANT_BOOL AutoCAD::IAcadMLeaderStyle::GetEnableFrameText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableFrameText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2742)
inline void AutoCAD::IAcadMLeaderStyle::PutEnableFrameText ( VARIANT_BOOL enabled ) {
    HRESULT _hr = put_EnableFrameText(enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2743)
inline double AutoCAD::IAcadMLeaderStyle::GetAlignSpace ( ) {
    double _result = 0;
    HRESULT _hr = get_AlignSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2744)
inline void AutoCAD::IAcadMLeaderStyle::PutAlignSpace ( double AlignSpace ) {
    HRESULT _hr = put_AlignSpace(AlignSpace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2745)
inline _bstr_t AutoCAD::IAcadMLeaderStyle::GetBlock ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2746)
inline void AutoCAD::IAcadMLeaderStyle::PutBlock ( _bstr_t Name ) {
    HRESULT _hr = put_Block(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2747)
inline AutoCAD::IAcadAcCmColorPtr AutoCAD::IAcadMLeaderStyle::GetBlockColor ( ) {
    struct IAcadAcCmColor * _result = 0;
    HRESULT _hr = get_BlockColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAcCmColorPtr(_result, false);
}

#pragma implementation_key(2748)
inline void AutoCAD::IAcadMLeaderStyle::PutBlockColor ( struct IAcadAcCmColor * color ) {
    HRESULT _hr = put_BlockColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2749)
inline VARIANT_BOOL AutoCAD::IAcadMLeaderStyle::GetEnableBlockScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableBlockScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2750)
inline void AutoCAD::IAcadMLeaderStyle::PutEnableBlockScale ( VARIANT_BOOL enabled ) {
    HRESULT _hr = put_EnableBlockScale(enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2751)
inline double AutoCAD::IAcadMLeaderStyle::GetBlockScale ( ) {
    double _result = 0;
    HRESULT _hr = get_BlockScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2752)
inline void AutoCAD::IAcadMLeaderStyle::PutBlockScale ( double ScaleFactor ) {
    HRESULT _hr = put_BlockScale(ScaleFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2753)
inline VARIANT_BOOL AutoCAD::IAcadMLeaderStyle::GetEnableBlockRotation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableBlockRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2754)
inline void AutoCAD::IAcadMLeaderStyle::PutEnableBlockRotation ( VARIANT_BOOL enabled ) {
    HRESULT _hr = put_EnableBlockRotation(enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2755)
inline double AutoCAD::IAcadMLeaderStyle::GetBlockRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_BlockRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2756)
inline void AutoCAD::IAcadMLeaderStyle::PutBlockRotation ( double Rotation ) {
    HRESULT _hr = put_BlockRotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2757)
inline enum AutoCAD::AcBlockConnectionType AutoCAD::IAcadMLeaderStyle::GetBlockConnectionType ( ) {
    enum AcBlockConnectionType _result;
    HRESULT _hr = get_BlockConnectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2758)
inline void AutoCAD::IAcadMLeaderStyle::PutBlockConnectionType ( enum AcBlockConnectionType Type ) {
    HRESULT _hr = put_BlockConnectionType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2759)
inline double AutoCAD::IAcadMLeaderStyle::GetScaleFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2760)
inline void AutoCAD::IAcadMLeaderStyle::PutScaleFactor ( double scale ) {
    HRESULT _hr = put_ScaleFactor(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2761)
inline VARIANT_BOOL AutoCAD::IAcadMLeaderStyle::GetOverwritePropChanged ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OverwritePropChanged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2762)
inline VARIANT_BOOL AutoCAD::IAcadMLeaderStyle::GetAnnotative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Annotative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2763)
inline void AutoCAD::IAcadMLeaderStyle::PutAnnotative ( VARIANT_BOOL Annotative ) {
    HRESULT _hr = put_Annotative(Annotative);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2764)
inline double AutoCAD::IAcadMLeaderStyle::GetBreakSize ( ) {
    double _result = 0;
    HRESULT _hr = get_BreakSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2765)
inline void AutoCAD::IAcadMLeaderStyle::PutBreakSize ( double size ) {
    HRESULT _hr = put_BreakSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2766)
inline _bstr_t AutoCAD::IAcadMLeaderStyle::GetTextString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2767)
inline void AutoCAD::IAcadMLeaderStyle::PutTextString ( _bstr_t Text ) {
    HRESULT _hr = put_TextString(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2768)
inline enum AutoCAD::AcTextAngleType AutoCAD::IAcadMLeaderStyle::GetTextAngleType ( ) {
    enum AcTextAngleType _result;
    HRESULT _hr = get_TextAngleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2769)
inline void AutoCAD::IAcadMLeaderStyle::PutTextAngleType ( enum AcTextAngleType Type ) {
    HRESULT _hr = put_TextAngleType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2770)
inline enum AutoCAD::AcTextAlignmentType AutoCAD::IAcadMLeaderStyle::GetTextAlignmentType ( ) {
    enum AcTextAlignmentType _result;
    HRESULT _hr = get_TextAlignmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2771)
inline void AutoCAD::IAcadMLeaderStyle::PutTextAlignmentType ( enum AcTextAlignmentType Type ) {
    HRESULT _hr = put_TextAlignmentType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadAttributeReference wrapper method implementations
//

#pragma implementation_key(2772)
inline double AutoCAD::IAcadAttributeReference::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2773)
inline void AutoCAD::IAcadAttributeReference::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2774)
inline enum AutoCAD::AcHorizontalAlignment AutoCAD::IAcadAttributeReference::GetHorizontalAlignment ( ) {
    enum AcHorizontalAlignment _result;
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2775)
inline void AutoCAD::IAcadAttributeReference::PutHorizontalAlignment ( enum AcHorizontalAlignment horizAlign ) {
    HRESULT _hr = put_HorizontalAlignment(horizAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2776)
inline _variant_t AutoCAD::IAcadAttributeReference::GetInsertionPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InsertionPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2777)
inline void AutoCAD::IAcadAttributeReference::PutInsertionPoint ( const _variant_t & insPoint ) {
    HRESULT _hr = put_InsertionPoint(insPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2778)
inline _variant_t AutoCAD::IAcadAttributeReference::GetNormal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2779)
inline void AutoCAD::IAcadAttributeReference::PutNormal ( const _variant_t & Normal ) {
    HRESULT _hr = put_Normal(Normal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2780)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadAttributeReference::GetObliqueAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_ObliqueAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2781)
inline void AutoCAD::IAcadAttributeReference::PutObliqueAngle ( ACAD_ANGLE obliAngle ) {
    HRESULT _hr = put_ObliqueAngle(obliAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2782)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadAttributeReference::GetRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2783)
inline void AutoCAD::IAcadAttributeReference::PutRotation ( ACAD_ANGLE rotAngle ) {
    HRESULT _hr = put_Rotation(rotAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2784)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadAttributeReference::GetScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_ScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2785)
inline void AutoCAD::IAcadAttributeReference::PutScaleFactor ( ACAD_NOUNITS scalFactor ) {
    HRESULT _hr = put_ScaleFactor(scalFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2786)
inline _bstr_t AutoCAD::IAcadAttributeReference::GetStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2787)
inline void AutoCAD::IAcadAttributeReference::PutStyleName ( _bstr_t Name ) {
    HRESULT _hr = put_StyleName(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2788)
inline _bstr_t AutoCAD::IAcadAttributeReference::GetTagString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TagString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2789)
inline void AutoCAD::IAcadAttributeReference::PutTagString ( _bstr_t bstrTag ) {
    HRESULT _hr = put_TagString(bstrTag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2790)
inline _variant_t AutoCAD::IAcadAttributeReference::GetTextAlignmentPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TextAlignmentPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2791)
inline void AutoCAD::IAcadAttributeReference::PutTextAlignmentPoint ( const _variant_t & alignPoint ) {
    HRESULT _hr = put_TextAlignmentPoint(alignPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2792)
inline long AutoCAD::IAcadAttributeReference::GetTextGenerationFlag ( ) {
    long _result = 0;
    HRESULT _hr = get_TextGenerationFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2793)
inline void AutoCAD::IAcadAttributeReference::PutTextGenerationFlag ( long textGenFlag ) {
    HRESULT _hr = put_TextGenerationFlag(textGenFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2794)
inline _bstr_t AutoCAD::IAcadAttributeReference::GetTextString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2795)
inline void AutoCAD::IAcadAttributeReference::PutTextString ( _bstr_t bstrText ) {
    HRESULT _hr = put_TextString(bstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2796)
inline double AutoCAD::IAcadAttributeReference::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2797)
inline void AutoCAD::IAcadAttributeReference::PutThickness ( double Thickness ) {
    HRESULT _hr = put_Thickness(Thickness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2798)
inline enum AutoCAD::AcVerticalAlignment AutoCAD::IAcadAttributeReference::GetVerticalAlignment ( ) {
    enum AcVerticalAlignment _result;
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2799)
inline void AutoCAD::IAcadAttributeReference::PutVerticalAlignment ( enum AcVerticalAlignment vertiAlign ) {
    HRESULT _hr = put_VerticalAlignment(vertiAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2800)
inline long AutoCAD::IAcadAttributeReference::GetFieldLength ( ) {
    long _result = 0;
    HRESULT _hr = get_FieldLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2801)
inline void AutoCAD::IAcadAttributeReference::PutFieldLength ( long fieldLen ) {
    HRESULT _hr = put_FieldLength(fieldLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2802)
inline enum AutoCAD::AcAlignment AutoCAD::IAcadAttributeReference::GetAlignment ( ) {
    enum AcAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2803)
inline void AutoCAD::IAcadAttributeReference::PutAlignment ( enum AcAlignment align ) {
    HRESULT _hr = put_Alignment(align);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2804)
inline VARIANT_BOOL AutoCAD::IAcadAttributeReference::GetUpsideDown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpsideDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2805)
inline void AutoCAD::IAcadAttributeReference::PutUpsideDown ( VARIANT_BOOL bUpsideDown ) {
    HRESULT _hr = put_UpsideDown(bUpsideDown);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2806)
inline VARIANT_BOOL AutoCAD::IAcadAttributeReference::GetBackward ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Backward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2807)
inline void AutoCAD::IAcadAttributeReference::PutBackward ( VARIANT_BOOL bBackward ) {
    HRESULT _hr = put_Backward(bBackward);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2808)
inline VARIANT_BOOL AutoCAD::IAcadAttributeReference::GetInvisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Invisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2809)
inline void AutoCAD::IAcadAttributeReference::PutInvisible ( VARIANT_BOOL bInvisible ) {
    HRESULT _hr = put_Invisible(bInvisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2810)
inline VARIANT_BOOL AutoCAD::IAcadAttributeReference::GetConstant ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Constant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2811)
inline VARIANT_BOOL AutoCAD::IAcadAttributeReference::GetLockPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2812)
inline VARIANT_BOOL AutoCAD::IAcadAttributeReference::GetMTextAttribute ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MTextAttribute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2813)
inline void AutoCAD::IAcadAttributeReference::PutMTextAttribute ( VARIANT_BOOL bMTextAttribute ) {
    HRESULT _hr = put_MTextAttribute(bMTextAttribute);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2814)
inline _bstr_t AutoCAD::IAcadAttributeReference::GetMTextAttributeContent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MTextAttributeContent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2815)
inline void AutoCAD::IAcadAttributeReference::PutMTextAttributeContent ( _bstr_t content ) {
    HRESULT _hr = put_MTextAttributeContent(content);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2816)
inline HRESULT AutoCAD::IAcadAttributeReference::UpdateMTextAttribute ( ) {
    HRESULT _hr = raw_UpdateMTextAttribute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2817)
inline double AutoCAD::IAcadAttributeReference::GetMTextBoundaryWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_MTextBoundaryWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2818)
inline void AutoCAD::IAcadAttributeReference::PutMTextBoundaryWidth ( double boundaryWidth ) {
    HRESULT _hr = put_MTextBoundaryWidth(boundaryWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2819)
inline enum AutoCAD::AcDrawingDirection AutoCAD::IAcadAttributeReference::GetMTextDrawingDirection ( ) {
    enum AcDrawingDirection _result;
    HRESULT _hr = get_MTextDrawingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2820)
inline void AutoCAD::IAcadAttributeReference::PutMTextDrawingDirection ( enum AcDrawingDirection drawDir ) {
    HRESULT _hr = put_MTextDrawingDirection(drawDir);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadOle wrapper method implementations
//

#pragma implementation_key(2821)
inline _variant_t AutoCAD::IAcadOle::GetInsertionPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InsertionPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2822)
inline void AutoCAD::IAcadOle::PutInsertionPoint ( const _variant_t & insPoint ) {
    HRESULT _hr = put_InsertionPoint(insPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2823)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadOle::GetRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2824)
inline void AutoCAD::IAcadOle::PutRotation ( ACAD_ANGLE rot ) {
    HRESULT _hr = put_Rotation(rot);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2825)
inline double AutoCAD::IAcadOle::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2826)
inline void AutoCAD::IAcadOle::PutWidth ( double Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2827)
inline double AutoCAD::IAcadOle::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2828)
inline void AutoCAD::IAcadOle::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2829)
inline double AutoCAD::IAcadOle::GetScaleWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2830)
inline void AutoCAD::IAcadOle::PutScaleWidth ( double swidth ) {
    HRESULT _hr = put_ScaleWidth(swidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2831)
inline double AutoCAD::IAcadOle::GetScaleHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2832)
inline void AutoCAD::IAcadOle::PutScaleHeight ( double sheight ) {
    HRESULT _hr = put_ScaleHeight(sheight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2833)
inline VARIANT_BOOL AutoCAD::IAcadOle::GetLockAspectRatio ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2834)
inline void AutoCAD::IAcadOle::PutLockAspectRatio ( VARIANT_BOOL aspect ) {
    HRESULT _hr = put_LockAspectRatio(aspect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2835)
inline enum AutoCAD::AcOleType AutoCAD::IAcadOle::GetOleItemType ( ) {
    enum AcOleType _result;
    HRESULT _hr = get_OleItemType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2836)
inline void AutoCAD::IAcadOle::PutOleItemType ( enum AcOleType pType ) {
    HRESULT _hr = put_OleItemType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2837)
inline enum AutoCAD::AcOlePlotQuality AutoCAD::IAcadOle::GetOlePlotQuality ( ) {
    enum AcOlePlotQuality _result;
    HRESULT _hr = get_OlePlotQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2838)
inline void AutoCAD::IAcadOle::PutOlePlotQuality ( enum AcOlePlotQuality pPQuality ) {
    HRESULT _hr = put_OlePlotQuality(pPQuality);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2839)
inline _bstr_t AutoCAD::IAcadOle::GetOleSourceApp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OleSourceApp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2840)
inline void AutoCAD::IAcadOle::PutOleSourceApp ( _bstr_t srcApp ) {
    HRESULT _hr = put_OleSourceApp(srcApp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadHelix wrapper method implementations
//

#pragma implementation_key(2841)
inline _variant_t AutoCAD::IAcadHelix::GetPosition ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2842)
inline void AutoCAD::IAcadHelix::PutPosition ( const _variant_t & StartPoint ) {
    HRESULT _hr = put_Position(StartPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2843)
inline enum AutoCAD::AcHelixConstrainType AutoCAD::IAcadHelix::GetConstrain ( ) {
    enum AcHelixConstrainType _result;
    HRESULT _hr = get_Constrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2844)
inline void AutoCAD::IAcadHelix::PutConstrain ( enum AcHelixConstrainType constrainType ) {
    HRESULT _hr = put_Constrain(constrainType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2845)
inline double AutoCAD::IAcadHelix::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2846)
inline void AutoCAD::IAcadHelix::PutHeight ( double Length ) {
    HRESULT _hr = put_Height(Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2847)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadHelix::GetTurns ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_Turns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2848)
inline void AutoCAD::IAcadHelix::PutTurns ( ACAD_NOUNITS Turns ) {
    HRESULT _hr = put_Turns(Turns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2849)
inline double AutoCAD::IAcadHelix::GetTurnHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_TurnHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2850)
inline void AutoCAD::IAcadHelix::PutTurnHeight ( double Distance ) {
    HRESULT _hr = put_TurnHeight(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2851)
inline double AutoCAD::IAcadHelix::GetBaseRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_BaseRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2852)
inline void AutoCAD::IAcadHelix::PutBaseRadius ( double Radius ) {
    HRESULT _hr = put_BaseRadius(Radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2853)
inline double AutoCAD::IAcadHelix::GetTopRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_TopRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2854)
inline void AutoCAD::IAcadHelix::PutTopRadius ( double Radius ) {
    HRESULT _hr = put_TopRadius(Radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2855)
inline enum AutoCAD::AcHelixTwistType AutoCAD::IAcadHelix::GetTwist ( ) {
    enum AcHelixTwistType _result;
    HRESULT _hr = get_Twist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2856)
inline void AutoCAD::IAcadHelix::PutTwist ( enum AcHelixTwistType twistType ) {
    HRESULT _hr = put_Twist(twistType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2857)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadHelix::GetTurnSlope ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_TurnSlope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2858)
inline double AutoCAD::IAcadHelix::GetTotalLength ( ) {
    double _result = 0;
    HRESULT _hr = get_TotalLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadSurface wrapper method implementations
//

#pragma implementation_key(2859)
inline _bstr_t AutoCAD::IAcadSurface::GetSurfaceType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SurfaceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2860)
inline long AutoCAD::IAcadSurface::GetUIsolineDensity ( ) {
    long _result = 0;
    HRESULT _hr = get_UIsolineDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2861)
inline void AutoCAD::IAcadSurface::PutUIsolineDensity ( long density ) {
    HRESULT _hr = put_UIsolineDensity(density);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2862)
inline long AutoCAD::IAcadSurface::GetVIsolineDensity ( ) {
    long _result = 0;
    HRESULT _hr = get_VIsolineDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2863)
inline void AutoCAD::IAcadSurface::PutVIsolineDensity ( long density ) {
    HRESULT _hr = put_VIsolineDensity(density);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2864)
inline enum AutoCAD::AcWireframeType AutoCAD::IAcadSurface::GetWireframeType ( ) {
    enum AcWireframeType _result;
    HRESULT _hr = get_WireframeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2865)
inline void AutoCAD::IAcadSurface::PutWireframeType ( enum AcWireframeType Type ) {
    HRESULT _hr = put_WireframeType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2866)
inline int AutoCAD::IAcadSurface::GetMaintainAssociativity ( ) {
    int _result = 0;
    HRESULT _hr = get_MaintainAssociativity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2867)
inline void AutoCAD::IAcadSurface::PutMaintainAssociativity ( int maintainAssoc ) {
    HRESULT _hr = put_MaintainAssociativity(maintainAssoc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2868)
inline VARIANT_BOOL AutoCAD::IAcadSurface::GetShowAssociativity ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAssociativity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2869)
inline void AutoCAD::IAcadSurface::PutShowAssociativity ( VARIANT_BOOL bEnabled ) {
    HRESULT _hr = put_ShowAssociativity(bEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2870)
inline _variant_t AutoCAD::IAcadSurface::GetEdgeExtensionDistances ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EdgeExtensionDistances(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2871)
inline void AutoCAD::IAcadSurface::PutEdgeExtensionDistances ( const _variant_t & extDistances ) {
    HRESULT _hr = put_EdgeExtensionDistances(extDistances);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2872)
inline _variant_t AutoCAD::IAcadSurface::GetSurfTrimAssociativity ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SurfTrimAssociativity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2873)
inline void AutoCAD::IAcadSurface::PutSurfTrimAssociativity ( const _variant_t & associative ) {
    HRESULT _hr = put_SurfTrimAssociativity(associative);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadExtrudedSurface wrapper method implementations
//

#pragma implementation_key(2874)
inline double AutoCAD::IAcadExtrudedSurface::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2875)
inline void AutoCAD::IAcadExtrudedSurface::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2876)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadExtrudedSurface::GetTaperAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_TaperAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2877)
inline void AutoCAD::IAcadExtrudedSurface::PutTaperAngle ( ACAD_ANGLE TaperAngle ) {
    HRESULT _hr = put_TaperAngle(TaperAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2878)
inline _variant_t AutoCAD::IAcadExtrudedSurface::GetDirection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IAcadRevolvedSurface wrapper method implementations
//

#pragma implementation_key(2879)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadRevolvedSurface::GetRevolutionAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_RevolutionAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2880)
inline void AutoCAD::IAcadRevolvedSurface::PutRevolutionAngle ( ACAD_ANGLE revAngle ) {
    HRESULT _hr = put_RevolutionAngle(revAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2881)
inline _variant_t AutoCAD::IAcadRevolvedSurface::GetAxisPosition ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AxisPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2882)
inline void AutoCAD::IAcadRevolvedSurface::PutAxisPosition ( const _variant_t & AxisPosition ) {
    HRESULT _hr = put_AxisPosition(AxisPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2883)
inline _variant_t AutoCAD::IAcadRevolvedSurface::GetAxisDirection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AxisDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IAcadSweptSurface wrapper method implementations
//

#pragma implementation_key(2884)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadSweptSurface::GetProfileRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_ProfileRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2885)
inline void AutoCAD::IAcadSweptSurface::PutProfileRotation ( ACAD_ANGLE profileRotationAngle ) {
    HRESULT _hr = put_ProfileRotation(profileRotationAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2886)
inline VARIANT_BOOL AutoCAD::IAcadSweptSurface::GetBank ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Bank(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2887)
inline void AutoCAD::IAcadSweptSurface::PutBank ( VARIANT_BOOL bBank ) {
    HRESULT _hr = put_Bank(bBank);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2888)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadSweptSurface::GetTwist ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Twist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2889)
inline void AutoCAD::IAcadSweptSurface::PutTwist ( ACAD_ANGLE TwistAngle ) {
    HRESULT _hr = put_Twist(TwistAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2890)
inline double AutoCAD::IAcadSweptSurface::Getscale ( ) {
    double _result = 0;
    HRESULT _hr = get_scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2891)
inline void AutoCAD::IAcadSweptSurface::Putscale ( double scale ) {
    HRESULT _hr = put_scale(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2892)
inline double AutoCAD::IAcadSweptSurface::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadLoftedSurface wrapper method implementations
//

#pragma implementation_key(2893)
inline long AutoCAD::IAcadLoftedSurface::GetNumCrossSections ( ) {
    long _result = 0;
    HRESULT _hr = get_NumCrossSections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2894)
inline long AutoCAD::IAcadLoftedSurface::GetNumGuidePaths ( ) {
    long _result = 0;
    HRESULT _hr = get_NumGuidePaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2895)
inline enum AutoCAD::AcLoftedSurfaceNormalType AutoCAD::IAcadLoftedSurface::GetSurfaceNormals ( ) {
    enum AcLoftedSurfaceNormalType _result;
    HRESULT _hr = get_SurfaceNormals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2896)
inline void AutoCAD::IAcadLoftedSurface::PutSurfaceNormals ( enum AcLoftedSurfaceNormalType surfaceNormal ) {
    HRESULT _hr = put_SurfaceNormals(surfaceNormal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2897)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadLoftedSurface::GetStartDraftAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_StartDraftAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2898)
inline void AutoCAD::IAcadLoftedSurface::PutStartDraftAngle ( ACAD_ANGLE StartDraftAngle ) {
    HRESULT _hr = put_StartDraftAngle(StartDraftAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2899)
inline double AutoCAD::IAcadLoftedSurface::GetStartDraftMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_StartDraftMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2900)
inline void AutoCAD::IAcadLoftedSurface::PutStartDraftMagnitude ( double startDraftMag ) {
    HRESULT _hr = put_StartDraftMagnitude(startDraftMag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2901)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadLoftedSurface::GetEndDraftAngle ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_EndDraftAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2902)
inline void AutoCAD::IAcadLoftedSurface::PutEndDraftAngle ( ACAD_ANGLE EndDraftAngle ) {
    HRESULT _hr = put_EndDraftAngle(EndDraftAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2903)
inline double AutoCAD::IAcadLoftedSurface::GetEndDraftMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_EndDraftMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2904)
inline void AutoCAD::IAcadLoftedSurface::PutEndDraftMagnitude ( double endDraftMag ) {
    HRESULT _hr = put_EndDraftMagnitude(endDraftMag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2905)
inline VARIANT_BOOL AutoCAD::IAcadLoftedSurface::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2906)
inline void AutoCAD::IAcadLoftedSurface::PutClosed ( VARIANT_BOOL bClosed ) {
    HRESULT _hr = put_Closed(bClosed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2907)
inline double AutoCAD::IAcadLoftedSurface::GetStartSmoothMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_StartSmoothMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2908)
inline void AutoCAD::IAcadLoftedSurface::PutStartSmoothMagnitude ( double startSmoothMag ) {
    HRESULT _hr = put_StartSmoothMagnitude(startSmoothMag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2909)
inline double AutoCAD::IAcadLoftedSurface::GetEndSmoothMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_EndSmoothMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2910)
inline void AutoCAD::IAcadLoftedSurface::PutEndSmoothMagnitude ( double endSmoothMag ) {
    HRESULT _hr = put_EndSmoothMagnitude(endSmoothMag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2911)
inline int AutoCAD::IAcadLoftedSurface::GetStartSmoothContinuity ( ) {
    int _result = 0;
    HRESULT _hr = get_StartSmoothContinuity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2912)
inline void AutoCAD::IAcadLoftedSurface::PutStartSmoothContinuity ( int StartSmoothContinuity ) {
    HRESULT _hr = put_StartSmoothContinuity(StartSmoothContinuity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2913)
inline int AutoCAD::IAcadLoftedSurface::GetEndSmoothContinuity ( ) {
    int _result = 0;
    HRESULT _hr = get_EndSmoothContinuity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2914)
inline void AutoCAD::IAcadLoftedSurface::PutEndSmoothContinuity ( int EndSmoothContinuity ) {
    HRESULT _hr = put_EndSmoothContinuity(EndSmoothContinuity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2915)
inline VARIANT_BOOL AutoCAD::IAcadLoftedSurface::GetPeriodic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Periodic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2916)
inline void AutoCAD::IAcadLoftedSurface::PutPeriodic ( VARIANT_BOOL bPeriodic ) {
    HRESULT _hr = put_Periodic(bPeriodic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadSection2 wrapper method implementations
//

#pragma implementation_key(2917)
inline enum AutoCAD::AcSectionState2 AutoCAD::IAcadSection2::GetState2 ( ) {
    enum AcSectionState2 _result;
    HRESULT _hr = get_State2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2918)
inline void AutoCAD::IAcadSection2::PutState2 ( enum AcSectionState2 pVal ) {
    HRESULT _hr = put_State2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2919)
inline double AutoCAD::IAcadSection2::GetSliceDepth ( ) {
    double _result = 0;
    HRESULT _hr = get_SliceDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2920)
inline void AutoCAD::IAcadSection2::PutSliceDepth ( double pVal ) {
    HRESULT _hr = put_SliceDepth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2921)
inline double AutoCAD::IAcadSection2::GetSectionPlaneOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_SectionPlaneOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2922)
inline void AutoCAD::IAcadSection2::PutSectionPlaneOffset ( double pVal ) {
    HRESULT _hr = put_SectionPlaneOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadUnderlay wrapper method implementations
//

#pragma implementation_key(2923)
inline long AutoCAD::IAcadUnderlay::GetContrast ( ) {
    long _result = 0;
    HRESULT _hr = get_Contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2924)
inline void AutoCAD::IAcadUnderlay::PutContrast ( long Contrast ) {
    HRESULT _hr = put_Contrast(Contrast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2925)
inline long AutoCAD::IAcadUnderlay::GetFade ( ) {
    long _result = 0;
    HRESULT _hr = get_Fade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2926)
inline void AutoCAD::IAcadUnderlay::PutFade ( long Fade ) {
    HRESULT _hr = put_Fade(Fade);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2927)
inline _variant_t AutoCAD::IAcadUnderlay::GetPosition ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2928)
inline void AutoCAD::IAcadUnderlay::PutPosition ( const _variant_t & pos ) {
    HRESULT _hr = put_Position(pos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2929)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadUnderlay::GetRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2930)
inline void AutoCAD::IAcadUnderlay::PutRotation ( ACAD_ANGLE rotAngle ) {
    HRESULT _hr = put_Rotation(rotAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2931)
inline double AutoCAD::IAcadUnderlay::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2932)
inline void AutoCAD::IAcadUnderlay::PutWidth ( double Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2933)
inline double AutoCAD::IAcadUnderlay::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2934)
inline void AutoCAD::IAcadUnderlay::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2935)
inline _bstr_t AutoCAD::IAcadUnderlay::GetUnderlayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnderlayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2936)
inline void AutoCAD::IAcadUnderlay::PutUnderlayName ( _bstr_t Name ) {
    HRESULT _hr = put_UnderlayName(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2937)
inline void AutoCAD::IAcadUnderlay::PutItemName ( _bstr_t sheetName ) {
    HRESULT _hr = put_ItemName(sheetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2938)
inline _bstr_t AutoCAD::IAcadUnderlay::GetItemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ItemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2939)
inline VARIANT_BOOL AutoCAD::IAcadUnderlay::GetMonochrome ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Monochrome(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2940)
inline void AutoCAD::IAcadUnderlay::PutMonochrome ( VARIANT_BOOL bMono ) {
    HRESULT _hr = put_Monochrome(bMono);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2941)
inline VARIANT_BOOL AutoCAD::IAcadUnderlay::GetAdjustForBackground ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdjustForBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2942)
inline void AutoCAD::IAcadUnderlay::PutAdjustForBackground ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AdjustForBackground(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2943)
inline HRESULT AutoCAD::IAcadUnderlay::ClipBoundary ( const _variant_t & boundry ) {
    HRESULT _hr = raw_ClipBoundary(boundry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2944)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadUnderlay::GetScaleFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_ScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2945)
inline void AutoCAD::IAcadUnderlay::PutScaleFactor ( ACAD_NOUNITS ScaleFactor ) {
    HRESULT _hr = put_ScaleFactor(ScaleFactor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2946)
inline _bstr_t AutoCAD::IAcadUnderlay::GetFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_File(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2947)
inline void AutoCAD::IAcadUnderlay::PutFile ( _bstr_t Name ) {
    HRESULT _hr = put_File(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2948)
inline VARIANT_BOOL AutoCAD::IAcadUnderlay::GetUnderlayVisibility ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnderlayVisibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2949)
inline void AutoCAD::IAcadUnderlay::PutUnderlayVisibility ( VARIANT_BOOL fVisible ) {
    HRESULT _hr = put_UnderlayVisibility(fVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2950)
inline VARIANT_BOOL AutoCAD::IAcadUnderlay::GetClippingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClippingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2951)
inline void AutoCAD::IAcadUnderlay::PutClippingEnabled ( VARIANT_BOOL kClip ) {
    HRESULT _hr = put_ClippingEnabled(kClip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2952)
inline enum AutoCAD::AcUnderlayLayerOverrideType AutoCAD::IAcadUnderlay::GetUnderlayLayerOverrideApplied ( ) {
    enum AcUnderlayLayerOverrideType _result;
    HRESULT _hr = get_UnderlayLayerOverrideApplied(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2953)
inline void AutoCAD::IAcadUnderlay::PutUnderlayLayerOverrideApplied ( enum AcUnderlayLayerOverrideType bOverride ) {
    HRESULT _hr = put_UnderlayLayerOverrideApplied(bOverride);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadDwfUnderlay wrapper method implementations
//

#pragma implementation_key(2954)
inline _bstr_t AutoCAD::IAcadDwfUnderlay::GetDWFFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DWFFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2955)
inline void AutoCAD::IAcadDwfUnderlay::PutDWFFormat ( _bstr_t Name ) {
    HRESULT _hr = put_DWFFormat(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadSubDMesh wrapper method implementations
//

#pragma implementation_key(2956)
inline int AutoCAD::IAcadSubDMesh::GetSmoothness ( ) {
    int _result = 0;
    HRESULT _hr = get_Smoothness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2957)
inline void AutoCAD::IAcadSubDMesh::PutSmoothness ( int level ) {
    HRESULT _hr = put_Smoothness(level);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2958)
inline _variant_t AutoCAD::IAcadSubDMesh::GetCoordinates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2959)
inline void AutoCAD::IAcadSubDMesh::PutCoordinates ( const _variant_t & corners ) {
    HRESULT _hr = put_Coordinates(corners);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2960)
inline _variant_t AutoCAD::IAcadSubDMesh::GetCoordinate ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Coordinate(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2961)
inline void AutoCAD::IAcadSubDMesh::PutCoordinate ( int Index, const _variant_t & pVal ) {
    HRESULT _hr = put_Coordinate(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2962)
inline int AutoCAD::IAcadSubDMesh::GetVertexCount ( ) {
    int _result = 0;
    HRESULT _hr = get_VertexCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2963)
inline int AutoCAD::IAcadSubDMesh::GetFaceCount ( ) {
    int _result = 0;
    HRESULT _hr = get_FaceCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadNurbSurface wrapper method implementations
//

#pragma implementation_key(2964)
inline VARIANT_BOOL AutoCAD::IAcadNurbSurface::GetCvHullDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CvHullDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2965)
inline void AutoCAD::IAcadNurbSurface::PutCvHullDisplay ( VARIANT_BOOL Display ) {
    HRESULT _hr = put_CvHullDisplay(Display);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadGeoPositionMarker wrapper method implementations
//

#pragma implementation_key(2966)
inline _variant_t AutoCAD::IAcadGeoPositionMarker::GetPosition ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2967)
inline void AutoCAD::IAcadGeoPositionMarker::PutPosition ( const _variant_t & Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2968)
inline _bstr_t AutoCAD::IAcadGeoPositionMarker::GetTextString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2969)
inline void AutoCAD::IAcadGeoPositionMarker::PutTextString ( _bstr_t bstrText ) {
    HRESULT _hr = put_TextString(bstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2970)
inline _bstr_t AutoCAD::IAcadGeoPositionMarker::GetTextStyleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2971)
inline void AutoCAD::IAcadGeoPositionMarker::PutTextStyleName ( _bstr_t bstrName ) {
    HRESULT _hr = put_TextStyleName(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2972)
inline enum AutoCAD::AcAttachmentPoint AutoCAD::IAcadGeoPositionMarker::GetTextJustify ( ) {
    enum AcAttachmentPoint _result;
    HRESULT _hr = get_TextJustify(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2973)
inline void AutoCAD::IAcadGeoPositionMarker::PutTextJustify ( enum AcAttachmentPoint attPoint ) {
    HRESULT _hr = put_TextJustify(attPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2974)
inline enum AutoCAD::AcDrawingDirection AutoCAD::IAcadGeoPositionMarker::GetDrawingDirection ( ) {
    enum AcDrawingDirection _result;
    HRESULT _hr = get_DrawingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2975)
inline void AutoCAD::IAcadGeoPositionMarker::PutDrawingDirection ( enum AcDrawingDirection drawDir ) {
    HRESULT _hr = put_DrawingDirection(drawDir);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2976)
inline double AutoCAD::IAcadGeoPositionMarker::GetTextWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_TextWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2977)
inline void AutoCAD::IAcadGeoPositionMarker::PutTextWidth ( double Width ) {
    HRESULT _hr = put_TextWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2978)
inline double AutoCAD::IAcadGeoPositionMarker::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2979)
inline void AutoCAD::IAcadGeoPositionMarker::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2980)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadGeoPositionMarker::GetRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2981)
inline void AutoCAD::IAcadGeoPositionMarker::PutRotation ( ACAD_ANGLE rotAngle ) {
    HRESULT _hr = put_Rotation(rotAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2982)
inline double AutoCAD::IAcadGeoPositionMarker::GetLineSpacingFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_LineSpacingFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2983)
inline void AutoCAD::IAcadGeoPositionMarker::PutLineSpacingFactor ( double factor ) {
    HRESULT _hr = put_LineSpacingFactor(factor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2984)
inline double AutoCAD::IAcadGeoPositionMarker::GetLineSpacingDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_LineSpacingDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2985)
inline void AutoCAD::IAcadGeoPositionMarker::PutLineSpacingDistance ( double Value ) {
    HRESULT _hr = put_LineSpacingDistance(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2986)
inline enum AutoCAD::AcLineSpacingStyle AutoCAD::IAcadGeoPositionMarker::GetLineSpacingStyle ( ) {
    enum AcLineSpacingStyle _result;
    HRESULT _hr = get_LineSpacingStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2987)
inline void AutoCAD::IAcadGeoPositionMarker::PutLineSpacingStyle ( enum AcLineSpacingStyle style ) {
    HRESULT _hr = put_LineSpacingStyle(style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2988)
inline VARIANT_BOOL AutoCAD::IAcadGeoPositionMarker::GetBackgroundFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BackgroundFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2989)
inline void AutoCAD::IAcadGeoPositionMarker::PutBackgroundFill ( VARIANT_BOOL bUseBackgroundFill ) {
    HRESULT _hr = put_BackgroundFill(bUseBackgroundFill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2990)
inline double AutoCAD::IAcadGeoPositionMarker::GetLandingGap ( ) {
    double _result = 0;
    HRESULT _hr = get_LandingGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2991)
inline void AutoCAD::IAcadGeoPositionMarker::PutLandingGap ( double gap ) {
    HRESULT _hr = put_LandingGap(gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2992)
inline double AutoCAD::IAcadGeoPositionMarker::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2993)
inline void AutoCAD::IAcadGeoPositionMarker::PutRadius ( double gap ) {
    HRESULT _hr = put_Radius(gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2994)
inline VARIANT_BOOL AutoCAD::IAcadGeoPositionMarker::GetTextFrameDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextFrameDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2995)
inline void AutoCAD::IAcadGeoPositionMarker::PutTextFrameDisplay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TextFrameDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2996)
inline _bstr_t AutoCAD::IAcadGeoPositionMarker::GetLatitude ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2997)
inline void AutoCAD::IAcadGeoPositionMarker::PutLatitude ( _bstr_t Latitude ) {
    HRESULT _hr = put_Latitude(Latitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2998)
inline _bstr_t AutoCAD::IAcadGeoPositionMarker::GetLongitude ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2999)
inline void AutoCAD::IAcadGeoPositionMarker::PutLongitude ( _bstr_t Longitude ) {
    HRESULT _hr = put_Longitude(Longitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3000)
inline double AutoCAD::IAcadGeoPositionMarker::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3001)
inline void AutoCAD::IAcadGeoPositionMarker::PutAltitude ( double Altitude ) {
    HRESULT _hr = put_Altitude(Altitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3002)
inline _bstr_t AutoCAD::IAcadGeoPositionMarker::GetNotes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Notes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3003)
inline void AutoCAD::IAcadGeoPositionMarker::PutNotes ( _bstr_t Notes ) {
    HRESULT _hr = put_Notes(Notes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadGeomapImage wrapper method implementations
//

#pragma implementation_key(3004)
inline long AutoCAD::IAcadGeomapImage::GetGeoImageBrightness ( ) {
    long _result = 0;
    HRESULT _hr = get_GeoImageBrightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3005)
inline void AutoCAD::IAcadGeomapImage::PutGeoImageBrightness ( long Brightness ) {
    HRESULT _hr = put_GeoImageBrightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3006)
inline long AutoCAD::IAcadGeomapImage::GetGeoImageContrast ( ) {
    long _result = 0;
    HRESULT _hr = get_GeoImageContrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3007)
inline void AutoCAD::IAcadGeomapImage::PutGeoImageContrast ( long Contrast ) {
    HRESULT _hr = put_GeoImageContrast(Contrast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3008)
inline long AutoCAD::IAcadGeomapImage::GetGeoImageFade ( ) {
    long _result = 0;
    HRESULT _hr = get_GeoImageFade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3009)
inline void AutoCAD::IAcadGeomapImage::PutGeoImageFade ( long Fade ) {
    HRESULT _hr = put_GeoImageFade(Fade);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3010)
inline _variant_t AutoCAD::IAcadGeomapImage::GetGeoImagePosition ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_GeoImagePosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3011)
inline double AutoCAD::IAcadGeomapImage::GetGeoImageWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_GeoImageWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3012)
inline double AutoCAD::IAcadGeomapImage::GetGeoImageHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_GeoImageHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadPointCloud wrapper method implementations
//

#pragma implementation_key(3013)
inline enum AutoCAD::AcPointCloudColorType AutoCAD::IAcadPointCloud::GetUseEntityColor ( ) {
    enum AcPointCloudColorType _result;
    HRESULT _hr = get_UseEntityColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3014)
inline void AutoCAD::IAcadPointCloud::PutUseEntityColor ( enum AcPointCloudColorType val ) {
    HRESULT _hr = put_UseEntityColor(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3015)
inline VARIANT_BOOL AutoCAD::IAcadPointCloud::GetShowIntensity ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowIntensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3016)
inline void AutoCAD::IAcadPointCloud::PutShowIntensity ( VARIANT_BOOL val ) {
    HRESULT _hr = put_ShowIntensity(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3017)
inline enum AutoCAD::AcPointCloudIntensityStyle AutoCAD::IAcadPointCloud::GetIntensityColorScheme ( ) {
    enum AcPointCloudIntensityStyle _result;
    HRESULT _hr = get_IntensityColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3018)
inline void AutoCAD::IAcadPointCloud::PutIntensityColorScheme ( enum AcPointCloudIntensityStyle val ) {
    HRESULT _hr = put_IntensityColorScheme(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3019)
inline _variant_t AutoCAD::IAcadPointCloud::GetInsertionPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InsertionPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3020)
inline void AutoCAD::IAcadPointCloud::PutInsertionPoint ( const _variant_t & EndPoint ) {
    HRESULT _hr = put_InsertionPoint(EndPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3021)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadPointCloud::GetRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3022)
inline void AutoCAD::IAcadPointCloud::PutRotation ( ACAD_ANGLE val ) {
    HRESULT _hr = put_Rotation(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3023)
inline AutoCAD::ACAD_DISTANCE AutoCAD::IAcadPointCloud::GetWidth ( ) {
    ACAD_DISTANCE _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3024)
inline void AutoCAD::IAcadPointCloud::PutWidth ( ACAD_DISTANCE val ) {
    HRESULT _hr = put_Width(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3025)
inline AutoCAD::ACAD_DISTANCE AutoCAD::IAcadPointCloud::GetLength ( ) {
    ACAD_DISTANCE _result;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3026)
inline void AutoCAD::IAcadPointCloud::PutLength ( ACAD_DISTANCE val ) {
    HRESULT _hr = put_Length(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3027)
inline AutoCAD::ACAD_DISTANCE AutoCAD::IAcadPointCloud::GetHeight ( ) {
    ACAD_DISTANCE _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3028)
inline void AutoCAD::IAcadPointCloud::PutHeight ( ACAD_DISTANCE val ) {
    HRESULT _hr = put_Height(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3029)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadPointCloud::Getscale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3030)
inline void AutoCAD::IAcadPointCloud::Putscale ( ACAD_NOUNITS val ) {
    HRESULT _hr = put_scale(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3031)
inline _bstr_t AutoCAD::IAcadPointCloud::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3032)
inline _bstr_t AutoCAD::IAcadPointCloud::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3033)
inline VARIANT_BOOL AutoCAD::IAcadPointCloud::GetShowClipped ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowClipped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3034)
inline void AutoCAD::IAcadPointCloud::PutShowClipped ( VARIANT_BOOL val ) {
    HRESULT _hr = put_ShowClipped(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3035)
inline VARIANT_BOOL AutoCAD::IAcadPointCloud::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3036)
inline void AutoCAD::IAcadPointCloud::PutLocked ( VARIANT_BOOL val ) {
    HRESULT _hr = put_Locked(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3037)
inline enum AutoCAD::AcPointCloudStylizationType AutoCAD::IAcadPointCloud::GetStylization ( ) {
    enum AcPointCloudStylizationType _result;
    HRESULT _hr = get_Stylization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3038)
inline void AutoCAD::IAcadPointCloud::PutStylization ( enum AcPointCloudStylizationType val ) {
    HRESULT _hr = put_Stylization(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3039)
inline _bstr_t AutoCAD::IAcadPointCloud::GetUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Unit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3040)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadPointCloud::GetUnitFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_UnitFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadPointCloudEx wrapper method implementations
//

#pragma implementation_key(3041)
inline enum AutoCAD::AcPointCloudExStylizationType AutoCAD::IAcadPointCloudEx::GetStylization ( ) {
    enum AcPointCloudExStylizationType _result;
    HRESULT _hr = get_Stylization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3042)
inline void AutoCAD::IAcadPointCloudEx::PutStylization ( enum AcPointCloudExStylizationType val ) {
    HRESULT _hr = put_Stylization(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3043)
inline _bstr_t AutoCAD::IAcadPointCloudEx::GetColorScheme ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3044)
inline void AutoCAD::IAcadPointCloudEx::PutColorScheme ( int val ) {
    HRESULT _hr = put_ColorScheme(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3045)
inline _variant_t AutoCAD::IAcadPointCloudEx::GetInsertionPoint ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InsertionPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3046)
inline void AutoCAD::IAcadPointCloudEx::PutInsertionPoint ( const _variant_t & EndPoint ) {
    HRESULT _hr = put_InsertionPoint(EndPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3047)
inline AutoCAD::ACAD_ANGLE AutoCAD::IAcadPointCloudEx::GetRotation ( ) {
    ACAD_ANGLE _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3048)
inline void AutoCAD::IAcadPointCloudEx::PutRotation ( ACAD_ANGLE val ) {
    HRESULT _hr = put_Rotation(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3049)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadPointCloudEx::Getscale ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3050)
inline void AutoCAD::IAcadPointCloudEx::Putscale ( ACAD_NOUNITS val ) {
    HRESULT _hr = put_scale(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3051)
inline _bstr_t AutoCAD::IAcadPointCloudEx::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3052)
inline void AutoCAD::IAcadPointCloudEx::PutName ( _bstr_t val ) {
    HRESULT _hr = put_Name(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3053)
inline _bstr_t AutoCAD::IAcadPointCloudEx::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3054)
inline VARIANT_BOOL AutoCAD::IAcadPointCloudEx::GetShowCropped ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowCropped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3055)
inline void AutoCAD::IAcadPointCloudEx::PutShowCropped ( VARIANT_BOOL val ) {
    HRESULT _hr = put_ShowCropped(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3056)
inline VARIANT_BOOL AutoCAD::IAcadPointCloudEx::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3057)
inline void AutoCAD::IAcadPointCloudEx::PutLocked ( VARIANT_BOOL val ) {
    HRESULT _hr = put_Locked(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3058)
inline VARIANT_BOOL AutoCAD::IAcadPointCloudEx::GetGeolocate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Geolocate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3059)
inline void AutoCAD::IAcadPointCloudEx::PutGeolocate ( VARIANT_BOOL val ) {
    HRESULT _hr = put_Geolocate(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3060)
inline _bstr_t AutoCAD::IAcadPointCloudEx::GetUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Unit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3061)
inline AutoCAD::ACAD_NOUNITS AutoCAD::IAcadPointCloudEx::GetUnitFactor ( ) {
    ACAD_NOUNITS _result;
    HRESULT _hr = get_UnitFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadPointCloudEx2 wrapper method implementations
//

#pragma implementation_key(3062)
inline _bstr_t AutoCAD::IAcadPointCloudEx2::GetSegmentation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Segmentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAcadDatabase wrapper method implementations
//

#pragma implementation_key(3063)
inline AutoCAD::IAcadModelSpacePtr AutoCAD::IAcadDatabase::GetModelSpace ( ) {
    struct IAcadModelSpace * _result = 0;
    HRESULT _hr = get_ModelSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadModelSpacePtr(_result, false);
}

#pragma implementation_key(3064)
inline AutoCAD::IAcadPaperSpacePtr AutoCAD::IAcadDatabase::GetPaperSpace ( ) {
    struct IAcadPaperSpace * _result = 0;
    HRESULT _hr = get_PaperSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPaperSpacePtr(_result, false);
}

#pragma implementation_key(3065)
inline AutoCAD::IAcadBlocksPtr AutoCAD::IAcadDatabase::GetBlocks ( ) {
    struct IAcadBlocks * _result = 0;
    HRESULT _hr = get_Blocks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadBlocksPtr(_result, false);
}

#pragma implementation_key(3066)
inline _variant_t AutoCAD::IAcadDatabase::CopyObjects ( const _variant_t & Objects, const _variant_t & Owner, VARIANT * IdPairs ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyObjects(Objects, Owner, IdPairs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3067)
inline AutoCAD::IAcadGroupsPtr AutoCAD::IAcadDatabase::GetGroups ( ) {
    struct IAcadGroups * _result = 0;
    HRESULT _hr = get_Groups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadGroupsPtr(_result, false);
}

#pragma implementation_key(3068)
inline AutoCAD::IAcadDimStylesPtr AutoCAD::IAcadDatabase::GetDimStyles ( ) {
    struct IAcadDimStyles * _result = 0;
    HRESULT _hr = get_DimStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDimStylesPtr(_result, false);
}

#pragma implementation_key(3069)
inline AutoCAD::IAcadLayersPtr AutoCAD::IAcadDatabase::GetLayers ( ) {
    struct IAcadLayers * _result = 0;
    HRESULT _hr = get_Layers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLayersPtr(_result, false);
}

#pragma implementation_key(3070)
inline AutoCAD::IAcadLineTypesPtr AutoCAD::IAcadDatabase::GetLinetypes ( ) {
    struct IAcadLineTypes * _result = 0;
    HRESULT _hr = get_Linetypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLineTypesPtr(_result, false);
}

#pragma implementation_key(3071)
inline AutoCAD::IAcadDictionariesPtr AutoCAD::IAcadDatabase::GetDictionaries ( ) {
    struct IAcadDictionaries * _result = 0;
    HRESULT _hr = get_Dictionaries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDictionariesPtr(_result, false);
}

#pragma implementation_key(3072)
inline AutoCAD::IAcadRegisteredApplicationsPtr AutoCAD::IAcadDatabase::GetRegisteredApplications ( ) {
    struct IAcadRegisteredApplications * _result = 0;
    HRESULT _hr = get_RegisteredApplications(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadRegisteredApplicationsPtr(_result, false);
}

#pragma implementation_key(3073)
inline AutoCAD::IAcadTextStylesPtr AutoCAD::IAcadDatabase::GetTextStyles ( ) {
    struct IAcadTextStyles * _result = 0;
    HRESULT _hr = get_TextStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadTextStylesPtr(_result, false);
}

#pragma implementation_key(3074)
inline AutoCAD::IAcadUCSsPtr AutoCAD::IAcadDatabase::GetUserCoordinateSystems ( ) {
    struct IAcadUCSs * _result = 0;
    HRESULT _hr = get_UserCoordinateSystems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadUCSsPtr(_result, false);
}

#pragma implementation_key(3075)
inline AutoCAD::IAcadViewsPtr AutoCAD::IAcadDatabase::GetViews ( ) {
    struct IAcadViews * _result = 0;
    HRESULT _hr = get_Views(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadViewsPtr(_result, false);
}

#pragma implementation_key(3076)
inline AutoCAD::IAcadViewportsPtr AutoCAD::IAcadDatabase::GetViewports ( ) {
    struct IAcadViewports * _result = 0;
    HRESULT _hr = get_Viewports(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadViewportsPtr(_result, false);
}

#pragma implementation_key(3077)
inline double AutoCAD::IAcadDatabase::GetElevationModelSpace ( ) {
    double _result = 0;
    HRESULT _hr = get_ElevationModelSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3078)
inline void AutoCAD::IAcadDatabase::PutElevationModelSpace ( double Elevation ) {
    HRESULT _hr = put_ElevationModelSpace(Elevation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3079)
inline double AutoCAD::IAcadDatabase::GetElevationPaperSpace ( ) {
    double _result = 0;
    HRESULT _hr = get_ElevationPaperSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3080)
inline void AutoCAD::IAcadDatabase::PutElevationPaperSpace ( double Elevation ) {
    HRESULT _hr = put_ElevationPaperSpace(Elevation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3081)
inline _variant_t AutoCAD::IAcadDatabase::GetLimits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Limits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3082)
inline void AutoCAD::IAcadDatabase::PutLimits ( const _variant_t & Limits ) {
    HRESULT _hr = put_Limits(Limits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3083)
inline IDispatchPtr AutoCAD::IAcadDatabase::HandleToObject ( _bstr_t Handle ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_HandleToObject(Handle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3084)
inline IDispatchPtr AutoCAD::IAcadDatabase::ObjectIdToObject ( LONG_PTR ObjectID ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ObjectIdToObject(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3085)
inline AutoCAD::IAcadLayoutsPtr AutoCAD::IAcadDatabase::GetLayouts ( ) {
    struct IAcadLayouts * _result = 0;
    HRESULT _hr = get_Layouts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLayoutsPtr(_result, false);
}

#pragma implementation_key(3086)
inline AutoCAD::IAcadPlotConfigurationsPtr AutoCAD::IAcadDatabase::GetPlotConfigurations ( ) {
    struct IAcadPlotConfigurations * _result = 0;
    HRESULT _hr = get_PlotConfigurations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPlotConfigurationsPtr(_result, false);
}

#pragma implementation_key(3087)
inline AutoCAD::IAcadDatabasePreferencesPtr AutoCAD::IAcadDatabase::GetPreferences ( ) {
    struct IAcadDatabasePreferences * _result = 0;
    HRESULT _hr = get_Preferences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDatabasePreferencesPtr(_result, false);
}

#pragma implementation_key(3088)
inline AutoCAD::IAcadSummaryInfoPtr AutoCAD::IAcadDatabase::GetSummaryInfo ( ) {
    struct IAcadSummaryInfo * _result = 0;
    HRESULT _hr = get_SummaryInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadSummaryInfoPtr(_result, false);
}

#pragma implementation_key(3089)
inline AutoCAD::IAcadSectionManagerPtr AutoCAD::IAcadDatabase::GetSectionManager ( ) {
    struct IAcadSectionManager * _result = 0;
    HRESULT _hr = get_SectionManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadSectionManagerPtr(_result, false);
}

#pragma implementation_key(3090)
inline AutoCAD::IAcadMaterialsPtr AutoCAD::IAcadDatabase::GetMaterials ( ) {
    struct IAcadMaterials * _result = 0;
    HRESULT _hr = get_Materials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMaterialsPtr(_result, false);
}

//
// interface IAcadLayerStateManager wrapper method implementations
//

#pragma implementation_key(3091)
inline HRESULT AutoCAD::IAcadLayerStateManager::SetDatabase ( struct IAcadDatabase * iHostDb ) {
    HRESULT _hr = raw_SetDatabase(iHostDb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3092)
inline void AutoCAD::IAcadLayerStateManager::PutMask ( _bstr_t bsName, enum AcLayerStateMask eMask ) {
    HRESULT _hr = put_Mask(bsName, eMask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3093)
inline enum AutoCAD::AcLayerStateMask AutoCAD::IAcadLayerStateManager::GetMask ( _bstr_t bsName ) {
    enum AcLayerStateMask _result;
    HRESULT _hr = get_Mask(bsName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3094)
inline HRESULT AutoCAD::IAcadLayerStateManager::Save ( _bstr_t bsName, enum AcLayerStateMask eMask ) {
    HRESULT _hr = raw_Save(bsName, eMask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3095)
inline HRESULT AutoCAD::IAcadLayerStateManager::Restore ( _bstr_t bsName ) {
    HRESULT _hr = raw_Restore(bsName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3096)
inline HRESULT AutoCAD::IAcadLayerStateManager::Delete ( _bstr_t bsName ) {
    HRESULT _hr = raw_Delete(bsName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3097)
inline HRESULT AutoCAD::IAcadLayerStateManager::Rename ( _bstr_t bsName, _bstr_t bsNewName ) {
    HRESULT _hr = raw_Rename(bsName, bsNewName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3098)
inline HRESULT AutoCAD::IAcadLayerStateManager::Import ( _bstr_t bsFilename ) {
    HRESULT _hr = raw_Import(bsFilename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3099)
inline HRESULT AutoCAD::IAcadLayerStateManager::Export ( _bstr_t bsName, _bstr_t bsFilename ) {
    HRESULT _hr = raw_Export(bsName, bsFilename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadBlock wrapper method implementations
//

#pragma implementation_key(3100)
inline AutoCAD::IAcadEntityPtr AutoCAD::IAcadBlock::Item ( const _variant_t & Index ) {
    struct IAcadEntity * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadEntityPtr(_result, false);
}

#pragma implementation_key(3101)
inline IUnknownPtr AutoCAD::IAcadBlock::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3102)
inline long AutoCAD::IAcadBlock::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3103)
inline _bstr_t AutoCAD::IAcadBlock::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3104)
inline void AutoCAD::IAcadBlock::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3105)
inline _variant_t AutoCAD::IAcadBlock::GetOrigin ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3106)
inline void AutoCAD::IAcadBlock::PutOrigin ( const _variant_t & Origin ) {
    HRESULT _hr = put_Origin(Origin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3107)
inline IDispatchPtr AutoCAD::IAcadBlock::AddCustomObject ( _bstr_t ClassName ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_AddCustomObject(ClassName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3108)
inline AutoCAD::IAcad3DFacePtr AutoCAD::IAcadBlock::Add3DFace ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3, const _variant_t & Point4 ) {
    struct IAcad3DFace * _result = 0;
    HRESULT _hr = raw_Add3DFace(Point1, Point2, point3, Point4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DFacePtr(_result, false);
}

#pragma implementation_key(3109)
inline AutoCAD::IAcadPolygonMeshPtr AutoCAD::IAcadBlock::Add3DMesh ( int M, int N, const _variant_t & PointsMatrix ) {
    struct IAcadPolygonMesh * _result = 0;
    HRESULT _hr = raw_Add3DMesh(M, N, PointsMatrix, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPolygonMeshPtr(_result, false);
}

#pragma implementation_key(3110)
inline AutoCAD::IAcad3DPolylinePtr AutoCAD::IAcadBlock::Add3DPoly ( const _variant_t & PointsArray ) {
    struct IAcad3DPolyline * _result = 0;
    HRESULT _hr = raw_Add3DPoly(PointsArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DPolylinePtr(_result, false);
}

#pragma implementation_key(3111)
inline AutoCAD::IAcadArcPtr AutoCAD::IAcadBlock::AddArc ( const _variant_t & Center, double Radius, double StartAngle, double EndAngle ) {
    struct IAcadArc * _result = 0;
    HRESULT _hr = raw_AddArc(Center, Radius, StartAngle, EndAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadArcPtr(_result, false);
}

#pragma implementation_key(3112)
inline AutoCAD::IAcadAttributePtr AutoCAD::IAcadBlock::AddAttribute ( double Height, enum AcAttributeMode Mode, _bstr_t Prompt, const _variant_t & InsertionPoint, _bstr_t Tag, _bstr_t Value ) {
    struct IAcadAttribute * _result = 0;
    HRESULT _hr = raw_AddAttribute(Height, Mode, Prompt, InsertionPoint, Tag, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadAttributePtr(_result, false);
}

#pragma implementation_key(3113)
inline AutoCAD::IAcad3DSolidPtr AutoCAD::IAcadBlock::AddBox ( const _variant_t & Origin, double Length, double Width, double Height ) {
    struct IAcad3DSolid * _result = 0;
    HRESULT _hr = raw_AddBox(Origin, Length, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DSolidPtr(_result, false);
}

#pragma implementation_key(3114)
inline AutoCAD::IAcadCirclePtr AutoCAD::IAcadBlock::AddCircle ( const _variant_t & Center, double Radius ) {
    struct IAcadCircle * _result = 0;
    HRESULT _hr = raw_AddCircle(Center, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadCirclePtr(_result, false);
}

#pragma implementation_key(3115)
inline AutoCAD::IAcad3DSolidPtr AutoCAD::IAcadBlock::AddCone ( const _variant_t & Center, double BaseRadius, double Height ) {
    struct IAcad3DSolid * _result = 0;
    HRESULT _hr = raw_AddCone(Center, BaseRadius, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DSolidPtr(_result, false);
}

#pragma implementation_key(3116)
inline AutoCAD::IAcad3DSolidPtr AutoCAD::IAcadBlock::AddCylinder ( const _variant_t & Center, double Radius, double Height ) {
    struct IAcad3DSolid * _result = 0;
    HRESULT _hr = raw_AddCylinder(Center, Radius, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DSolidPtr(_result, false);
}

#pragma implementation_key(3117)
inline AutoCAD::IAcadDimAlignedPtr AutoCAD::IAcadBlock::AddDimAligned ( const _variant_t & ExtLine1Point, const _variant_t & ExtLine2Point, const _variant_t & TextPosition ) {
    struct IAcadDimAligned * _result = 0;
    HRESULT _hr = raw_AddDimAligned(ExtLine1Point, ExtLine2Point, TextPosition, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDimAlignedPtr(_result, false);
}

#pragma implementation_key(3118)
inline AutoCAD::IAcadDimAngularPtr AutoCAD::IAcadBlock::AddDimAngular ( const _variant_t & AngleVertex, const _variant_t & FirstEndPoint, const _variant_t & SecondEndPoint, const _variant_t & TextPoint ) {
    struct IAcadDimAngular * _result = 0;
    HRESULT _hr = raw_AddDimAngular(AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDimAngularPtr(_result, false);
}

#pragma implementation_key(3119)
inline AutoCAD::IAcadDimDiametricPtr AutoCAD::IAcadBlock::AddDimDiametric ( const _variant_t & ChordPoint, const _variant_t & FarChordPoint, double LeaderLength ) {
    struct IAcadDimDiametric * _result = 0;
    HRESULT _hr = raw_AddDimDiametric(ChordPoint, FarChordPoint, LeaderLength, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDimDiametricPtr(_result, false);
}

#pragma implementation_key(3120)
inline AutoCAD::IAcadDimRotatedPtr AutoCAD::IAcadBlock::AddDimRotated ( const _variant_t & ExtLine1Point, const _variant_t & ExtLine2Point, const _variant_t & DimLineLocation, double RotationAngle ) {
    struct IAcadDimRotated * _result = 0;
    HRESULT _hr = raw_AddDimRotated(ExtLine1Point, ExtLine2Point, DimLineLocation, RotationAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDimRotatedPtr(_result, false);
}

#pragma implementation_key(3121)
inline AutoCAD::IAcadDimOrdinatePtr AutoCAD::IAcadBlock::AddDimOrdinate ( const _variant_t & DefinitionPoint, const _variant_t & LeaderEndPoint, int UseXAxis ) {
    struct IAcadDimOrdinate * _result = 0;
    HRESULT _hr = raw_AddDimOrdinate(DefinitionPoint, LeaderEndPoint, UseXAxis, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDimOrdinatePtr(_result, false);
}

#pragma implementation_key(3122)
inline AutoCAD::IAcadDimRadialPtr AutoCAD::IAcadBlock::AddDimRadial ( const _variant_t & Center, const _variant_t & ChordPoint, double LeaderLength ) {
    struct IAcadDimRadial * _result = 0;
    HRESULT _hr = raw_AddDimRadial(Center, ChordPoint, LeaderLength, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDimRadialPtr(_result, false);
}

#pragma implementation_key(3123)
inline AutoCAD::IAcadEllipsePtr AutoCAD::IAcadBlock::AddEllipse ( const _variant_t & Center, const _variant_t & MajorAxis, double RadiusRatio ) {
    struct IAcadEllipse * _result = 0;
    HRESULT _hr = raw_AddEllipse(Center, MajorAxis, RadiusRatio, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadEllipsePtr(_result, false);
}

#pragma implementation_key(3124)
inline AutoCAD::IAcad3DSolidPtr AutoCAD::IAcadBlock::AddEllipticalCone ( const _variant_t & Center, double MajorRadius, double MinorRadius, double Height ) {
    struct IAcad3DSolid * _result = 0;
    HRESULT _hr = raw_AddEllipticalCone(Center, MajorRadius, MinorRadius, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DSolidPtr(_result, false);
}

#pragma implementation_key(3125)
inline AutoCAD::IAcad3DSolidPtr AutoCAD::IAcadBlock::AddEllipticalCylinder ( const _variant_t & Center, double MajorRadius, double MinorRadius, double Height ) {
    struct IAcad3DSolid * _result = 0;
    HRESULT _hr = raw_AddEllipticalCylinder(Center, MajorRadius, MinorRadius, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DSolidPtr(_result, false);
}

#pragma implementation_key(3126)
inline AutoCAD::IAcad3DSolidPtr AutoCAD::IAcadBlock::AddExtrudedSolid ( struct IAcadRegion * Profile, double Height, double TaperAngle ) {
    struct IAcad3DSolid * _result = 0;
    HRESULT _hr = raw_AddExtrudedSolid(Profile, Height, TaperAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DSolidPtr(_result, false);
}

#pragma implementation_key(3127)
inline AutoCAD::IAcad3DSolidPtr AutoCAD::IAcadBlock::AddExtrudedSolidAlongPath ( struct IAcadRegion * Profile, IDispatch * Path ) {
    struct IAcad3DSolid * _result = 0;
    HRESULT _hr = raw_AddExtrudedSolidAlongPath(Profile, Path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DSolidPtr(_result, false);
}

#pragma implementation_key(3128)
inline AutoCAD::IAcadLeaderPtr AutoCAD::IAcadBlock::AddLeader ( const _variant_t & PointsArray, struct IAcadEntity * Annotation, enum AcLeaderType Type ) {
    struct IAcadLeader * _result = 0;
    HRESULT _hr = raw_AddLeader(PointsArray, Annotation, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLeaderPtr(_result, false);
}

#pragma implementation_key(3129)
inline AutoCAD::IAcadMTextPtr AutoCAD::IAcadBlock::AddMText ( const _variant_t & InsertionPoint, double Width, _bstr_t Text ) {
    struct IAcadMText * _result = 0;
    HRESULT _hr = raw_AddMText(InsertionPoint, Width, Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMTextPtr(_result, false);
}

#pragma implementation_key(3130)
inline AutoCAD::IAcadPointPtr AutoCAD::IAcadBlock::AddPoint ( const _variant_t & Point ) {
    struct IAcadPoint * _result = 0;
    HRESULT _hr = raw_AddPoint(Point, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPointPtr(_result, false);
}

#pragma implementation_key(3131)
inline AutoCAD::IAcadLWPolylinePtr AutoCAD::IAcadBlock::AddLightWeightPolyline ( const _variant_t & VerticesList ) {
    struct IAcadLWPolyline * _result = 0;
    HRESULT _hr = raw_AddLightWeightPolyline(VerticesList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLWPolylinePtr(_result, false);
}

#pragma implementation_key(3132)
inline AutoCAD::IAcadPolylinePtr AutoCAD::IAcadBlock::AddPolyline ( const _variant_t & VerticesList ) {
    struct IAcadPolyline * _result = 0;
    HRESULT _hr = raw_AddPolyline(VerticesList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPolylinePtr(_result, false);
}

#pragma implementation_key(3133)
inline AutoCAD::IAcadRayPtr AutoCAD::IAcadBlock::AddRay ( const _variant_t & Point1, const _variant_t & Point2 ) {
    struct IAcadRay * _result = 0;
    HRESULT _hr = raw_AddRay(Point1, Point2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadRayPtr(_result, false);
}

#pragma implementation_key(3134)
inline _variant_t AutoCAD::IAcadBlock::AddRegion ( const _variant_t & ObjectList ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddRegion(ObjectList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3135)
inline AutoCAD::IAcad3DSolidPtr AutoCAD::IAcadBlock::AddRevolvedSolid ( struct IAcadRegion * Profile, const _variant_t & AxisPoint, const _variant_t & AxisDir, double Angle ) {
    struct IAcad3DSolid * _result = 0;
    HRESULT _hr = raw_AddRevolvedSolid(Profile, AxisPoint, AxisDir, Angle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DSolidPtr(_result, false);
}

#pragma implementation_key(3136)
inline AutoCAD::IAcadShapePtr AutoCAD::IAcadBlock::AddShape ( _bstr_t Name, const _variant_t & InsertionPoint, double ScaleFactor, double RotationAngle ) {
    struct IAcadShape * _result = 0;
    HRESULT _hr = raw_AddShape(Name, InsertionPoint, ScaleFactor, RotationAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadShapePtr(_result, false);
}

#pragma implementation_key(3137)
inline AutoCAD::IAcadSolidPtr AutoCAD::IAcadBlock::AddSolid ( const _variant_t & Point1, const _variant_t & Point2, const _variant_t & point3, const _variant_t & Point4 ) {
    struct IAcadSolid * _result = 0;
    HRESULT _hr = raw_AddSolid(Point1, Point2, point3, Point4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadSolidPtr(_result, false);
}

#pragma implementation_key(3138)
inline AutoCAD::IAcad3DSolidPtr AutoCAD::IAcadBlock::AddSphere ( const _variant_t & Center, double Radius ) {
    struct IAcad3DSolid * _result = 0;
    HRESULT _hr = raw_AddSphere(Center, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DSolidPtr(_result, false);
}

#pragma implementation_key(3139)
inline AutoCAD::IAcadSplinePtr AutoCAD::IAcadBlock::AddSpline ( const _variant_t & PointsArray, const _variant_t & StartTangent, const _variant_t & EndTangent ) {
    struct IAcadSpline * _result = 0;
    HRESULT _hr = raw_AddSpline(PointsArray, StartTangent, EndTangent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadSplinePtr(_result, false);
}

#pragma implementation_key(3140)
inline AutoCAD::IAcadTextPtr AutoCAD::IAcadBlock::AddText ( _bstr_t TextString, const _variant_t & InsertionPoint, double Height ) {
    struct IAcadText * _result = 0;
    HRESULT _hr = raw_AddText(TextString, InsertionPoint, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadTextPtr(_result, false);
}

#pragma implementation_key(3141)
inline AutoCAD::IAcadTolerancePtr AutoCAD::IAcadBlock::AddTolerance ( _bstr_t Text, const _variant_t & InsertionPoint, const _variant_t & Direction ) {
    struct IAcadTolerance * _result = 0;
    HRESULT _hr = raw_AddTolerance(Text, InsertionPoint, Direction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadTolerancePtr(_result, false);
}

#pragma implementation_key(3142)
inline AutoCAD::IAcad3DSolidPtr AutoCAD::IAcadBlock::AddTorus ( const _variant_t & Center, double TorusRadius, double TubeRadius ) {
    struct IAcad3DSolid * _result = 0;
    HRESULT _hr = raw_AddTorus(Center, TorusRadius, TubeRadius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DSolidPtr(_result, false);
}

#pragma implementation_key(3143)
inline AutoCAD::IAcadTracePtr AutoCAD::IAcadBlock::AddTrace ( const _variant_t & PointsArray ) {
    struct IAcadTrace * _result = 0;
    HRESULT _hr = raw_AddTrace(PointsArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadTracePtr(_result, false);
}

#pragma implementation_key(3144)
inline AutoCAD::IAcad3DSolidPtr AutoCAD::IAcadBlock::AddWedge ( const _variant_t & Center, double Length, double Width, double Height ) {
    struct IAcad3DSolid * _result = 0;
    HRESULT _hr = raw_AddWedge(Center, Length, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcad3DSolidPtr(_result, false);
}

#pragma implementation_key(3145)
inline AutoCAD::IAcadXlinePtr AutoCAD::IAcadBlock::AddXline ( const _variant_t & Point1, const _variant_t & Point2 ) {
    struct IAcadXline * _result = 0;
    HRESULT _hr = raw_AddXline(Point1, Point2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadXlinePtr(_result, false);
}

#pragma implementation_key(3146)
inline AutoCAD::IAcadBlockReferencePtr AutoCAD::IAcadBlock::InsertBlock ( const _variant_t & InsertionPoint, _bstr_t Name, double Xscale, double Yscale, double Zscale, double Rotation, const _variant_t & Password ) {
    struct IAcadBlockReference * _result = 0;
    HRESULT _hr = raw_InsertBlock(InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadBlockReferencePtr(_result, false);
}

#pragma implementation_key(3147)
inline AutoCAD::IAcadHatchPtr AutoCAD::IAcadBlock::AddHatch ( int PatternType, _bstr_t PatternName, VARIANT_BOOL Associativity, const _variant_t & HatchObjectType ) {
    struct IAcadHatch * _result = 0;
    HRESULT _hr = raw_AddHatch(PatternType, PatternName, Associativity, HatchObjectType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadHatchPtr(_result, false);
}

#pragma implementation_key(3148)
inline AutoCAD::IAcadRasterImagePtr AutoCAD::IAcadBlock::AddRaster ( _bstr_t imageFileName, const _variant_t & InsertionPoint, double ScaleFactor, double RotationAngle ) {
    struct IAcadRasterImage * _result = 0;
    HRESULT _hr = raw_AddRaster(imageFileName, InsertionPoint, ScaleFactor, RotationAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadRasterImagePtr(_result, false);
}

#pragma implementation_key(3149)
inline AutoCAD::IAcadLinePtr AutoCAD::IAcadBlock::AddLine ( const _variant_t & StartPoint, const _variant_t & EndPoint ) {
    struct IAcadLine * _result = 0;
    HRESULT _hr = raw_AddLine(StartPoint, EndPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLinePtr(_result, false);
}

#pragma implementation_key(3150)
inline VARIANT_BOOL AutoCAD::IAcadBlock::GetIsLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3151)
inline AutoCAD::IAcadLayoutPtr AutoCAD::IAcadBlock::GetLayout ( ) {
    struct IAcadLayout * _result = 0;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLayoutPtr(_result, false);
}

#pragma implementation_key(3152)
inline VARIANT_BOOL AutoCAD::IAcadBlock::GetIsXRef ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsXRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3153)
inline AutoCAD::IAcadMInsertBlockPtr AutoCAD::IAcadBlock::AddMInsertBlock ( const _variant_t & InsertionPoint, _bstr_t Name, double Xscale, double Yscale, double Zscale, double Rotation, long NumRows, long NumColumns, long RowSpacing, long ColumnSpacing, const _variant_t & Password ) {
    struct IAcadMInsertBlock * _result = 0;
    HRESULT _hr = raw_AddMInsertBlock(InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, NumRows, NumColumns, RowSpacing, ColumnSpacing, Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMInsertBlockPtr(_result, false);
}

#pragma implementation_key(3154)
inline AutoCAD::IAcadPolyfaceMeshPtr AutoCAD::IAcadBlock::AddPolyfaceMesh ( const _variant_t & VertexList, const _variant_t & FaceList ) {
    struct IAcadPolyfaceMesh * _result = 0;
    HRESULT _hr = raw_AddPolyfaceMesh(VertexList, FaceList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPolyfaceMeshPtr(_result, false);
}

#pragma implementation_key(3155)
inline AutoCAD::IAcadMLinePtr AutoCAD::IAcadBlock::AddMLine ( const _variant_t & VertexList ) {
    struct IAcadMLine * _result = 0;
    HRESULT _hr = raw_AddMLine(VertexList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMLinePtr(_result, false);
}

#pragma implementation_key(3156)
inline AutoCAD::IAcadDim3PointAngularPtr AutoCAD::IAcadBlock::AddDim3PointAngular ( const _variant_t & AngleVertex, const _variant_t & FirstEndPoint, const _variant_t & SecondEndPoint, const _variant_t & TextPoint ) {
    struct IAcadDim3PointAngular * _result = 0;
    HRESULT _hr = raw_AddDim3PointAngular(AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDim3PointAngularPtr(_result, false);
}

#pragma implementation_key(3157)
inline AutoCAD::IAcadDatabasePtr AutoCAD::IAcadBlock::GetXRefDatabase ( ) {
    struct IAcadDatabase * _result = 0;
    HRESULT _hr = get_XRefDatabase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDatabasePtr(_result, false);
}

#pragma implementation_key(3158)
inline AutoCAD::IAcadExternalReferencePtr AutoCAD::IAcadBlock::AttachExternalReference ( _bstr_t PathName, _bstr_t Name, const _variant_t & InsertionPoint, double Xscale, double Yscale, double Zscale, double Rotation, VARIANT_BOOL bOverlay, const _variant_t & Password ) {
    struct IAcadExternalReference * _result = 0;
    HRESULT _hr = raw_AttachExternalReference(PathName, Name, InsertionPoint, Xscale, Yscale, Zscale, Rotation, bOverlay, Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadExternalReferencePtr(_result, false);
}

#pragma implementation_key(3159)
inline HRESULT AutoCAD::IAcadBlock::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3160)
inline HRESULT AutoCAD::IAcadBlock::Reload ( ) {
    HRESULT _hr = raw_Reload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3161)
inline HRESULT AutoCAD::IAcadBlock::Bind ( VARIANT_BOOL bPrefixName ) {
    HRESULT _hr = raw_Bind(bPrefixName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3162)
inline HRESULT AutoCAD::IAcadBlock::Detach ( ) {
    HRESULT _hr = raw_Detach();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3163)
inline AutoCAD::IAcadTablePtr AutoCAD::IAcadBlock::AddTable ( const _variant_t & InsertionPoint, int NumRows, int NumColumns, double RowHeight, double ColWidth ) {
    struct IAcadTable * _result = 0;
    HRESULT _hr = raw_AddTable(InsertionPoint, NumRows, NumColumns, RowHeight, ColWidth, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadTablePtr(_result, false);
}

#pragma implementation_key(3164)
inline _bstr_t AutoCAD::IAcadBlock::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3165)
inline void AutoCAD::IAcadBlock::PutPath ( _bstr_t bstrName ) {
    HRESULT _hr = put_Path(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3166)
inline _bstr_t AutoCAD::IAcadBlock::GetComments ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3167)
inline void AutoCAD::IAcadBlock::PutComments ( _bstr_t bstrName ) {
    HRESULT _hr = put_Comments(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3168)
inline enum AutoCAD::AcInsertUnits AutoCAD::IAcadBlock::GetUnits ( ) {
    enum AcInsertUnits _result;
    HRESULT _hr = get_Units(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3169)
inline void AutoCAD::IAcadBlock::PutUnits ( enum AcInsertUnits pIU ) {
    HRESULT _hr = put_Units(pIU);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3170)
inline VARIANT_BOOL AutoCAD::IAcadBlock::GetExplodable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Explodable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3171)
inline void AutoCAD::IAcadBlock::PutExplodable ( VARIANT_BOOL bExplodable ) {
    HRESULT _hr = put_Explodable(bExplodable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3172)
inline enum AutoCAD::AcBlockScaling AutoCAD::IAcadBlock::GetBlockScaling ( ) {
    enum AcBlockScaling _result;
    HRESULT _hr = get_BlockScaling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3173)
inline void AutoCAD::IAcadBlock::PutBlockScaling ( enum AcBlockScaling pBS ) {
    HRESULT _hr = put_BlockScaling(pBS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3174)
inline VARIANT_BOOL AutoCAD::IAcadBlock::GetIsDynamicBlock ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsDynamicBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3175)
inline AutoCAD::IAcadDimArcLengthPtr AutoCAD::IAcadBlock::AddDimArc ( const _variant_t & ArcCenter, const _variant_t & FirstEndPoint, const _variant_t & SecondEndPoint, const _variant_t & ArcPoint ) {
    struct IAcadDimArcLength * _result = 0;
    HRESULT _hr = raw_AddDimArc(ArcCenter, FirstEndPoint, SecondEndPoint, ArcPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDimArcLengthPtr(_result, false);
}

#pragma implementation_key(3176)
inline AutoCAD::IAcadDimRadialLargePtr AutoCAD::IAcadBlock::AddDimRadialLarge ( const _variant_t & Center, const _variant_t & ChordPoint, const _variant_t & OverrideCenter, const _variant_t & JogPoint, double JogAngle ) {
    struct IAcadDimRadialLarge * _result = 0;
    HRESULT _hr = raw_AddDimRadialLarge(Center, ChordPoint, OverrideCenter, JogPoint, JogAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDimRadialLargePtr(_result, false);
}

#pragma implementation_key(3177)
inline AutoCAD::IAcadSectionPtr AutoCAD::IAcadBlock::AddSection ( const _variant_t & FromPoint, const _variant_t & ToPoint, const _variant_t & planeVector ) {
    struct IAcadSection * _result = 0;
    HRESULT _hr = raw_AddSection(FromPoint, ToPoint, planeVector, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadSectionPtr(_result, false);
}

#pragma implementation_key(3178)
inline AutoCAD::IAcadMLeaderPtr AutoCAD::IAcadBlock::AddMLeader ( const _variant_t & PointsArray, int * leaderLineIndex ) {
    struct IAcadMLeader * _result = 0;
    HRESULT _hr = raw_AddMLeader(PointsArray, leaderLineIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMLeaderPtr(_result, false);
}

//
// interface IAcadLayout wrapper method implementations
//

#pragma implementation_key(3179)
inline AutoCAD::IAcadBlockPtr AutoCAD::IAcadLayout::GetBlock ( ) {
    struct IAcadBlock * _result = 0;
    HRESULT _hr = get_Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadBlockPtr(_result, false);
}

#pragma implementation_key(3180)
inline long AutoCAD::IAcadLayout::GetTabOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_TabOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3181)
inline void AutoCAD::IAcadLayout::PutTabOrder ( long pOrder ) {
    HRESULT _hr = put_TabOrder(pOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadPaperSpace wrapper method implementations
//

#pragma implementation_key(3182)
inline AutoCAD::IAcadPViewportPtr AutoCAD::IAcadPaperSpace::AddPViewport ( const _variant_t & Center, double Width, double Height ) {
    struct IAcadPViewport * _result = 0;
    HRESULT _hr = raw_AddPViewport(Center, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPViewportPtr(_result, false);
}

//
// interface IAcadBlocks wrapper method implementations
//

#pragma implementation_key(3183)
inline AutoCAD::IAcadBlockPtr AutoCAD::IAcadBlocks::Item ( const _variant_t & Index ) {
    struct IAcadBlock * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadBlockPtr(_result, false);
}

#pragma implementation_key(3184)
inline long AutoCAD::IAcadBlocks::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3185)
inline IUnknownPtr AutoCAD::IAcadBlocks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3186)
inline AutoCAD::IAcadBlockPtr AutoCAD::IAcadBlocks::Add ( const _variant_t & InsertionPoint, _bstr_t Name ) {
    struct IAcadBlock * _result = 0;
    HRESULT _hr = raw_Add(InsertionPoint, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadBlockPtr(_result, false);
}

//
// interface IAcadLayouts wrapper method implementations
//

#pragma implementation_key(3187)
inline AutoCAD::IAcadLayoutPtr AutoCAD::IAcadLayouts::Item ( const _variant_t & Index ) {
    struct IAcadLayout * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLayoutPtr(_result, false);
}

#pragma implementation_key(3188)
inline long AutoCAD::IAcadLayouts::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3189)
inline IUnknownPtr AutoCAD::IAcadLayouts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3190)
inline AutoCAD::IAcadLayoutPtr AutoCAD::IAcadLayouts::Add ( _bstr_t Name ) {
    struct IAcadLayout * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLayoutPtr(_result, false);
}

//
// interface IAcadSortentsTable wrapper method implementations
//

#pragma implementation_key(3191)
inline HRESULT AutoCAD::IAcadSortentsTable::MoveToBottom ( const _variant_t & Objects ) {
    HRESULT _hr = raw_MoveToBottom(Objects);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3192)
inline HRESULT AutoCAD::IAcadSortentsTable::MoveToTop ( const _variant_t & Objects ) {
    HRESULT _hr = raw_MoveToTop(Objects);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3193)
inline HRESULT AutoCAD::IAcadSortentsTable::MoveBelow ( const _variant_t & Objects, struct IAcadEntity * Target ) {
    HRESULT _hr = raw_MoveBelow(Objects, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3194)
inline HRESULT AutoCAD::IAcadSortentsTable::MoveAbove ( const _variant_t & Objects, struct IAcadEntity * Target ) {
    HRESULT _hr = raw_MoveAbove(Objects, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3195)
inline HRESULT AutoCAD::IAcadSortentsTable::SwapOrder ( struct IAcadEntity * Object1, struct IAcadEntity * Object2 ) {
    HRESULT _hr = raw_SwapOrder(Object1, Object2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3196)
inline AutoCAD::IAcadBlockPtr AutoCAD::IAcadSortentsTable::Block ( ) {
    struct IAcadBlock * _result = 0;
    HRESULT _hr = raw_Block(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadBlockPtr(_result, false);
}

#pragma implementation_key(3197)
inline HRESULT AutoCAD::IAcadSortentsTable::GetFullDrawOrder ( VARIANT * Objects, VARIANT_BOOL honorSortentsSysvar ) {
    HRESULT _hr = raw_GetFullDrawOrder(Objects, honorSortentsSysvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3198)
inline HRESULT AutoCAD::IAcadSortentsTable::GetRelativeDrawOrder ( VARIANT * Objects, VARIANT_BOOL honorSortentsSysvar ) {
    HRESULT _hr = raw_GetRelativeDrawOrder(Objects, honorSortentsSysvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3199)
inline HRESULT AutoCAD::IAcadSortentsTable::SetRelativeDrawOrder ( const _variant_t & Objects ) {
    HRESULT _hr = raw_SetRelativeDrawOrder(Objects);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadDocument wrapper method implementations
//

#pragma implementation_key(3200)
inline AutoCAD::IAcadPlotPtr AutoCAD::IAcadDocument::GetPlot ( ) {
    struct IAcadPlot * _result = 0;
    HRESULT _hr = get_Plot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPlotPtr(_result, false);
}

#pragma implementation_key(3201)
inline AutoCAD::IAcadLayerPtr AutoCAD::IAcadDocument::GetActiveLayer ( ) {
    struct IAcadLayer * _result = 0;
    HRESULT _hr = get_ActiveLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLayerPtr(_result, false);
}

#pragma implementation_key(3202)
inline void AutoCAD::IAcadDocument::PutActiveLayer ( struct IAcadLayer * pActLayer ) {
    HRESULT _hr = put_ActiveLayer(pActLayer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3203)
inline AutoCAD::IAcadLineTypePtr AutoCAD::IAcadDocument::GetActiveLinetype ( ) {
    struct IAcadLineType * _result = 0;
    HRESULT _hr = get_ActiveLinetype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLineTypePtr(_result, false);
}

#pragma implementation_key(3204)
inline void AutoCAD::IAcadDocument::PutActiveLinetype ( struct IAcadLineType * pActLinetype ) {
    HRESULT _hr = put_ActiveLinetype(pActLinetype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3205)
inline AutoCAD::IAcadDimStylePtr AutoCAD::IAcadDocument::GetActiveDimStyle ( ) {
    struct IAcadDimStyle * _result = 0;
    HRESULT _hr = get_ActiveDimStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDimStylePtr(_result, false);
}

#pragma implementation_key(3206)
inline void AutoCAD::IAcadDocument::PutActiveDimStyle ( struct IAcadDimStyle * pActDimStyle ) {
    HRESULT _hr = put_ActiveDimStyle(pActDimStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3207)
inline AutoCAD::IAcadTextStylePtr AutoCAD::IAcadDocument::GetActiveTextStyle ( ) {
    struct IAcadTextStyle * _result = 0;
    HRESULT _hr = get_ActiveTextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadTextStylePtr(_result, false);
}

#pragma implementation_key(3208)
inline void AutoCAD::IAcadDocument::PutActiveTextStyle ( struct IAcadTextStyle * pActTextStyle ) {
    HRESULT _hr = put_ActiveTextStyle(pActTextStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3209)
inline AutoCAD::IAcadUCSPtr AutoCAD::IAcadDocument::GetActiveUCS ( ) {
    struct IAcadUCS * _result = 0;
    HRESULT _hr = get_ActiveUCS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadUCSPtr(_result, false);
}

#pragma implementation_key(3210)
inline void AutoCAD::IAcadDocument::PutActiveUCS ( struct IAcadUCS * pActUCS ) {
    HRESULT _hr = put_ActiveUCS(pActUCS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3211)
inline AutoCAD::IAcadViewportPtr AutoCAD::IAcadDocument::GetActiveViewport ( ) {
    struct IAcadViewport * _result = 0;
    HRESULT _hr = get_ActiveViewport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadViewportPtr(_result, false);
}

#pragma implementation_key(3212)
inline void AutoCAD::IAcadDocument::PutActiveViewport ( struct IAcadViewport * pActView ) {
    HRESULT _hr = put_ActiveViewport(pActView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3213)
inline AutoCAD::IAcadPViewportPtr AutoCAD::IAcadDocument::GetActivePViewport ( ) {
    struct IAcadPViewport * _result = 0;
    HRESULT _hr = get_ActivePViewport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPViewportPtr(_result, false);
}

#pragma implementation_key(3214)
inline void AutoCAD::IAcadDocument::PutActivePViewport ( struct IAcadPViewport * pActView ) {
    HRESULT _hr = put_ActivePViewport(pActView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3215)
inline enum AutoCAD::AcActiveSpace AutoCAD::IAcadDocument::GetActiveSpace ( ) {
    enum AcActiveSpace _result;
    HRESULT _hr = get_ActiveSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3216)
inline void AutoCAD::IAcadDocument::PutActiveSpace ( enum AcActiveSpace ActSpace ) {
    HRESULT _hr = put_ActiveSpace(ActSpace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3217)
inline AutoCAD::IAcadSelectionSetsPtr AutoCAD::IAcadDocument::GetSelectionSets ( ) {
    struct IAcadSelectionSets * _result = 0;
    HRESULT _hr = get_SelectionSets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadSelectionSetsPtr(_result, false);
}

#pragma implementation_key(3218)
inline AutoCAD::IAcadSelectionSetPtr AutoCAD::IAcadDocument::GetActiveSelectionSet ( ) {
    struct IAcadSelectionSet * _result = 0;
    HRESULT _hr = get_ActiveSelectionSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadSelectionSetPtr(_result, false);
}

#pragma implementation_key(3219)
inline _bstr_t AutoCAD::IAcadDocument::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3220)
inline _bstr_t AutoCAD::IAcadDocument::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3221)
inline _bstr_t AutoCAD::IAcadDocument::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3222)
inline VARIANT_BOOL AutoCAD::IAcadDocument::GetObjectSnapMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ObjectSnapMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3223)
inline void AutoCAD::IAcadDocument::PutObjectSnapMode ( VARIANT_BOOL fSnapMode ) {
    HRESULT _hr = put_ObjectSnapMode(fSnapMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3224)
inline VARIANT_BOOL AutoCAD::IAcadDocument::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3225)
inline VARIANT_BOOL AutoCAD::IAcadDocument::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3226)
inline VARIANT_BOOL AutoCAD::IAcadDocument::GetMSpace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3227)
inline void AutoCAD::IAcadDocument::PutMSpace ( VARIANT_BOOL Mode ) {
    HRESULT _hr = put_MSpace(Mode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3228)
inline AutoCAD::IAcadUtilityPtr AutoCAD::IAcadDocument::GetUtility ( ) {
    struct IAcadUtility * _result = 0;
    HRESULT _hr = get_Utility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadUtilityPtr(_result, false);
}

#pragma implementation_key(3229)
inline AutoCAD::IAcadDocumentPtr AutoCAD::IAcadDocument::Open ( _bstr_t FullName, const _variant_t & Password ) {
    struct IAcadDocument * _result = 0;
    HRESULT _hr = raw_Open(FullName, Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDocumentPtr(_result, false);
}

#pragma implementation_key(3230)
inline HRESULT AutoCAD::IAcadDocument::AuditInfo ( VARIANT_BOOL FixErr ) {
    HRESULT _hr = raw_AuditInfo(FixErr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3231)
inline IDispatchPtr AutoCAD::IAcadDocument::Import ( _bstr_t FileName, const _variant_t & InsertionPoint, double ScaleFactor ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Import(FileName, InsertionPoint, ScaleFactor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3232)
inline HRESULT AutoCAD::IAcadDocument::Export ( _bstr_t FileName, _bstr_t Extension, struct IAcadSelectionSet * SelectionSet ) {
    HRESULT _hr = raw_Export(FileName, Extension, SelectionSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3233)
inline AutoCAD::IAcadDocumentPtr AutoCAD::IAcadDocument::New ( _bstr_t TemplateFileName ) {
    struct IAcadDocument * _result = 0;
    HRESULT _hr = raw_New(TemplateFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDocumentPtr(_result, false);
}

#pragma implementation_key(3234)
inline HRESULT AutoCAD::IAcadDocument::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3235)
inline HRESULT AutoCAD::IAcadDocument::SaveAs ( _bstr_t FullFileName, const _variant_t & SaveAsType, const _variant_t & vSecurityParams ) {
    HRESULT _hr = raw_SaveAs(FullFileName, SaveAsType, vSecurityParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3236)
inline HRESULT AutoCAD::IAcadDocument::Wblock ( _bstr_t FileName, struct IAcadSelectionSet * SelectionSet ) {
    HRESULT _hr = raw_Wblock(FileName, SelectionSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3237)
inline HRESULT AutoCAD::IAcadDocument::PurgeAll ( ) {
    HRESULT _hr = raw_PurgeAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3238)
inline _variant_t AutoCAD::IAcadDocument::GetVariable ( _bstr_t Name ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetVariable(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3239)
inline HRESULT AutoCAD::IAcadDocument::SetVariable ( _bstr_t Name, const _variant_t & Value ) {
    HRESULT _hr = raw_SetVariable(Name, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3240)
inline HRESULT AutoCAD::IAcadDocument::LoadShapeFile ( _bstr_t FullName ) {
    HRESULT _hr = raw_LoadShapeFile(FullName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3241)
inline HRESULT AutoCAD::IAcadDocument::Regen ( enum AcRegenType WhichViewports ) {
    HRESULT _hr = raw_Regen(WhichViewports);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3242)
inline AutoCAD::IAcadSelectionSetPtr AutoCAD::IAcadDocument::GetPickfirstSelectionSet ( ) {
    struct IAcadSelectionSet * _result = 0;
    HRESULT _hr = get_PickfirstSelectionSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadSelectionSetPtr(_result, false);
}

#pragma implementation_key(3243)
inline VARIANT_BOOL AutoCAD::IAcadDocument::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3244)
inline HRESULT AutoCAD::IAcadDocument::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3245)
inline HRESULT AutoCAD::IAcadDocument::Close ( const _variant_t & SaveChanges, const _variant_t & FileName ) {
    HRESULT _hr = raw_Close(SaveChanges, FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3246)
inline void AutoCAD::IAcadDocument::PutWindowState ( enum AcWindowState pWinState ) {
    HRESULT _hr = put_WindowState(pWinState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3247)
inline enum AutoCAD::AcWindowState AutoCAD::IAcadDocument::GetWindowState ( ) {
    enum AcWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3248)
inline void AutoCAD::IAcadDocument::PutWidth ( int pWidth ) {
    HRESULT _hr = put_Width(pWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3249)
inline int AutoCAD::IAcadDocument::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3250)
inline void AutoCAD::IAcadDocument::PutHeight ( int pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3251)
inline int AutoCAD::IAcadDocument::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3252)
inline void AutoCAD::IAcadDocument::PutActiveLayout ( struct IAcadLayout * pLayout ) {
    HRESULT _hr = put_ActiveLayout(pLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3253)
inline AutoCAD::IAcadLayoutPtr AutoCAD::IAcadDocument::GetActiveLayout ( ) {
    struct IAcadLayout * _result = 0;
    HRESULT _hr = get_ActiveLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadLayoutPtr(_result, false);
}

#pragma implementation_key(3254)
inline HRESULT AutoCAD::IAcadDocument::SendCommand ( _bstr_t Command ) {
    HRESULT _hr = raw_SendCommand(Command);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3255)
inline AutoCAD::LONG_PTR AutoCAD::IAcadDocument::GetHWND ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3256)
inline _bstr_t AutoCAD::IAcadDocument::GetWindowTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WindowTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3257)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadDocument::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3258)
inline AutoCAD::IAcadDatabasePtr AutoCAD::IAcadDocument::GetDatabase ( ) {
    struct IAcadDatabase * _result = 0;
    HRESULT _hr = get_Database(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDatabasePtr(_result, false);
}

#pragma implementation_key(3259)
inline HRESULT AutoCAD::IAcadDocument::StartUndoMark ( ) {
    HRESULT _hr = raw_StartUndoMark();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3260)
inline HRESULT AutoCAD::IAcadDocument::EndUndoMark ( ) {
    HRESULT _hr = raw_EndUndoMark();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3261)
inline AutoCAD::IAcadMaterialPtr AutoCAD::IAcadDocument::GetActiveMaterial ( ) {
    struct IAcadMaterial * _result = 0;
    HRESULT _hr = get_ActiveMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMaterialPtr(_result, false);
}

#pragma implementation_key(3262)
inline void AutoCAD::IAcadDocument::PutActiveMaterial ( struct IAcadMaterial * pActMaterial ) {
    HRESULT _hr = put_ActiveMaterial(pActMaterial);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3263)
inline HRESULT AutoCAD::IAcadDocument::PostCommand ( _bstr_t Command ) {
    HRESULT _hr = raw_PostCommand(Command);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadPlot wrapper method implementations
//

#pragma implementation_key(3264)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadPlot::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3265)
inline VARIANT_BOOL AutoCAD::IAcadPlot::GetQuietErrorMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_QuietErrorMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3266)
inline void AutoCAD::IAcadPlot::PutQuietErrorMode ( VARIANT_BOOL bErrorMode ) {
    HRESULT _hr = put_QuietErrorMode(bErrorMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3267)
inline long AutoCAD::IAcadPlot::GetNumberOfCopies ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfCopies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3268)
inline void AutoCAD::IAcadPlot::PutNumberOfCopies ( long numCopies ) {
    HRESULT _hr = put_NumberOfCopies(numCopies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3269)
inline VARIANT_BOOL AutoCAD::IAcadPlot::GetBatchPlotProgress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BatchPlotProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3270)
inline void AutoCAD::IAcadPlot::PutBatchPlotProgress ( VARIANT_BOOL bProgressStatus ) {
    HRESULT _hr = put_BatchPlotProgress(bProgressStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3271)
inline HRESULT AutoCAD::IAcadPlot::DisplayPlotPreview ( enum AcPreviewMode Preview ) {
    HRESULT _hr = raw_DisplayPlotPreview(Preview);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3272)
inline VARIANT_BOOL AutoCAD::IAcadPlot::PlotToFile ( _bstr_t plotFile, const _variant_t & plotConfig ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PlotToFile(plotFile, plotConfig, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3273)
inline VARIANT_BOOL AutoCAD::IAcadPlot::PlotToDevice ( const _variant_t & plotConfig ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PlotToDevice(plotConfig, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3274)
inline HRESULT AutoCAD::IAcadPlot::SetLayoutsToPlot ( const _variant_t & layoutList ) {
    HRESULT _hr = raw_SetLayoutsToPlot(layoutList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3275)
inline HRESULT AutoCAD::IAcadPlot::StartBatchMode ( long entryCount ) {
    HRESULT _hr = raw_StartBatchMode(entryCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadApplication wrapper method implementations
//

#pragma implementation_key(3276)
inline VARIANT_BOOL AutoCAD::IAcadApplication::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3277)
inline void AutoCAD::IAcadApplication::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3278)
inline _bstr_t AutoCAD::IAcadApplication::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3279)
inline _bstr_t AutoCAD::IAcadApplication::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3280)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadApplication::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3281)
inline AutoCAD::IAcadDocumentPtr AutoCAD::IAcadApplication::GetActiveDocument ( ) {
    struct IAcadDocument * _result = 0;
    HRESULT _hr = get_ActiveDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDocumentPtr(_result, false);
}

#pragma implementation_key(3282)
inline void AutoCAD::IAcadApplication::PutActiveDocument ( struct IAcadDocument * pActiveDoc ) {
    HRESULT _hr = put_ActiveDocument(pActiveDoc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3283)
inline _bstr_t AutoCAD::IAcadApplication::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3284)
inline int AutoCAD::IAcadApplication::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3285)
inline void AutoCAD::IAcadApplication::PutHeight ( int Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3286)
inline int AutoCAD::IAcadApplication::GetWindowLeft ( ) {
    int _result = 0;
    HRESULT _hr = get_WindowLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3287)
inline void AutoCAD::IAcadApplication::PutWindowLeft ( int left ) {
    HRESULT _hr = put_WindowLeft(left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3288)
inline _bstr_t AutoCAD::IAcadApplication::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3289)
inline long AutoCAD::IAcadApplication::GetLocaleId ( ) {
    long _result = 0;
    HRESULT _hr = get_LocaleId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3290)
inline int AutoCAD::IAcadApplication::GetWindowTop ( ) {
    int _result = 0;
    HRESULT _hr = get_WindowTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3291)
inline void AutoCAD::IAcadApplication::PutWindowTop ( int top ) {
    HRESULT _hr = put_WindowTop(top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3292)
inline _bstr_t AutoCAD::IAcadApplication::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3293)
inline int AutoCAD::IAcadApplication::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3294)
inline void AutoCAD::IAcadApplication::PutWidth ( int Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3295)
inline AutoCAD::IAcadPreferencesPtr AutoCAD::IAcadApplication::GetPreferences ( ) {
    struct IAcadPreferences * _result = 0;
    HRESULT _hr = get_Preferences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPreferencesPtr(_result, false);
}

#pragma implementation_key(3296)
inline VARIANT_BOOL AutoCAD::IAcadApplication::GetStatusId ( IDispatch * VportObj ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StatusId(VportObj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3297)
inline _variant_t AutoCAD::IAcadApplication::ListArx ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ListArx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3298)
inline HRESULT AutoCAD::IAcadApplication::LoadArx ( _bstr_t Name ) {
    HRESULT _hr = raw_LoadArx(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3299)
inline IDispatchPtr AutoCAD::IAcadApplication::GetInterfaceObject ( _bstr_t ProgID ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetInterfaceObject(ProgID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3300)
inline HRESULT AutoCAD::IAcadApplication::UnloadArx ( _bstr_t Name ) {
    HRESULT _hr = raw_UnloadArx(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3301)
inline HRESULT AutoCAD::IAcadApplication::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3302)
inline HRESULT AutoCAD::IAcadApplication::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3303)
inline HRESULT AutoCAD::IAcadApplication::Zoom ( int Type, VARIANT * vParams ) {
    HRESULT _hr = raw_Zoom(Type, vParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3304)
inline IDispatchPtr AutoCAD::IAcadApplication::GetVBE ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_VBE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3305)
inline AutoCAD::IAcadMenuGroupsPtr AutoCAD::IAcadApplication::GetMenuGroups ( ) {
    struct IAcadMenuGroups * _result = 0;
    HRESULT _hr = get_MenuGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMenuGroupsPtr(_result, false);
}

#pragma implementation_key(3306)
inline AutoCAD::IAcadMenuBarPtr AutoCAD::IAcadApplication::GetMenuBar ( ) {
    struct IAcadMenuBar * _result = 0;
    HRESULT _hr = get_MenuBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMenuBarPtr(_result, false);
}

#pragma implementation_key(3307)
inline HRESULT AutoCAD::IAcadApplication::LoadDVB ( _bstr_t Name ) {
    HRESULT _hr = raw_LoadDVB(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3308)
inline HRESULT AutoCAD::IAcadApplication::UnloadDVB ( _bstr_t Name ) {
    HRESULT _hr = raw_UnloadDVB(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3309)
inline AutoCAD::IAcadDocumentsPtr AutoCAD::IAcadApplication::GetDocuments ( ) {
    struct IAcadDocuments * _result = 0;
    HRESULT _hr = get_Documents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDocumentsPtr(_result, false);
}

#pragma implementation_key(3310)
inline HRESULT AutoCAD::IAcadApplication::Eval ( _bstr_t Expression ) {
    HRESULT _hr = raw_Eval(Expression);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3311)
inline enum AutoCAD::AcWindowState AutoCAD::IAcadApplication::GetWindowState ( ) {
    enum AcWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3312)
inline void AutoCAD::IAcadApplication::PutWindowState ( enum AcWindowState eWinState ) {
    HRESULT _hr = put_WindowState(eWinState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3313)
inline HRESULT AutoCAD::IAcadApplication::RunMacro ( _bstr_t MacroPath ) {
    HRESULT _hr = raw_RunMacro(MacroPath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3314)
inline HRESULT AutoCAD::IAcadApplication::ZoomExtents ( ) {
    HRESULT _hr = raw_ZoomExtents();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3315)
inline HRESULT AutoCAD::IAcadApplication::ZoomAll ( ) {
    HRESULT _hr = raw_ZoomAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3316)
inline HRESULT AutoCAD::IAcadApplication::ZoomCenter ( const _variant_t & Center, double Magnify ) {
    HRESULT _hr = raw_ZoomCenter(Center, Magnify);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3317)
inline HRESULT AutoCAD::IAcadApplication::ZoomScaled ( double scale, enum AcZoomScaleType ScaleType ) {
    HRESULT _hr = raw_ZoomScaled(scale, ScaleType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3318)
inline HRESULT AutoCAD::IAcadApplication::ZoomWindow ( const _variant_t & LowerLeft, const _variant_t & UpperRight ) {
    HRESULT _hr = raw_ZoomWindow(LowerLeft, UpperRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3319)
inline HRESULT AutoCAD::IAcadApplication::ZoomPickWindow ( ) {
    HRESULT _hr = raw_ZoomPickWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3320)
inline AutoCAD::IAcadStatePtr AutoCAD::IAcadApplication::GetAcadState ( ) {
    struct IAcadState * _result = 0;
    HRESULT _hr = raw_GetAcadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadStatePtr(_result, false);
}

#pragma implementation_key(3321)
inline HRESULT AutoCAD::IAcadApplication::ZoomPrevious ( ) {
    HRESULT _hr = raw_ZoomPrevious();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3322)
inline AutoCAD::LONG_PTR AutoCAD::IAcadApplication::GetHWND ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadPreferencesFiles wrapper method implementations
//

#pragma implementation_key(3323)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadPreferencesFiles::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3324)
inline void AutoCAD::IAcadPreferencesFiles::PutSupportPath ( _bstr_t orient ) {
    HRESULT _hr = put_SupportPath(orient);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3325)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetSupportPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SupportPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3326)
inline void AutoCAD::IAcadPreferencesFiles::PutDriversPath ( _bstr_t Path ) {
    HRESULT _hr = put_DriversPath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3327)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetDriversPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DriversPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3328)
inline void AutoCAD::IAcadPreferencesFiles::PutMenuFile ( _bstr_t Path ) {
    HRESULT _hr = put_MenuFile(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3329)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetMenuFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MenuFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3330)
inline void AutoCAD::IAcadPreferencesFiles::PutEnterpriseMenuFile ( _bstr_t Path ) {
    HRESULT _hr = put_EnterpriseMenuFile(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3331)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetEnterpriseMenuFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EnterpriseMenuFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3332)
inline void AutoCAD::IAcadPreferencesFiles::PutCustomIconPath ( _bstr_t Path ) {
    HRESULT _hr = put_CustomIconPath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3333)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetCustomIconPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomIconPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3334)
inline void AutoCAD::IAcadPreferencesFiles::PutHelpFilePath ( _bstr_t Path ) {
    HRESULT _hr = put_HelpFilePath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3335)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetHelpFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3336)
inline void AutoCAD::IAcadPreferencesFiles::PutDefaultInternetURL ( _bstr_t Path ) {
    HRESULT _hr = put_DefaultInternetURL(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3337)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetDefaultInternetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultInternetURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3338)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetConfigFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConfigFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3339)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetLicenseServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseServer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3340)
inline void AutoCAD::IAcadPreferencesFiles::PutTextEditor ( _bstr_t Path ) {
    HRESULT _hr = put_TextEditor(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3341)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetTextEditor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3342)
inline void AutoCAD::IAcadPreferencesFiles::PutMainDictionary ( _bstr_t Path ) {
    HRESULT _hr = put_MainDictionary(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3343)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetMainDictionary ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MainDictionary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3344)
inline void AutoCAD::IAcadPreferencesFiles::PutCustomDictionary ( _bstr_t Path ) {
    HRESULT _hr = put_CustomDictionary(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3345)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetCustomDictionary ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDictionary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3346)
inline void AutoCAD::IAcadPreferencesFiles::PutAltFontFile ( _bstr_t fontFile ) {
    HRESULT _hr = put_AltFontFile(fontFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3347)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetAltFontFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltFontFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3348)
inline void AutoCAD::IAcadPreferencesFiles::PutFontFileMap ( _bstr_t Path ) {
    HRESULT _hr = put_FontFileMap(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3349)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetFontFileMap ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontFileMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3350)
inline void AutoCAD::IAcadPreferencesFiles::PutPrintFile ( _bstr_t Path ) {
    HRESULT _hr = put_PrintFile(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3351)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetPrintFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrintFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3352)
inline void AutoCAD::IAcadPreferencesFiles::PutPrintSpoolExecutable ( _bstr_t Path ) {
    HRESULT _hr = put_PrintSpoolExecutable(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3353)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetPrintSpoolExecutable ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrintSpoolExecutable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3354)
inline void AutoCAD::IAcadPreferencesFiles::PutPostScriptPrologFile ( _bstr_t Path ) {
    HRESULT _hr = put_PostScriptPrologFile(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3355)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetPostScriptPrologFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PostScriptPrologFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3356)
inline void AutoCAD::IAcadPreferencesFiles::PutPrintSpoolerPath ( _bstr_t Path ) {
    HRESULT _hr = put_PrintSpoolerPath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3357)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetPrintSpoolerPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrintSpoolerPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3358)
inline void AutoCAD::IAcadPreferencesFiles::PutAutoSavePath ( _bstr_t AutoSavePath ) {
    HRESULT _hr = put_AutoSavePath(AutoSavePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3359)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetAutoSavePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AutoSavePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3360)
inline void AutoCAD::IAcadPreferencesFiles::PutTemplateDwgPath ( _bstr_t Path ) {
    HRESULT _hr = put_TemplateDwgPath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3361)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetTemplateDwgPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TemplateDwgPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3362)
inline void AutoCAD::IAcadPreferencesFiles::PutLogFilePath ( _bstr_t Path ) {
    HRESULT _hr = put_LogFilePath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3363)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetLogFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3364)
inline void AutoCAD::IAcadPreferencesFiles::PutTempFilePath ( _bstr_t Path ) {
    HRESULT _hr = put_TempFilePath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3365)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetTempFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TempFilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3366)
inline void AutoCAD::IAcadPreferencesFiles::PutTempXrefPath ( _bstr_t Path ) {
    HRESULT _hr = put_TempXrefPath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3367)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetTempXrefPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TempXrefPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3368)
inline void AutoCAD::IAcadPreferencesFiles::PutTextureMapPath ( _bstr_t Path ) {
    HRESULT _hr = put_TextureMapPath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3369)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetTextureMapPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextureMapPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3370)
inline void AutoCAD::IAcadPreferencesFiles::PutAltTabletMenuFile ( _bstr_t MenuFile ) {
    HRESULT _hr = put_AltTabletMenuFile(MenuFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3371)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetAltTabletMenuFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltTabletMenuFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3372)
inline HRESULT AutoCAD::IAcadPreferencesFiles::SetProjectFilePath ( _bstr_t ProjectName, _bstr_t ProjectFilePath ) {
    HRESULT _hr = raw_SetProjectFilePath(ProjectName, ProjectFilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3373)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetProjectFilePath ( _bstr_t ProjectName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetProjectFilePath(ProjectName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3374)
inline void AutoCAD::IAcadPreferencesFiles::PutPrinterConfigPath ( _bstr_t Path ) {
    HRESULT _hr = put_PrinterConfigPath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3375)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetPrinterConfigPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrinterConfigPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3376)
inline void AutoCAD::IAcadPreferencesFiles::PutPrinterDescPath ( _bstr_t Path ) {
    HRESULT _hr = put_PrinterDescPath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3377)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetPrinterDescPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrinterDescPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3378)
inline void AutoCAD::IAcadPreferencesFiles::PutPrinterStyleSheetPath ( _bstr_t Path ) {
    HRESULT _hr = put_PrinterStyleSheetPath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3379)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetPrinterStyleSheetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrinterStyleSheetPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3380)
inline void AutoCAD::IAcadPreferencesFiles::PutWorkspacePath ( _bstr_t Path ) {
    HRESULT _hr = put_WorkspacePath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3381)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetWorkspacePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WorkspacePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3382)
inline void AutoCAD::IAcadPreferencesFiles::PutObjectARXPath ( _bstr_t Path ) {
    HRESULT _hr = put_ObjectARXPath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3383)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetObjectARXPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectARXPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3384)
inline void AutoCAD::IAcadPreferencesFiles::PutColorBookPath ( _bstr_t Path ) {
    HRESULT _hr = put_ColorBookPath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3385)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetColorBookPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColorBookPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3386)
inline void AutoCAD::IAcadPreferencesFiles::PutToolPalettePath ( _bstr_t Path ) {
    HRESULT _hr = put_ToolPalettePath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3387)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetToolPalettePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToolPalettePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3388)
inline void AutoCAD::IAcadPreferencesFiles::PutQNewTemplateFile ( _bstr_t templateFile ) {
    HRESULT _hr = put_QNewTemplateFile(templateFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3389)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetQNewTemplateFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_QNewTemplateFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3390)
inline void AutoCAD::IAcadPreferencesFiles::PutPlotLogFilePath ( _bstr_t templateFile ) {
    HRESULT _hr = put_PlotLogFilePath(templateFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3391)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetPlotLogFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlotLogFilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3392)
inline void AutoCAD::IAcadPreferencesFiles::PutPageSetupOverridesTemplateFile ( _bstr_t templateFile ) {
    HRESULT _hr = put_PageSetupOverridesTemplateFile(templateFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3393)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetPageSetupOverridesTemplateFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PageSetupOverridesTemplateFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3394)
inline void AutoCAD::IAcadPreferencesFiles::PutActiveInvProject ( _bstr_t Path ) {
    HRESULT _hr = put_ActiveInvProject(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3395)
inline _bstr_t AutoCAD::IAcadPreferencesFiles::GetActiveInvProject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActiveInvProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAcadPreferencesDisplay wrapper method implementations
//

#pragma implementation_key(3396)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadPreferencesDisplay::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3397)
inline void AutoCAD::IAcadPreferencesDisplay::PutLayoutDisplayMargins ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_LayoutDisplayMargins(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3398)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDisplay::GetLayoutDisplayMargins ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LayoutDisplayMargins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3399)
inline void AutoCAD::IAcadPreferencesDisplay::PutLayoutDisplayPaper ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_LayoutDisplayPaper(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3400)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDisplay::GetLayoutDisplayPaper ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LayoutDisplayPaper(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3401)
inline void AutoCAD::IAcadPreferencesDisplay::PutLayoutDisplayPaperShadow ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_LayoutDisplayPaperShadow(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3402)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDisplay::GetLayoutDisplayPaperShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LayoutDisplayPaperShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3403)
inline void AutoCAD::IAcadPreferencesDisplay::PutLayoutShowPlotSetup ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_LayoutShowPlotSetup(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3404)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDisplay::GetLayoutShowPlotSetup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LayoutShowPlotSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3405)
inline void AutoCAD::IAcadPreferencesDisplay::PutLayoutCreateViewport ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_LayoutCreateViewport(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3406)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDisplay::GetLayoutCreateViewport ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LayoutCreateViewport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3407)
inline void AutoCAD::IAcadPreferencesDisplay::PutDisplayScrollBars ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_DisplayScrollBars(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3408)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDisplay::GetDisplayScrollBars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayScrollBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3409)
inline void AutoCAD::IAcadPreferencesDisplay::PutDisplayScreenMenu ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_DisplayScreenMenu(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3410)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDisplay::GetDisplayScreenMenu ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayScreenMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3411)
inline void AutoCAD::IAcadPreferencesDisplay::PutCursorSize ( int Path ) {
    HRESULT _hr = put_CursorSize(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3412)
inline int AutoCAD::IAcadPreferencesDisplay::GetCursorSize ( ) {
    int _result = 0;
    HRESULT _hr = get_CursorSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3413)
inline void AutoCAD::IAcadPreferencesDisplay::PutDockedVisibleLines ( int Path ) {
    HRESULT _hr = put_DockedVisibleLines(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3414)
inline int AutoCAD::IAcadPreferencesDisplay::GetDockedVisibleLines ( ) {
    int _result = 0;
    HRESULT _hr = get_DockedVisibleLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3415)
inline void AutoCAD::IAcadPreferencesDisplay::PutShowRasterImage ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_ShowRasterImage(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3416)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDisplay::GetShowRasterImage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowRasterImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3417)
inline void AutoCAD::IAcadPreferencesDisplay::PutGraphicsWinModelBackgrndColor ( OLE_COLOR color ) {
    HRESULT _hr = put_GraphicsWinModelBackgrndColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3418)
inline OLE_COLOR AutoCAD::IAcadPreferencesDisplay::GetGraphicsWinModelBackgrndColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_GraphicsWinModelBackgrndColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3419)
inline void AutoCAD::IAcadPreferencesDisplay::PutModelCrosshairColor ( OLE_COLOR crossHairColor ) {
    HRESULT _hr = put_ModelCrosshairColor(crossHairColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3420)
inline OLE_COLOR AutoCAD::IAcadPreferencesDisplay::GetModelCrosshairColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ModelCrosshairColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3421)
inline void AutoCAD::IAcadPreferencesDisplay::PutGraphicsWinLayoutBackgrndColor ( OLE_COLOR color ) {
    HRESULT _hr = put_GraphicsWinLayoutBackgrndColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3422)
inline OLE_COLOR AutoCAD::IAcadPreferencesDisplay::GetGraphicsWinLayoutBackgrndColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_GraphicsWinLayoutBackgrndColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3423)
inline void AutoCAD::IAcadPreferencesDisplay::PutTextWinBackgrndColor ( OLE_COLOR Path ) {
    HRESULT _hr = put_TextWinBackgrndColor(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3424)
inline OLE_COLOR AutoCAD::IAcadPreferencesDisplay::GetTextWinBackgrndColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TextWinBackgrndColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3425)
inline void AutoCAD::IAcadPreferencesDisplay::PutTextWinTextColor ( OLE_COLOR Path ) {
    HRESULT _hr = put_TextWinTextColor(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3426)
inline OLE_COLOR AutoCAD::IAcadPreferencesDisplay::GetTextWinTextColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TextWinTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3427)
inline void AutoCAD::IAcadPreferencesDisplay::PutLayoutCrosshairColor ( OLE_COLOR crossHairColor ) {
    HRESULT _hr = put_LayoutCrosshairColor(crossHairColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3428)
inline OLE_COLOR AutoCAD::IAcadPreferencesDisplay::GetLayoutCrosshairColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LayoutCrosshairColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3429)
inline void AutoCAD::IAcadPreferencesDisplay::PutAutoTrackingVecColor ( OLE_COLOR AutoTrackingVecColor ) {
    HRESULT _hr = put_AutoTrackingVecColor(AutoTrackingVecColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3430)
inline OLE_COLOR AutoCAD::IAcadPreferencesDisplay::GetAutoTrackingVecColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_AutoTrackingVecColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3431)
inline void AutoCAD::IAcadPreferencesDisplay::PutTextFont ( _bstr_t Path ) {
    HRESULT _hr = put_TextFont(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3432)
inline _bstr_t AutoCAD::IAcadPreferencesDisplay::GetTextFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3433)
inline void AutoCAD::IAcadPreferencesDisplay::PutTextFontStyle ( enum AcTextFontStyle Path ) {
    HRESULT _hr = put_TextFontStyle(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3434)
inline enum AutoCAD::AcTextFontStyle AutoCAD::IAcadPreferencesDisplay::GetTextFontStyle ( ) {
    enum AcTextFontStyle _result;
    HRESULT _hr = get_TextFontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3435)
inline void AutoCAD::IAcadPreferencesDisplay::PutTextFontSize ( int Path ) {
    HRESULT _hr = put_TextFontSize(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3436)
inline int AutoCAD::IAcadPreferencesDisplay::GetTextFontSize ( ) {
    int _result = 0;
    HRESULT _hr = get_TextFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3437)
inline void AutoCAD::IAcadPreferencesDisplay::PutHistoryLines ( int Path ) {
    HRESULT _hr = put_HistoryLines(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3438)
inline int AutoCAD::IAcadPreferencesDisplay::GetHistoryLines ( ) {
    int _result = 0;
    HRESULT _hr = get_HistoryLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3439)
inline void AutoCAD::IAcadPreferencesDisplay::PutMaxAutoCADWindow ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_MaxAutoCADWindow(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3440)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDisplay::GetMaxAutoCADWindow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MaxAutoCADWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3441)
inline void AutoCAD::IAcadPreferencesDisplay::PutDisplayLayoutTabs ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_DisplayLayoutTabs(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3442)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDisplay::GetDisplayLayoutTabs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayLayoutTabs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3443)
inline void AutoCAD::IAcadPreferencesDisplay::PutImageFrameHighlight ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_ImageFrameHighlight(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3444)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDisplay::GetImageFrameHighlight ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ImageFrameHighlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3445)
inline void AutoCAD::IAcadPreferencesDisplay::PutTrueColorImages ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_TrueColorImages(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3446)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDisplay::GetTrueColorImages ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TrueColorImages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3447)
inline void AutoCAD::IAcadPreferencesDisplay::PutXRefFadeIntensity ( long Path ) {
    HRESULT _hr = put_XRefFadeIntensity(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3448)
inline long AutoCAD::IAcadPreferencesDisplay::GetXRefFadeIntensity ( ) {
    long _result = 0;
    HRESULT _hr = get_XRefFadeIntensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadPreferencesOpenSave wrapper method implementations
//

#pragma implementation_key(3449)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadPreferencesOpenSave::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3450)
inline void AutoCAD::IAcadPreferencesOpenSave::PutSavePreviewThumbnail ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_SavePreviewThumbnail(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3451)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesOpenSave::GetSavePreviewThumbnail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SavePreviewThumbnail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3452)
inline void AutoCAD::IAcadPreferencesOpenSave::PutIncrementalSavePercent ( int Path ) {
    HRESULT _hr = put_IncrementalSavePercent(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3453)
inline int AutoCAD::IAcadPreferencesOpenSave::GetIncrementalSavePercent ( ) {
    int _result = 0;
    HRESULT _hr = get_IncrementalSavePercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3454)
inline void AutoCAD::IAcadPreferencesOpenSave::PutAutoSaveInterval ( int Path ) {
    HRESULT _hr = put_AutoSaveInterval(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3455)
inline int AutoCAD::IAcadPreferencesOpenSave::GetAutoSaveInterval ( ) {
    int _result = 0;
    HRESULT _hr = get_AutoSaveInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3456)
inline void AutoCAD::IAcadPreferencesOpenSave::PutCreateBackup ( VARIANT_BOOL CreateBackup ) {
    HRESULT _hr = put_CreateBackup(CreateBackup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3457)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesOpenSave::GetCreateBackup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateBackup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3458)
inline void AutoCAD::IAcadPreferencesOpenSave::PutFullCRCValidation ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_FullCRCValidation(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3459)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesOpenSave::GetFullCRCValidation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FullCRCValidation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3460)
inline void AutoCAD::IAcadPreferencesOpenSave::PutLogFileOn ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_LogFileOn(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3461)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesOpenSave::GetLogFileOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LogFileOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3462)
inline void AutoCAD::IAcadPreferencesOpenSave::PutTempFileExtension ( _bstr_t Path ) {
    HRESULT _hr = put_TempFileExtension(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3463)
inline _bstr_t AutoCAD::IAcadPreferencesOpenSave::GetTempFileExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TempFileExtension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3464)
inline void AutoCAD::IAcadPreferencesOpenSave::PutXrefDemandLoad ( enum AcXRefDemandLoad Path ) {
    HRESULT _hr = put_XrefDemandLoad(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3465)
inline enum AutoCAD::AcXRefDemandLoad AutoCAD::IAcadPreferencesOpenSave::GetXrefDemandLoad ( ) {
    enum AcXRefDemandLoad _result;
    HRESULT _hr = get_XrefDemandLoad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3466)
inline void AutoCAD::IAcadPreferencesOpenSave::PutDemandLoadARXApp ( enum AcARXDemandLoad Path ) {
    HRESULT _hr = put_DemandLoadARXApp(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3467)
inline enum AutoCAD::AcARXDemandLoad AutoCAD::IAcadPreferencesOpenSave::GetDemandLoadARXApp ( ) {
    enum AcARXDemandLoad _result;
    HRESULT _hr = get_DemandLoadARXApp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3468)
inline void AutoCAD::IAcadPreferencesOpenSave::PutProxyImage ( enum AcProxyImage Path ) {
    HRESULT _hr = put_ProxyImage(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3469)
inline enum AutoCAD::AcProxyImage AutoCAD::IAcadPreferencesOpenSave::GetProxyImage ( ) {
    enum AcProxyImage _result;
    HRESULT _hr = get_ProxyImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3470)
inline void AutoCAD::IAcadPreferencesOpenSave::PutShowProxyDialogBox ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_ShowProxyDialogBox(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3471)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesOpenSave::GetShowProxyDialogBox ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowProxyDialogBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3472)
inline void AutoCAD::IAcadPreferencesOpenSave::PutAutoAudit ( VARIANT_BOOL bAudit ) {
    HRESULT _hr = put_AutoAudit(bAudit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3473)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesOpenSave::GetAutoAudit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoAudit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3474)
inline void AutoCAD::IAcadPreferencesOpenSave::PutSaveAsType ( enum AcSaveAsType Path ) {
    HRESULT _hr = put_SaveAsType(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3475)
inline enum AutoCAD::AcSaveAsType AutoCAD::IAcadPreferencesOpenSave::GetSaveAsType ( ) {
    enum AcSaveAsType _result;
    HRESULT _hr = get_SaveAsType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3476)
inline long AutoCAD::IAcadPreferencesOpenSave::GetMRUNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_MRUNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadPreferencesOutput wrapper method implementations
//

#pragma implementation_key(3477)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadPreferencesOutput::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3478)
inline void AutoCAD::IAcadPreferencesOutput::PutDefaultOutputDevice ( _bstr_t Path ) {
    HRESULT _hr = put_DefaultOutputDevice(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3479)
inline _bstr_t AutoCAD::IAcadPreferencesOutput::GetDefaultOutputDevice ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultOutputDevice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3480)
inline void AutoCAD::IAcadPreferencesOutput::PutPrinterSpoolAlert ( enum AcPrinterSpoolAlert Path ) {
    HRESULT _hr = put_PrinterSpoolAlert(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3481)
inline enum AutoCAD::AcPrinterSpoolAlert AutoCAD::IAcadPreferencesOutput::GetPrinterSpoolAlert ( ) {
    enum AcPrinterSpoolAlert _result;
    HRESULT _hr = get_PrinterSpoolAlert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3482)
inline void AutoCAD::IAcadPreferencesOutput::PutPrinterPaperSizeAlert ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_PrinterPaperSizeAlert(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3483)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesOutput::GetPrinterPaperSizeAlert ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrinterPaperSizeAlert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3484)
inline void AutoCAD::IAcadPreferencesOutput::PutPlotLegacy ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_PlotLegacy(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3485)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesOutput::GetPlotLegacy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlotLegacy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3486)
inline void AutoCAD::IAcadPreferencesOutput::PutOLEQuality ( enum AcOleQuality Path ) {
    HRESULT _hr = put_OLEQuality(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3487)
inline enum AutoCAD::AcOleQuality AutoCAD::IAcadPreferencesOutput::GetOLEQuality ( ) {
    enum AcOleQuality _result;
    HRESULT _hr = get_OLEQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3488)
inline void AutoCAD::IAcadPreferencesOutput::PutUseLastPlotSettings ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_UseLastPlotSettings(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3489)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesOutput::GetUseLastPlotSettings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLastPlotSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3490)
inline void AutoCAD::IAcadPreferencesOutput::PutPlotPolicy ( enum AcPlotPolicy Path ) {
    HRESULT _hr = put_PlotPolicy(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3491)
inline enum AutoCAD::AcPlotPolicy AutoCAD::IAcadPreferencesOutput::GetPlotPolicy ( ) {
    enum AcPlotPolicy _result;
    HRESULT _hr = get_PlotPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3492)
inline void AutoCAD::IAcadPreferencesOutput::PutDefaultPlotStyleTable ( _bstr_t Path ) {
    HRESULT _hr = put_DefaultPlotStyleTable(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3493)
inline _bstr_t AutoCAD::IAcadPreferencesOutput::GetDefaultPlotStyleTable ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultPlotStyleTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3494)
inline void AutoCAD::IAcadPreferencesOutput::PutDefaultPlotStyleForObjects ( _bstr_t Path ) {
    HRESULT _hr = put_DefaultPlotStyleForObjects(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3495)
inline _bstr_t AutoCAD::IAcadPreferencesOutput::GetDefaultPlotStyleForObjects ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultPlotStyleForObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3496)
inline void AutoCAD::IAcadPreferencesOutput::PutDefaultPlotStyleForLayer ( _bstr_t Path ) {
    HRESULT _hr = put_DefaultPlotStyleForLayer(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3497)
inline _bstr_t AutoCAD::IAcadPreferencesOutput::GetDefaultPlotStyleForLayer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultPlotStyleForLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3498)
inline void AutoCAD::IAcadPreferencesOutput::PutContinuousPlotLog ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_ContinuousPlotLog(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3499)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesOutput::GetContinuousPlotLog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ContinuousPlotLog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3500)
inline void AutoCAD::IAcadPreferencesOutput::PutAutomaticPlotLog ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_AutomaticPlotLog(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3501)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesOutput::GetAutomaticPlotLog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticPlotLog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3502)
inline void AutoCAD::IAcadPreferencesOutput::PutDefaultPlotToFilePath ( _bstr_t Path ) {
    HRESULT _hr = put_DefaultPlotToFilePath(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3503)
inline _bstr_t AutoCAD::IAcadPreferencesOutput::GetDefaultPlotToFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultPlotToFilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAcadPreferencesSystem wrapper method implementations
//

#pragma implementation_key(3504)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadPreferencesSystem::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3505)
inline void AutoCAD::IAcadPreferencesSystem::PutSingleDocumentMode ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_SingleDocumentMode(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3506)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSystem::GetSingleDocumentMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SingleDocumentMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3507)
inline void AutoCAD::IAcadPreferencesSystem::PutDisplayOLEScale ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_DisplayOLEScale(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3508)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSystem::GetDisplayOLEScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayOLEScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3509)
inline void AutoCAD::IAcadPreferencesSystem::PutStoreSQLIndex ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_StoreSQLIndex(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3510)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSystem::GetStoreSQLIndex ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StoreSQLIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3511)
inline void AutoCAD::IAcadPreferencesSystem::PutTablesReadOnly ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_TablesReadOnly(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3512)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSystem::GetTablesReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TablesReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3513)
inline void AutoCAD::IAcadPreferencesSystem::PutEnableStartupDialog ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_EnableStartupDialog(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3514)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSystem::GetEnableStartupDialog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableStartupDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3515)
inline void AutoCAD::IAcadPreferencesSystem::PutBeepOnError ( VARIANT_BOOL BeepOnError ) {
    HRESULT _hr = put_BeepOnError(BeepOnError);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3516)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSystem::GetBeepOnError ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BeepOnError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3517)
inline void AutoCAD::IAcadPreferencesSystem::PutShowWarningMessages ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_ShowWarningMessages(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3518)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSystem::GetShowWarningMessages ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowWarningMessages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3519)
inline void AutoCAD::IAcadPreferencesSystem::PutLoadAcadLspInAllDocuments ( VARIANT_BOOL pALID ) {
    HRESULT _hr = put_LoadAcadLspInAllDocuments(pALID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3520)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSystem::GetLoadAcadLspInAllDocuments ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LoadAcadLspInAllDocuments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadPreferencesUser wrapper method implementations
//

#pragma implementation_key(3521)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadPreferencesUser::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3522)
inline void AutoCAD::IAcadPreferencesUser::PutKeyboardAccelerator ( enum AcKeyboardAccelerator Path ) {
    HRESULT _hr = put_KeyboardAccelerator(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3523)
inline enum AutoCAD::AcKeyboardAccelerator AutoCAD::IAcadPreferencesUser::GetKeyboardAccelerator ( ) {
    enum AcKeyboardAccelerator _result;
    HRESULT _hr = get_KeyboardAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3524)
inline void AutoCAD::IAcadPreferencesUser::PutKeyboardPriority ( enum AcKeyboardPriority Path ) {
    HRESULT _hr = put_KeyboardPriority(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3525)
inline enum AutoCAD::AcKeyboardPriority AutoCAD::IAcadPreferencesUser::GetKeyboardPriority ( ) {
    enum AcKeyboardPriority _result;
    HRESULT _hr = get_KeyboardPriority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3526)
inline void AutoCAD::IAcadPreferencesUser::PutHyperlinkDisplayCursor ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_HyperlinkDisplayCursor(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3527)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesUser::GetHyperlinkDisplayCursor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HyperlinkDisplayCursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3528)
inline void AutoCAD::IAcadPreferencesUser::PutADCInsertUnitsDefaultSource ( enum AcInsertUnits pIU ) {
    HRESULT _hr = put_ADCInsertUnitsDefaultSource(pIU);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3529)
inline enum AutoCAD::AcInsertUnits AutoCAD::IAcadPreferencesUser::GetADCInsertUnitsDefaultSource ( ) {
    enum AcInsertUnits _result;
    HRESULT _hr = get_ADCInsertUnitsDefaultSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3530)
inline void AutoCAD::IAcadPreferencesUser::PutADCInsertUnitsDefaultTarget ( enum AcInsertUnits pSUunits ) {
    HRESULT _hr = put_ADCInsertUnitsDefaultTarget(pSUunits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3531)
inline enum AutoCAD::AcInsertUnits AutoCAD::IAcadPreferencesUser::GetADCInsertUnitsDefaultTarget ( ) {
    enum AcInsertUnits _result;
    HRESULT _hr = get_ADCInsertUnitsDefaultTarget(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3532)
inline void AutoCAD::IAcadPreferencesUser::PutShortCutMenuDisplay ( VARIANT_BOOL pSCM ) {
    HRESULT _hr = put_ShortCutMenuDisplay(pSCM);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3533)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesUser::GetShortCutMenuDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShortCutMenuDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3534)
inline void AutoCAD::IAcadPreferencesUser::PutSCMDefaultMode ( enum AcDrawingAreaSCMDefault pSCM ) {
    HRESULT _hr = put_SCMDefaultMode(pSCM);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3535)
inline enum AutoCAD::AcDrawingAreaSCMDefault AutoCAD::IAcadPreferencesUser::GetSCMDefaultMode ( ) {
    enum AcDrawingAreaSCMDefault _result;
    HRESULT _hr = get_SCMDefaultMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3536)
inline void AutoCAD::IAcadPreferencesUser::PutSCMEditMode ( enum AcDrawingAreaSCMEdit pSCM ) {
    HRESULT _hr = put_SCMEditMode(pSCM);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3537)
inline enum AutoCAD::AcDrawingAreaSCMEdit AutoCAD::IAcadPreferencesUser::GetSCMEditMode ( ) {
    enum AcDrawingAreaSCMEdit _result;
    HRESULT _hr = get_SCMEditMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3538)
inline void AutoCAD::IAcadPreferencesUser::PutSCMCommandMode ( enum AcDrawingAreaSCMCommand pSCM ) {
    HRESULT _hr = put_SCMCommandMode(pSCM);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3539)
inline enum AutoCAD::AcDrawingAreaSCMCommand AutoCAD::IAcadPreferencesUser::GetSCMCommandMode ( ) {
    enum AcDrawingAreaSCMCommand _result;
    HRESULT _hr = get_SCMCommandMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3540)
inline void AutoCAD::IAcadPreferencesUser::PutSCMTimeMode ( VARIANT_BOOL time ) {
    HRESULT _hr = put_SCMTimeMode(time);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3541)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesUser::GetSCMTimeMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SCMTimeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3542)
inline void AutoCAD::IAcadPreferencesUser::PutSCMTimeValue ( int time ) {
    HRESULT _hr = put_SCMTimeValue(time);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3543)
inline int AutoCAD::IAcadPreferencesUser::GetSCMTimeValue ( ) {
    int _result = 0;
    HRESULT _hr = get_SCMTimeValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadPreferencesDrafting wrapper method implementations
//

#pragma implementation_key(3544)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadPreferencesDrafting::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3545)
inline void AutoCAD::IAcadPreferencesDrafting::PutAutoSnapMarker ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_AutoSnapMarker(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3546)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDrafting::GetAutoSnapMarker ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSnapMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3547)
inline void AutoCAD::IAcadPreferencesDrafting::PutAutoSnapMagnet ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_AutoSnapMagnet(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3548)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDrafting::GetAutoSnapMagnet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSnapMagnet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3549)
inline void AutoCAD::IAcadPreferencesDrafting::PutAutoSnapTooltip ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_AutoSnapTooltip(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3550)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDrafting::GetAutoSnapTooltip ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSnapTooltip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3551)
inline void AutoCAD::IAcadPreferencesDrafting::PutAutoSnapAperture ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_AutoSnapAperture(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3552)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDrafting::GetAutoSnapAperture ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSnapAperture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3553)
inline void AutoCAD::IAcadPreferencesDrafting::PutAutoSnapApertureSize ( long Path ) {
    HRESULT _hr = put_AutoSnapApertureSize(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3554)
inline long AutoCAD::IAcadPreferencesDrafting::GetAutoSnapApertureSize ( ) {
    long _result = 0;
    HRESULT _hr = get_AutoSnapApertureSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3555)
inline void AutoCAD::IAcadPreferencesDrafting::PutAutoSnapMarkerColor ( enum AcColor Path ) {
    HRESULT _hr = put_AutoSnapMarkerColor(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3556)
inline enum AutoCAD::AcColor AutoCAD::IAcadPreferencesDrafting::GetAutoSnapMarkerColor ( ) {
    enum AcColor _result;
    HRESULT _hr = get_AutoSnapMarkerColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3557)
inline void AutoCAD::IAcadPreferencesDrafting::PutAutoSnapMarkerSize ( long Path ) {
    HRESULT _hr = put_AutoSnapMarkerSize(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3558)
inline long AutoCAD::IAcadPreferencesDrafting::GetAutoSnapMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_AutoSnapMarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3559)
inline void AutoCAD::IAcadPreferencesDrafting::PutPolarTrackingVector ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_PolarTrackingVector(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3560)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDrafting::GetPolarTrackingVector ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PolarTrackingVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3561)
inline void AutoCAD::IAcadPreferencesDrafting::PutFullScreenTrackingVector ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_FullScreenTrackingVector(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3562)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDrafting::GetFullScreenTrackingVector ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FullScreenTrackingVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3563)
inline void AutoCAD::IAcadPreferencesDrafting::PutAutoTrackTooltip ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_AutoTrackTooltip(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3564)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesDrafting::GetAutoTrackTooltip ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoTrackTooltip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3565)
inline void AutoCAD::IAcadPreferencesDrafting::PutAlignmentPointAcquisition ( enum AcAlignmentPointAcquisition Path ) {
    HRESULT _hr = put_AlignmentPointAcquisition(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3566)
inline enum AutoCAD::AcAlignmentPointAcquisition AutoCAD::IAcadPreferencesDrafting::GetAlignmentPointAcquisition ( ) {
    enum AcAlignmentPointAcquisition _result;
    HRESULT _hr = get_AlignmentPointAcquisition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadPreferencesSelection wrapper method implementations
//

#pragma implementation_key(3567)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadPreferencesSelection::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3568)
inline void AutoCAD::IAcadPreferencesSelection::PutPickFirst ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_PickFirst(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3569)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSelection::GetPickFirst ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PickFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3570)
inline void AutoCAD::IAcadPreferencesSelection::PutPickAdd ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_PickAdd(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3571)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSelection::GetPickAdd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PickAdd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3572)
inline void AutoCAD::IAcadPreferencesSelection::PutPickDrag ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_PickDrag(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3573)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSelection::GetPickDrag ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PickDrag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3574)
inline void AutoCAD::IAcadPreferencesSelection::PutPickAuto ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_PickAuto(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3575)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSelection::GetPickAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PickAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3576)
inline void AutoCAD::IAcadPreferencesSelection::PutPickBoxSize ( long Path ) {
    HRESULT _hr = put_PickBoxSize(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3577)
inline long AutoCAD::IAcadPreferencesSelection::GetPickBoxSize ( ) {
    long _result = 0;
    HRESULT _hr = get_PickBoxSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3578)
inline void AutoCAD::IAcadPreferencesSelection::PutDisplayGrips ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_DisplayGrips(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3579)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSelection::GetDisplayGrips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayGrips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3580)
inline void AutoCAD::IAcadPreferencesSelection::PutDisplayGripsWithinBlocks ( VARIANT_BOOL Path ) {
    HRESULT _hr = put_DisplayGripsWithinBlocks(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3581)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSelection::GetDisplayGripsWithinBlocks ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayGripsWithinBlocks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3582)
inline void AutoCAD::IAcadPreferencesSelection::PutGripColorSelected ( enum AcColor Path ) {
    HRESULT _hr = put_GripColorSelected(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3583)
inline enum AutoCAD::AcColor AutoCAD::IAcadPreferencesSelection::GetGripColorSelected ( ) {
    enum AcColor _result;
    HRESULT _hr = get_GripColorSelected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3584)
inline void AutoCAD::IAcadPreferencesSelection::PutGripColorUnselected ( enum AcColor Path ) {
    HRESULT _hr = put_GripColorUnselected(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3585)
inline enum AutoCAD::AcColor AutoCAD::IAcadPreferencesSelection::GetGripColorUnselected ( ) {
    enum AcColor _result;
    HRESULT _hr = get_GripColorUnselected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3586)
inline void AutoCAD::IAcadPreferencesSelection::PutGripSize ( long Path ) {
    HRESULT _hr = put_GripSize(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3587)
inline long AutoCAD::IAcadPreferencesSelection::GetGripSize ( ) {
    long _result = 0;
    HRESULT _hr = get_GripSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3588)
inline void AutoCAD::IAcadPreferencesSelection::PutPickGroup ( VARIANT_BOOL pick ) {
    HRESULT _hr = put_PickGroup(pick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3589)
inline VARIANT_BOOL AutoCAD::IAcadPreferencesSelection::GetPickGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PickGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadPreferencesProfiles wrapper method implementations
//

#pragma implementation_key(3590)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadPreferencesProfiles::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3591)
inline void AutoCAD::IAcadPreferencesProfiles::PutActiveProfile ( _bstr_t Path ) {
    HRESULT _hr = put_ActiveProfile(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3592)
inline _bstr_t AutoCAD::IAcadPreferencesProfiles::GetActiveProfile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActiveProfile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3593)
inline HRESULT AutoCAD::IAcadPreferencesProfiles::ImportProfile ( _bstr_t ProfileName, _bstr_t RegFile, VARIANT_BOOL IncludePathInfo ) {
    HRESULT _hr = raw_ImportProfile(ProfileName, RegFile, IncludePathInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3594)
inline HRESULT AutoCAD::IAcadPreferencesProfiles::ExportProfile ( _bstr_t ProfileName, _bstr_t RegFile ) {
    HRESULT _hr = raw_ExportProfile(ProfileName, RegFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3595)
inline HRESULT AutoCAD::IAcadPreferencesProfiles::DeleteProfile ( _bstr_t ProfileName ) {
    HRESULT _hr = raw_DeleteProfile(ProfileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3596)
inline HRESULT AutoCAD::IAcadPreferencesProfiles::ResetProfile ( _bstr_t Profile ) {
    HRESULT _hr = raw_ResetProfile(Profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3597)
inline HRESULT AutoCAD::IAcadPreferencesProfiles::RenameProfile ( _bstr_t origProfileName, _bstr_t newProfileName ) {
    HRESULT _hr = raw_RenameProfile(origProfileName, newProfileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3598)
inline HRESULT AutoCAD::IAcadPreferencesProfiles::CopyProfile ( _bstr_t oldProfileName, _bstr_t newProfileName ) {
    HRESULT _hr = raw_CopyProfile(oldProfileName, newProfileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3599)
inline HRESULT AutoCAD::IAcadPreferencesProfiles::GetAllProfileNames ( VARIANT * pNames ) {
    HRESULT _hr = raw_GetAllProfileNames(pNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadPreferences wrapper method implementations
//

#pragma implementation_key(3600)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadPreferences::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3601)
inline AutoCAD::IAcadPreferencesFilesPtr AutoCAD::IAcadPreferences::GetFiles ( ) {
    struct IAcadPreferencesFiles * _result = 0;
    HRESULT _hr = get_Files(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPreferencesFilesPtr(_result, false);
}

#pragma implementation_key(3602)
inline AutoCAD::IAcadPreferencesDisplayPtr AutoCAD::IAcadPreferences::GetDisplay ( ) {
    struct IAcadPreferencesDisplay * _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPreferencesDisplayPtr(_result, false);
}

#pragma implementation_key(3603)
inline AutoCAD::IAcadPreferencesOpenSavePtr AutoCAD::IAcadPreferences::GetOpenSave ( ) {
    struct IAcadPreferencesOpenSave * _result = 0;
    HRESULT _hr = get_OpenSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPreferencesOpenSavePtr(_result, false);
}

#pragma implementation_key(3604)
inline AutoCAD::IAcadPreferencesOutputPtr AutoCAD::IAcadPreferences::GetOutput ( ) {
    struct IAcadPreferencesOutput * _result = 0;
    HRESULT _hr = get_Output(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPreferencesOutputPtr(_result, false);
}

#pragma implementation_key(3605)
inline AutoCAD::IAcadPreferencesSystemPtr AutoCAD::IAcadPreferences::GetSystem ( ) {
    struct IAcadPreferencesSystem * _result = 0;
    HRESULT _hr = get_System(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPreferencesSystemPtr(_result, false);
}

#pragma implementation_key(3606)
inline AutoCAD::IAcadPreferencesUserPtr AutoCAD::IAcadPreferences::GetUser ( ) {
    struct IAcadPreferencesUser * _result = 0;
    HRESULT _hr = get_User(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPreferencesUserPtr(_result, false);
}

#pragma implementation_key(3607)
inline AutoCAD::IAcadPreferencesDraftingPtr AutoCAD::IAcadPreferences::GetDrafting ( ) {
    struct IAcadPreferencesDrafting * _result = 0;
    HRESULT _hr = get_Drafting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPreferencesDraftingPtr(_result, false);
}

#pragma implementation_key(3608)
inline AutoCAD::IAcadPreferencesSelectionPtr AutoCAD::IAcadPreferences::GetSelection ( ) {
    struct IAcadPreferencesSelection * _result = 0;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPreferencesSelectionPtr(_result, false);
}

#pragma implementation_key(3609)
inline AutoCAD::IAcadPreferencesProfilesPtr AutoCAD::IAcadPreferences::GetProfiles ( ) {
    struct IAcadPreferencesProfiles * _result = 0;
    HRESULT _hr = get_Profiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPreferencesProfilesPtr(_result, false);
}

//
// interface IAcadDocuments wrapper method implementations
//

#pragma implementation_key(3610)
inline AutoCAD::IAcadDocumentPtr AutoCAD::IAcadDocuments::Item ( const _variant_t & Index ) {
    struct IAcadDocument * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDocumentPtr(_result, false);
}

#pragma implementation_key(3611)
inline IUnknownPtr AutoCAD::IAcadDocuments::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3612)
inline long AutoCAD::IAcadDocuments::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3613)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadDocuments::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3614)
inline AutoCAD::IAcadDocumentPtr AutoCAD::IAcadDocuments::Add ( const _variant_t & TemplateName ) {
    struct IAcadDocument * _result = 0;
    HRESULT _hr = raw_Add(TemplateName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDocumentPtr(_result, false);
}

#pragma implementation_key(3615)
inline AutoCAD::IAcadDocumentPtr AutoCAD::IAcadDocuments::Open ( _bstr_t Name, const _variant_t & ReadOnly, const _variant_t & Password ) {
    struct IAcadDocument * _result = 0;
    HRESULT _hr = raw_Open(Name, ReadOnly, Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadDocumentPtr(_result, false);
}

#pragma implementation_key(3616)
inline HRESULT AutoCAD::IAcadDocuments::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadState wrapper method implementations
//

#pragma implementation_key(3617)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadState::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3618)
inline VARIANT_BOOL AutoCAD::IAcadState::GetIsQuiescent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsQuiescent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAcadSelectionSet wrapper method implementations
//

#pragma implementation_key(3619)
inline AutoCAD::IAcadEntityPtr AutoCAD::IAcadSelectionSet::Item ( const _variant_t & Index ) {
    struct IAcadEntity * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadEntityPtr(_result, false);
}

#pragma implementation_key(3620)
inline long AutoCAD::IAcadSelectionSet::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3621)
inline IUnknownPtr AutoCAD::IAcadSelectionSet::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3622)
inline _bstr_t AutoCAD::IAcadSelectionSet::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3623)
inline HRESULT AutoCAD::IAcadSelectionSet::Highlight ( VARIANT_BOOL bFlag ) {
    HRESULT _hr = raw_Highlight(bFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3624)
inline HRESULT AutoCAD::IAcadSelectionSet::Erase ( ) {
    HRESULT _hr = raw_Erase();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3625)
inline HRESULT AutoCAD::IAcadSelectionSet::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3626)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadSelectionSet::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3627)
inline HRESULT AutoCAD::IAcadSelectionSet::AddItems ( const _variant_t & pSelSet ) {
    HRESULT _hr = raw_AddItems(pSelSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3628)
inline HRESULT AutoCAD::IAcadSelectionSet::RemoveItems ( const _variant_t & Objects ) {
    HRESULT _hr = raw_RemoveItems(Objects);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3629)
inline HRESULT AutoCAD::IAcadSelectionSet::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3630)
inline HRESULT AutoCAD::IAcadSelectionSet::Select ( enum AcSelect Mode, const _variant_t & Point1, const _variant_t & Point2, const _variant_t & FilterType, const _variant_t & FilterData ) {
    HRESULT _hr = raw_Select(Mode, Point1, Point2, FilterType, FilterData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3631)
inline HRESULT AutoCAD::IAcadSelectionSet::SelectAtPoint ( const _variant_t & Point, const _variant_t & FilterType, const _variant_t & FilterData ) {
    HRESULT _hr = raw_SelectAtPoint(Point, FilterType, FilterData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3632)
inline HRESULT AutoCAD::IAcadSelectionSet::SelectByPolygon ( enum AcSelect Mode, const _variant_t & PointsList, const _variant_t & FilterType, const _variant_t & FilterData ) {
    HRESULT _hr = raw_SelectByPolygon(Mode, PointsList, FilterType, FilterData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3633)
inline HRESULT AutoCAD::IAcadSelectionSet::SelectOnScreen ( const _variant_t & FilterType, const _variant_t & FilterData ) {
    HRESULT _hr = raw_SelectOnScreen(FilterType, FilterData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3634)
inline HRESULT AutoCAD::IAcadSelectionSet::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadSelectionSets wrapper method implementations
//

#pragma implementation_key(3635)
inline AutoCAD::IAcadSelectionSetPtr AutoCAD::IAcadSelectionSets::Item ( const _variant_t & Index ) {
    struct IAcadSelectionSet * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadSelectionSetPtr(_result, false);
}

#pragma implementation_key(3636)
inline long AutoCAD::IAcadSelectionSets::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3637)
inline IUnknownPtr AutoCAD::IAcadSelectionSets::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3638)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadSelectionSets::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3639)
inline AutoCAD::IAcadSelectionSetPtr AutoCAD::IAcadSelectionSets::Add ( _bstr_t Name ) {
    struct IAcadSelectionSet * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadSelectionSetPtr(_result, false);
}

//
// interface IAcadMenuGroups wrapper method implementations
//

#pragma implementation_key(3640)
inline AutoCAD::IAcadMenuGroupPtr AutoCAD::IAcadMenuGroups::Item ( const _variant_t & Index ) {
    struct IAcadMenuGroup * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMenuGroupPtr(_result, false);
}

#pragma implementation_key(3641)
inline IUnknownPtr AutoCAD::IAcadMenuGroups::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3642)
inline long AutoCAD::IAcadMenuGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3643)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadMenuGroups::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3644)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadMenuGroups::GetParent ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3645)
inline AutoCAD::IAcadMenuGroupPtr AutoCAD::IAcadMenuGroups::Load ( _bstr_t MenuFileName, const _variant_t & BaseMenu ) {
    struct IAcadMenuGroup * _result = 0;
    HRESULT _hr = raw_Load(MenuFileName, BaseMenu, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMenuGroupPtr(_result, false);
}

//
// interface IAcadMenuGroup wrapper method implementations
//

#pragma implementation_key(3646)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadMenuGroup::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3647)
inline AutoCAD::IAcadMenuGroupsPtr AutoCAD::IAcadMenuGroup::GetParent ( ) {
    struct IAcadMenuGroups * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMenuGroupsPtr(_result, false);
}

#pragma implementation_key(3648)
inline _bstr_t AutoCAD::IAcadMenuGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3649)
inline enum AutoCAD::AcMenuGroupType AutoCAD::IAcadMenuGroup::GetType ( ) {
    enum AcMenuGroupType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3650)
inline _bstr_t AutoCAD::IAcadMenuGroup::GetMenuFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MenuFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3651)
inline AutoCAD::IAcadPopupMenusPtr AutoCAD::IAcadMenuGroup::GetMenus ( ) {
    struct IAcadPopupMenus * _result = 0;
    HRESULT _hr = get_Menus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPopupMenusPtr(_result, false);
}

#pragma implementation_key(3652)
inline AutoCAD::IAcadToolbarsPtr AutoCAD::IAcadMenuGroup::GetToolbars ( ) {
    struct IAcadToolbars * _result = 0;
    HRESULT _hr = get_Toolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadToolbarsPtr(_result, false);
}

#pragma implementation_key(3653)
inline HRESULT AutoCAD::IAcadMenuGroup::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3654)
inline HRESULT AutoCAD::IAcadMenuGroup::Save ( enum AcMenuFileType MenuFileType ) {
    HRESULT _hr = raw_Save(MenuFileType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3655)
inline HRESULT AutoCAD::IAcadMenuGroup::SaveAs ( _bstr_t MenuFileName, enum AcMenuFileType MenuFileType ) {
    HRESULT _hr = raw_SaveAs(MenuFileName, MenuFileType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadPopupMenus wrapper method implementations
//

#pragma implementation_key(3656)
inline AutoCAD::IAcadPopupMenuPtr AutoCAD::IAcadPopupMenus::Item ( const _variant_t & Index ) {
    struct IAcadPopupMenu * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPopupMenuPtr(_result, false);
}

#pragma implementation_key(3657)
inline IUnknownPtr AutoCAD::IAcadPopupMenus::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3658)
inline long AutoCAD::IAcadPopupMenus::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3659)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadPopupMenus::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3660)
inline AutoCAD::IAcadMenuGroupPtr AutoCAD::IAcadPopupMenus::GetParent ( ) {
    struct IAcadMenuGroup * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMenuGroupPtr(_result, false);
}

#pragma implementation_key(3661)
inline AutoCAD::IAcadPopupMenuPtr AutoCAD::IAcadPopupMenus::Add ( _bstr_t MenuName ) {
    struct IAcadPopupMenu * _result = 0;
    HRESULT _hr = raw_Add(MenuName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPopupMenuPtr(_result, false);
}

#pragma implementation_key(3662)
inline HRESULT AutoCAD::IAcadPopupMenus::InsertMenuInMenuBar ( _bstr_t MenuName, const _variant_t & Index ) {
    HRESULT _hr = raw_InsertMenuInMenuBar(MenuName, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3663)
inline HRESULT AutoCAD::IAcadPopupMenus::RemoveMenuFromMenuBar ( const _variant_t & Index ) {
    HRESULT _hr = raw_RemoveMenuFromMenuBar(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAcadPopupMenu wrapper method implementations
//

#pragma implementation_key(3664)
inline AutoCAD::IAcadPopupMenuItemPtr AutoCAD::IAcadPopupMenu::Item ( const _variant_t & Index ) {
    struct IAcadPopupMenuItem * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPopupMenuItemPtr(_result, false);
}

#pragma implementation_key(3665)
inline IUnknownPtr AutoCAD::IAcadPopupMenu::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3666)
inline long AutoCAD::IAcadPopupMenu::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3667)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadPopupMenu::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3668)
inline IDispatchPtr AutoCAD::IAcadPopupMenu::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3669)
inline _bstr_t AutoCAD::IAcadPopupMenu::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3670)
inline void AutoCAD::IAcadPopupMenu::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3671)
inline _bstr_t AutoCAD::IAcadPopupMenu::GetNameNoMnemonic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameNoMnemonic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3672)
inline VARIANT_BOOL AutoCAD::IAcadPopupMenu::GetShortcutMenu ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShortcutMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3673)
inline VARIANT_BOOL AutoCAD::IAcadPopupMenu::GetOnMenuBar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OnMenuBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3674)
inline AutoCAD::IAcadPopupMenuItemPtr AutoCAD::IAcadPopupMenu::AddMenuItem ( const _variant_t & Index, _bstr_t Label, _bstr_t Macro ) {
    struct IAcadPopupMenuItem * _result = 0;
    HRESULT _hr = raw_AddMenuItem(Index, Label, Macro, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPopupMenuItemPtr(_result, false);
}

#pragma implementation_key(3675)
inline AutoCAD::IAcadPopupMenuPtr AutoCAD::IAcadPopupMenu::AddSubMenu ( const _variant_t & Index, _bstr_t Label ) {
    struct IAcadPopupMenu * _result = 0;
    HRESULT _hr = raw_AddSubMenu(Index, Label, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPopupMenuPtr(_result, false);
}

#pragma implementation_key(3676)
inline AutoCAD::IAcadPopupMenuItemPtr AutoCAD::IAcadPopupMenu::AddSeparator ( const _variant_t & Index ) {
    struct IAcadPopupMenuItem * _result = 0;
    HRESULT _hr = raw_AddSeparator(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPopupMenuItemPtr(_result, false);
}

#pragma implementation_key(3677)
inline HRESULT AutoCAD::IAcadPopupMenu::InsertInMenuBar ( const _variant_t & Index ) {
    HRESULT _hr = raw_InsertInMenuBar(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3678)
inline HRESULT AutoCAD::IAcadPopupMenu::RemoveFromMenuBar ( ) {
    HRESULT _hr = raw_RemoveFromMenuBar();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3679)
inline _bstr_t AutoCAD::IAcadPopupMenu::GetTagString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TagString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAcadPopupMenuItem wrapper method implementations
//

#pragma implementation_key(3680)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadPopupMenuItem::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3681)
inline AutoCAD::IAcadPopupMenuPtr AutoCAD::IAcadPopupMenuItem::GetParent ( ) {
    struct IAcadPopupMenu * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPopupMenuPtr(_result, false);
}

#pragma implementation_key(3682)
inline _bstr_t AutoCAD::IAcadPopupMenuItem::GetLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3683)
inline void AutoCAD::IAcadPopupMenuItem::PutLabel ( _bstr_t bstrLabel ) {
    HRESULT _hr = put_Label(bstrLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3684)
inline _bstr_t AutoCAD::IAcadPopupMenuItem::GetTagString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TagString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3685)
inline void AutoCAD::IAcadPopupMenuItem::PutTagString ( _bstr_t bstrTag ) {
    HRESULT _hr = put_TagString(bstrTag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3686)
inline VARIANT_BOOL AutoCAD::IAcadPopupMenuItem::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3687)
inline void AutoCAD::IAcadPopupMenuItem::PutEnable ( VARIANT_BOOL bFlag ) {
    HRESULT _hr = put_Enable(bFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3688)
inline VARIANT_BOOL AutoCAD::IAcadPopupMenuItem::GetCheck ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Check(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3689)
inline void AutoCAD::IAcadPopupMenuItem::PutCheck ( VARIANT_BOOL bFlag ) {
    HRESULT _hr = put_Check(bFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3690)
inline enum AutoCAD::AcMenuItemType AutoCAD::IAcadPopupMenuItem::GetType ( ) {
    enum AcMenuItemType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3691)
inline AutoCAD::IAcadPopupMenuPtr AutoCAD::IAcadPopupMenuItem::GetSubMenu ( ) {
    struct IAcadPopupMenu * _result = 0;
    HRESULT _hr = get_SubMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPopupMenuPtr(_result, false);
}

#pragma implementation_key(3692)
inline _bstr_t AutoCAD::IAcadPopupMenuItem::GetMacro ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Macro(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3693)
inline void AutoCAD::IAcadPopupMenuItem::PutMacro ( _bstr_t bstrMacro ) {
    HRESULT _hr = put_Macro(bstrMacro);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3694)
inline int AutoCAD::IAcadPopupMenuItem::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3695)
inline _bstr_t AutoCAD::IAcadPopupMenuItem::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3696)
inline _bstr_t AutoCAD::IAcadPopupMenuItem::GetHelpString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3697)
inline void AutoCAD::IAcadPopupMenuItem::PutHelpString ( _bstr_t bstrHelp ) {
    HRESULT _hr = put_HelpString(bstrHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3698)
inline HRESULT AutoCAD::IAcadPopupMenuItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3699)
inline int AutoCAD::IAcadPopupMenuItem::GetEndSubMenuLevel ( ) {
    int _result = 0;
    HRESULT _hr = get_EndSubMenuLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3700)
inline void AutoCAD::IAcadPopupMenuItem::PutEndSubMenuLevel ( int level ) {
    HRESULT _hr = put_EndSubMenuLevel(level);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAcadMenuBar wrapper method implementations
//

#pragma implementation_key(3701)
inline AutoCAD::IAcadPopupMenuPtr AutoCAD::IAcadMenuBar::Item ( const _variant_t & Index ) {
    struct IAcadPopupMenu * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadPopupMenuPtr(_result, false);
}

#pragma implementation_key(3702)
inline IUnknownPtr AutoCAD::IAcadMenuBar::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3703)
inline long AutoCAD::IAcadMenuBar::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3704)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadMenuBar::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3705)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadMenuBar::GetParent ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

//
// interface IAcadToolbars wrapper method implementations
//

#pragma implementation_key(3706)
inline AutoCAD::IAcadToolbarPtr AutoCAD::IAcadToolbars::Item ( const _variant_t & Index ) {
    struct IAcadToolbar * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadToolbarPtr(_result, false);
}

#pragma implementation_key(3707)
inline IUnknownPtr AutoCAD::IAcadToolbars::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3708)
inline long AutoCAD::IAcadToolbars::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3709)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadToolbars::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3710)
inline AutoCAD::IAcadMenuGroupPtr AutoCAD::IAcadToolbars::GetParent ( ) {
    struct IAcadMenuGroup * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadMenuGroupPtr(_result, false);
}

#pragma implementation_key(3711)
inline VARIANT_BOOL AutoCAD::IAcadToolbars::GetLargeButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LargeButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3712)
inline void AutoCAD::IAcadToolbars::PutLargeButtons ( VARIANT_BOOL bFlag ) {
    HRESULT _hr = put_LargeButtons(bFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3713)
inline AutoCAD::IAcadToolbarPtr AutoCAD::IAcadToolbars::Add ( _bstr_t ToolbarName ) {
    struct IAcadToolbar * _result = 0;
    HRESULT _hr = raw_Add(ToolbarName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadToolbarPtr(_result, false);
}

//
// interface IAcadToolbar wrapper method implementations
//

#pragma implementation_key(3714)
inline AutoCAD::IAcadToolbarItemPtr AutoCAD::IAcadToolbar::Item ( const _variant_t & Index ) {
    struct IAcadToolbarItem * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadToolbarItemPtr(_result, false);
}

#pragma implementation_key(3715)
inline IUnknownPtr AutoCAD::IAcadToolbar::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3716)
inline long AutoCAD::IAcadToolbar::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3717)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadToolbar::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3718)
inline IDispatchPtr AutoCAD::IAcadToolbar::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3719)
inline _bstr_t AutoCAD::IAcadToolbar::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3720)
inline void AutoCAD::IAcadToolbar::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3721)
inline VARIANT_BOOL AutoCAD::IAcadToolbar::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3722)
inline void AutoCAD::IAcadToolbar::PutVisible ( VARIANT_BOOL bFlag ) {
    HRESULT _hr = put_Visible(bFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3723)
inline enum AutoCAD::AcToolbarDockStatus AutoCAD::IAcadToolbar::GetDockStatus ( ) {
    enum AcToolbarDockStatus _result;
    HRESULT _hr = get_DockStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3724)
inline VARIANT_BOOL AutoCAD::IAcadToolbar::GetLargeButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LargeButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3725)
inline int AutoCAD::IAcadToolbar::Getleft ( ) {
    int _result = 0;
    HRESULT _hr = get_left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3726)
inline void AutoCAD::IAcadToolbar::Putleft ( int nLeft ) {
    HRESULT _hr = put_left(nLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3727)
inline int AutoCAD::IAcadToolbar::Gettop ( ) {
    int _result = 0;
    HRESULT _hr = get_top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3728)
inline void AutoCAD::IAcadToolbar::Puttop ( int nTop ) {
    HRESULT _hr = put_top(nTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3729)
inline int AutoCAD::IAcadToolbar::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3730)
inline int AutoCAD::IAcadToolbar::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3731)
inline int AutoCAD::IAcadToolbar::GetFloatingRows ( ) {
    int _result = 0;
    HRESULT _hr = get_FloatingRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3732)
inline void AutoCAD::IAcadToolbar::PutFloatingRows ( int nRows ) {
    HRESULT _hr = put_FloatingRows(nRows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3733)
inline _bstr_t AutoCAD::IAcadToolbar::GetHelpString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3734)
inline void AutoCAD::IAcadToolbar::PutHelpString ( _bstr_t bstrHelp ) {
    HRESULT _hr = put_HelpString(bstrHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3735)
inline AutoCAD::IAcadToolbarItemPtr AutoCAD::IAcadToolbar::AddToolbarButton ( const _variant_t & Index, _bstr_t Name, _bstr_t HelpString, _bstr_t Macro, const _variant_t & FlyoutButton ) {
    struct IAcadToolbarItem * _result = 0;
    HRESULT _hr = raw_AddToolbarButton(Index, Name, HelpString, Macro, FlyoutButton, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadToolbarItemPtr(_result, false);
}

#pragma implementation_key(3736)
inline AutoCAD::IAcadToolbarItemPtr AutoCAD::IAcadToolbar::AddSeparator ( const _variant_t & Index ) {
    struct IAcadToolbarItem * _result = 0;
    HRESULT _hr = raw_AddSeparator(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadToolbarItemPtr(_result, false);
}

#pragma implementation_key(3737)
inline HRESULT AutoCAD::IAcadToolbar::Dock ( enum AcToolbarDockStatus Side ) {
    HRESULT _hr = raw_Dock(Side);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3738)
inline HRESULT AutoCAD::IAcadToolbar::Float ( int top, int left, int NumberFloatRows ) {
    HRESULT _hr = raw_Float(top, left, NumberFloatRows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3739)
inline HRESULT AutoCAD::IAcadToolbar::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3740)
inline _bstr_t AutoCAD::IAcadToolbar::GetTagString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TagString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAcadToolbarItem wrapper method implementations
//

#pragma implementation_key(3741)
inline AutoCAD::IAcadApplicationPtr AutoCAD::IAcadToolbarItem::GetApplication ( ) {
    struct IAcadApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadApplicationPtr(_result, false);
}

#pragma implementation_key(3742)
inline AutoCAD::IAcadToolbarPtr AutoCAD::IAcadToolbarItem::GetParent ( ) {
    struct IAcadToolbar * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadToolbarPtr(_result, false);
}

#pragma implementation_key(3743)
inline _bstr_t AutoCAD::IAcadToolbarItem::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3744)
inline void AutoCAD::IAcadToolbarItem::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3745)
inline _bstr_t AutoCAD::IAcadToolbarItem::GetTagString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TagString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3746)
inline void AutoCAD::IAcadToolbarItem::PutTagString ( _bstr_t bstrTag ) {
    HRESULT _hr = put_TagString(bstrTag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3747)
inline enum AutoCAD::AcToolbarItemType AutoCAD::IAcadToolbarItem::GetType ( ) {
    enum AcToolbarItemType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3748)
inline AutoCAD::IAcadToolbarPtr AutoCAD::IAcadToolbarItem::GetFlyout ( ) {
    struct IAcadToolbar * _result = 0;
    HRESULT _hr = get_Flyout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAcadToolbarPtr(_result, false);
}

#pragma implementation_key(3749)
inline _bstr_t AutoCAD::IAcadToolbarItem::GetMacro ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Macro(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3750)
inline void AutoCAD::IAcadToolbarItem::PutMacro ( _bstr_t bstrMacro ) {
    HRESULT _hr = put_Macro(bstrMacro);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3751)
inline int AutoCAD::IAcadToolbarItem::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3752)
inline _bstr_t AutoCAD::IAcadToolbarItem::GetHelpString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3753)
inline void AutoCAD::IAcadToolbarItem::PutHelpString ( _bstr_t bstrHelp ) {
    HRESULT _hr = put_HelpString(bstrHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3754)
inline HRESULT AutoCAD::IAcadToolbarItem::GetBitmaps ( BSTR * SmallIconName, BSTR * LargeIconName ) {
    HRESULT _hr = raw_GetBitmaps(SmallIconName, LargeIconName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3755)
inline HRESULT AutoCAD::IAcadToolbarItem::SetBitmaps ( _bstr_t SmallIconName, _bstr_t LargeIconName ) {
    HRESULT _hr = raw_SetBitmaps(SmallIconName, LargeIconName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3756)
inline HRESULT AutoCAD::IAcadToolbarItem::AttachToolbarToFlyout ( _bstr_t MenuGroupName, _bstr_t ToolbarName ) {
    HRESULT _hr = raw_AttachToolbarToFlyout(MenuGroupName, ToolbarName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3757)
inline HRESULT AutoCAD::IAcadToolbarItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3758)
inline _bstr_t AutoCAD::IAcadToolbarItem::GetCommandDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CommandDisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3759)
inline void AutoCAD::IAcadToolbarItem::PutCommandDisplayName ( _bstr_t Name ) {
    HRESULT _hr = put_CommandDisplayName(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
